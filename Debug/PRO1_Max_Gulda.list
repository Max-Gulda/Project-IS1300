
PRO1_Max_Gulda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800905c  0800905c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800905c  0800905c  0001905c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009064  08009064  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009068  08009068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800906c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aec  20000010  0800907c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001afc  0800907c  00021afc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e658  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000493c  00000000  00000000  0003e6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  00043018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001561  00000000  00000000  00044bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029fc2  00000000  00000000  00046131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020f98  00000000  00000000  000700f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff2ba  00000000  00000000  0009108b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007234  00000000  00000000  00190348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0019757c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e70 	.word	0x08008e70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008e70 	.word	0x08008e70

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <init_TrafficInputs>:
#include "TrafficInputs.h"

static ButtonStates buttonState = {0};


void init_TrafficInputs(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	trafficInputs_Update();
 80004d0:	f000 f802 	bl	80004d8 <trafficInputs_Update>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <trafficInputs_Update>:

void trafficInputs_Update(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	buttonState.LeftCar = !HAL_GPIO_ReadPin(TL1_CAR_GPIO_Port, TL1_CAR_Pin);
 80004dc:	2110      	movs	r1, #16
 80004de:	4827      	ldr	r0, [pc, #156]	; (800057c <trafficInputs_Update+0xa4>)
 80004e0:	f002 fe22 	bl	8003128 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf0c      	ite	eq
 80004ea:	2301      	moveq	r3, #1
 80004ec:	2300      	movne	r3, #0
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <trafficInputs_Update+0xa8>)
 80004f2:	701a      	strb	r2, [r3, #0]
	buttonState.BottomCar = !HAL_GPIO_ReadPin(TL2_CAR_GPIO_Port, TL2_CAR_Pin);
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	4822      	ldr	r0, [pc, #136]	; (8000584 <trafficInputs_Update+0xac>)
 80004fa:	f002 fe15 	bl	8003128 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf0c      	ite	eq
 8000504:	2301      	moveq	r3, #1
 8000506:	2300      	movne	r3, #0
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <trafficInputs_Update+0xa8>)
 800050c:	705a      	strb	r2, [r3, #1]
	buttonState.RightCar = !HAL_GPIO_ReadPin(TL3_CAR_GPIO_Port, TL3_CAR_Pin);
 800050e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000512:	481c      	ldr	r0, [pc, #112]	; (8000584 <trafficInputs_Update+0xac>)
 8000514:	f002 fe08 	bl	8003128 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	bf0c      	ite	eq
 800051e:	2301      	moveq	r3, #1
 8000520:	2300      	movne	r3, #0
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <trafficInputs_Update+0xa8>)
 8000526:	709a      	strb	r2, [r3, #2]
	buttonState.TopCar = !HAL_GPIO_ReadPin(TL4_CAR_GPIO_Port, TL4_CAR_Pin);
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f002 fdfa 	bl	8003128 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <trafficInputs_Update+0xa8>)
 8000542:	70da      	strb	r2, [r3, #3]

	buttonState.LeftPed = !HAL_GPIO_ReadPin(PL1_Switch_GPIO_Port, PL1_Switch_Pin);
 8000544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f002 fdec 	bl	8003128 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	bf0c      	ite	eq
 8000556:	2301      	moveq	r3, #1
 8000558:	2300      	movne	r3, #0
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <trafficInputs_Update+0xa8>)
 800055e:	711a      	strb	r2, [r3, #4]
	buttonState.TopPed = !HAL_GPIO_ReadPin(PL2_Switch_GPIO_Port, PL2_Switch_Pin);
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <trafficInputs_Update+0xac>)
 8000564:	f002 fde0 	bl	8003128 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	bf0c      	ite	eq
 800056e:	2301      	moveq	r3, #1
 8000570:	2300      	movne	r3, #0
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <trafficInputs_Update+0xa8>)
 8000576:	715a      	strb	r2, [r3, #5]
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	48000800 	.word	0x48000800
 8000580:	2000002c 	.word	0x2000002c
 8000584:	48000400 	.word	0x48000400

08000588 <getInputState>:

bool getTopPed(){
	return buttonState.TopPed;
}

ButtonStates getInputState(){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	return buttonState;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <getInputState+0x20>)
 8000594:	6810      	ldr	r0, [r2, #0]
 8000596:	6018      	str	r0, [r3, #0]
 8000598:	8892      	ldrh	r2, [r2, #4]
 800059a:	809a      	strh	r2, [r3, #4]
}
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	2000002c 	.word	0x2000002c

080005ac <initTrafficLogic>:
	bool delayUntilNextState;
	uint16_t delayTime;
}TrafficCrossingAction;
*/

void initTrafficLogic(CrossingVersion cross){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	previousDelayExpireAt = UINT16_MAX;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <initTrafficLogic+0x44>)
 80005b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005bc:	601a      	str	r2, [r3, #0]
	lightsActivated = false;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <initTrafficLogic+0x48>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	delaySent = false;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <initTrafficLogic+0x4c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	crossing = cross;
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <initTrafficLogic+0x50>)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	7013      	strb	r3, [r2, #0]
	state = H_Active;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <initTrafficLogic+0x54>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
	action.StartTimerForNextState = false;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <initTrafficLogic+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	709a      	strb	r2, [r3, #2]
	action.KeepStateFor = 0;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <initTrafficLogic+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	809a      	strh	r2, [r3, #4]

}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000040 	.word	0x20000040
 80005f4:	20000035 	.word	0x20000035
 80005f8:	20000036 	.word	0x20000036
 80005fc:	20000032 	.word	0x20000032
 8000600:	20000033 	.word	0x20000033
 8000604:	20000038 	.word	0x20000038

08000608 <TrafficCrossing>:

void TrafficCrossing(ButtonStates _buttonState){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	463b      	mov	r3, r7
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(crossing){
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <TrafficCrossing+0x50>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d012      	beq.n	8000642 <TrafficCrossing+0x3a>
 800061c:	2b02      	cmp	r3, #2
 800061e:	dc16      	bgt.n	800064e <TrafficCrossing+0x46>
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <TrafficCrossing+0x22>
 8000624:	2b01      	cmp	r3, #1
 8000626:	d006      	beq.n	8000636 <TrafficCrossing+0x2e>
			break;
		case PedTwoLane:
			TwoLanePed(_buttonState);
			break;
	}
}
 8000628:	e011      	b.n	800064e <TrafficCrossing+0x46>
			OneLane(_buttonState);
 800062a:	463b      	mov	r3, r7
 800062c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000630:	f000 f83e 	bl	80006b0 <OneLane>
			break;
 8000634:	e00b      	b.n	800064e <TrafficCrossing+0x46>
			TwoLane(_buttonState);
 8000636:	463b      	mov	r3, r7
 8000638:	e893 0003 	ldmia.w	r3, {r0, r1}
 800063c:	f000 f948 	bl	80008d0 <TwoLane>
			break;
 8000640:	e005      	b.n	800064e <TrafficCrossing+0x46>
			TwoLanePed(_buttonState);
 8000642:	463b      	mov	r3, r7
 8000644:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000648:	f000 fb28 	bl	8000c9c <TwoLanePed>
			break;
 800064c:	bf00      	nop
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000032 	.word	0x20000032

0800065c <getTrafficAction>:

TrafficCrossingAction* getTrafficAction(){
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	return &action;
 8000660:	4b02      	ldr	r3, [pc, #8]	; (800066c <getTrafficAction+0x10>)
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	20000038 	.word	0x20000038

08000670 <ActivateNextState>:

void ActivateNextState(){
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	state = nextState;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <ActivateNextState+0x2c>)
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <ActivateNextState+0x30>)
 800067a:	701a      	strb	r2, [r3, #0]
	delaySent = false;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <ActivateNextState+0x34>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
	lightsActivated = false;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <ActivateNextState+0x38>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	previousDelayExpireAt = UINT16_MAX;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <ActivateNextState+0x3c>)
 800068a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000034 	.word	0x20000034
 80006a0:	20000033 	.word	0x20000033
 80006a4:	20000036 	.word	0x20000036
 80006a8:	20000035 	.word	0x20000035
 80006ac:	20000040 	.word	0x20000040

080006b0 <OneLane>:


void OneLane(ButtonStates button){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	463b      	mov	r3, r7
 80006b8:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 80006bc:	4b7f      	ldr	r3, [pc, #508]	; (80008bc <OneLane+0x20c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	f200 80f6 	bhi.w	80008b2 <OneLane+0x202>
 80006c6:	a201      	add	r2, pc, #4	; (adr r2, 80006cc <OneLane+0x1c>)
 80006c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006cc:	080006e5 	.word	0x080006e5
 80006d0:	080008b3 	.word	0x080008b3
 80006d4:	080008b3 	.word	0x080008b3
 80006d8:	0800076b 	.word	0x0800076b
 80006dc:	080007d9 	.word	0x080007d9
 80006e0:	08000847 	.word	0x08000847
		case H_Active:
			nextState = Transition_To_V;
 80006e4:	4b76      	ldr	r3, [pc, #472]	; (80008c0 <OneLane+0x210>)
 80006e6:	2205      	movs	r2, #5
 80006e8:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 80006ea:	4b76      	ldr	r3, [pc, #472]	; (80008c4 <OneLane+0x214>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f083 0301 	eor.w	r3, r3, #1
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d01e      	beq.n	8000736 <OneLane+0x86>
				ControlLight(YELLOW_BOTTOM, OFF);
 80006f8:	2100      	movs	r1, #0
 80006fa:	2007      	movs	r0, #7
 80006fc:	f001 fd72 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000700:	2100      	movs	r1, #0
 8000702:	2004      	movs	r0, #4
 8000704:	f001 fd6e 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_BOTTOM, ON);
 8000708:	2101      	movs	r1, #1
 800070a:	2008      	movs	r0, #8
 800070c:	f001 fd6a 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000710:	2101      	movs	r1, #1
 8000712:	2005      	movs	r0, #5
 8000714:	f001 fd66 	bl	80021e4 <ControlLight>

				ControlLight(RED_TOP, OFF);
 8000718:	2100      	movs	r1, #0
 800071a:	2003      	movs	r0, #3
 800071c:	f001 fd62 	bl	80021e4 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 8000720:	2100      	movs	r1, #0
 8000722:	2006      	movs	r0, #6
 8000724:	f001 fd5e 	bl	80021e4 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 8000728:	2101      	movs	r1, #1
 800072a:	2009      	movs	r0, #9
 800072c:	f001 fd5a 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 8000730:	4b64      	ldr	r3, [pc, #400]	; (80008c4 <OneLane+0x214>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed && !delaySent){
 8000736:	797b      	ldrb	r3, [r7, #5]
 8000738:	2b00      	cmp	r3, #0
 800073a:	f000 80b3 	beq.w	80008a4 <OneLane+0x1f4>
 800073e:	4b62      	ldr	r3, [pc, #392]	; (80008c8 <OneLane+0x218>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	f083 0301 	eor.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	f000 80ab 	beq.w	80008a4 <OneLane+0x1f4>
				action.KeepStateFor = PEDESTRIAN_DELAY;
 800074e:	4b5f      	ldr	r3, [pc, #380]	; (80008cc <OneLane+0x21c>)
 8000750:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000754:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000756:	4b5d      	ldr	r3, [pc, #372]	; (80008cc <OneLane+0x21c>)
 8000758:	2201      	movs	r2, #1
 800075a:	709a      	strb	r2, [r3, #2]
				action.TopPedWaiting = true;
 800075c:	4b5b      	ldr	r3, [pc, #364]	; (80008cc <OneLane+0x21c>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
				delaySent = true;
 8000762:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <OneLane+0x218>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000768:	e09c      	b.n	80008a4 <OneLane+0x1f4>
		case V_P_Active:
			nextState = Transition_To_H;
 800076a:	4b55      	ldr	r3, [pc, #340]	; (80008c0 <OneLane+0x210>)
 800076c:	2204      	movs	r2, #4
 800076e:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000770:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <OneLane+0x214>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d01a      	beq.n	80007b4 <OneLane+0x104>
				ControlLight(YELLOW_BOTTOM, OFF);
 800077e:	2100      	movs	r1, #0
 8000780:	2007      	movs	r0, #7
 8000782:	f001 fd2f 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000786:	2100      	movs	r1, #0
 8000788:	2004      	movs	r0, #4
 800078a:	f001 fd2b 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_PED_TOP, ON);
 800078e:	2101      	movs	r1, #1
 8000790:	200a      	movs	r0, #10
 8000792:	f001 fd27 	bl	80021e4 <ControlLight>
				ControlLight(RED_PED_TOP, OFF);
 8000796:	2100      	movs	r1, #0
 8000798:	2009      	movs	r0, #9
 800079a:	f001 fd23 	bl	80021e4 <ControlLight>

				ControlLight(RED_TOP, ON);
 800079e:	2101      	movs	r1, #1
 80007a0:	2003      	movs	r0, #3
 80007a2:	f001 fd1f 	bl	80021e4 <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 80007a6:	2101      	movs	r1, #1
 80007a8:	2006      	movs	r0, #6
 80007aa:	f001 fd1b 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 80007ae:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <OneLane+0x214>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 80007b4:	4b44      	ldr	r3, [pc, #272]	; (80008c8 <OneLane+0x218>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f083 0301 	eor.w	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d072      	beq.n	80008a8 <OneLane+0x1f8>
				action.KeepStateFor = WALKING_DELAY;
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <OneLane+0x21c>)
 80007c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007c8:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 80007ca:	4b40      	ldr	r3, [pc, #256]	; (80008cc <OneLane+0x21c>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 80007d0:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <OneLane+0x218>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80007d6:	e067      	b.n	80008a8 <OneLane+0x1f8>
		case Transition_To_H:
			nextState = H_Active;
 80007d8:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <OneLane+0x210>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 80007de:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <OneLane+0x214>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	f083 0301 	eor.w	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d01a      	beq.n	8000822 <OneLane+0x172>
				ControlLight(GREEN_PED_TOP, OFF);
 80007ec:	2100      	movs	r1, #0
 80007ee:	200a      	movs	r0, #10
 80007f0:	f001 fcf8 	bl	80021e4 <ControlLight>
				ControlLight(RED_PED_TOP, ON);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2009      	movs	r0, #9
 80007f8:	f001 fcf4 	bl	80021e4 <ControlLight>

				ControlLight(RED_TOP, OFF);
 80007fc:	2100      	movs	r1, #0
 80007fe:	2003      	movs	r0, #3
 8000800:	f001 fcf0 	bl	80021e4 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 8000804:	2100      	movs	r1, #0
 8000806:	2006      	movs	r0, #6
 8000808:	f001 fcec 	bl	80021e4 <ControlLight>

				ControlLight(YELLOW_BOTTOM, ON);
 800080c:	2101      	movs	r1, #1
 800080e:	2007      	movs	r0, #7
 8000810:	f001 fce8 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000814:	2101      	movs	r1, #1
 8000816:	2004      	movs	r0, #4
 8000818:	f001 fce4 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <OneLane+0x214>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <OneLane+0x218>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d03d      	beq.n	80008ac <OneLane+0x1fc>
				action.KeepStateFor = YELLOW_DELAY;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <OneLane+0x21c>)
 8000832:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000836:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <OneLane+0x21c>)
 800083a:	2201      	movs	r2, #1
 800083c:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <OneLane+0x218>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000844:	e032      	b.n	80008ac <OneLane+0x1fc>
		case Transition_To_V:
			nextState = V_P_Active;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <OneLane+0x210>)
 8000848:	2203      	movs	r2, #3
 800084a:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <OneLane+0x214>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d012      	beq.n	8000880 <OneLane+0x1d0>
				ControlLight(YELLOW_BOTTOM, ON);
 800085a:	2101      	movs	r1, #1
 800085c:	2007      	movs	r0, #7
 800085e:	f001 fcc1 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000862:	2101      	movs	r1, #1
 8000864:	2004      	movs	r0, #4
 8000866:	f001 fcbd 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_BOTTOM, OFF);
 800086a:	2100      	movs	r1, #0
 800086c:	2008      	movs	r0, #8
 800086e:	f001 fcb9 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_TOP, OFF);
 8000872:	2100      	movs	r1, #0
 8000874:	2005      	movs	r0, #5
 8000876:	f001 fcb5 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <OneLane+0x214>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <OneLane+0x218>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	f083 0301 	eor.w	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d010      	beq.n	80008b0 <OneLane+0x200>
				action.KeepStateFor = YELLOW_DELAY;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <OneLane+0x21c>)
 8000890:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000894:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <OneLane+0x21c>)
 8000898:	2201      	movs	r2, #1
 800089a:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <OneLane+0x218>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80008a2:	e005      	b.n	80008b0 <OneLane+0x200>
			break;
 80008a4:	bf00      	nop
 80008a6:	e004      	b.n	80008b2 <OneLane+0x202>
			break;
 80008a8:	bf00      	nop
 80008aa:	e002      	b.n	80008b2 <OneLane+0x202>
			break;
 80008ac:	bf00      	nop
 80008ae:	e000      	b.n	80008b2 <OneLane+0x202>
			break;
 80008b0:	bf00      	nop
	}
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000033 	.word	0x20000033
 80008c0:	20000034 	.word	0x20000034
 80008c4:	20000035 	.word	0x20000035
 80008c8:	20000036 	.word	0x20000036
 80008cc:	20000038 	.word	0x20000038

080008d0 <TwoLane>:


void TwoLane(ButtonStates button){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	463b      	mov	r3, r7
 80008d8:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 80008dc:	4bc1      	ldr	r3, [pc, #772]	; (8000be4 <TwoLane+0x314>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b05      	cmp	r3, #5
 80008e2:	f200 81cf 	bhi.w	8000c84 <TwoLane+0x3b4>
 80008e6:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <TwoLane+0x1c>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	08000a35 	.word	0x08000a35
 80008f0:	08000c85 	.word	0x08000c85
 80008f4:	08000905 	.word	0x08000905
 80008f8:	08000c85 	.word	0x08000c85
 80008fc:	08000b65 	.word	0x08000b65
 8000900:	08000bf9 	.word	0x08000bf9
		case V_Active:

			nextState = Transition_To_H;
 8000904:	4bb8      	ldr	r3, [pc, #736]	; (8000be8 <TwoLane+0x318>)
 8000906:	2204      	movs	r2, #4
 8000908:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 800090a:	4bb8      	ldr	r3, [pc, #736]	; (8000bec <TwoLane+0x31c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f083 0301 	eor.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d022      	beq.n	800095e <TwoLane+0x8e>
				ControlLight(GREEN_BOTTOM, ON);
 8000918:	2101      	movs	r1, #1
 800091a:	2008      	movs	r0, #8
 800091c:	f001 fc62 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000920:	2101      	movs	r1, #1
 8000922:	2005      	movs	r0, #5
 8000924:	f001 fc5e 	bl	80021e4 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000928:	2100      	movs	r1, #0
 800092a:	2007      	movs	r0, #7
 800092c:	f001 fc5a 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000930:	2100      	movs	r1, #0
 8000932:	2004      	movs	r0, #4
 8000934:	f001 fc56 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000938:	2100      	movs	r1, #0
 800093a:	2001      	movs	r0, #1
 800093c:	f001 fc52 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000940:	2100      	movs	r1, #0
 8000942:	200d      	movs	r0, #13
 8000944:	f001 fc4e 	bl	80021e4 <ControlLight>

				ControlLight(RED_LEFT, ON);
 8000948:	2101      	movs	r1, #1
 800094a:	200c      	movs	r0, #12
 800094c:	f001 fc4a 	bl	80021e4 <ControlLight>
				ControlLight(RED_RIGHT, ON);
 8000950:	2101      	movs	r1, #1
 8000952:	2000      	movs	r0, #0
 8000954:	f001 fc46 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 8000958:	4ba4      	ldr	r3, [pc, #656]	; (8000bec <TwoLane+0x31c>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
			}

			if(!NoCarH(button) && NoCarV(button)){
 800095e:	463b      	mov	r3, r7
 8000960:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000964:	f000 fd81 	bl	800146a <NoCarH>
 8000968:	4603      	mov	r3, r0
 800096a:	f083 0301 	eor.w	r3, r3, #1
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	d011      	beq.n	8000998 <TwoLane+0xc8>
 8000974:	463b      	mov	r3, r7
 8000976:	e893 0003 	ldmia.w	r3, {r0, r1}
 800097a:	f000 fd5b 	bl	8001434 <NoCarV>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d009      	beq.n	8000998 <TwoLane+0xc8>
				action.KeepStateFor = 1;
 8000984:	4b9a      	ldr	r3, [pc, #616]	; (8000bf0 <TwoLane+0x320>)
 8000986:	2201      	movs	r2, #1
 8000988:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 800098a:	4b99      	ldr	r3, [pc, #612]	; (8000bf0 <TwoLane+0x320>)
 800098c:	2201      	movs	r2, #1
 800098e:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000990:	4b98      	ldr	r3, [pc, #608]	; (8000bf4 <TwoLane+0x324>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e04c      	b.n	8000a32 <TwoLane+0x162>
			} else if (!NoCarH(button) && !NoCarV(button) && !delaySent) {
 8000998:	463b      	mov	r3, r7
 800099a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800099e:	f000 fd64 	bl	800146a <NoCarH>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f083 0301 	eor.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d01c      	beq.n	80009e8 <TwoLane+0x118>
 80009ae:	463b      	mov	r3, r7
 80009b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009b4:	f000 fd3e 	bl	8001434 <NoCarV>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f083 0301 	eor.w	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d011      	beq.n	80009e8 <TwoLane+0x118>
 80009c4:	4b8b      	ldr	r3, [pc, #556]	; (8000bf4 <TwoLane+0x324>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	f083 0301 	eor.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00a      	beq.n	80009e8 <TwoLane+0x118>
				action.KeepStateFor = RED_DELAY_MAX;
 80009d2:	4b87      	ldr	r3, [pc, #540]	; (8000bf0 <TwoLane+0x320>)
 80009d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80009d8:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 80009da:	4b85      	ldr	r3, [pc, #532]	; (8000bf0 <TwoLane+0x320>)
 80009dc:	2201      	movs	r2, #1
 80009de:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 80009e0:	4b84      	ldr	r3, [pc, #528]	; (8000bf4 <TwoLane+0x324>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	e024      	b.n	8000a32 <TwoLane+0x162>

			} else if (NoCarH(button) && NoCarV(button) && !delaySent){
 80009e8:	463b      	mov	r3, r7
 80009ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009ee:	f000 fd3c 	bl	800146a <NoCarH>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 813e 	beq.w	8000c76 <TwoLane+0x3a6>
 80009fa:	463b      	mov	r3, r7
 80009fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a00:	f000 fd18 	bl	8001434 <NoCarV>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8135 	beq.w	8000c76 <TwoLane+0x3a6>
 8000a0c:	4b79      	ldr	r3, [pc, #484]	; (8000bf4 <TwoLane+0x324>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	f083 0301 	eor.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 812d 	beq.w	8000c76 <TwoLane+0x3a6>
				action.KeepStateFor = GREEN_DELAY;
 8000a1c:	4b74      	ldr	r3, [pc, #464]	; (8000bf0 <TwoLane+0x320>)
 8000a1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000a22:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000a24:	4b72      	ldr	r3, [pc, #456]	; (8000bf0 <TwoLane+0x320>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000a2a:	4b72      	ldr	r3, [pc, #456]	; (8000bf4 <TwoLane+0x324>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000a30:	e121      	b.n	8000c76 <TwoLane+0x3a6>
 8000a32:	e120      	b.n	8000c76 <TwoLane+0x3a6>
		case H_Active:

			nextState = Transition_To_V;
 8000a34:	4b6c      	ldr	r3, [pc, #432]	; (8000be8 <TwoLane+0x318>)
 8000a36:	2205      	movs	r2, #5
 8000a38:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000a3a:	4b6c      	ldr	r3, [pc, #432]	; (8000bec <TwoLane+0x31c>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	f083 0301 	eor.w	r3, r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d022      	beq.n	8000a8e <TwoLane+0x1be>
				ControlLight(GREEN_RIGHT, ON);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f001 fbca 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_LEFT, ON);
 8000a50:	2101      	movs	r1, #1
 8000a52:	200e      	movs	r0, #14
 8000a54:	f001 fbc6 	bl	80021e4 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f001 fbc2 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2004      	movs	r0, #4
 8000a64:	f001 fbbe 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f001 fbba 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000a70:	2100      	movs	r1, #0
 8000a72:	200d      	movs	r0, #13
 8000a74:	f001 fbb6 	bl	80021e4 <ControlLight>

				ControlLight(RED_TOP, ON);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f001 fbb2 	bl	80021e4 <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 8000a80:	2101      	movs	r1, #1
 8000a82:	2006      	movs	r0, #6
 8000a84:	f001 fbae 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 8000a88:	4b58      	ldr	r3, [pc, #352]	; (8000bec <TwoLane+0x31c>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
			}

			if(NoCarH(button) && !NoCarV(button)){
 8000a8e:	463b      	mov	r3, r7
 8000a90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a94:	f000 fce9 	bl	800146a <NoCarH>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d014      	beq.n	8000ac8 <TwoLane+0x1f8>
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000aa4:	f000 fcc6 	bl	8001434 <NoCarV>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <TwoLane+0x1f8>
				action.KeepStateFor = 1;
 8000ab4:	4b4e      	ldr	r3, [pc, #312]	; (8000bf0 <TwoLane+0x320>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000aba:	4b4d      	ldr	r3, [pc, #308]	; (8000bf0 <TwoLane+0x320>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <TwoLane+0x324>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e04c      	b.n	8000b62 <TwoLane+0x292>
			} else if (!NoCarH(button) && !NoCarV(button) && !delaySent) {
 8000ac8:	463b      	mov	r3, r7
 8000aca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ace:	f000 fccc 	bl	800146a <NoCarH>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f083 0301 	eor.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d01c      	beq.n	8000b18 <TwoLane+0x248>
 8000ade:	463b      	mov	r3, r7
 8000ae0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ae4:	f000 fca6 	bl	8001434 <NoCarV>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f083 0301 	eor.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d011      	beq.n	8000b18 <TwoLane+0x248>
 8000af4:	4b3f      	ldr	r3, [pc, #252]	; (8000bf4 <TwoLane+0x324>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f083 0301 	eor.w	r3, r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d00a      	beq.n	8000b18 <TwoLane+0x248>
				action.KeepStateFor = RED_DELAY_MAX;
 8000b02:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <TwoLane+0x320>)
 8000b04:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b08:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000b0a:	4b39      	ldr	r3, [pc, #228]	; (8000bf0 <TwoLane+0x320>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000b10:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <TwoLane+0x324>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	e024      	b.n	8000b62 <TwoLane+0x292>

			} else if (NoCarH(button) && NoCarV(button) && !delaySent){
 8000b18:	463b      	mov	r3, r7
 8000b1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b1e:	f000 fca4 	bl	800146a <NoCarH>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 80a8 	beq.w	8000c7a <TwoLane+0x3aa>
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b30:	f000 fc80 	bl	8001434 <NoCarV>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 809f 	beq.w	8000c7a <TwoLane+0x3aa>
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <TwoLane+0x324>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	f083 0301 	eor.w	r3, r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8097 	beq.w	8000c7a <TwoLane+0x3aa>
				action.KeepStateFor = GREEN_DELAY;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <TwoLane+0x320>)
 8000b4e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000b52:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000b54:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <TwoLane+0x320>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <TwoLane+0x324>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000b60:	e08b      	b.n	8000c7a <TwoLane+0x3aa>
 8000b62:	e08a      	b.n	8000c7a <TwoLane+0x3aa>
		case Transition_To_H:

			nextState = H_Active;
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <TwoLane+0x318>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <TwoLane+0x31c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f083 0301 	eor.w	r3, r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d022      	beq.n	8000bbe <TwoLane+0x2ee>
				ControlLight(YELLOW_BOTTOM, ON);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2007      	movs	r0, #7
 8000b7c:	f001 fb32 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000b80:	2101      	movs	r1, #1
 8000b82:	2004      	movs	r0, #4
 8000b84:	f001 fb2e 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f001 fb2a 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 8000b90:	2101      	movs	r1, #1
 8000b92:	200d      	movs	r0, #13
 8000b94:	f001 fb26 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_TOP, OFF);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2005      	movs	r0, #5
 8000b9c:	f001 fb22 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_BOTTOM, OFF);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2008      	movs	r0, #8
 8000ba4:	f001 fb1e 	bl	80021e4 <ControlLight>

				ControlLight(RED_RIGHT, OFF);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2000      	movs	r0, #0
 8000bac:	f001 fb1a 	bl	80021e4 <ControlLight>
				ControlLight(RED_LEFT, OFF);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	200c      	movs	r0, #12
 8000bb4:	f001 fb16 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <TwoLane+0x31c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <TwoLane+0x324>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f083 0301 	eor.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d058      	beq.n	8000c7e <TwoLane+0x3ae>
				action.KeepStateFor = YELLOW_DELAY;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <TwoLane+0x320>)
 8000bce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bd2:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <TwoLane+0x320>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <TwoLane+0x324>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000be0:	e04d      	b.n	8000c7e <TwoLane+0x3ae>
 8000be2:	bf00      	nop
 8000be4:	20000033 	.word	0x20000033
 8000be8:	20000034 	.word	0x20000034
 8000bec:	20000035 	.word	0x20000035
 8000bf0:	20000038 	.word	0x20000038
 8000bf4:	20000036 	.word	0x20000036
		case Transition_To_V:

			nextState = V_Active;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <TwoLane+0x3bc>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <TwoLane+0x3c0>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d022      	beq.n	8000c52 <TwoLane+0x382>
				ControlLight(YELLOW_BOTTOM, ON);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f001 fae8 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000c14:	2101      	movs	r1, #1
 8000c16:	2004      	movs	r0, #4
 8000c18:	f001 fae4 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f001 fae0 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 8000c24:	2101      	movs	r1, #1
 8000c26:	200d      	movs	r0, #13
 8000c28:	f001 fadc 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_RIGHT, OFF);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f001 fad8 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_LEFT, OFF);
 8000c34:	2100      	movs	r1, #0
 8000c36:	200e      	movs	r0, #14
 8000c38:	f001 fad4 	bl	80021e4 <ControlLight>

				ControlLight(RED_TOP, OFF);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f001 fad0 	bl	80021e4 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 8000c44:	2100      	movs	r1, #0
 8000c46:	2006      	movs	r0, #6
 8000c48:	f001 facc 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <TwoLane+0x3c0>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <TwoLane+0x3c4>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f083 0301 	eor.w	r3, r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d010      	beq.n	8000c82 <TwoLane+0x3b2>
				action.KeepStateFor = YELLOW_DELAY;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <TwoLane+0x3c8>)
 8000c62:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000c66:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <TwoLane+0x3c8>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <TwoLane+0x3c4>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000c74:	e005      	b.n	8000c82 <TwoLane+0x3b2>
			break;
 8000c76:	bf00      	nop
 8000c78:	e004      	b.n	8000c84 <TwoLane+0x3b4>
			break;
 8000c7a:	bf00      	nop
 8000c7c:	e002      	b.n	8000c84 <TwoLane+0x3b4>
			break;
 8000c7e:	bf00      	nop
 8000c80:	e000      	b.n	8000c84 <TwoLane+0x3b4>
			break;
 8000c82:	bf00      	nop

	}
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000034 	.word	0x20000034
 8000c90:	20000035 	.word	0x20000035
 8000c94:	20000036 	.word	0x20000036
 8000c98:	20000038 	.word	0x20000038

08000c9c <TwoLanePed>:

void TwoLanePed(ButtonStates button){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 8000ca8:	4bb0      	ldr	r3, [pc, #704]	; (8000f6c <TwoLanePed+0x2d0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b05      	cmp	r3, #5
 8000cae:	f200 83b4 	bhi.w	800141a <TwoLanePed+0x77e>
 8000cb2:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <TwoLanePed+0x1c>)
 8000cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb8:	08000f85 	.word	0x08000f85
 8000cbc:	08001173 	.word	0x08001173
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000e8d 	.word	0x08000e8d
 8000cc8:	08001269 	.word	0x08001269
 8000ccc:	08001337 	.word	0x08001337
		case V_Active:
			nextState = Transition_To_H;
 8000cd0:	4ba7      	ldr	r3, [pc, #668]	; (8000f70 <TwoLanePed+0x2d4>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000cd6:	4ba7      	ldr	r3, [pc, #668]	; (8000f74 <TwoLanePed+0x2d8>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f083 0301 	eor.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d032      	beq.n	8000d4a <TwoLanePed+0xae>
				ControlLight(GREEN_BOTTOM, ON);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2008      	movs	r0, #8
 8000ce8:	f001 fa7c 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000cec:	2101      	movs	r1, #1
 8000cee:	2005      	movs	r0, #5
 8000cf0:	f001 fa78 	bl	80021e4 <ControlLight>

				ControlLight(RED_LEFT, ON);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	200c      	movs	r0, #12
 8000cf8:	f001 fa74 	bl	80021e4 <ControlLight>
				ControlLight(RED_RIGHT, ON);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f001 fa70 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 8000d04:	2100      	movs	r1, #0
 8000d06:	200a      	movs	r0, #10
 8000d08:	f001 fa6c 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f001 fa68 	bl	80021e4 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 8000d14:	2101      	movs	r1, #1
 8000d16:	2009      	movs	r0, #9
 8000d18:	f001 fa64 	bl	80021e4 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f001 fa60 	bl	80021e4 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000d24:	2100      	movs	r1, #0
 8000d26:	2007      	movs	r0, #7
 8000d28:	f001 fa5c 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2004      	movs	r0, #4
 8000d30:	f001 fa58 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000d34:	2100      	movs	r1, #0
 8000d36:	200d      	movs	r0, #13
 8000d38:	f001 fa54 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f001 fa50 	bl	80021e4 <ControlLight>

				lightsActivated = true;
 8000d44:	4b8b      	ldr	r3, [pc, #556]	; (8000f74 <TwoLanePed+0x2d8>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
			}

			if(button.LeftPed){
 8000d4a:	793b      	ldrb	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00f      	beq.n	8000d70 <TwoLanePed+0xd4>
				nextState = V_P_Active;
 8000d50:	4b87      	ldr	r3, [pc, #540]	; (8000f70 <TwoLanePed+0x2d4>)
 8000d52:	2203      	movs	r2, #3
 8000d54:	701a      	strb	r2, [r3, #0]
				action.KeepStateFor = 1;
 8000d56:	4b88      	ldr	r3, [pc, #544]	; (8000f78 <TwoLanePed+0x2dc>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000d5c:	4b86      	ldr	r3, [pc, #536]	; (8000f78 <TwoLanePed+0x2dc>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + 1;
 8000d62:	f001 fd2d 	bl	80027c0 <HAL_GetTick>
 8000d66:	4603      	mov	r3, r0
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a84      	ldr	r2, [pc, #528]	; (8000f7c <TwoLanePed+0x2e0>)
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e01e      	b.n	8000dae <TwoLanePed+0x112>
			} else if(!NoCarH(button) && NoCarV(button)) {
 8000d70:	463b      	mov	r3, r7
 8000d72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d76:	f000 fb78 	bl	800146a <NoCarH>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d013      	beq.n	8000dae <TwoLanePed+0x112>
 8000d86:	463b      	mov	r3, r7
 8000d88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d8c:	f000 fb52 	bl	8001434 <NoCarV>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00b      	beq.n	8000dae <TwoLanePed+0x112>
				action.KeepStateFor = 1;
 8000d96:	4b78      	ldr	r3, [pc, #480]	; (8000f78 <TwoLanePed+0x2dc>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000d9c:	4b76      	ldr	r3, [pc, #472]	; (8000f78 <TwoLanePed+0x2dc>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + 1;
 8000da2:	f001 fd0d 	bl	80027c0 <HAL_GetTick>
 8000da6:	4603      	mov	r3, r0
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a74      	ldr	r2, [pc, #464]	; (8000f7c <TwoLanePed+0x2e0>)
 8000dac:	6013      	str	r3, [r2, #0]
			}
			if (!NoCarH(button) && !NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + RED_DELAY_MAX)) {
 8000dae:	463b      	mov	r3, r7
 8000db0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000db4:	f000 fb59 	bl	800146a <NoCarH>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f083 0301 	eor.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d024      	beq.n	8000e0e <TwoLanePed+0x172>
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dca:	f000 fb33 	bl	8001434 <NoCarV>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f083 0301 	eor.w	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d019      	beq.n	8000e0e <TwoLanePed+0x172>
 8000dda:	f001 fcf1 	bl	80027c0 <HAL_GetTick>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000de4:	3310      	adds	r3, #16
 8000de6:	4a65      	ldr	r2, [pc, #404]	; (8000f7c <TwoLanePed+0x2e0>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d20f      	bcs.n	8000e0e <TwoLanePed+0x172>
				action.KeepStateFor = RED_DELAY_MAX;
 8000dee:	4b62      	ldr	r3, [pc, #392]	; (8000f78 <TwoLanePed+0x2dc>)
 8000df0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000df4:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000df6:	4b60      	ldr	r3, [pc, #384]	; (8000f78 <TwoLanePed+0x2dc>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + RED_DELAY_MAX;
 8000dfc:	f001 fce0 	bl	80027c0 <HAL_GetTick>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000e06:	3310      	adds	r3, #16
 8000e08:	4a5c      	ldr	r2, [pc, #368]	; (8000f7c <TwoLanePed+0x2e0>)
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	e028      	b.n	8000e60 <TwoLanePed+0x1c4>
			} else if (NoCarH(button) && NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + GREEN_DELAY)) {
 8000e0e:	463b      	mov	r3, r7
 8000e10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e14:	f000 fb29 	bl	800146a <NoCarH>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d020      	beq.n	8000e60 <TwoLanePed+0x1c4>
 8000e1e:	463b      	mov	r3, r7
 8000e20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e24:	f000 fb06 	bl	8001434 <NoCarV>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d018      	beq.n	8000e60 <TwoLanePed+0x1c4>
 8000e2e:	f001 fcc7 	bl	80027c0 <HAL_GetTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000e38:	3310      	adds	r3, #16
 8000e3a:	4a50      	ldr	r2, [pc, #320]	; (8000f7c <TwoLanePed+0x2e0>)
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d20e      	bcs.n	8000e60 <TwoLanePed+0x1c4>
				action.KeepStateFor = GREEN_DELAY;
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <TwoLanePed+0x2dc>)
 8000e44:	f241 7270 	movw	r2, #6000	; 0x1770
 8000e48:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000e4a:	4b4b      	ldr	r3, [pc, #300]	; (8000f78 <TwoLanePed+0x2dc>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + GREEN_DELAY;
 8000e50:	f001 fcb6 	bl	80027c0 <HAL_GetTick>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000e5a:	3310      	adds	r3, #16
 8000e5c:	4a47      	ldr	r2, [pc, #284]	; (8000f7c <TwoLanePed+0x2e0>)
 8000e5e:	6013      	str	r3, [r2, #0]
			}

			if(button.TopPed){
 8000e60:	797b      	ldrb	r3, [r7, #5]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 82ce 	beq.w	8001404 <TwoLanePed+0x768>
				action.TopPedWaiting = true;
 8000e68:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <TwoLanePed+0x2dc>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
				action.KeepStateFor = PEDESTRIAN_DELAY;
 8000e6e:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <TwoLanePed+0x2dc>)
 8000e70:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e74:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000e76:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <TwoLanePed+0x2dc>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + PEDESTRIAN_DELAY;
 8000e7c:	f001 fca0 	bl	80027c0 <HAL_GetTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8000e86:	4a3d      	ldr	r2, [pc, #244]	; (8000f7c <TwoLanePed+0x2e0>)
 8000e88:	6013      	str	r3, [r2, #0]
			}

			break;
 8000e8a:	e2bb      	b.n	8001404 <TwoLanePed+0x768>

		case V_P_Active:
			if(!NoCarV(button) && NoCarH(button)){
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e92:	f000 facf 	bl	8001434 <NoCarV>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f083 0301 	eor.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00b      	beq.n	8000eba <TwoLanePed+0x21e>
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ea8:	f000 fadf 	bl	800146a <NoCarH>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <TwoLanePed+0x21e>
				nextState = V_Active;
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <TwoLanePed+0x2d4>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e002      	b.n	8000ec0 <TwoLanePed+0x224>
			}else {
				nextState = Transition_To_H;
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <TwoLanePed+0x2d4>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	701a      	strb	r2, [r3, #0]
			}

			if(!lightsActivated){
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <TwoLanePed+0x2d8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	f083 0301 	eor.w	r3, r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d035      	beq.n	8000f3a <TwoLanePed+0x29e>
				ControlLight(GREEN_BOTTOM, ON);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2008      	movs	r0, #8
 8000ed2:	f001 f987 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	2005      	movs	r0, #5
 8000eda:	f001 f983 	bl	80021e4 <ControlLight>

				ControlLight(RED_LEFT, ON);
 8000ede:	2101      	movs	r1, #1
 8000ee0:	200c      	movs	r0, #12
 8000ee2:	f001 f97f 	bl	80021e4 <ControlLight>
				ControlLight(RED_RIGHT, ON);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f001 f97b 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f001 f977 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_PED_LEFT, ON);
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	2010      	movs	r0, #16
 8000efa:	f001 f973 	bl	80021e4 <ControlLight>
				action.LeftPedWaiting = false;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <TwoLanePed+0x2dc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	705a      	strb	r2, [r3, #1]

				ControlLight(RED_PED_TOP, ON);
 8000f04:	2101      	movs	r1, #1
 8000f06:	2009      	movs	r0, #9
 8000f08:	f001 f96c 	bl	80021e4 <ControlLight>
				ControlLight(RED_PED_LEFT, OFF);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f001 f968 	bl	80021e4 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000f14:	2100      	movs	r1, #0
 8000f16:	2007      	movs	r0, #7
 8000f18:	f001 f964 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2004      	movs	r0, #4
 8000f20:	f001 f960 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000f24:	2100      	movs	r1, #0
 8000f26:	200d      	movs	r0, #13
 8000f28:	f001 f95c 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f001 f958 	bl	80021e4 <ControlLight>

				lightsActivated = true;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <TwoLanePed+0x2d8>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <TwoLanePed+0x2e4>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f083 0301 	eor.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <TwoLanePed+0x2c0>
				action.KeepStateFor = WALKING_DELAY;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <TwoLanePed+0x2dc>)
 8000f4a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f4e:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <TwoLanePed+0x2dc>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <TwoLanePed+0x2e4>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed){
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8252 	beq.w	8001408 <TwoLanePed+0x76c>
				action.TopPedWaiting = true;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <TwoLanePed+0x2dc>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000f6a:	e24d      	b.n	8001408 <TwoLanePed+0x76c>
 8000f6c:	20000033 	.word	0x20000033
 8000f70:	20000034 	.word	0x20000034
 8000f74:	20000035 	.word	0x20000035
 8000f78:	20000038 	.word	0x20000038
 8000f7c:	20000040 	.word	0x20000040
 8000f80:	20000036 	.word	0x20000036

		case H_Active:
			nextState = Transition_To_V;
 8000f84:	4bb3      	ldr	r3, [pc, #716]	; (8001254 <TwoLanePed+0x5b8>)
 8000f86:	2205      	movs	r2, #5
 8000f88:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000f8a:	4bb3      	ldr	r3, [pc, #716]	; (8001258 <TwoLanePed+0x5bc>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	f083 0301 	eor.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d032      	beq.n	8000ffe <TwoLanePed+0x362>
				ControlLight(GREEN_LEFT, ON);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	200e      	movs	r0, #14
 8000f9c:	f001 f922 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_RIGHT, ON);
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f001 f91e 	bl	80021e4 <ControlLight>

				ControlLight(RED_TOP, ON);
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2003      	movs	r0, #3
 8000fac:	f001 f91a 	bl	80021e4 <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2006      	movs	r0, #6
 8000fb4:	f001 f916 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f001 f912 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2010      	movs	r0, #16
 8000fc4:	f001 f90e 	bl	80021e4 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2009      	movs	r0, #9
 8000fcc:	f001 f90a 	bl	80021e4 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f001 f906 	bl	80021e4 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f001 f902 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2004      	movs	r0, #4
 8000fe4:	f001 f8fe 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	200d      	movs	r0, #13
 8000fec:	f001 f8fa 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f001 f8f6 	bl	80021e4 <ControlLight>

				lightsActivated = true;
 8000ff8:	4b97      	ldr	r3, [pc, #604]	; (8001258 <TwoLanePed+0x5bc>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed){
 8000ffe:	797b      	ldrb	r3, [r7, #5]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d012      	beq.n	800102a <TwoLanePed+0x38e>
				nextState = H_P_Active;
 8001004:	4b93      	ldr	r3, [pc, #588]	; (8001254 <TwoLanePed+0x5b8>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
				action.KeepStateFor = 1;
 800100a:	4b94      	ldr	r3, [pc, #592]	; (800125c <TwoLanePed+0x5c0>)
 800100c:	2201      	movs	r2, #1
 800100e:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001010:	4b92      	ldr	r3, [pc, #584]	; (800125c <TwoLanePed+0x5c0>)
 8001012:	2201      	movs	r2, #1
 8001014:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8001016:	4b92      	ldr	r3, [pc, #584]	; (8001260 <TwoLanePed+0x5c4>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + 1;
 800101c:	f001 fbd0 	bl	80027c0 <HAL_GetTick>
 8001020:	4603      	mov	r3, r0
 8001022:	3301      	adds	r3, #1
 8001024:	4a8f      	ldr	r2, [pc, #572]	; (8001264 <TwoLanePed+0x5c8>)
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e021      	b.n	800106e <TwoLanePed+0x3d2>
			} else if(NoCarH(button) && !NoCarV(button)) {
 800102a:	463b      	mov	r3, r7
 800102c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001030:	f000 fa1b 	bl	800146a <NoCarH>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d019      	beq.n	800106e <TwoLanePed+0x3d2>
 800103a:	463b      	mov	r3, r7
 800103c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001040:	f000 f9f8 	bl	8001434 <NoCarV>
 8001044:	4603      	mov	r3, r0
 8001046:	f083 0301 	eor.w	r3, r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00e      	beq.n	800106e <TwoLanePed+0x3d2>
				action.KeepStateFor = 1;
 8001050:	4b82      	ldr	r3, [pc, #520]	; (800125c <TwoLanePed+0x5c0>)
 8001052:	2201      	movs	r2, #1
 8001054:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001056:	4b81      	ldr	r3, [pc, #516]	; (800125c <TwoLanePed+0x5c0>)
 8001058:	2201      	movs	r2, #1
 800105a:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800105c:	4b80      	ldr	r3, [pc, #512]	; (8001260 <TwoLanePed+0x5c4>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + 1;
 8001062:	f001 fbad 	bl	80027c0 <HAL_GetTick>
 8001066:	4603      	mov	r3, r0
 8001068:	3301      	adds	r3, #1
 800106a:	4a7e      	ldr	r2, [pc, #504]	; (8001264 <TwoLanePed+0x5c8>)
 800106c:	6013      	str	r3, [r2, #0]
			}
			if (!NoCarH(button) && !NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + RED_DELAY_MAX)) {
 800106e:	463b      	mov	r3, r7
 8001070:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001074:	f000 f9f9 	bl	800146a <NoCarH>
 8001078:	4603      	mov	r3, r0
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d027      	beq.n	80010d4 <TwoLanePed+0x438>
 8001084:	463b      	mov	r3, r7
 8001086:	e893 0003 	ldmia.w	r3, {r0, r1}
 800108a:	f000 f9d3 	bl	8001434 <NoCarV>
 800108e:	4603      	mov	r3, r0
 8001090:	f083 0301 	eor.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d01c      	beq.n	80010d4 <TwoLanePed+0x438>
 800109a:	f001 fb91 	bl	80027c0 <HAL_GetTick>
 800109e:	4603      	mov	r3, r0
 80010a0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80010a4:	3310      	adds	r3, #16
 80010a6:	4a6f      	ldr	r2, [pc, #444]	; (8001264 <TwoLanePed+0x5c8>)
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d212      	bcs.n	80010d4 <TwoLanePed+0x438>
				action.KeepStateFor = RED_DELAY_MAX;
 80010ae:	4b6b      	ldr	r3, [pc, #428]	; (800125c <TwoLanePed+0x5c0>)
 80010b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80010b4:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 80010b6:	4b69      	ldr	r3, [pc, #420]	; (800125c <TwoLanePed+0x5c0>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 80010bc:	4b68      	ldr	r3, [pc, #416]	; (8001260 <TwoLanePed+0x5c4>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + RED_DELAY_MAX;
 80010c2:	f001 fb7d 	bl	80027c0 <HAL_GetTick>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80010cc:	3310      	adds	r3, #16
 80010ce:	4a65      	ldr	r2, [pc, #404]	; (8001264 <TwoLanePed+0x5c8>)
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e02b      	b.n	800112c <TwoLanePed+0x490>
			} else if (NoCarH(button) && NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + GREEN_DELAY)) {
 80010d4:	463b      	mov	r3, r7
 80010d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010da:	f000 f9c6 	bl	800146a <NoCarH>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d023      	beq.n	800112c <TwoLanePed+0x490>
 80010e4:	463b      	mov	r3, r7
 80010e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010ea:	f000 f9a3 	bl	8001434 <NoCarV>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d01b      	beq.n	800112c <TwoLanePed+0x490>
 80010f4:	f001 fb64 	bl	80027c0 <HAL_GetTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80010fe:	3310      	adds	r3, #16
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <TwoLanePed+0x5c8>)
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	4293      	cmp	r3, r2
 8001106:	d211      	bcs.n	800112c <TwoLanePed+0x490>
				action.KeepStateFor = GREEN_DELAY;
 8001108:	4b54      	ldr	r3, [pc, #336]	; (800125c <TwoLanePed+0x5c0>)
 800110a:	f241 7270 	movw	r2, #6000	; 0x1770
 800110e:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001110:	4b52      	ldr	r3, [pc, #328]	; (800125c <TwoLanePed+0x5c0>)
 8001112:	2201      	movs	r2, #1
 8001114:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8001116:	4b52      	ldr	r3, [pc, #328]	; (8001260 <TwoLanePed+0x5c4>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + GREEN_DELAY;
 800111c:	f001 fb50 	bl	80027c0 <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001126:	3310      	adds	r3, #16
 8001128:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <TwoLanePed+0x5c8>)
 800112a:	6013      	str	r3, [r2, #0]
			}

			if(button.LeftPed && previousDelayExpireAt > (HAL_GetTick() + PEDESTRIAN_DELAY)){
 800112c:	793b      	ldrb	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 816c 	beq.w	800140c <TwoLanePed+0x770>
 8001134:	f001 fb44 	bl	80027c0 <HAL_GetTick>
 8001138:	4603      	mov	r3, r0
 800113a:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <TwoLanePed+0x5c8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	f080 8162 	bcs.w	800140c <TwoLanePed+0x770>
				action.LeftPedWaiting = true;
 8001148:	4b44      	ldr	r3, [pc, #272]	; (800125c <TwoLanePed+0x5c0>)
 800114a:	2201      	movs	r2, #1
 800114c:	705a      	strb	r2, [r3, #1]
				action.KeepStateFor = PEDESTRIAN_DELAY;
 800114e:	4b43      	ldr	r3, [pc, #268]	; (800125c <TwoLanePed+0x5c0>)
 8001150:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001154:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001156:	4b41      	ldr	r3, [pc, #260]	; (800125c <TwoLanePed+0x5c0>)
 8001158:	2201      	movs	r2, #1
 800115a:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800115c:	4b40      	ldr	r3, [pc, #256]	; (8001260 <TwoLanePed+0x5c4>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + PEDESTRIAN_DELAY;
 8001162:	f001 fb2d 	bl	80027c0 <HAL_GetTick>
 8001166:	4603      	mov	r3, r0
 8001168:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800116c:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <TwoLanePed+0x5c8>)
 800116e:	6013      	str	r3, [r2, #0]
			}

			break;
 8001170:	e14c      	b.n	800140c <TwoLanePed+0x770>

		case H_P_Active:
			if(!NoCarH(button) && NoCarV(button)){
 8001172:	463b      	mov	r3, r7
 8001174:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001178:	f000 f977 	bl	800146a <NoCarH>
 800117c:	4603      	mov	r3, r0
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00b      	beq.n	80011a0 <TwoLanePed+0x504>
 8001188:	463b      	mov	r3, r7
 800118a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800118e:	f000 f951 	bl	8001434 <NoCarV>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <TwoLanePed+0x504>
				nextState = H_Active;
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <TwoLanePed+0x5b8>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e002      	b.n	80011a6 <TwoLanePed+0x50a>
			} else {
				nextState = Transition_To_V;
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <TwoLanePed+0x5b8>)
 80011a2:	2205      	movs	r2, #5
 80011a4:	701a      	strb	r2, [r3, #0]
			}
			if(!lightsActivated){
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <TwoLanePed+0x5bc>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	f083 0301 	eor.w	r3, r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d035      	beq.n	8001220 <TwoLanePed+0x584>
				ControlLight(GREEN_LEFT, ON);
 80011b4:	2101      	movs	r1, #1
 80011b6:	200e      	movs	r0, #14
 80011b8:	f001 f814 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_RIGHT, ON);
 80011bc:	2101      	movs	r1, #1
 80011be:	2002      	movs	r0, #2
 80011c0:	f001 f810 	bl	80021e4 <ControlLight>

				ControlLight(RED_TOP, ON);
 80011c4:	2101      	movs	r1, #1
 80011c6:	2003      	movs	r0, #3
 80011c8:	f001 f80c 	bl	80021e4 <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 80011cc:	2101      	movs	r1, #1
 80011ce:	2006      	movs	r0, #6
 80011d0:	f001 f808 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_PED_TOP, ON);
 80011d4:	2101      	movs	r1, #1
 80011d6:	200a      	movs	r0, #10
 80011d8:	f001 f804 	bl	80021e4 <ControlLight>
				action.TopPedWaiting = false;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <TwoLanePed+0x5c0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
				ControlLight(GREEN_PED_LEFT, OFF);
 80011e2:	2100      	movs	r1, #0
 80011e4:	2010      	movs	r0, #16
 80011e6:	f000 fffd 	bl	80021e4 <ControlLight>

				ControlLight(RED_PED_TOP, OFF);
 80011ea:	2100      	movs	r1, #0
 80011ec:	2009      	movs	r0, #9
 80011ee:	f000 fff9 	bl	80021e4 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 80011f2:	2101      	movs	r1, #1
 80011f4:	200f      	movs	r0, #15
 80011f6:	f000 fff5 	bl	80021e4 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 80011fa:	2100      	movs	r1, #0
 80011fc:	2007      	movs	r0, #7
 80011fe:	f000 fff1 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8001202:	2100      	movs	r1, #0
 8001204:	2004      	movs	r0, #4
 8001206:	f000 ffed 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 800120a:	2100      	movs	r1, #0
 800120c:	200d      	movs	r0, #13
 800120e:	f000 ffe9 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8001212:	2100      	movs	r1, #0
 8001214:	2001      	movs	r0, #1
 8001216:	f000 ffe5 	bl	80021e4 <ControlLight>

				lightsActivated = true;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <TwoLanePed+0x5bc>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <TwoLanePed+0x5c4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f083 0301 	eor.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d009      	beq.n	8001242 <TwoLanePed+0x5a6>
				action.KeepStateFor = WALKING_DELAY;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <TwoLanePed+0x5c0>)
 8001230:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001234:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <TwoLanePed+0x5c0>)
 8001238:	2201      	movs	r2, #1
 800123a:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <TwoLanePed+0x5c4>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
			}

			if(button.LeftPed){
 8001242:	793b      	ldrb	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80e3 	beq.w	8001410 <TwoLanePed+0x774>
				action.LeftPedWaiting = true;
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <TwoLanePed+0x5c0>)
 800124c:	2201      	movs	r2, #1
 800124e:	705a      	strb	r2, [r3, #1]
			}

			break;
 8001250:	e0de      	b.n	8001410 <TwoLanePed+0x774>
 8001252:	bf00      	nop
 8001254:	20000034 	.word	0x20000034
 8001258:	20000035 	.word	0x20000035
 800125c:	20000038 	.word	0x20000038
 8001260:	20000036 	.word	0x20000036
 8001264:	20000040 	.word	0x20000040

		case Transition_To_H:
			if(!lightsActivated){
 8001268:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <TwoLanePed+0x788>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f083 0301 	eor.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d042      	beq.n	80012fc <TwoLanePed+0x660>
				ControlLight(GREEN_LEFT, OFF);
 8001276:	2100      	movs	r1, #0
 8001278:	200e      	movs	r0, #14
 800127a:	f000 ffb3 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_RIGHT, OFF);
 800127e:	2100      	movs	r1, #0
 8001280:	2002      	movs	r0, #2
 8001282:	f000 ffaf 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_TOP, OFF);
 8001286:	2100      	movs	r1, #0
 8001288:	2005      	movs	r0, #5
 800128a:	f000 ffab 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_BOTTOM, OFF);
 800128e:	2100      	movs	r1, #0
 8001290:	2008      	movs	r0, #8
 8001292:	f000 ffa7 	bl	80021e4 <ControlLight>

				ControlLight(RED_TOP, OFF);
 8001296:	2100      	movs	r1, #0
 8001298:	2003      	movs	r0, #3
 800129a:	f000 ffa3 	bl	80021e4 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 800129e:	2100      	movs	r1, #0
 80012a0:	2006      	movs	r0, #6
 80012a2:	f000 ff9f 	bl	80021e4 <ControlLight>
				ControlLight(RED_LEFT, OFF);
 80012a6:	2100      	movs	r1, #0
 80012a8:	200c      	movs	r0, #12
 80012aa:	f000 ff9b 	bl	80021e4 <ControlLight>
				ControlLight(RED_RIGHT, OFF);
 80012ae:	2100      	movs	r1, #0
 80012b0:	2000      	movs	r0, #0
 80012b2:	f000 ff97 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 80012b6:	2100      	movs	r1, #0
 80012b8:	200a      	movs	r0, #10
 80012ba:	f000 ff93 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 80012be:	2100      	movs	r1, #0
 80012c0:	2010      	movs	r0, #16
 80012c2:	f000 ff8f 	bl	80021e4 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 80012c6:	2101      	movs	r1, #1
 80012c8:	2009      	movs	r0, #9
 80012ca:	f000 ff8b 	bl	80021e4 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 80012ce:	2101      	movs	r1, #1
 80012d0:	200f      	movs	r0, #15
 80012d2:	f000 ff87 	bl	80021e4 <ControlLight>

				ControlLight(YELLOW_BOTTOM, ON);
 80012d6:	2101      	movs	r1, #1
 80012d8:	2007      	movs	r0, #7
 80012da:	f000 ff83 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 80012de:	2101      	movs	r1, #1
 80012e0:	2004      	movs	r0, #4
 80012e2:	f000 ff7f 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 80012e6:	2101      	movs	r1, #1
 80012e8:	200d      	movs	r0, #13
 80012ea:	f000 ff7b 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 80012ee:	2101      	movs	r1, #1
 80012f0:	2001      	movs	r0, #1
 80012f2:	f000 ff77 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 80012f6:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <TwoLanePed+0x788>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
			}

			if(action.TopPedWaiting){
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <TwoLanePed+0x78c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <TwoLanePed+0x670>
				nextState = H_P_Active;
 8001304:	4b49      	ldr	r3, [pc, #292]	; (800142c <TwoLanePed+0x790>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	e002      	b.n	8001312 <TwoLanePed+0x676>
			}else{
				nextState = H_Active;
 800130c:	4b47      	ldr	r3, [pc, #284]	; (800142c <TwoLanePed+0x790>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <TwoLanePed+0x794>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	f083 0301 	eor.w	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d079      	beq.n	8001414 <TwoLanePed+0x778>
				action.KeepStateFor = YELLOW_DELAY;
 8001320:	4b41      	ldr	r3, [pc, #260]	; (8001428 <TwoLanePed+0x78c>)
 8001322:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001326:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001328:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <TwoLanePed+0x78c>)
 800132a:	2201      	movs	r2, #1
 800132c:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800132e:	4b40      	ldr	r3, [pc, #256]	; (8001430 <TwoLanePed+0x794>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001334:	e06e      	b.n	8001414 <TwoLanePed+0x778>

		case Transition_To_V:
			if(!lightsActivated){
 8001336:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <TwoLanePed+0x788>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f083 0301 	eor.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d042      	beq.n	80013ca <TwoLanePed+0x72e>
				ControlLight(GREEN_LEFT, OFF);
 8001344:	2100      	movs	r1, #0
 8001346:	200e      	movs	r0, #14
 8001348:	f000 ff4c 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_RIGHT, OFF);
 800134c:	2100      	movs	r1, #0
 800134e:	2002      	movs	r0, #2
 8001350:	f000 ff48 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_TOP, OFF);
 8001354:	2100      	movs	r1, #0
 8001356:	2005      	movs	r0, #5
 8001358:	f000 ff44 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_BOTTOM, OFF);
 800135c:	2100      	movs	r1, #0
 800135e:	2008      	movs	r0, #8
 8001360:	f000 ff40 	bl	80021e4 <ControlLight>

				ControlLight(RED_TOP, OFF);
 8001364:	2100      	movs	r1, #0
 8001366:	2003      	movs	r0, #3
 8001368:	f000 ff3c 	bl	80021e4 <ControlLight>
				ControlLight(RED_RIGHT, OFF);
 800136c:	2100      	movs	r1, #0
 800136e:	2000      	movs	r0, #0
 8001370:	f000 ff38 	bl	80021e4 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 8001374:	2100      	movs	r1, #0
 8001376:	2006      	movs	r0, #6
 8001378:	f000 ff34 	bl	80021e4 <ControlLight>
				ControlLight(RED_LEFT, OFF);
 800137c:	2100      	movs	r1, #0
 800137e:	200c      	movs	r0, #12
 8001380:	f000 ff30 	bl	80021e4 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 8001384:	2100      	movs	r1, #0
 8001386:	200a      	movs	r0, #10
 8001388:	f000 ff2c 	bl	80021e4 <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 800138c:	2100      	movs	r1, #0
 800138e:	2010      	movs	r0, #16
 8001390:	f000 ff28 	bl	80021e4 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 8001394:	2101      	movs	r1, #1
 8001396:	2009      	movs	r0, #9
 8001398:	f000 ff24 	bl	80021e4 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 800139c:	2101      	movs	r1, #1
 800139e:	200f      	movs	r0, #15
 80013a0:	f000 ff20 	bl	80021e4 <ControlLight>

				ControlLight(YELLOW_BOTTOM, ON);
 80013a4:	2101      	movs	r1, #1
 80013a6:	2007      	movs	r0, #7
 80013a8:	f000 ff1c 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 80013ac:	2101      	movs	r1, #1
 80013ae:	2004      	movs	r0, #4
 80013b0:	f000 ff18 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 80013b4:	2101      	movs	r1, #1
 80013b6:	200d      	movs	r0, #13
 80013b8:	f000 ff14 	bl	80021e4 <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 80013bc:	2101      	movs	r1, #1
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 ff10 	bl	80021e4 <ControlLight>
				lightsActivated = true;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <TwoLanePed+0x788>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
			}

			if(action.LeftPedWaiting){
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <TwoLanePed+0x78c>)
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <TwoLanePed+0x73e>
				nextState = V_P_Active;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <TwoLanePed+0x790>)
 80013d4:	2203      	movs	r2, #3
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e002      	b.n	80013e0 <TwoLanePed+0x744>
			}else{
				nextState = V_Active;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <TwoLanePed+0x790>)
 80013dc:	2202      	movs	r2, #2
 80013de:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <TwoLanePed+0x794>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d014      	beq.n	8001418 <TwoLanePed+0x77c>
				action.KeepStateFor = YELLOW_DELAY;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <TwoLanePed+0x78c>)
 80013f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013f4:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <TwoLanePed+0x78c>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <TwoLanePed+0x794>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001402:	e009      	b.n	8001418 <TwoLanePed+0x77c>
			break;
 8001404:	bf00      	nop
 8001406:	e008      	b.n	800141a <TwoLanePed+0x77e>
			break;
 8001408:	bf00      	nop
 800140a:	e006      	b.n	800141a <TwoLanePed+0x77e>
			break;
 800140c:	bf00      	nop
 800140e:	e004      	b.n	800141a <TwoLanePed+0x77e>
			break;
 8001410:	bf00      	nop
 8001412:	e002      	b.n	800141a <TwoLanePed+0x77e>
			break;
 8001414:	bf00      	nop
 8001416:	e000      	b.n	800141a <TwoLanePed+0x77e>
			break;
 8001418:	bf00      	nop
	}
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000035 	.word	0x20000035
 8001428:	20000038 	.word	0x20000038
 800142c:	20000034 	.word	0x20000034
 8001430:	20000036 	.word	0x20000036

08001434 <NoCarV>:

bool NoCarV(ButtonStates button){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	463b      	mov	r3, r7
 800143c:	e883 0003 	stmia.w	r3, {r0, r1}
	return !(button.TopCar | button.BottomCar);
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	787b      	ldrb	r3, [r7, #1]
 8001444:	4313      	orrs	r3, r2
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2301      	movne	r3, #1
 800144e:	2300      	moveq	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f083 0301 	eor.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <NoCarH>:

bool NoCarH(ButtonStates button){
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	463b      	mov	r3, r7
 8001472:	e883 0003 	stmia.w	r3, {r0, r1}
	return !(button.LeftCar | button.RightCar);
 8001476:	783a      	ldrb	r2, [r7, #0]
 8001478:	78bb      	ldrb	r3, [r7, #2]
 800147a:	4313      	orrs	r3, r2
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf14      	ite	ne
 8001482:	2301      	movne	r3, #1
 8001484:	2300      	moveq	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_DMA_Init+0x38>)
 80014a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <MX_DMA_Init+0x38>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6493      	str	r3, [r2, #72]	; 0x48
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_DMA_Init+0x38>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	2039      	movs	r0, #57	; 0x39
 80014c4:	f001 fa64 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80014c8:	2039      	movs	r0, #57	; 0x39
 80014ca:	f001 fa7d 	bl	80029c8 <HAL_NVIC_EnableIRQ>

}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Delay */
  DelayHandle = osTimerNew(DelayCallback, osTimerOnce, NULL, &Delay_attributes);
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <MX_FREERTOS_Init+0x6c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	4819      	ldr	r0, [pc, #100]	; (800154c <MX_FREERTOS_Init+0x70>)
 80014e8:	f004 fe4e 	bl	8006188 <osTimerNew>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a18      	ldr	r2, [pc, #96]	; (8001550 <MX_FREERTOS_Init+0x74>)
 80014f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014f2:	4a18      	ldr	r2, [pc, #96]	; (8001554 <MX_FREERTOS_Init+0x78>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_FREERTOS_Init+0x7c>)
 80014f8:	f004 fd84 	bl	8006004 <osThreadNew>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <MX_FREERTOS_Init+0x80>)
 8001500:	6013      	str	r3, [r2, #0]

  /* creation of toggleBlueLight */
  toggleBlueLightHandle = osThreadNew(BlueLight, NULL, &toggleBlueLight_attributes);
 8001502:	4a17      	ldr	r2, [pc, #92]	; (8001560 <MX_FREERTOS_Init+0x84>)
 8001504:	2100      	movs	r1, #0
 8001506:	4817      	ldr	r0, [pc, #92]	; (8001564 <MX_FREERTOS_Init+0x88>)
 8001508:	f004 fd7c 	bl	8006004 <osThreadNew>
 800150c:	4603      	mov	r3, r0
 800150e:	4a16      	ldr	r2, [pc, #88]	; (8001568 <MX_FREERTOS_Init+0x8c>)
 8001510:	6013      	str	r3, [r2, #0]

  /* creation of UpdateInputOutp */
  UpdateInputOutpHandle = osThreadNew(inputOutput, NULL, &UpdateInputOutp_attributes);
 8001512:	4a16      	ldr	r2, [pc, #88]	; (800156c <MX_FREERTOS_Init+0x90>)
 8001514:	2100      	movs	r1, #0
 8001516:	4816      	ldr	r0, [pc, #88]	; (8001570 <MX_FREERTOS_Init+0x94>)
 8001518:	f004 fd74 	bl	8006004 <osThreadNew>
 800151c:	4603      	mov	r3, r0
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <MX_FREERTOS_Init+0x98>)
 8001520:	6013      	str	r3, [r2, #0]

  /* creation of updateStateTask */
  updateStateTaskHandle = osThreadNew(updateState, NULL, &updateStateTask_attributes);
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <MX_FREERTOS_Init+0x9c>)
 8001524:	2100      	movs	r1, #0
 8001526:	4815      	ldr	r0, [pc, #84]	; (800157c <MX_FREERTOS_Init+0xa0>)
 8001528:	f004 fd6c 	bl	8006004 <osThreadNew>
 800152c:	4603      	mov	r3, r0
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <MX_FREERTOS_Init+0xa4>)
 8001530:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  //initTrafficLogic(PedOneLane);
  //initTrafficLogic(NoPedTwoLane);
  initTrafficLogic(PedTwoLane);
 8001532:	2002      	movs	r0, #2
 8001534:	f7ff f83a 	bl	80005ac <initTrafficLogic>
  TrafficAction = getTrafficAction();
 8001538:	f7ff f890 	bl	800065c <getTrafficAction>
 800153c:	4603      	mov	r3, r0
 800153e:	4a11      	ldr	r2, [pc, #68]	; (8001584 <MX_FREERTOS_Init+0xa8>)
 8001540:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	08008f74 	.word	0x08008f74
 800154c:	080016a9 	.word	0x080016a9
 8001550:	20000060 	.word	0x20000060
 8001554:	08008ee4 	.word	0x08008ee4
 8001558:	08001589 	.word	0x08001589
 800155c:	20000050 	.word	0x20000050
 8001560:	08008f08 	.word	0x08008f08
 8001564:	08001599 	.word	0x08001599
 8001568:	20000054 	.word	0x20000054
 800156c:	08008f2c 	.word	0x08008f2c
 8001570:	080015f1 	.word	0x080015f1
 8001574:	20000058 	.word	0x20000058
 8001578:	08008f50 	.word	0x08008f50
 800157c:	08001635 	.word	0x08001635
 8001580:	2000005c 	.word	0x2000005c
 8001584:	2000004c 	.word	0x2000004c

08001588 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001590:	2001      	movs	r0, #1
 8001592:	f004 fdc9 	bl	8006128 <osDelay>
 8001596:	e7fb      	b.n	8001590 <StartDefaultTask+0x8>

08001598 <BlueLight>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlueLight */
void BlueLight(void *argument)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueLight */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(TOGGLE_FREQ) ; // ms to ticks
 80015a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015a4:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80015a6:	f005 ffd3 	bl	8007550 <xTaskGetTickCount>
 80015aa:	4603      	mov	r3, r0
 80015ac:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if(TrafficAction->LeftPedWaiting){
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <BlueLight+0x54>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <BlueLight+0x26>
		  toggleBlueLeft();
 80015b8:	f000 fe3c 	bl	8002234 <toggleBlueLeft>
 80015bc:	e003      	b.n	80015c6 <BlueLight+0x2e>
	  } else {
		  ControlLight(BLUE_PED_LEFT, OFF);
 80015be:	2100      	movs	r1, #0
 80015c0:	2011      	movs	r0, #17
 80015c2:	f000 fe0f 	bl	80021e4 <ControlLight>
	  }
	  if(TrafficAction->TopPedWaiting){
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <BlueLight+0x54>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <BlueLight+0x3e>
		  toggleBlueTop();
 80015d0:	f000 fe46 	bl	8002260 <toggleBlueTop>
 80015d4:	e003      	b.n	80015de <BlueLight+0x46>
	  } else {
		  ControlLight(BLUE_PED_TOP, OFF);
 80015d6:	2100      	movs	r1, #0
 80015d8:	200b      	movs	r0, #11
 80015da:	f000 fe03 	bl	80021e4 <ControlLight>
	  }
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 fdef 	bl	80071c8 <vTaskDelayUntil>
	  if(TrafficAction->LeftPedWaiting){
 80015ea:	e7e0      	b.n	80015ae <BlueLight+0x16>
 80015ec:	2000004c 	.word	0x2000004c

080015f0 <inputOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_inputOutput */
void inputOutput(void *argument)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN inputOutput */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20) ; // ms to ticks
 80015f8:	2314      	movs	r3, #20
 80015fa:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 80015fc:	f005 ffa8 	bl	8007550 <xTaskGetTickCount>
 8001600:	4603      	mov	r3, r0
 8001602:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	  trafficInputs_Update();
 8001604:	f7fe ff68 	bl	80004d8 <trafficInputs_Update>
	  inputState = getInputState();
 8001608:	4c09      	ldr	r4, [pc, #36]	; (8001630 <inputOutput+0x40>)
 800160a:	463b      	mov	r3, r7
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ffbb 	bl	8000588 <getInputState>
 8001612:	4622      	mov	r2, r4
 8001614:	463b      	mov	r3, r7
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	6010      	str	r0, [r2, #0]
 800161a:	889b      	ldrh	r3, [r3, #4]
 800161c:	8093      	strh	r3, [r2, #4]
	  updateLights();
 800161e:	f000 fdf7 	bl	8002210 <updateLights>
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	6979      	ldr	r1, [r7, #20]
 8001628:	4618      	mov	r0, r3
 800162a:	f005 fdcd 	bl	80071c8 <vTaskDelayUntil>
	  trafficInputs_Update();
 800162e:	e7e9      	b.n	8001604 <inputOutput+0x14>
 8001630:	20000044 	.word	0x20000044

08001634 <updateState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateState */
void updateState(void *argument)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateState */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(200) ; // ms to ticks
 800163c:	23c8      	movs	r3, #200	; 0xc8
 800163e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8001640:	f005 ff86 	bl	8007550 <xTaskGetTickCount>
 8001644:	4603      	mov	r3, r0
 8001646:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  TrafficCrossing(inputState);
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <updateState+0x64>)
 800164a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800164e:	f7fe ffdb 	bl	8000608 <TrafficCrossing>
	  if(TrafficAction->StartTimerForNextState){
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <updateState+0x68>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d015      	beq.n	8001688 <updateState+0x54>
		  osTimerStart(DelayHandle, pdMS_TO_TICKS(TrafficAction->KeepStateFor));
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <updateState+0x6c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <updateState+0x68>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	4619      	mov	r1, r3
 8001668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <updateState+0x70>)
 8001672:	fba1 1303 	umull	r1, r3, r1, r3
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f004 fe00 	bl	8006280 <osTimerStart>
		  TrafficAction->StartTimerForNextState = false;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <updateState+0x68>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	709a      	strb	r2, [r3, #2]
	  }
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	68f9      	ldr	r1, [r7, #12]
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fd9a 	bl	80071c8 <vTaskDelayUntil>
	  TrafficCrossing(inputState);
 8001694:	e7d8      	b.n	8001648 <updateState+0x14>
 8001696:	bf00      	nop
 8001698:	20000044 	.word	0x20000044
 800169c:	2000004c 	.word	0x2000004c
 80016a0:	20000060 	.word	0x20000060
 80016a4:	10624dd3 	.word	0x10624dd3

080016a8 <DelayCallback>:
  /* USER CODE END updateState */
}

/* DelayCallback function */
void DelayCallback(void *argument)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DelayCallback */
	ActivateNextState();
 80016b0:	f7fe ffde 	bl	8000670 <ActivateNextState>
  /* USER CODE END DelayCallback */
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <MX_GPIO_Init+0x168>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a53      	ldr	r2, [pc, #332]	; (8001824 <MX_GPIO_Init+0x168>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b51      	ldr	r3, [pc, #324]	; (8001824 <MX_GPIO_Init+0x168>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <MX_GPIO_Init+0x168>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <MX_GPIO_Init+0x168>)
 80016f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <MX_GPIO_Init+0x168>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b48      	ldr	r3, [pc, #288]	; (8001824 <MX_GPIO_Init+0x168>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a47      	ldr	r2, [pc, #284]	; (8001824 <MX_GPIO_Init+0x168>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b45      	ldr	r3, [pc, #276]	; (8001824 <MX_GPIO_Init+0x168>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b42      	ldr	r3, [pc, #264]	; (8001824 <MX_GPIO_Init+0x168>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a41      	ldr	r2, [pc, #260]	; (8001824 <MX_GPIO_Init+0x168>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <MX_GPIO_Init+0x168>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Reset_595_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f001 fd0c 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	4838      	ldr	r0, [pc, #224]	; (8001828 <MX_GPIO_Init+0x16c>)
 8001748:	f001 fd06 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	4836      	ldr	r0, [pc, #216]	; (800182c <MX_GPIO_Init+0x170>)
 8001752:	f001 fd01 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800175c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	482f      	ldr	r0, [pc, #188]	; (800182c <MX_GPIO_Init+0x170>)
 800176e:	f001 fb31 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Reset_595_Pin;
 8001772:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f001 fb21 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_CAR_Pin;
 8001792:	2310      	movs	r3, #16
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_CAR_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4821      	ldr	r0, [pc, #132]	; (800182c <MX_GPIO_Init+0x170>)
 80017a6:	f001 fb15 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STCP_595_Pin;
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STCP_595_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4819      	ldr	r0, [pc, #100]	; (8001828 <MX_GPIO_Init+0x16c>)
 80017c4:	f001 fb06 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_CAR_Pin|TL3_CAR_Pin|PL2_Switch_Pin;
 80017c8:	f44f 43c1 	mov.w	r3, #24704	; 0x6080
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4812      	ldr	r0, [pc, #72]	; (8001828 <MX_GPIO_Init+0x16c>)
 80017de:	f001 faf9 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_595_Pin;
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_595_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_GPIO_Init+0x170>)
 80017fa:	f001 faeb 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TL4_CAR_Pin|PL1_Switch_Pin;
 80017fe:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001808:	2301      	movs	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f001 fadd 	bl	8002dd4 <HAL_GPIO_Init>

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	48000400 	.word	0x48000400
 800182c:	48000800 	.word	0x48000800

08001830 <hc595_init>:

#include "hc595.h"

static SPI_HandleTypeDef *SPI_Handle;

void hc595_init(SPI_HandleTypeDef *_hspi3){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	SPI_Handle = _hspi3;
 8001838:	4a09      	ldr	r2, [pc, #36]	; (8001860 <hc595_init+0x30>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(Reset_595_GPIO_Port, Reset_595_Pin, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001848:	f001 fc86 	bl	8003158 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <hc595_init+0x34>)
 8001852:	f001 fc81 	bl	8003158 <HAL_GPIO_WritePin>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000064 	.word	0x20000064
 8001864:	48000800 	.word	0x48000800

08001868 <hc595_update>:
 *	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);
 * 	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 * }
*/

void hc595_update(uint8_t* dataToSend){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    HAL_SPI_Transmit_DMA(SPI_Handle, dataToSend, 3);
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <hc595_update+0x20>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2203      	movs	r2, #3
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 f87b 	bl	8004974 <HAL_SPI_Transmit_DMA>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000064 	.word	0x20000064

0800188c <HAL_SPI_TxCpltCallback>:

// DMA Transfer Complete callback
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    if (hspi == SPI_Handle) {
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_SPI_TxCpltCallback+0x34>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	429a      	cmp	r2, r3
 800189c:	d10b      	bne.n	80018b6 <HAL_SPI_TxCpltCallback+0x2a>
        HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <HAL_SPI_TxCpltCallback+0x38>)
 80018a6:	f001 fc57 	bl	8003158 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <HAL_SPI_TxCpltCallback+0x38>)
 80018b2:	f001 fc51 	bl	8003158 <HAL_GPIO_WritePin>
    }
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000064 	.word	0x20000064
 80018c4:	48000400 	.word	0x48000400

080018c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018cc:	f000 ff44 	bl	8002758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d0:	f000 f818 	bl	8001904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d4:	f7ff fef2 	bl	80016bc <MX_GPIO_Init>
  MX_DMA_Init();
 80018d8:	f7ff fde2 	bl	80014a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018dc:	f000 fe86 	bl	80025ec <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80018e0:	f000 f87a 	bl	80019d8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  initTrafficLights(&hspi3);
 80018e4:	4806      	ldr	r0, [pc, #24]	; (8001900 <main+0x38>)
 80018e6:	f000 fc0f 	bl	8002108 <initTrafficLights>
  init_TrafficInputs();
 80018ea:	f7fe fdef 	bl	80004cc <init_TrafficInputs>
  Test_Program();
 80018ee:	f000 fa13 	bl	8001d18 <Test_Program>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80018f2:	f004 fb3d 	bl	8005f70 <osKernelInitialize>
  MX_FREERTOS_Init();
 80018f6:	f7ff fdf1 	bl	80014dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80018fa:	f004 fb5d 	bl	8005fb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80018fe:	e7fe      	b.n	80018fe <main+0x36>
 8001900:	20000068 	.word	0x20000068

08001904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b096      	sub	sp, #88	; 0x58
 8001908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2244      	movs	r2, #68	; 0x44
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f007 fa72 	bl	8008dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001926:	f44f 7000 	mov.w	r0, #512	; 0x200
 800192a:	f001 fc3b 	bl	80031a4 <HAL_PWREx_ControlVoltageScaling>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001934:	f000 f84a 	bl	80019cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001938:	2302      	movs	r3, #2
 800193a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001940:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001942:	2310      	movs	r3, #16
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001946:	2302      	movs	r3, #2
 8001948:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800194a:	2302      	movs	r3, #2
 800194c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800194e:	2301      	movs	r3, #1
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001952:	230a      	movs	r3, #10
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001956:	2307      	movs	r3, #7
 8001958:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800195a:	2302      	movs	r3, #2
 800195c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800195e:	2302      	movs	r3, #2
 8001960:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4618      	mov	r0, r3
 8001968:	f001 fc72 	bl	8003250 <HAL_RCC_OscConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001972:	f000 f82b 	bl	80019cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001976:	230f      	movs	r3, #15
 8001978:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197a:	2303      	movs	r3, #3
 800197c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	2104      	movs	r1, #4
 800198e:	4618      	mov	r0, r3
 8001990:	f002 f83a 	bl	8003a08 <HAL_RCC_ClockConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800199a:	f000 f817 	bl	80019cc <Error_Handler>
  }
}
 800199e:	bf00      	nop
 80019a0:	3758      	adds	r7, #88	; 0x58
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ba:	f000 feed 	bl	8002798 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40012c00 	.word	0x40012c00

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>
	...

080019d8 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <MX_SPI3_Init+0x78>)
 80019e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a0e:	2210      	movs	r2, #16
 8001a10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a26:	2207      	movs	r2, #7
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a32:	2208      	movs	r2, #8
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a38:	f002 fef8 	bl	800482c <HAL_SPI_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001a42:	f7ff ffc3 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000068 	.word	0x20000068
 8001a50:	40003c00 	.word	0x40003c00

08001a54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <HAL_SPI_MspInit+0x108>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d16d      	bne.n	8001b52 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a76:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <HAL_SPI_MspInit+0x10c>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	4a39      	ldr	r2, [pc, #228]	; (8001b60 <HAL_SPI_MspInit+0x10c>)
 8001a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a80:	6593      	str	r3, [r2, #88]	; 0x58
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_SPI_MspInit+0x10c>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_SPI_MspInit+0x10c>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a33      	ldr	r2, [pc, #204]	; (8001b60 <HAL_SPI_MspInit+0x10c>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_SPI_MspInit+0x10c>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_SPI_MspInit+0x10c>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a2d      	ldr	r2, [pc, #180]	; (8001b60 <HAL_SPI_MspInit+0x10c>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_SPI_MspInit+0x10c>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ad0:	2306      	movs	r3, #6
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4822      	ldr	r0, [pc, #136]	; (8001b64 <HAL_SPI_MspInit+0x110>)
 8001adc:	f001 f97a 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001af0:	2306      	movs	r3, #6
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	481b      	ldr	r0, [pc, #108]	; (8001b68 <HAL_SPI_MspInit+0x114>)
 8001afc:	f001 f96a 	bl	8002dd4 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b02:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_SPI_MspInit+0x11c>)
 8001b04:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b08:	2203      	movs	r2, #3
 8001b0a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b0e:	2210      	movs	r2, #16
 8001b10:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b38:	f000 ff54 	bl	80029e4 <HAL_DMA_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001b42:	f7ff ff43 	bl	80019cc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_SPI_MspInit+0x118>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40003c00 	.word	0x40003c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	48000800 	.word	0x48000800
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	200000cc 	.word	0x200000cc
 8001b70:	4002041c 	.word	0x4002041c

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_MspInit+0x4c>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_MspInit+0x4c>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6613      	str	r3, [r2, #96]	; 0x60
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_MspInit+0x4c>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_MspInit+0x4c>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <HAL_MspInit+0x4c>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_MspInit+0x4c>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	210f      	movs	r1, #15
 8001bae:	f06f 0001 	mvn.w	r0, #1
 8001bb2:	f000 feed 	bl	8002990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_InitTick+0xc8>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_InitTick+0xc8>)
 8001bd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_InitTick+0xc8>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bea:	f107 020c 	add.w	r2, r7, #12
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 f8cb 	bl	8003d90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bfa:	f002 f8b3 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 8001bfe:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <HAL_InitTick+0xcc>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	0c9b      	lsrs	r3, r3, #18
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_InitTick+0xd0>)
 8001c10:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_InitTick+0xd4>)
 8001c12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <HAL_InitTick+0xd0>)
 8001c16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c1a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_InitTick+0xd0>)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_InitTick+0xd0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_InitTick+0xd0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_InitTick+0xd0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c34:	4817      	ldr	r0, [pc, #92]	; (8001c94 <HAL_InitTick+0xd0>)
 8001c36:	f003 f987 	bl	8004f48 <HAL_TIM_Base_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11b      	bne.n	8001c80 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c48:	4812      	ldr	r0, [pc, #72]	; (8001c94 <HAL_InitTick+0xd0>)
 8001c4a:	f003 f9df 	bl	800500c <HAL_TIM_Base_Start_IT>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d111      	bne.n	8001c80 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c5c:	2019      	movs	r0, #25
 8001c5e:	f000 feb3 	bl	80029c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d808      	bhi.n	8001c7a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	2019      	movs	r0, #25
 8001c6e:	f000 fe8f 	bl	8002990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_InitTick+0xd8>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e002      	b.n	8001c80 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3730      	adds	r7, #48	; 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	431bde83 	.word	0x431bde83
 8001c94:	20000114 	.word	0x20000114
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001cd2:	f003 fa0b 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000114 	.word	0x20000114

08001ce0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA2_Channel2_IRQHandler+0x10>)
 8001ce6:	f000 ff95 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200000cc 	.word	0x200000cc

08001cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Test_Program>:
//void activateTopBottom();
//void activateLeftRight();
//void activateTransition();
TrafficCrossingAction *TrafficActionTest;

void Test_Program(){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	//initTrafficLogic(PedOneLane);
	//initTrafficLogic(NoPedTwoLane);
	initTrafficLogic(PedTwoLane);
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f7fe fc45 	bl	80005ac <initTrafficLogic>
	updateLights();
 8001d22:	f000 fa75 	bl	8002210 <updateLights>
	TrafficActionTest = getTrafficAction();
 8001d26:	f7fe fc99 	bl	800065c <getTrafficAction>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <Test_Program+0x3c>)
 8001d2e:	6013      	str	r3, [r2, #0]
	testTrafficLogicTwoLanePed();
 8001d30:	f000 f842 	bl	8001db8 <testTrafficLogicTwoLanePed>
	while(1){
		turnOnAllLights();
 8001d34:	f000 fac2 	bl	80022bc <turnOnAllLights>
		updateLights();
 8001d38:	f000 fa6a 	bl	8002210 <updateLights>
		HAL_Delay(50);
 8001d3c:	2032      	movs	r0, #50	; 0x32
 8001d3e:	f000 fd4b 	bl	80027d8 <HAL_Delay>
		turnOffAllLights();
 8001d42:	f000 faa3 	bl	800228c <turnOffAllLights>
		updateLights();
 8001d46:	f000 fa63 	bl	8002210 <updateLights>
		HAL_Delay(50);
 8001d4a:	2032      	movs	r0, #50	; 0x32
 8001d4c:	f000 fd44 	bl	80027d8 <HAL_Delay>
		turnOnAllLights();
 8001d50:	e7f0      	b.n	8001d34 <Test_Program+0x1c>
 8001d52:	bf00      	nop
 8001d54:	20000160 	.word	0x20000160

08001d58 <simulateTestScenario>:
		//testHC595();
	}
}

// Function to simulate one test scenario
void simulateTestScenario(ButtonStates testInput) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	463b      	mov	r3, r7
 8001d60:	e883 0003 	stmia.w	r3, {r0, r1}

    // Run your traffic logic
    TrafficCrossing(testInput); // Use the fake input state
 8001d64:	463b      	mov	r3, r7
 8001d66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d6a:	f7fe fc4d 	bl	8000608 <TrafficCrossing>
    if(TrafficActionTest->LeftPedWaiting){
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <simulateTestScenario+0x5c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <simulateTestScenario+0x2a>
		ControlLight(BLUE_PED_LEFT, ON);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2011      	movs	r0, #17
 8001d7c:	f000 fa32 	bl	80021e4 <ControlLight>
 8001d80:	e003      	b.n	8001d8a <simulateTestScenario+0x32>
	} else {
		ControlLight(BLUE_PED_LEFT, OFF);
 8001d82:	2100      	movs	r1, #0
 8001d84:	2011      	movs	r0, #17
 8001d86:	f000 fa2d 	bl	80021e4 <ControlLight>
	}

	if(TrafficActionTest->TopPedWaiting){
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <simulateTestScenario+0x5c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <simulateTestScenario+0x46>
		ControlLight(BLUE_PED_TOP, ON);
 8001d94:	2101      	movs	r1, #1
 8001d96:	200b      	movs	r0, #11
 8001d98:	f000 fa24 	bl	80021e4 <ControlLight>
 8001d9c:	e003      	b.n	8001da6 <simulateTestScenario+0x4e>
	} else {
		ControlLight(BLUE_PED_TOP, OFF);
 8001d9e:	2100      	movs	r1, #0
 8001da0:	200b      	movs	r0, #11
 8001da2:	f000 fa1f 	bl	80021e4 <ControlLight>
	}
    updateLights();
 8001da6:	f000 fa33 	bl	8002210 <updateLights>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000160 	.word	0x20000160

08001db8 <testTrafficLogicTwoLanePed>:


void testTrafficLogicTwoLanePed() {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
	int startAt = 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 64; i++) { //2^6 different scenarios
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e091      	b.n	8001eec <testTrafficLogicTwoLanePed+0x134>
        ButtonStates scenario;
        scenario.LeftCar = (i & 0x01) != 0; // 1st bit
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf14      	ite	ne
 8001dd2:	2301      	movne	r3, #1
 8001dd4:	2300      	moveq	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	713b      	strb	r3, [r7, #4]
        scenario.BottomCar = (i & 0x02) != 0; // 2nd bit
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	717b      	strb	r3, [r7, #5]
        scenario.RightCar = (i & 0x04) != 0; // 3rd bit
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf14      	ite	ne
 8001df6:	2301      	movne	r3, #1
 8001df8:	2300      	moveq	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	71bb      	strb	r3, [r7, #6]
        scenario.TopCar = (i & 0x08) != 0; // 4th bit
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	71fb      	strb	r3, [r7, #7]
        scenario.LeftPed = (i & 0x10) != 0; // 5th bit
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf14      	ite	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	2300      	moveq	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	723b      	strb	r3, [r7, #8]
        scenario.TopPed = (i & 0x20) != 0; // 6th bit
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	727b      	strb	r3, [r7, #9]

        for(int j = 0; j < 10; j++){ //Test each scenario ten times.
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e052      	b.n	8001ee0 <testTrafficLogicTwoLanePed+0x128>
        	simulateTestScenario(scenario);
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e40:	f7ff ff8a 	bl	8001d58 <simulateTestScenario>

			if (TrafficActionTest->StartTimerForNextState) {
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <testTrafficLogicTwoLanePed+0x148>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	789b      	ldrb	r3, [r3, #2]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d029      	beq.n	8001ea2 <testTrafficLogicTwoLanePed+0xea>
				if(TrafficActionTest->KeepStateFor == 1){ //Indicate "no delay" through blinking both blue lights.
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <testTrafficLogicTwoLanePed+0x148>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	889b      	ldrh	r3, [r3, #4]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d112      	bne.n	8001e7e <testTrafficLogicTwoLanePed+0xc6>
					toggleBlueLeft();
 8001e58:	f000 f9ec 	bl	8002234 <toggleBlueLeft>
					toggleBlueTop();
 8001e5c:	f000 fa00 	bl	8002260 <toggleBlueTop>
					updateLights();
 8001e60:	f000 f9d6 	bl	8002210 <updateLights>
					HAL_Delay(200/10);
 8001e64:	2014      	movs	r0, #20
 8001e66:	f000 fcb7 	bl	80027d8 <HAL_Delay>
					toggleBlueLeft();
 8001e6a:	f000 f9e3 	bl	8002234 <toggleBlueLeft>
					toggleBlueTop();
 8001e6e:	f000 f9f7 	bl	8002260 <toggleBlueTop>
					updateLights();
 8001e72:	f000 f9cd 	bl	8002210 <updateLights>
					HAL_Delay(200/10);
 8001e76:	2014      	movs	r0, #20
 8001e78:	f000 fcae 	bl	80027d8 <HAL_Delay>
 8001e7c:	e00a      	b.n	8001e94 <testTrafficLogicTwoLanePed+0xdc>
				}else{
					HAL_Delay(TrafficActionTest->KeepStateFor/10);
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <testTrafficLogicTwoLanePed+0x148>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	889b      	ldrh	r3, [r3, #4]
 8001e84:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <testTrafficLogicTwoLanePed+0x14c>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	08db      	lsrs	r3, r3, #3
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fca2 	bl	80027d8 <HAL_Delay>
				}

				TrafficActionTest->StartTimerForNextState = false;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <testTrafficLogicTwoLanePed+0x148>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	709a      	strb	r2, [r3, #2]
				ActivateNextState();
 8001e9c:	f7fe fbe8 	bl	8000670 <ActivateNextState>
 8001ea0:	e011      	b.n	8001ec6 <testTrafficLogicTwoLanePed+0x10e>
			}else{
				toggleBlueLeft();
 8001ea2:	f000 f9c7 	bl	8002234 <toggleBlueLeft>
				toggleBlueTop();
 8001ea6:	f000 f9db 	bl	8002260 <toggleBlueTop>
				updateLights();
 8001eaa:	f000 f9b1 	bl	8002210 <updateLights>
				HAL_Delay(200/10);
 8001eae:	2014      	movs	r0, #20
 8001eb0:	f000 fc92 	bl	80027d8 <HAL_Delay>
				toggleBlueLeft();
 8001eb4:	f000 f9be 	bl	8002234 <toggleBlueLeft>
				toggleBlueTop();
 8001eb8:	f000 f9d2 	bl	8002260 <toggleBlueTop>
				updateLights();
 8001ebc:	f000 f9a8 	bl	8002210 <updateLights>
				HAL_Delay(200/10);
 8001ec0:	2014      	movs	r0, #20
 8001ec2:	f000 fc89 	bl	80027d8 <HAL_Delay>
			}
			if(hasError()){
 8001ec6:	f000 f81f 	bl	8001f08 <hasError>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <testTrafficLogicTwoLanePed+0x122>
				while(1){
					turnOnAllLights();
 8001ed0:	f000 f9f4 	bl	80022bc <turnOnAllLights>
					updateLights();
 8001ed4:	f000 f99c 	bl	8002210 <updateLights>
					turnOnAllLights();
 8001ed8:	e7fa      	b.n	8001ed0 <testTrafficLogicTwoLanePed+0x118>
        for(int j = 0; j < 10; j++){ //Test each scenario ten times.
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	3301      	adds	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b09      	cmp	r3, #9
 8001ee4:	dda9      	ble.n	8001e3a <testTrafficLogicTwoLanePed+0x82>
    for (int i = 0; i < 64; i++) { //2^6 different scenarios
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b3f      	cmp	r3, #63	; 0x3f
 8001ef0:	f77f af6a 	ble.w	8001dc8 <testTrafficLogicTwoLanePed+0x10>

        }


    }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000160 	.word	0x20000160
 8001f04:	cccccccd 	.word	0xcccccccd

08001f08 <hasError>:

bool GetRedPedLeft();
bool GetGreenPedLeft();
bool GetBluePedLeft();
*/
bool hasError(){
 8001f08:	b598      	push	{r3, r4, r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	//Two conflicting lanes green at the same time
	if(GetGreenTop() || GetGreenBottom()){
 8001f0c:	f000 fa66 	bl	80023dc <GetGreenTop>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d104      	bne.n	8001f20 <hasError+0x18>
 8001f16:	f000 faa9 	bl	800246c <GetGreenBottom>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d011      	beq.n	8001f44 <hasError+0x3c>
		if(!(GetRedLeft() && GetRedRight())){
 8001f20:	f000 faec 	bl	80024fc <GetRedLeft>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f083 0301 	eor.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <hasError+0x38>
 8001f30:	f000 f9dc 	bl	80022ec <GetRedRight>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <hasError+0x3c>
			return true;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0de      	b.n	8002102 <hasError+0x1fa>
		}
	}

	if(GetGreenLeft() || GetGreenRight()){
 8001f44:	f000 fb0a 	bl	800255c <GetGreenLeft>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d104      	bne.n	8001f58 <hasError+0x50>
 8001f4e:	f000 f9fd 	bl	800234c <GetGreenRight>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d011      	beq.n	8001f7c <hasError+0x74>
		if(!(GetRedTop() && GetRedBottom())){
 8001f58:	f000 fa10 	bl	800237c <GetRedTop>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f083 0301 	eor.w	r3, r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <hasError+0x70>
 8001f68:	f000 fa50 	bl	800240c <GetRedBottom>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <hasError+0x74>
			return true;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0c2      	b.n	8002102 <hasError+0x1fa>
		}
	}

	if(GetGreenPedLeft()){
 8001f7c:	f000 fb1e 	bl	80025bc <GetGreenPedLeft>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d011      	beq.n	8001faa <hasError+0xa2>
		if(!(GetRedLeft() && GetRedRight())){
 8001f86:	f000 fab9 	bl	80024fc <GetRedLeft>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d107      	bne.n	8001fa6 <hasError+0x9e>
 8001f96:	f000 f9a9 	bl	80022ec <GetRedRight>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f083 0301 	eor.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <hasError+0xa2>
			return true;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0ab      	b.n	8002102 <hasError+0x1fa>
		}
	}

	if(GetGreenPedTop()){
 8001faa:	f000 fa8f 	bl	80024cc <GetGreenPedTop>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d011      	beq.n	8001fd8 <hasError+0xd0>
		if(!(GetRedTop() && GetRedBottom())){
 8001fb4:	f000 f9e2 	bl	800237c <GetRedTop>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d107      	bne.n	8001fd4 <hasError+0xcc>
 8001fc4:	f000 fa22 	bl	800240c <GetRedBottom>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <hasError+0xd0>
			return true;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e094      	b.n	8002102 <hasError+0x1fa>
		}
	}

	//Two lights on the same traffic light is on at the same time
	if (!((GetRedTop() ^ GetYellowTop() ^ GetGreenTop()) && !(GetRedTop() && GetYellowTop() && GetGreenTop()))) {
 8001fd8:	f000 f9d0 	bl	800237c <GetRedTop>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461c      	mov	r4, r3
 8001fe0:	f000 f9e4 	bl	80023ac <GetYellowTop>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4063      	eors	r3, r4
 8001fe8:	b2dc      	uxtb	r4, r3
 8001fea:	f000 f9f7 	bl	80023dc <GetGreenTop>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	429c      	cmp	r4, r3
 8001ff2:	d00e      	beq.n	8002012 <hasError+0x10a>
 8001ff4:	f000 f9c2 	bl	800237c <GetRedTop>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <hasError+0x10e>
 8001ffe:	f000 f9d5 	bl	80023ac <GetYellowTop>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <hasError+0x10e>
 8002008:	f000 f9e8 	bl	80023dc <GetGreenTop>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <hasError+0x10e>
		return true;
 8002012:	2301      	movs	r3, #1
 8002014:	e075      	b.n	8002102 <hasError+0x1fa>
	}
	if (!((GetRedBottom() ^ GetYellowBottom() ^ GetGreenBottom()) && !(GetRedBottom() && GetYellowBottom() && GetGreenBottom()))) {
 8002016:	f000 f9f9 	bl	800240c <GetRedBottom>
 800201a:	4603      	mov	r3, r0
 800201c:	461c      	mov	r4, r3
 800201e:	f000 fa0d 	bl	800243c <GetYellowBottom>
 8002022:	4603      	mov	r3, r0
 8002024:	4063      	eors	r3, r4
 8002026:	b2dc      	uxtb	r4, r3
 8002028:	f000 fa20 	bl	800246c <GetGreenBottom>
 800202c:	4603      	mov	r3, r0
 800202e:	429c      	cmp	r4, r3
 8002030:	d00e      	beq.n	8002050 <hasError+0x148>
 8002032:	f000 f9eb 	bl	800240c <GetRedBottom>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <hasError+0x14c>
 800203c:	f000 f9fe 	bl	800243c <GetYellowBottom>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <hasError+0x14c>
 8002046:	f000 fa11 	bl	800246c <GetGreenBottom>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <hasError+0x14c>
		return true;
 8002050:	2301      	movs	r3, #1
 8002052:	e056      	b.n	8002102 <hasError+0x1fa>
	}
	if (!((GetRedLeft() ^ GetYellowLeft() ^ GetGreenLeft()) && !(GetRedLeft() && GetYellowLeft() && GetGreenLeft()))) {
 8002054:	f000 fa52 	bl	80024fc <GetRedLeft>
 8002058:	4603      	mov	r3, r0
 800205a:	461c      	mov	r4, r3
 800205c:	f000 fa66 	bl	800252c <GetYellowLeft>
 8002060:	4603      	mov	r3, r0
 8002062:	4063      	eors	r3, r4
 8002064:	b2dc      	uxtb	r4, r3
 8002066:	f000 fa79 	bl	800255c <GetGreenLeft>
 800206a:	4603      	mov	r3, r0
 800206c:	429c      	cmp	r4, r3
 800206e:	d00e      	beq.n	800208e <hasError+0x186>
 8002070:	f000 fa44 	bl	80024fc <GetRedLeft>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <hasError+0x18a>
 800207a:	f000 fa57 	bl	800252c <GetYellowLeft>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <hasError+0x18a>
 8002084:	f000 fa6a 	bl	800255c <GetGreenLeft>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <hasError+0x18a>
		return true;
 800208e:	2301      	movs	r3, #1
 8002090:	e037      	b.n	8002102 <hasError+0x1fa>
	}
	if (!((GetRedRight() ^ GetYellowRight() ^ GetGreenRight()) && !(GetRedRight() && GetYellowRight() && GetGreenRight()))) {
 8002092:	f000 f92b 	bl	80022ec <GetRedRight>
 8002096:	4603      	mov	r3, r0
 8002098:	461c      	mov	r4, r3
 800209a:	f000 f93f 	bl	800231c <GetYellowRight>
 800209e:	4603      	mov	r3, r0
 80020a0:	4063      	eors	r3, r4
 80020a2:	b2dc      	uxtb	r4, r3
 80020a4:	f000 f952 	bl	800234c <GetGreenRight>
 80020a8:	4603      	mov	r3, r0
 80020aa:	429c      	cmp	r4, r3
 80020ac:	d00e      	beq.n	80020cc <hasError+0x1c4>
 80020ae:	f000 f91d 	bl	80022ec <GetRedRight>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <hasError+0x1c8>
 80020b8:	f000 f930 	bl	800231c <GetYellowRight>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <hasError+0x1c8>
 80020c2:	f000 f943 	bl	800234c <GetGreenRight>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <hasError+0x1c8>
		return true;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e018      	b.n	8002102 <hasError+0x1fa>
	}

	// Check for pedestrian lights
	if (GetGreenPedTop() && GetRedPedTop()) {
 80020d0:	f000 f9fc 	bl	80024cc <GetGreenPedTop>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <hasError+0x1e0>
 80020da:	f000 f9df 	bl	800249c <GetRedPedTop>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <hasError+0x1e0>
		return true;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e00c      	b.n	8002102 <hasError+0x1fa>
	}
	if (GetGreenPedLeft() && GetRedPedLeft()) {
 80020e8:	f000 fa68 	bl	80025bc <GetGreenPedLeft>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <hasError+0x1f8>
 80020f2:	f000 fa4b 	bl	800258c <GetRedPedLeft>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <hasError+0x1f8>
		return true;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <hasError+0x1fa>
	}

	return false;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd98      	pop	{r3, r4, r7, pc}
	...

08002108 <initTrafficLights>:
};

static uint8_t buffer[3] = {0, 0, 0};
static bool lightsChanged;

void initTrafficLights(SPI_HandleTypeDef *_hspi3){
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	lightsChanged = false;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <initTrafficLights+0x3c>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
	hc595_init(_hspi3);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fb8a 	bl	8001830 <hc595_init>
	for(int i = 0; i < 3; i++){
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e007      	b.n	8002132 <initTrafficLights+0x2a>
		buffer[i] = 0;
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <initTrafficLights+0x40>)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3301      	adds	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b02      	cmp	r3, #2
 8002136:	ddf4      	ble.n	8002122 <initTrafficLights+0x1a>
	}
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000167 	.word	0x20000167
 8002148:	20000164 	.word	0x20000164

0800214c <setLight>:

void setLight(LightConfig config, LightState state) {
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	e883 0003 	stmia.w	r3, {r0, r1}
 800215a:	4613      	mov	r3, r2
 800215c:	71fb      	strb	r3, [r7, #7]
    uint8_t currentMask = (1 << config.bitPosition);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	75fb      	strb	r3, [r7, #23]
    bool isLightCurrentlyOn = (buffer[config.bufferIndex] & currentMask) != 0;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <setLight+0x90>)
 800216c:	5cd2      	ldrb	r2, [r2, r3]
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	4013      	ands	r3, r2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf14      	ite	ne
 8002178:	2301      	movne	r3, #1
 800217a:	2300      	moveq	r3, #0
 800217c:	75bb      	strb	r3, [r7, #22]
    bool isLightBeingTurnedOn = (state == ON);
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b01      	cmp	r3, #1
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	757b      	strb	r3, [r7, #21]

    if (isLightCurrentlyOn != isLightBeingTurnedOn) {
 800218a:	7dba      	ldrb	r2, [r7, #22]
 800218c:	7d7b      	ldrb	r3, [r7, #21]
 800218e:	429a      	cmp	r2, r3
 8002190:	d01d      	beq.n	80021ce <setLight+0x82>
        lightsChanged = true;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <setLight+0x94>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]

        if (isLightBeingTurnedOn) {
 8002198:	7d7b      	ldrb	r3, [r7, #21]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <setLight+0x66>
            buffer[config.bufferIndex] |= currentMask;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <setLight+0x90>)
 80021a2:	5cd1      	ldrb	r1, [r2, r3]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	7dfa      	ldrb	r2, [r7, #23]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	b2d1      	uxtb	r1, r2
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <setLight+0x90>)
 80021ae:	54d1      	strb	r1, [r2, r3]
        } else {
            buffer[config.bufferIndex] &= ~currentMask;
        }
    }
}
 80021b0:	e00d      	b.n	80021ce <setLight+0x82>
            buffer[config.bufferIndex] &= ~currentMask;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4a09      	ldr	r2, [pc, #36]	; (80021dc <setLight+0x90>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	b25a      	sxtb	r2, r3
 80021ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021be:	43db      	mvns	r3, r3
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	4013      	ands	r3, r2
 80021c4:	b25a      	sxtb	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	b2d1      	uxtb	r1, r2
 80021ca:	4a04      	ldr	r2, [pc, #16]	; (80021dc <setLight+0x90>)
 80021cc:	54d1      	strb	r1, [r2, r3]
}
 80021ce:	bf00      	nop
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000164 	.word	0x20000164
 80021e0:	20000167 	.word	0x20000167

080021e4 <ControlLight>:


void ControlLight(int lightId, LightState state) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
    setLight(lightConfigs[lightId], state);
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	4906      	ldr	r1, [pc, #24]	; (800220c <ControlLight+0x28>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021fe:	f7ff ffa5 	bl	800214c <setLight>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	08008fcc 	.word	0x08008fcc

08002210 <updateLights>:

void updateLights(){
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	if(lightsChanged){
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <updateLights+0x1c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <updateLights+0x18>
		hc595_update(buffer);
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <updateLights+0x20>)
 800221e:	f7ff fb23 	bl	8001868 <hc595_update>
		lightsChanged = false;
 8002222:	4b02      	ldr	r3, [pc, #8]	; (800222c <updateLights+0x1c>)
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
	}
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000167 	.word	0x20000167
 8002230:	20000164 	.word	0x20000164

08002234 <toggleBlueLeft>:

void toggleBlueLeft() {
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
	buffer[2] ^= 0b00100000;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <toggleBlueLeft+0x24>)
 800223a:	789b      	ldrb	r3, [r3, #2]
 800223c:	f083 0320 	eor.w	r3, r3, #32
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <toggleBlueLeft+0x24>)
 8002244:	709a      	strb	r2, [r3, #2]
	lightsChanged = true;
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <toggleBlueLeft+0x28>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000164 	.word	0x20000164
 800225c:	20000167 	.word	0x20000167

08002260 <toggleBlueTop>:

void toggleBlueTop() {
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	buffer[1] ^= 0b00100000;
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <toggleBlueTop+0x24>)
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	f083 0320 	eor.w	r3, r3, #32
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <toggleBlueTop+0x24>)
 8002270:	705a      	strb	r2, [r3, #1]
	lightsChanged = true;
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <toggleBlueTop+0x28>)
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000164 	.word	0x20000164
 8002288:	20000167 	.word	0x20000167

0800228c <turnOffAllLights>:

void turnOffAllLights() {
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	buffer[0] = 0;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <turnOffAllLights+0x28>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <turnOffAllLights+0x28>)
 8002298:	2200      	movs	r2, #0
 800229a:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <turnOffAllLights+0x28>)
 800229e:	2200      	movs	r2, #0
 80022a0:	709a      	strb	r2, [r3, #2]
	lightsChanged = true;
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <turnOffAllLights+0x2c>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000164 	.word	0x20000164
 80022b8:	20000167 	.word	0x20000167

080022bc <turnOnAllLights>:


void turnOnAllLights(){
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
	buffer[0] = 0b11111111;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <turnOnAllLights+0x28>)
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0b11111111;
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <turnOnAllLights+0x28>)
 80022c8:	22ff      	movs	r2, #255	; 0xff
 80022ca:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0b11111111;
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <turnOnAllLights+0x28>)
 80022ce:	22ff      	movs	r2, #255	; 0xff
 80022d0:	709a      	strb	r2, [r3, #2]
	lightsChanged = true;
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <turnOnAllLights+0x2c>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000164 	.word	0x20000164
 80022e8:	20000167 	.word	0x20000167

080022ec <GetRedRight>:
    }
    lightsChanged = true;
}

/********* Testing Functions **************/
bool GetRedRight() {
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[RED_RIGHT].bufferIndex] & (1 << lightConfigs[RED_RIGHT].bitPosition)) != 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <GetRedRight+0x2c>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	461a      	mov	r2, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	fa42 f303 	asr.w	r3, r2, r3
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000164 	.word	0x20000164

0800231c <GetYellowRight>:

bool GetYellowRight() {
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[YELLOW_RIGHT].bufferIndex] & (1 << lightConfigs[YELLOW_RIGHT].bitPosition)) != 0;
 8002320:	2300      	movs	r3, #0
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <GetYellowRight+0x2c>)
 8002324:	5cd3      	ldrb	r3, [r2, r3]
 8002326:	461a      	mov	r2, r3
 8002328:	2301      	movs	r3, #1
 800232a:	fa42 f303 	asr.w	r3, r2, r3
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000164 	.word	0x20000164

0800234c <GetGreenRight>:

bool GetGreenRight() {
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[GREEN_RIGHT].bufferIndex] & (1 << lightConfigs[GREEN_RIGHT].bitPosition)) != 0;
 8002350:	2300      	movs	r3, #0
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <GetGreenRight+0x2c>)
 8002354:	5cd3      	ldrb	r3, [r2, r3]
 8002356:	461a      	mov	r2, r3
 8002358:	2302      	movs	r3, #2
 800235a:	fa42 f303 	asr.w	r3, r2, r3
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf14      	ite	ne
 8002366:	2301      	movne	r3, #1
 8002368:	2300      	moveq	r3, #0
 800236a:	b2db      	uxtb	r3, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000164 	.word	0x20000164

0800237c <GetRedTop>:

bool GetRedTop() {
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[RED_TOP].bufferIndex] & (1 << lightConfigs[RED_TOP].bitPosition)) != 0;
 8002380:	2300      	movs	r3, #0
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <GetRedTop+0x2c>)
 8002384:	5cd3      	ldrb	r3, [r2, r3]
 8002386:	461a      	mov	r2, r3
 8002388:	2303      	movs	r3, #3
 800238a:	fa42 f303 	asr.w	r3, r2, r3
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf14      	ite	ne
 8002396:	2301      	movne	r3, #1
 8002398:	2300      	moveq	r3, #0
 800239a:	b2db      	uxtb	r3, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000164 	.word	0x20000164

080023ac <GetYellowTop>:

bool GetYellowTop() {
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[YELLOW_TOP].bufferIndex] & (1 << lightConfigs[YELLOW_TOP].bitPosition)) != 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <GetYellowTop+0x2c>)
 80023b4:	5cd3      	ldrb	r3, [r2, r3]
 80023b6:	461a      	mov	r2, r3
 80023b8:	2304      	movs	r3, #4
 80023ba:	fa42 f303 	asr.w	r3, r2, r3
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000164 	.word	0x20000164

080023dc <GetGreenTop>:

bool GetGreenTop() {
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[GREEN_TOP].bufferIndex] & (1 << lightConfigs[GREEN_TOP].bitPosition)) != 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	4a09      	ldr	r2, [pc, #36]	; (8002408 <GetGreenTop+0x2c>)
 80023e4:	5cd3      	ldrb	r3, [r2, r3]
 80023e6:	461a      	mov	r2, r3
 80023e8:	2305      	movs	r3, #5
 80023ea:	fa42 f303 	asr.w	r3, r2, r3
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf14      	ite	ne
 80023f6:	2301      	movne	r3, #1
 80023f8:	2300      	moveq	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000164 	.word	0x20000164

0800240c <GetRedBottom>:

bool GetRedBottom() {
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[RED_BOTTOM].bufferIndex] & (1 << lightConfigs[RED_BOTTOM].bitPosition)) != 0;
 8002410:	2301      	movs	r3, #1
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <GetRedBottom+0x2c>)
 8002414:	5cd3      	ldrb	r3, [r2, r3]
 8002416:	461a      	mov	r2, r3
 8002418:	2300      	movs	r3, #0
 800241a:	fa42 f303 	asr.w	r3, r2, r3
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000164 	.word	0x20000164

0800243c <GetYellowBottom>:

bool GetYellowBottom() {
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[YELLOW_BOTTOM].bufferIndex] & (1 << lightConfigs[YELLOW_BOTTOM].bitPosition)) != 0;
 8002440:	2301      	movs	r3, #1
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <GetYellowBottom+0x2c>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
 8002446:	461a      	mov	r2, r3
 8002448:	2301      	movs	r3, #1
 800244a:	fa42 f303 	asr.w	r3, r2, r3
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf14      	ite	ne
 8002456:	2301      	movne	r3, #1
 8002458:	2300      	moveq	r3, #0
 800245a:	b2db      	uxtb	r3, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000164 	.word	0x20000164

0800246c <GetGreenBottom>:

bool GetGreenBottom() {
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[GREEN_BOTTOM].bufferIndex] & (1 << lightConfigs[GREEN_BOTTOM].bitPosition)) != 0;
 8002470:	2301      	movs	r3, #1
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <GetGreenBottom+0x2c>)
 8002474:	5cd3      	ldrb	r3, [r2, r3]
 8002476:	461a      	mov	r2, r3
 8002478:	2302      	movs	r3, #2
 800247a:	fa42 f303 	asr.w	r3, r2, r3
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf14      	ite	ne
 8002486:	2301      	movne	r3, #1
 8002488:	2300      	moveq	r3, #0
 800248a:	b2db      	uxtb	r3, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000164 	.word	0x20000164

0800249c <GetRedPedTop>:

bool GetRedPedTop() {
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[RED_PED_TOP].bufferIndex] & (1 << lightConfigs[RED_PED_TOP].bitPosition)) != 0;
 80024a0:	2301      	movs	r3, #1
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <GetRedPedTop+0x2c>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	461a      	mov	r2, r3
 80024a8:	2303      	movs	r3, #3
 80024aa:	fa42 f303 	asr.w	r3, r2, r3
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000164 	.word	0x20000164

080024cc <GetGreenPedTop>:

bool GetGreenPedTop() {
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[GREEN_PED_TOP].bufferIndex] & (1 << lightConfigs[GREEN_PED_TOP].bitPosition)) != 0;
 80024d0:	2301      	movs	r3, #1
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <GetGreenPedTop+0x2c>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	461a      	mov	r2, r3
 80024d8:	2304      	movs	r3, #4
 80024da:	fa42 f303 	asr.w	r3, r2, r3
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000164 	.word	0x20000164

080024fc <GetRedLeft>:

bool GetBluePedTop() {
    return (buffer[lightConfigs[BLUE_PED_TOP].bufferIndex] & (1 << lightConfigs[BLUE_PED_TOP].bitPosition)) != 0;
}

bool GetRedLeft() {
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[RED_LEFT].bufferIndex] & (1 << lightConfigs[RED_LEFT].bitPosition)) != 0;
 8002500:	2302      	movs	r3, #2
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <GetRedLeft+0x2c>)
 8002504:	5cd3      	ldrb	r3, [r2, r3]
 8002506:	461a      	mov	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	fa42 f303 	asr.w	r3, r2, r3
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2db      	uxtb	r3, r3
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000164 	.word	0x20000164

0800252c <GetYellowLeft>:

bool GetYellowLeft() {
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[YELLOW_LEFT].bufferIndex] & (1 << lightConfigs[YELLOW_LEFT].bitPosition)) != 0;
 8002530:	2302      	movs	r3, #2
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <GetYellowLeft+0x2c>)
 8002534:	5cd3      	ldrb	r3, [r2, r3]
 8002536:	461a      	mov	r2, r3
 8002538:	2301      	movs	r3, #1
 800253a:	fa42 f303 	asr.w	r3, r2, r3
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000164 	.word	0x20000164

0800255c <GetGreenLeft>:

bool GetGreenLeft() {
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[GREEN_LEFT].bufferIndex] & (1 << lightConfigs[GREEN_LEFT].bitPosition)) != 0;
 8002560:	2302      	movs	r3, #2
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <GetGreenLeft+0x2c>)
 8002564:	5cd3      	ldrb	r3, [r2, r3]
 8002566:	461a      	mov	r2, r3
 8002568:	2302      	movs	r3, #2
 800256a:	fa42 f303 	asr.w	r3, r2, r3
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf14      	ite	ne
 8002576:	2301      	movne	r3, #1
 8002578:	2300      	moveq	r3, #0
 800257a:	b2db      	uxtb	r3, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000164 	.word	0x20000164

0800258c <GetRedPedLeft>:

bool GetRedPedLeft() {
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[RED_PED_LEFT].bufferIndex] & (1 << lightConfigs[RED_PED_LEFT].bitPosition)) != 0;
 8002590:	2302      	movs	r3, #2
 8002592:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <GetRedPedLeft+0x2c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	461a      	mov	r2, r3
 8002598:	2303      	movs	r3, #3
 800259a:	fa42 f303 	asr.w	r3, r2, r3
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000164 	.word	0x20000164

080025bc <GetGreenPedLeft>:

bool GetGreenPedLeft() {
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
    return (buffer[lightConfigs[GREEN_PED_LEFT].bufferIndex] & (1 << lightConfigs[GREEN_PED_LEFT].bitPosition)) != 0;
 80025c0:	2302      	movs	r3, #2
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <GetGreenPedLeft+0x2c>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	461a      	mov	r2, r3
 80025c8:	2304      	movs	r3, #4
 80025ca:	fa42 f303 	asr.w	r3, r2, r3
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000164 	.word	0x20000164

080025ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_USART2_UART_Init+0x58>)
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <MX_USART2_UART_Init+0x5c>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_USART2_UART_Init+0x58>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_USART2_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_USART2_UART_Init+0x58>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_USART2_UART_Init+0x58>)
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_USART2_UART_Init+0x58>)
 8002630:	f002 ff3e 	bl	80054b0 <HAL_UART_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800263a:	f7ff f9c7 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000168 	.word	0x20000168
 8002648:	40004400 	.word	0x40004400

0800264c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b0ac      	sub	sp, #176	; 0xb0
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	2288      	movs	r2, #136	; 0x88
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f006 fbc5 	bl	8008dfc <memset>
  if(uartHandle->Instance==USART2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <HAL_UART_MspInit+0xb0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d13b      	bne.n	80026f4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800267c:	2302      	movs	r3, #2
 800267e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002680:	2300      	movs	r3, #0
 8002682:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fc13 	bl	8003eb4 <HAL_RCCEx_PeriphCLKConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002694:	f7ff f99a 	bl	80019cc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_UART_MspInit+0xb4>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_UART_MspInit+0xb4>)
 800269e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a2:	6593      	str	r3, [r2, #88]	; 0x58
 80026a4:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_UART_MspInit+0xb4>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <HAL_UART_MspInit+0xb4>)
 80026b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b4:	4a12      	ldr	r2, [pc, #72]	; (8002700 <HAL_UART_MspInit+0xb4>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_UART_MspInit+0xb4>)
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026c8:	230c      	movs	r3, #12
 80026ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026e0:	2307      	movs	r3, #7
 80026e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f0:	f000 fb70 	bl	8002dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026f4:	bf00      	nop
 80026f6:	37b0      	adds	r7, #176	; 0xb0
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40004400 	.word	0x40004400
 8002700:	40021000 	.word	0x40021000

08002704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800273c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002708:	f7ff faf4 	bl	8001cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <LoopForever+0x6>)
  ldr r1, =_edata
 800270e:	490d      	ldr	r1, [pc, #52]	; (8002744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <LoopForever+0xe>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002714:	e002      	b.n	800271c <LoopCopyDataInit>

08002716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271a:	3304      	adds	r3, #4

0800271c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800271c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002720:	d3f9      	bcc.n	8002716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002724:	4c0a      	ldr	r4, [pc, #40]	; (8002750 <LoopForever+0x16>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002728:	e001      	b.n	800272e <LoopFillZerobss>

0800272a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800272c:	3204      	adds	r2, #4

0800272e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002730:	d3fb      	bcc.n	800272a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002732:	f006 fb6b 	bl	8008e0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002736:	f7ff f8c7 	bl	80018c8 <main>

0800273a <LoopForever>:

LoopForever:
    b LoopForever
 800273a:	e7fe      	b.n	800273a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800273c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002744:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002748:	0800906c 	.word	0x0800906c
  ldr r2, =_sbss
 800274c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002750:	20001afc 	.word	0x20001afc

08002754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <ADC1_2_IRQHandler>
	...

08002758 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_Init+0x3c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <HAL_Init+0x3c>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800276e:	2003      	movs	r0, #3
 8002770:	f000 f903 	bl	800297a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002774:	200f      	movs	r0, #15
 8002776:	f7ff fa25 	bl	8001bc4 <HAL_InitTick>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	71fb      	strb	r3, [r7, #7]
 8002784:	e001      	b.n	800278a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002786:	f7ff f9f5 	bl	8001b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800278a:	79fb      	ldrb	r3, [r7, #7]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40022000 	.word	0x40022000

08002798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_IncTick+0x24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_IncTick+0x24>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000008 	.word	0x20000008
 80027bc:	200001f0 	.word	0x200001f0

080027c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_GetTick+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	200001f0 	.word	0x200001f0

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff ffee 	bl	80027c0 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fe:	bf00      	nop
 8002800:	f7ff ffde 	bl	80027c0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000008 	.word	0x20000008

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <__NVIC_EnableIRQ+0x38>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	; (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f1c3 0307 	rsb	r3, r3, #7
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf28      	it	cs
 8002932:	2304      	movcs	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3304      	adds	r3, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d902      	bls.n	8002944 <NVIC_EncodePriority+0x30>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b03      	subs	r3, #3
 8002942:	e000      	b.n	8002946 <NVIC_EncodePriority+0x32>
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43d9      	mvns	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	4313      	orrs	r3, r2
         );
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff4c 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029a2:	f7ff ff61 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	6978      	ldr	r0, [r7, #20]
 80029ae:	f7ff ffb1 	bl	8002914 <NVIC_EncodePriority>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff80 	bl	80028c0 <__NVIC_SetPriority>
}
 80029c0:	bf00      	nop
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff54 	bl	8002884 <__NVIC_EnableIRQ>
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e098      	b.n	8002b28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b4d      	ldr	r3, [pc, #308]	; (8002b34 <HAL_DMA_Init+0x150>)
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d80f      	bhi.n	8002a22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_DMA_Init+0x154>)
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a4b      	ldr	r2, [pc, #300]	; (8002b3c <HAL_DMA_Init+0x158>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a48      	ldr	r2, [pc, #288]	; (8002b40 <HAL_DMA_Init+0x15c>)
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a20:	e00e      	b.n	8002a40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <HAL_DMA_Init+0x160>)
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a43      	ldr	r2, [pc, #268]	; (8002b3c <HAL_DMA_Init+0x158>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	009a      	lsls	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	; (8002b48 <HAL_DMA_Init+0x164>)
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a9a:	d039      	beq.n	8002b10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <HAL_DMA_Init+0x15c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d11a      	bne.n	8002adc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_DMA_Init+0x168>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 031c 	and.w	r3, r3, #28
 8002ab2:	210f      	movs	r1, #15
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	4924      	ldr	r1, [pc, #144]	; (8002b4c <HAL_DMA_Init+0x168>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ac0:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_DMA_Init+0x168>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f003 031c 	and.w	r3, r3, #28
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	491d      	ldr	r1, [pc, #116]	; (8002b4c <HAL_DMA_Init+0x168>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
 8002ada:	e019      	b.n	8002b10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_DMA_Init+0x16c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	f003 031c 	and.w	r3, r3, #28
 8002ae8:	210f      	movs	r1, #15
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	4917      	ldr	r1, [pc, #92]	; (8002b50 <HAL_DMA_Init+0x16c>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_DMA_Init+0x16c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f003 031c 	and.w	r3, r3, #28
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	4911      	ldr	r1, [pc, #68]	; (8002b50 <HAL_DMA_Init+0x16c>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40020407 	.word	0x40020407
 8002b38:	bffdfff8 	.word	0xbffdfff8
 8002b3c:	cccccccd 	.word	0xcccccccd
 8002b40:	40020000 	.word	0x40020000
 8002b44:	bffdfbf8 	.word	0xbffdfbf8
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	400200a8 	.word	0x400200a8
 8002b50:	400204a8 	.word	0x400204a8

08002b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_DMA_Start_IT+0x20>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e04b      	b.n	8002c0c <HAL_DMA_Start_IT+0xb8>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d13a      	bne.n	8002bfe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f8e0 	bl	8002d72 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 020e 	orr.w	r2, r2, #14
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e00f      	b.n	8002bec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0204 	bic.w	r2, r2, #4
 8002bda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 020a 	orr.w	r2, r2, #10
 8002bea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e005      	b.n	8002c0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
 8002c08:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f003 031c 	and.w	r3, r3, #28
 8002c34:	2204      	movs	r2, #4
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d026      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x7a>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d021      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d107      	bne.n	8002c68 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0204 	bic.w	r2, r2, #4
 8002c66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f003 021c 	and.w	r2, r3, #28
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2104      	movs	r1, #4
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d071      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c8c:	e06c      	b.n	8002d68 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f003 031c 	and.w	r3, r3, #28
 8002c96:	2202      	movs	r2, #2
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d02e      	beq.n	8002d00 <HAL_DMA_IRQHandler+0xec>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d029      	beq.n	8002d00 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 020a 	bic.w	r2, r2, #10
 8002cc8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f003 021c 	and.w	r2, r3, #28
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2102      	movs	r1, #2
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d038      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cfe:	e033      	b.n	8002d68 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	f003 031c 	and.w	r3, r3, #28
 8002d08:	2208      	movs	r2, #8
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d02a      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x156>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d025      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 020e 	bic.w	r2, r2, #14
 8002d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f003 021c 	and.w	r2, r3, #28
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
}
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	f003 021c 	and.w	r2, r3, #28
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d92:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d108      	bne.n	8002db6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002db4:	e007      	b.n	8002dc6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	60da      	str	r2, [r3, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de2:	e17f      	b.n	80030e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8171 	beq.w	80030de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d005      	beq.n	8002e14 <HAL_GPIO_Init+0x40>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d130      	bne.n	8002e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	f003 0201 	and.w	r2, r3, #1
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d118      	bne.n	8002eb4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e88:	2201      	movs	r2, #1
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	08db      	lsrs	r3, r3, #3
 8002e9e:	f003 0201 	and.w	r2, r3, #1
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d017      	beq.n	8002ef0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d123      	bne.n	8002f44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	08da      	lsrs	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3208      	adds	r2, #8
 8002f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	220f      	movs	r2, #15
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	08da      	lsrs	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3208      	adds	r2, #8
 8002f3e:	6939      	ldr	r1, [r7, #16]
 8002f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0203 	and.w	r2, r3, #3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80ac 	beq.w	80030de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f86:	4b5f      	ldr	r3, [pc, #380]	; (8003104 <HAL_GPIO_Init+0x330>)
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	4a5e      	ldr	r2, [pc, #376]	; (8003104 <HAL_GPIO_Init+0x330>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6613      	str	r3, [r2, #96]	; 0x60
 8002f92:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <HAL_GPIO_Init+0x330>)
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f9e:	4a5a      	ldr	r2, [pc, #360]	; (8003108 <HAL_GPIO_Init+0x334>)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	220f      	movs	r2, #15
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fc8:	d025      	beq.n	8003016 <HAL_GPIO_Init+0x242>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4f      	ldr	r2, [pc, #316]	; (800310c <HAL_GPIO_Init+0x338>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01f      	beq.n	8003012 <HAL_GPIO_Init+0x23e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a4e      	ldr	r2, [pc, #312]	; (8003110 <HAL_GPIO_Init+0x33c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d019      	beq.n	800300e <HAL_GPIO_Init+0x23a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4d      	ldr	r2, [pc, #308]	; (8003114 <HAL_GPIO_Init+0x340>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_GPIO_Init+0x236>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a4c      	ldr	r2, [pc, #304]	; (8003118 <HAL_GPIO_Init+0x344>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00d      	beq.n	8003006 <HAL_GPIO_Init+0x232>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4b      	ldr	r2, [pc, #300]	; (800311c <HAL_GPIO_Init+0x348>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <HAL_GPIO_Init+0x22e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4a      	ldr	r2, [pc, #296]	; (8003120 <HAL_GPIO_Init+0x34c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_GPIO_Init+0x22a>
 8002ffa:	2306      	movs	r3, #6
 8002ffc:	e00c      	b.n	8003018 <HAL_GPIO_Init+0x244>
 8002ffe:	2307      	movs	r3, #7
 8003000:	e00a      	b.n	8003018 <HAL_GPIO_Init+0x244>
 8003002:	2305      	movs	r3, #5
 8003004:	e008      	b.n	8003018 <HAL_GPIO_Init+0x244>
 8003006:	2304      	movs	r3, #4
 8003008:	e006      	b.n	8003018 <HAL_GPIO_Init+0x244>
 800300a:	2303      	movs	r3, #3
 800300c:	e004      	b.n	8003018 <HAL_GPIO_Init+0x244>
 800300e:	2302      	movs	r3, #2
 8003010:	e002      	b.n	8003018 <HAL_GPIO_Init+0x244>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_GPIO_Init+0x244>
 8003016:	2300      	movs	r3, #0
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	f002 0203 	and.w	r2, r2, #3
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	4093      	lsls	r3, r2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003028:	4937      	ldr	r1, [pc, #220]	; (8003108 <HAL_GPIO_Init+0x334>)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3302      	adds	r3, #2
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003036:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_GPIO_Init+0x350>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800305a:	4a32      	ldr	r2, [pc, #200]	; (8003124 <HAL_GPIO_Init+0x350>)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_GPIO_Init+0x350>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003084:	4a27      	ldr	r2, [pc, #156]	; (8003124 <HAL_GPIO_Init+0x350>)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <HAL_GPIO_Init+0x350>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030ae:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_GPIO_Init+0x350>)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_GPIO_Init+0x350>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43db      	mvns	r3, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030d8:	4a12      	ldr	r2, [pc, #72]	; (8003124 <HAL_GPIO_Init+0x350>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3301      	adds	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f47f ae78 	bne.w	8002de4 <HAL_GPIO_Init+0x10>
  }
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	40010000 	.word	0x40010000
 800310c:	48000400 	.word	0x48000400
 8003110:	48000800 	.word	0x48000800
 8003114:	48000c00 	.word	0x48000c00
 8003118:	48001000 	.word	0x48001000
 800311c:	48001400 	.word	0x48001400
 8003120:	48001800 	.word	0x48001800
 8003124:	40010400 	.word	0x40010400

08003128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	e001      	b.n	800314a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003174:	e002      	b.n	800317c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40007000 	.word	0x40007000

080031a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b2:	d130      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c0:	d038      	beq.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2232      	movs	r2, #50	; 0x32
 80031d8:	fb02 f303 	mul.w	r3, r2, r3
 80031dc:	4a1b      	ldr	r2, [pc, #108]	; (800324c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0c9b      	lsrs	r3, r3, #18
 80031e4:	3301      	adds	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031e8:	e002      	b.n	80031f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fc:	d102      	bne.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f2      	bne.n	80031ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003210:	d110      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e00f      	b.n	8003236 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d007      	beq.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800322c:	4a05      	ldr	r2, [pc, #20]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800322e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003232:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40007000 	.word	0x40007000
 8003248:	20000000 	.word	0x20000000
 800324c:	431bde83 	.word	0x431bde83

08003250 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e3ca      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003262:	4b97      	ldr	r3, [pc, #604]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326c:	4b94      	ldr	r3, [pc, #592]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80e4 	beq.w	800344c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_RCC_OscConfig+0x4a>
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b0c      	cmp	r3, #12
 800328e:	f040 808b 	bne.w	80033a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 8087 	bne.w	80033a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800329a:	4b89      	ldr	r3, [pc, #548]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x62>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e3a2      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	4b82      	ldr	r3, [pc, #520]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <HAL_RCC_OscConfig+0x7c>
 80032c2:	4b7f      	ldr	r3, [pc, #508]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ca:	e005      	b.n	80032d8 <HAL_RCC_OscConfig+0x88>
 80032cc:	4b7c      	ldr	r3, [pc, #496]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d8:	4293      	cmp	r3, r2
 80032da:	d223      	bcs.n	8003324 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fd87 	bl	8003df4 <RCC_SetFlashLatencyFromMSIRange>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e383      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f0:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a72      	ldr	r2, [pc, #456]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032f6:	f043 0308 	orr.w	r3, r3, #8
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b70      	ldr	r3, [pc, #448]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	496d      	ldr	r1, [pc, #436]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800330e:	4b6c      	ldr	r3, [pc, #432]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	4968      	ldr	r1, [pc, #416]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
 8003322:	e025      	b.n	8003370 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003324:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a65      	ldr	r2, [pc, #404]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b63      	ldr	r3, [pc, #396]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4960      	ldr	r1, [pc, #384]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003342:	4b5f      	ldr	r3, [pc, #380]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	495b      	ldr	r1, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fd47 	bl	8003df4 <RCC_SetFlashLatencyFromMSIRange>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e343      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003370:	f000 fc4a 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b52      	ldr	r3, [pc, #328]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	4950      	ldr	r1, [pc, #320]	; (80034c4 <HAL_RCC_OscConfig+0x274>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
 800338c:	4a4e      	ldr	r2, [pc, #312]	; (80034c8 <HAL_RCC_OscConfig+0x278>)
 800338e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003390:	4b4e      	ldr	r3, [pc, #312]	; (80034cc <HAL_RCC_OscConfig+0x27c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe fc15 	bl	8001bc4 <HAL_InitTick>
 800339a:	4603      	mov	r3, r0
 800339c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d052      	beq.n	800344a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	e327      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d032      	beq.n	8003416 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a42      	ldr	r2, [pc, #264]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033bc:	f7ff fa00 	bl	80027c0 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033c4:	f7ff f9fc 	bl	80027c0 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e310      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033d6:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a36      	ldr	r2, [pc, #216]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033e8:	f043 0308 	orr.w	r3, r3, #8
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4931      	ldr	r1, [pc, #196]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003400:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	492c      	ldr	r1, [pc, #176]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
 8003414:	e01a      	b.n	800344c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003416:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003422:	f7ff f9cd 	bl	80027c0 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800342a:	f7ff f9c9 	bl	80027c0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e2dd      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <HAL_RCC_OscConfig+0x1da>
 8003448:	e000      	b.n	800344c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800344a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d074      	beq.n	8003542 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b08      	cmp	r3, #8
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x21a>
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	d10e      	bne.n	8003482 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d10b      	bne.n	8003482 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d064      	beq.n	8003540 <HAL_RCC_OscConfig+0x2f0>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d160      	bne.n	8003540 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e2ba      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x24a>
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0b      	ldr	r2, [pc, #44]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	e026      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a2:	d115      	bne.n	80034d0 <HAL_RCC_OscConfig+0x280>
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80034aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a02      	ldr	r2, [pc, #8]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80034b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	e014      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	08008f84 	.word	0x08008f84
 80034c8:	20000000 	.word	0x20000000
 80034cc:	20000004 	.word	0x20000004
 80034d0:	4ba0      	ldr	r3, [pc, #640]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a9f      	ldr	r2, [pc, #636]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b9d      	ldr	r3, [pc, #628]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a9c      	ldr	r2, [pc, #624]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80034e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7ff f966 	bl	80027c0 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f8:	f7ff f962 	bl	80027c0 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e276      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350a:	4b92      	ldr	r3, [pc, #584]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x2a8>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7ff f952 	bl	80027c0 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7ff f94e 	bl	80027c0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e262      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003532:	4b88      	ldr	r3, [pc, #544]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x2d0>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d060      	beq.n	8003610 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x310>
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d119      	bne.n	800358e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d116      	bne.n	800358e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003560:	4b7c      	ldr	r3, [pc, #496]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_OscConfig+0x328>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e23f      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	4973      	ldr	r1, [pc, #460]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800358c:	e040      	b.n	8003610 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d023      	beq.n	80035de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003596:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6e      	ldr	r2, [pc, #440]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 800359c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7ff f90d 	bl	80027c0 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7ff f909 	bl	80027c0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e21d      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035bc:	4b65      	ldr	r3, [pc, #404]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b62      	ldr	r3, [pc, #392]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	495f      	ldr	r1, [pc, #380]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	e018      	b.n	8003610 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5c      	ldr	r2, [pc, #368]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80035e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7ff f8e9 	bl	80027c0 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7ff f8e5 	bl	80027c0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e1f9      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003604:	4b53      	ldr	r3, [pc, #332]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d03c      	beq.n	8003696 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01c      	beq.n	800365e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003624:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362a:	4a4a      	ldr	r2, [pc, #296]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7ff f8c4 	bl	80027c0 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363c:	f7ff f8c0 	bl	80027c0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1d4      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800364e:	4b41      	ldr	r3, [pc, #260]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0ef      	beq.n	800363c <HAL_RCC_OscConfig+0x3ec>
 800365c:	e01b      	b.n	8003696 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003664:	4a3b      	ldr	r2, [pc, #236]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7ff f8a7 	bl	80027c0 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003676:	f7ff f8a3 	bl	80027c0 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1b7      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ef      	bne.n	8003676 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80a6 	beq.w	80037f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a4:	2300      	movs	r3, #0
 80036a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10d      	bne.n	80036d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b4:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	4a26      	ldr	r2, [pc, #152]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80036ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036be:	6593      	str	r3, [r2, #88]	; 0x58
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036cc:	2301      	movs	r3, #1
 80036ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCC_OscConfig+0x508>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d118      	bne.n	800370e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCC_OscConfig+0x508>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_RCC_OscConfig+0x508>)
 80036e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e8:	f7ff f86a 	bl	80027c0 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f0:	f7ff f866 	bl	80027c0 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e17a      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_RCC_OscConfig+0x508>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <HAL_RCC_OscConfig+0x4d8>
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371c:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003726:	e029      	b.n	800377c <HAL_RCC_OscConfig+0x52c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b05      	cmp	r3, #5
 800372e:	d115      	bne.n	800375c <HAL_RCC_OscConfig+0x50c>
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003738:	f043 0304 	orr.w	r3, r3, #4
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	4a03      	ldr	r2, [pc, #12]	; (8003754 <HAL_RCC_OscConfig+0x504>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003750:	e014      	b.n	800377c <HAL_RCC_OscConfig+0x52c>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	40007000 	.word	0x40007000
 800375c:	4b9c      	ldr	r3, [pc, #624]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	4a9b      	ldr	r2, [pc, #620]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800376c:	4b98      	ldr	r3, [pc, #608]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	4a97      	ldr	r2, [pc, #604]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d016      	beq.n	80037b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7ff f81c 	bl	80027c0 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7ff f818 	bl	80027c0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e12a      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a2:	4b8b      	ldr	r3, [pc, #556]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ed      	beq.n	800378c <HAL_RCC_OscConfig+0x53c>
 80037b0:	e015      	b.n	80037de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7ff f805 	bl	80027c0 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7ff f801 	bl	80027c0 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e113      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037d0:	4b7f      	ldr	r3, [pc, #508]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1ed      	bne.n	80037ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037de:	7ffb      	ldrb	r3, [r7, #31]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e4:	4b7a      	ldr	r3, [pc, #488]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	4a79      	ldr	r2, [pc, #484]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80fe 	beq.w	80039f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	2b02      	cmp	r3, #2
 8003800:	f040 80d0 	bne.w	80039a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003804:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0203 	and.w	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	429a      	cmp	r2, r3
 8003816:	d130      	bne.n	800387a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	3b01      	subs	r3, #1
 8003824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d127      	bne.n	800387a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d11f      	bne.n	800387a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003844:	2a07      	cmp	r2, #7
 8003846:	bf14      	ite	ne
 8003848:	2201      	movne	r2, #1
 800384a:	2200      	moveq	r2, #0
 800384c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800384e:	4293      	cmp	r3, r2
 8003850:	d113      	bne.n	800387a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d109      	bne.n	800387a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d06e      	beq.n	8003958 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d069      	beq.n	8003954 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0ad      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800389c:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a4b      	ldr	r2, [pc, #300]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 80038a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038a8:	f7fe ff8a 	bl	80027c0 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe ff86 	bl	80027c0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e09a      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c2:	4b43      	ldr	r3, [pc, #268]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ce:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	4b40      	ldr	r3, [pc, #256]	; (80039d4 <HAL_RCC_OscConfig+0x784>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038de:	3a01      	subs	r2, #1
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	4311      	orrs	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038e8:	0212      	lsls	r2, r2, #8
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038f0:	0852      	lsrs	r2, r2, #1
 80038f2:	3a01      	subs	r2, #1
 80038f4:	0552      	lsls	r2, r2, #21
 80038f6:	4311      	orrs	r1, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038fc:	0852      	lsrs	r2, r2, #1
 80038fe:	3a01      	subs	r2, #1
 8003900:	0652      	lsls	r2, r2, #25
 8003902:	4311      	orrs	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003908:	0912      	lsrs	r2, r2, #4
 800390a:	0452      	lsls	r2, r2, #17
 800390c:	430a      	orrs	r2, r1
 800390e:	4930      	ldr	r1, [pc, #192]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003910:	4313      	orrs	r3, r2
 8003912:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003914:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 800391a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800392a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800392c:	f7fe ff48 	bl	80027c0 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe ff44 	bl	80027c0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e058      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003946:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003952:	e050      	b.n	80039f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e04f      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d148      	bne.n	80039f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 800396a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800396e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003970:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800397c:	f7fe ff20 	bl	80027c0 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe ff1c 	bl	80027c0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e030      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x734>
 80039a2:	e028      	b.n	80039f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d023      	beq.n	80039f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <HAL_RCC_OscConfig+0x780>)
 80039b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fe ff03 	bl	80027c0 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039bc:	e00c      	b.n	80039d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039be:	f7fe feff 	bl	80027c0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d905      	bls.n	80039d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e013      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
 80039d0:	40021000 	.word	0x40021000
 80039d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCC_OscConfig+0x7b0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ec      	bne.n	80039be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_RCC_OscConfig+0x7b0>)
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	4905      	ldr	r1, [pc, #20]	; (8003a00 <HAL_RCC_OscConfig+0x7b0>)
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_RCC_OscConfig+0x7b4>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	60cb      	str	r3, [r1, #12]
 80039f0:	e001      	b.n	80039f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	feeefffc 	.word	0xfeeefffc

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0e7      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b75      	ldr	r3, [pc, #468]	; (8003bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d910      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b72      	ldr	r3, [pc, #456]	; (8003bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 0207 	bic.w	r2, r3, #7
 8003a32:	4970      	ldr	r1, [pc, #448]	; (8003bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b6e      	ldr	r3, [pc, #440]	; (8003bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0cf      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d908      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4960      	ldr	r1, [pc, #384]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d04c      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8e:	4b5a      	ldr	r3, [pc, #360]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d121      	bne.n	8003ade <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0a6      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa6:	4b54      	ldr	r3, [pc, #336]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d115      	bne.n	8003ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e09a      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003abe:	4b4e      	ldr	r3, [pc, #312]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e08e      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ace:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e086      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ade:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4943      	ldr	r1, [pc, #268]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af0:	f7fe fe66 	bl	80027c0 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	f7fe fe62 	bl	80027c0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e06e      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b3a      	ldr	r3, [pc, #232]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 020c 	and.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1eb      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d010      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d208      	bcs.n	8003b4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	492b      	ldr	r1, [pc, #172]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4e:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d210      	bcs.n	8003b7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5c:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 0207 	bic.w	r2, r3, #7
 8003b64:	4923      	ldr	r1, [pc, #140]	; (8003bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e036      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	4918      	ldr	r1, [pc, #96]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d009      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4910      	ldr	r1, [pc, #64]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bbc:	f000 f824 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	490b      	ldr	r1, [pc, #44]	; (8003bfc <HAL_RCC_ClockConfig+0x1f4>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd8:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1f8>)
 8003bda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1fc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fd ffef 	bl	8001bc4 <HAL_InitTick>
 8003be6:	4603      	mov	r3, r0
 8003be8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bea:	7afb      	ldrb	r3, [r7, #11]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08008f84 	.word	0x08008f84
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	; 0x24
 8003c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c16:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c20:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x34>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	d121      	bne.n	8003c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d11e      	bne.n	8003c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c3c:	4b34      	ldr	r3, [pc, #208]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c48:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e005      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c64:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d102      	bne.n	8003c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e004      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c8c:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d134      	bne.n	8003d00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c96:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0xa6>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d003      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0xac>
 8003cac:	e005      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cb0:	617b      	str	r3, [r7, #20]
      break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003cb6:	617b      	str	r3, [r7, #20]
      break;
 8003cb8:	e002      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	617b      	str	r3, [r7, #20]
      break;
 8003cbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc0:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	3301      	adds	r3, #1
 8003ccc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	fb03 f202 	mul.w	r2, r3, r2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	0e5b      	lsrs	r3, r3, #25
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d00:	69bb      	ldr	r3, [r7, #24]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3724      	adds	r7, #36	; 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	08008f9c 	.word	0x08008f9c
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	007a1200 	.word	0x007a1200

08003d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000000 	.word	0x20000000

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d3c:	f7ff fff0 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4904      	ldr	r1, [pc, #16]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08008f94 	.word	0x08008f94

08003d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d68:	f7ff ffda 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0adb      	lsrs	r3, r3, #11
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4904      	ldr	r1, [pc, #16]	; (8003d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	08008f94 	.word	0x08008f94

08003d90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0203 	and.w	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	08db      	lsrs	r3, r3, #3
 8003dca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <HAL_RCC_GetClockConfig+0x60>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0207 	and.w	r2, r3, #7
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40022000 	.word	0x40022000

08003df4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e00:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e0c:	f7ff f9bc 	bl	8003188 <HAL_PWREx_GetVoltageRange>
 8003e10:	6178      	str	r0, [r7, #20]
 8003e12:	e014      	b.n	8003e3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e14:	4b25      	ldr	r3, [pc, #148]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	4a24      	ldr	r2, [pc, #144]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e20:	4b22      	ldr	r3, [pc, #136]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e2c:	f7ff f9ac 	bl	8003188 <HAL_PWREx_GetVoltageRange>
 8003e30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d10b      	bne.n	8003e5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d919      	bls.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2ba0      	cmp	r3, #160	; 0xa0
 8003e50:	d902      	bls.n	8003e58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e52:	2302      	movs	r3, #2
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	e013      	b.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e58:	2301      	movs	r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	e010      	b.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d902      	bls.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e64:	2303      	movs	r3, #3
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	e00a      	b.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b80      	cmp	r3, #128	; 0x80
 8003e6e:	d102      	bne.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e70:	2302      	movs	r3, #2
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	e004      	b.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b70      	cmp	r3, #112	; 0x70
 8003e7a:	d101      	bne.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 0207 	bic.w	r2, r3, #7
 8003e88:	4909      	ldr	r1, [pc, #36]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d001      	beq.n	8003ea2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40022000 	.word	0x40022000

08003eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d041      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ed4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ed8:	d02a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003eda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ede:	d824      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ee4:	d008      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ee6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eea:	d81e      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ef6:	e018      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ef8:	4b86      	ldr	r3, [pc, #536]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a85      	ldr	r2, [pc, #532]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f04:	e015      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fabb 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f16:	e00c      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3320      	adds	r3, #32
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fba6 	bl	8004670 <RCCEx_PLLSAI2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f28:	e003      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f38:	4b76      	ldr	r3, [pc, #472]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f46:	4973      	ldr	r1, [pc, #460]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f4e:	e001      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d041      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f68:	d02a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f6e:	d824      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f74:	d008      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f7a:	d81e      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f84:	d010      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f86:	e018      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f88:	4b62      	ldr	r3, [pc, #392]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4a61      	ldr	r2, [pc, #388]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f94:	e015      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fa73 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fa6:	e00c      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3320      	adds	r3, #32
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fb5e 	bl	8004670 <RCCEx_PLLSAI2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	74fb      	strb	r3, [r7, #19]
      break;
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fc8:	4b52      	ldr	r3, [pc, #328]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd6:	494f      	ldr	r1, [pc, #316]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fde:	e001      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80a0 	beq.w	8004132 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400c:	4b41      	ldr	r3, [pc, #260]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	4a40      	ldr	r2, [pc, #256]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004016:	6593      	str	r3, [r2, #88]	; 0x58
 8004018:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004024:	2301      	movs	r3, #1
 8004026:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004028:	4b3b      	ldr	r3, [pc, #236]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a3a      	ldr	r2, [pc, #232]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004032:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004034:	f7fe fbc4 	bl	80027c0 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800403a:	e009      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403c:	f7fe fbc0 	bl	80027c0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d902      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	74fb      	strb	r3, [r7, #19]
        break;
 800404e:	e005      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ef      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d15c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004062:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01f      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	429a      	cmp	r2, r3
 800407e:	d019      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004080:	4b24      	ldr	r3, [pc, #144]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	4a20      	ldr	r2, [pc, #128]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d016      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fe fb7f 	bl	80027c0 <HAL_GetTick>
 80040c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c4:	e00b      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fe fb7b 	bl	80027c0 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d902      	bls.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	74fb      	strb	r3, [r7, #19]
            break;
 80040dc:	e006      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0ec      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10c      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004102:	4904      	ldr	r1, [pc, #16]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800410a:	e009      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004120:	7c7b      	ldrb	r3, [r7, #17]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d105      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004126:	4b9e      	ldr	r3, [pc, #632]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	4a9d      	ldr	r2, [pc, #628]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004130:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800413e:	4b98      	ldr	r3, [pc, #608]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	f023 0203 	bic.w	r2, r3, #3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	4994      	ldr	r1, [pc, #592]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004160:	4b8f      	ldr	r3, [pc, #572]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f023 020c 	bic.w	r2, r3, #12
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	498c      	ldr	r1, [pc, #560]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004182:	4b87      	ldr	r3, [pc, #540]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	4983      	ldr	r1, [pc, #524]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041a4:	4b7e      	ldr	r3, [pc, #504]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	497b      	ldr	r1, [pc, #492]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041c6:	4b76      	ldr	r3, [pc, #472]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	4972      	ldr	r1, [pc, #456]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e8:	4b6d      	ldr	r3, [pc, #436]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	496a      	ldr	r1, [pc, #424]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420a:	4b65      	ldr	r3, [pc, #404]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	4961      	ldr	r1, [pc, #388]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800422c:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423a:	4959      	ldr	r1, [pc, #356]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800424e:	4b54      	ldr	r3, [pc, #336]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	4950      	ldr	r1, [pc, #320]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004270:	4b4b      	ldr	r3, [pc, #300]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427e:	4948      	ldr	r1, [pc, #288]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004292:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	493f      	ldr	r1, [pc, #252]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d028      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b4:	4b3a      	ldr	r3, [pc, #232]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c2:	4937      	ldr	r1, [pc, #220]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d2:	d106      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d4:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a31      	ldr	r2, [pc, #196]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042de:	60d3      	str	r3, [r2, #12]
 80042e0:	e011      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ea:	d10c      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	2101      	movs	r1, #1
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f8c8 	bl	8004488 <RCCEx_PLLSAI1_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d028      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	491f      	ldr	r1, [pc, #124]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004330:	d106      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004332:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433c:	60d3      	str	r3, [r2, #12]
 800433e:	e011      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004348:	d10c      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	2101      	movs	r1, #1
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f899 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02b      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437e:	4908      	ldr	r1, [pc, #32]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438e:	d109      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a02      	ldr	r2, [pc, #8]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439a:	60d3      	str	r3, [r2, #12]
 800439c:	e014      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f867 	bl	8004488 <RCCEx_PLLSAI1_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d02f      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e2:	4928      	ldr	r1, [pc, #160]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f2:	d10d      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	2102      	movs	r1, #2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f844 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d014      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	74bb      	strb	r3, [r7, #18]
 800440e:	e011      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d10c      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3320      	adds	r3, #32
 800441e:	2102      	movs	r1, #2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 f925 	bl	8004670 <RCCEx_PLLSAI2_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444e:	490d      	ldr	r1, [pc, #52]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004472:	4904      	ldr	r1, [pc, #16]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800447a:	7cbb      	ldrb	r3, [r7, #18]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000

08004488 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004496:	4b75      	ldr	r3, [pc, #468]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d018      	beq.n	80044d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044a2:	4b72      	ldr	r3, [pc, #456]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0203 	and.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d10d      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
       ||
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044ba:	4b6c      	ldr	r3, [pc, #432]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
       ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d047      	beq.n	800455e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
 80044d2:	e044      	b.n	800455e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d018      	beq.n	800450e <RCCEx_PLLSAI1_Config+0x86>
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d825      	bhi.n	800452c <RCCEx_PLLSAI1_Config+0xa4>
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d002      	beq.n	80044ea <RCCEx_PLLSAI1_Config+0x62>
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d009      	beq.n	80044fc <RCCEx_PLLSAI1_Config+0x74>
 80044e8:	e020      	b.n	800452c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ea:	4b60      	ldr	r3, [pc, #384]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11d      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fa:	e01a      	b.n	8004532 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044fc:	4b5b      	ldr	r3, [pc, #364]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450c:	e013      	b.n	8004536 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800450e:	4b57      	ldr	r3, [pc, #348]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800451a:	4b54      	ldr	r3, [pc, #336]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800452a:	e006      	b.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      break;
 8004530:	e004      	b.n	800453c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004532:	bf00      	nop
 8004534:	e002      	b.n	800453c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004536:	bf00      	nop
 8004538:	e000      	b.n	800453c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800453a:	bf00      	nop
    }

    if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004542:	4b4a      	ldr	r3, [pc, #296]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	430b      	orrs	r3, r1
 8004558:	4944      	ldr	r1, [pc, #272]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800455a:	4313      	orrs	r3, r2
 800455c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d17d      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004564:	4b41      	ldr	r3, [pc, #260]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a40      	ldr	r2, [pc, #256]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800456a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800456e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004570:	f7fe f926 	bl	80027c0 <HAL_GetTick>
 8004574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004576:	e009      	b.n	800458c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004578:	f7fe f922 	bl	80027c0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d902      	bls.n	800458c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	73fb      	strb	r3, [r7, #15]
        break;
 800458a:	e005      	b.n	8004598 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800458c:	4b37      	ldr	r3, [pc, #220]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ef      	bne.n	8004578 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d160      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d111      	bne.n	80045c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a4:	4b31      	ldr	r3, [pc, #196]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6892      	ldr	r2, [r2, #8]
 80045b4:	0211      	lsls	r1, r2, #8
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68d2      	ldr	r2, [r2, #12]
 80045ba:	0912      	lsrs	r2, r2, #4
 80045bc:	0452      	lsls	r2, r2, #17
 80045be:	430a      	orrs	r2, r1
 80045c0:	492a      	ldr	r1, [pc, #168]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	610b      	str	r3, [r1, #16]
 80045c6:	e027      	b.n	8004618 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d112      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ce:	4b27      	ldr	r3, [pc, #156]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6892      	ldr	r2, [r2, #8]
 80045de:	0211      	lsls	r1, r2, #8
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6912      	ldr	r2, [r2, #16]
 80045e4:	0852      	lsrs	r2, r2, #1
 80045e6:	3a01      	subs	r2, #1
 80045e8:	0552      	lsls	r2, r2, #21
 80045ea:	430a      	orrs	r2, r1
 80045ec:	491f      	ldr	r1, [pc, #124]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]
 80045f2:	e011      	b.n	8004618 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f4:	4b1d      	ldr	r3, [pc, #116]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6892      	ldr	r2, [r2, #8]
 8004604:	0211      	lsls	r1, r2, #8
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6952      	ldr	r2, [r2, #20]
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	3a01      	subs	r2, #1
 800460e:	0652      	lsls	r2, r2, #25
 8004610:	430a      	orrs	r2, r1
 8004612:	4916      	ldr	r1, [pc, #88]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a13      	ldr	r2, [pc, #76]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800461e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004622:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fe f8cc 	bl	80027c0 <HAL_GetTick>
 8004628:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800462a:	e009      	b.n	8004640 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800462c:	f7fe f8c8 	bl	80027c0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d902      	bls.n	8004640 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	73fb      	strb	r3, [r7, #15]
          break;
 800463e:	e005      	b.n	800464c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004640:	4b0a      	ldr	r3, [pc, #40]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ef      	beq.n	800462c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	4904      	ldr	r1, [pc, #16]	; (800466c <RCCEx_PLLSAI1_Config+0x1e4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000

08004670 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800467e:	4b6a      	ldr	r3, [pc, #424]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d018      	beq.n	80046bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800468a:	4b67      	ldr	r3, [pc, #412]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0203 	and.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d10d      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
       ||
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046a2:	4b61      	ldr	r3, [pc, #388]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
       ||
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d047      	beq.n	8004746 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
 80046ba:	e044      	b.n	8004746 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d018      	beq.n	80046f6 <RCCEx_PLLSAI2_Config+0x86>
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d825      	bhi.n	8004714 <RCCEx_PLLSAI2_Config+0xa4>
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d002      	beq.n	80046d2 <RCCEx_PLLSAI2_Config+0x62>
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d009      	beq.n	80046e4 <RCCEx_PLLSAI2_Config+0x74>
 80046d0:	e020      	b.n	8004714 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046d2:	4b55      	ldr	r3, [pc, #340]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11d      	bne.n	800471a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e2:	e01a      	b.n	800471a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046e4:	4b50      	ldr	r3, [pc, #320]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d116      	bne.n	800471e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f4:	e013      	b.n	800471e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046f6:	4b4c      	ldr	r3, [pc, #304]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004702:	4b49      	ldr	r3, [pc, #292]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004712:	e006      	b.n	8004722 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      break;
 8004718:	e004      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800471a:	bf00      	nop
 800471c:	e002      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004722:	bf00      	nop
    }

    if(status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10d      	bne.n	8004746 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800472a:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	3b01      	subs	r3, #1
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	430b      	orrs	r3, r1
 8004740:	4939      	ldr	r1, [pc, #228]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d167      	bne.n	800481c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a35      	ldr	r2, [pc, #212]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004758:	f7fe f832 	bl	80027c0 <HAL_GetTick>
 800475c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800475e:	e009      	b.n	8004774 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004760:	f7fe f82e 	bl	80027c0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d902      	bls.n	8004774 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	73fb      	strb	r3, [r7, #15]
        break;
 8004772:	e005      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004774:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ef      	bne.n	8004760 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d14a      	bne.n	800481c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d111      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800478c:	4b26      	ldr	r3, [pc, #152]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6892      	ldr	r2, [r2, #8]
 800479c:	0211      	lsls	r1, r2, #8
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68d2      	ldr	r2, [r2, #12]
 80047a2:	0912      	lsrs	r2, r2, #4
 80047a4:	0452      	lsls	r2, r2, #17
 80047a6:	430a      	orrs	r2, r1
 80047a8:	491f      	ldr	r1, [pc, #124]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	614b      	str	r3, [r1, #20]
 80047ae:	e011      	b.n	80047d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
 80047c0:	0211      	lsls	r1, r2, #8
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6912      	ldr	r2, [r2, #16]
 80047c6:	0852      	lsrs	r2, r2, #1
 80047c8:	3a01      	subs	r2, #1
 80047ca:	0652      	lsls	r2, r2, #25
 80047cc:	430a      	orrs	r2, r1
 80047ce:	4916      	ldr	r1, [pc, #88]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a13      	ldr	r2, [pc, #76]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fd ffee 	bl	80027c0 <HAL_GetTick>
 80047e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047e6:	e009      	b.n	80047fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047e8:	f7fd ffea 	bl	80027c0 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d902      	bls.n	80047fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	73fb      	strb	r3, [r7, #15]
          break;
 80047fa:	e005      	b.n	8004808 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ef      	beq.n	80047e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	4904      	ldr	r1, [pc, #16]	; (8004828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e095      	b.n	800496a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484e:	d009      	beq.n	8004864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	61da      	str	r2, [r3, #28]
 8004856:	e005      	b.n	8004864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd f8e8 	bl	8001a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a4:	d902      	bls.n	80048ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e002      	b.n	80048b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048ba:	d007      	beq.n	80048cc <HAL_SPI_Init+0xa0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	ea42 0103 	orr.w	r1, r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	f003 0204 	and.w	r2, r3, #4
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004948:	ea42 0103 	orr.w	r1, r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_SPI_Transmit_DMA+0x20>
 8004990:	2302      	movs	r3, #2
 8004992:	e0d4      	b.n	8004b3e <HAL_SPI_Transmit_DMA+0x1ca>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
 80049aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049ac:	e0c2      	b.n	8004b34 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_SPI_Transmit_DMA+0x46>
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049be:	e0b9      	b.n	8004b34 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2203      	movs	r2, #3
 80049c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0a:	d10f      	bne.n	8004a2c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	4a45      	ldr	r2, [pc, #276]	; (8004b48 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	4a44      	ldr	r2, [pc, #272]	; (8004b4c <HAL_SPI_Transmit_DMA+0x1d8>)
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	4a43      	ldr	r2, [pc, #268]	; (8004b50 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	2200      	movs	r2, #0
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a5a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a64:	d82d      	bhi.n	8004ac2 <HAL_SPI_Transmit_DMA+0x14e>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a70:	d127      	bne.n	8004ac2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10f      	bne.n	8004aa0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a8e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a9e:	e010      	b.n	8004ac2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	4619      	mov	r1, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ada:	f7fe f83b 	bl	8002b54 <HAL_DMA_Start_IT>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae8:	f043 0210 	orr.w	r2, r3, #16
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004af4:	e01e      	b.n	8004b34 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d007      	beq.n	8004b14 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b12:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0220 	orr.w	r2, r2, #32
 8004b22:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0202 	orr.w	r2, r2, #2
 8004b32:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	08004c23 	.word	0x08004c23
 8004b4c:	08004b7d 	.word	0x08004b7d
 8004b50:	08004c3f 	.word	0x08004c3f

08004b54 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b8a:	f7fd fe19 	bl	80027c0 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d03b      	beq.n	8004c16 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0220 	bic.w	r2, r2, #32
 8004bac:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0202 	bic.w	r2, r2, #2
 8004bbc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	2164      	movs	r1, #100	; 0x64
 8004bc2:	6978      	ldr	r0, [r7, #20]
 8004bc4:	f000 f97a 	bl	8004ebc <SPI_EndRxTxTransaction>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f7ff ffaa 	bl	8004b68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c14:	e002      	b.n	8004c1c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7fc fe38 	bl	800188c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff ff8f 	bl	8004b54 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c36:	bf00      	nop
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0203 	bic.w	r2, r2, #3
 8004c5a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c60:	f043 0210 	orr.w	r2, r3, #16
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7ff ff79 	bl	8004b68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c90:	f7fd fd96 	bl	80027c0 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ca0:	f7fd fd8e 	bl	80027c0 <HAL_GetTick>
 8004ca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ca6:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	015b      	lsls	r3, r3, #5
 8004cac:	0d1b      	lsrs	r3, r3, #20
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	fb02 f303 	mul.w	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cb6:	e054      	b.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbe:	d050      	beq.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cc0:	f7fd fd7e 	bl	80027c0 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d902      	bls.n	8004cd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d13d      	bne.n	8004d52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cee:	d111      	bne.n	8004d14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf8:	d004      	beq.n	8004d04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d02:	d107      	bne.n	8004d14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1c:	d10f      	bne.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e017      	b.n	8004d82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d19b      	bne.n	8004cb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000000 	.word	0x20000000

08004d90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004da2:	f7fd fd0d 	bl	80027c0 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	4413      	add	r3, r2
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004db2:	f7fd fd05 	bl	80027c0 <HAL_GetTick>
 8004db6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004dc0:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	00da      	lsls	r2, r3, #3
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	0d1b      	lsrs	r3, r3, #20
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004dd8:	e060      	b.n	8004e9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004de0:	d107      	bne.n	8004df2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df8:	d050      	beq.n	8004e9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dfa:	f7fd fce1 	bl	80027c0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d902      	bls.n	8004e10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d13d      	bne.n	8004e8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e28:	d111      	bne.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e32:	d004      	beq.n	8004e3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3c:	d107      	bne.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e56:	d10f      	bne.n	8004e78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e010      	b.n	8004eae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d196      	bne.n	8004dda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000000 	.word	0x20000000

08004ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff ff5b 	bl	8004d90 <SPI_WaitFifoStateUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e027      	b.n	8004f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff fec0 	bl	8004c80 <SPI_WaitFlagStateUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e014      	b.n	8004f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff ff34 	bl	8004d90 <SPI_WaitFifoStateUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e000      	b.n	8004f40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e049      	b.n	8004fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f841 	bl	8004ff6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 f9da 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d001      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e04f      	b.n	80050c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a23      	ldr	r2, [pc, #140]	; (80050d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01d      	beq.n	8005082 <HAL_TIM_Base_Start_IT+0x76>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d018      	beq.n	8005082 <HAL_TIM_Base_Start_IT+0x76>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_TIM_Base_Start_IT+0x76>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00e      	beq.n	8005082 <HAL_TIM_Base_Start_IT+0x76>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_TIM_Base_Start_IT+0xd0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d009      	beq.n	8005082 <HAL_TIM_Base_Start_IT+0x76>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <HAL_TIM_Base_Start_IT+0x76>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d115      	bne.n	80050ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800508a:	4013      	ands	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b06      	cmp	r3, #6
 8005092:	d015      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0xb4>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509a:	d011      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	e008      	b.n	80050c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e000      	b.n	80050c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40013400 	.word	0x40013400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	00010007 	.word	0x00010007

080050ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d020      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0202 	mvn.w	r2, #2
 8005120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8e4 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8d6 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f8e7 	bl	8005318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d020      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01b      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0204 	mvn.w	r2, #4
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8be 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f8b0 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8c1 	bl	8005318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d020      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0208 	mvn.w	r2, #8
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2204      	movs	r2, #4
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f898 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f88a 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f89b 	bl	8005318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d020      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0210 	mvn.w	r2, #16
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2208      	movs	r2, #8
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f872 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f864 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f875 	bl	8005318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0201 	mvn.w	r2, #1
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fc fba8 	bl	80019a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f906 	bl	8005488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8fe 	bl	800549c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00c      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f834 	bl	800532c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0220 	mvn.w	r2, #32
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8c6 	bl	8005474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a40      	ldr	r2, [pc, #256]	; (8005454 <TIM_Base_SetConfig+0x114>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535e:	d00f      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a3d      	ldr	r2, [pc, #244]	; (8005458 <TIM_Base_SetConfig+0x118>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00b      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a3c      	ldr	r2, [pc, #240]	; (800545c <TIM_Base_SetConfig+0x11c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3b      	ldr	r2, [pc, #236]	; (8005460 <TIM_Base_SetConfig+0x120>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <TIM_Base_SetConfig+0x124>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d108      	bne.n	8005392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2f      	ldr	r2, [pc, #188]	; (8005454 <TIM_Base_SetConfig+0x114>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01f      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a0:	d01b      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2c      	ldr	r2, [pc, #176]	; (8005458 <TIM_Base_SetConfig+0x118>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d017      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	; (800545c <TIM_Base_SetConfig+0x11c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2a      	ldr	r2, [pc, #168]	; (8005460 <TIM_Base_SetConfig+0x120>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a29      	ldr	r2, [pc, #164]	; (8005464 <TIM_Base_SetConfig+0x124>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a28      	ldr	r2, [pc, #160]	; (8005468 <TIM_Base_SetConfig+0x128>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a27      	ldr	r2, [pc, #156]	; (800546c <TIM_Base_SetConfig+0x12c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_Base_SetConfig+0x9a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a26      	ldr	r2, [pc, #152]	; (8005470 <TIM_Base_SetConfig+0x130>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a10      	ldr	r2, [pc, #64]	; (8005454 <TIM_Base_SetConfig+0x114>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00f      	beq.n	8005438 <TIM_Base_SetConfig+0xf8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <TIM_Base_SetConfig+0x124>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_Base_SetConfig+0xf8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a11      	ldr	r2, [pc, #68]	; (8005468 <TIM_Base_SetConfig+0x128>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_Base_SetConfig+0xf8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a10      	ldr	r2, [pc, #64]	; (800546c <TIM_Base_SetConfig+0x12c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_Base_SetConfig+0xf8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a0f      	ldr	r2, [pc, #60]	; (8005470 <TIM_Base_SetConfig+0x130>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d103      	bne.n	8005440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	615a      	str	r2, [r3, #20]
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e040      	b.n	8005544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fd f8ba 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2224      	movs	r2, #36	; 0x24
 80054dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0201 	bic.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fae0 	bl	8005abc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f825 	bl	800554c <UART_SetConfig>
 8005502:	4603      	mov	r3, r0
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e01b      	b.n	8005544 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fb5f 	bl	8005c00 <UART_CheckIdleState>
 8005542:	4603      	mov	r3, r0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800554c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005550:	b08a      	sub	sp, #40	; 0x28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	431a      	orrs	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	431a      	orrs	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	4313      	orrs	r3, r2
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4ba4      	ldr	r3, [pc, #656]	; (800580c <UART_SetConfig+0x2c0>)
 800557c:	4013      	ands	r3, r2
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005584:	430b      	orrs	r3, r1
 8005586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a99      	ldr	r2, [pc, #612]	; (8005810 <UART_SetConfig+0x2c4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b4:	4313      	orrs	r3, r2
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a90      	ldr	r2, [pc, #576]	; (8005814 <UART_SetConfig+0x2c8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d126      	bne.n	8005624 <UART_SetConfig+0xd8>
 80055d6:	4b90      	ldr	r3, [pc, #576]	; (8005818 <UART_SetConfig+0x2cc>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d81b      	bhi.n	800561c <UART_SetConfig+0xd0>
 80055e4:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0xa0>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	080055fd 	.word	0x080055fd
 80055f0:	0800560d 	.word	0x0800560d
 80055f4:	08005605 	.word	0x08005605
 80055f8:	08005615 	.word	0x08005615
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005602:	e116      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005604:	2302      	movs	r3, #2
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560a:	e112      	b.n	8005832 <UART_SetConfig+0x2e6>
 800560c:	2304      	movs	r3, #4
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005612:	e10e      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005614:	2308      	movs	r3, #8
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e10a      	b.n	8005832 <UART_SetConfig+0x2e6>
 800561c:	2310      	movs	r3, #16
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e106      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a7c      	ldr	r2, [pc, #496]	; (800581c <UART_SetConfig+0x2d0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d138      	bne.n	80056a0 <UART_SetConfig+0x154>
 800562e:	4b7a      	ldr	r3, [pc, #488]	; (8005818 <UART_SetConfig+0x2cc>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f003 030c 	and.w	r3, r3, #12
 8005638:	2b0c      	cmp	r3, #12
 800563a:	d82d      	bhi.n	8005698 <UART_SetConfig+0x14c>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0xf8>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005679 	.word	0x08005679
 8005648:	08005699 	.word	0x08005699
 800564c:	08005699 	.word	0x08005699
 8005650:	08005699 	.word	0x08005699
 8005654:	08005689 	.word	0x08005689
 8005658:	08005699 	.word	0x08005699
 800565c:	08005699 	.word	0x08005699
 8005660:	08005699 	.word	0x08005699
 8005664:	08005681 	.word	0x08005681
 8005668:	08005699 	.word	0x08005699
 800566c:	08005699 	.word	0x08005699
 8005670:	08005699 	.word	0x08005699
 8005674:	08005691 	.word	0x08005691
 8005678:	2300      	movs	r3, #0
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e0d8      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005680:	2302      	movs	r3, #2
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e0d4      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005688:	2304      	movs	r3, #4
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568e:	e0d0      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005690:	2308      	movs	r3, #8
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005696:	e0cc      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005698:	2310      	movs	r3, #16
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569e:	e0c8      	b.n	8005832 <UART_SetConfig+0x2e6>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a5e      	ldr	r2, [pc, #376]	; (8005820 <UART_SetConfig+0x2d4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d125      	bne.n	80056f6 <UART_SetConfig+0x1aa>
 80056aa:	4b5b      	ldr	r3, [pc, #364]	; (8005818 <UART_SetConfig+0x2cc>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056b4:	2b30      	cmp	r3, #48	; 0x30
 80056b6:	d016      	beq.n	80056e6 <UART_SetConfig+0x19a>
 80056b8:	2b30      	cmp	r3, #48	; 0x30
 80056ba:	d818      	bhi.n	80056ee <UART_SetConfig+0x1a2>
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d00a      	beq.n	80056d6 <UART_SetConfig+0x18a>
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d814      	bhi.n	80056ee <UART_SetConfig+0x1a2>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <UART_SetConfig+0x182>
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d008      	beq.n	80056de <UART_SetConfig+0x192>
 80056cc:	e00f      	b.n	80056ee <UART_SetConfig+0x1a2>
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d4:	e0ad      	b.n	8005832 <UART_SetConfig+0x2e6>
 80056d6:	2302      	movs	r3, #2
 80056d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056dc:	e0a9      	b.n	8005832 <UART_SetConfig+0x2e6>
 80056de:	2304      	movs	r3, #4
 80056e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e4:	e0a5      	b.n	8005832 <UART_SetConfig+0x2e6>
 80056e6:	2308      	movs	r3, #8
 80056e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ec:	e0a1      	b.n	8005832 <UART_SetConfig+0x2e6>
 80056ee:	2310      	movs	r3, #16
 80056f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f4:	e09d      	b.n	8005832 <UART_SetConfig+0x2e6>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a4a      	ldr	r2, [pc, #296]	; (8005824 <UART_SetConfig+0x2d8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d125      	bne.n	800574c <UART_SetConfig+0x200>
 8005700:	4b45      	ldr	r3, [pc, #276]	; (8005818 <UART_SetConfig+0x2cc>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800570a:	2bc0      	cmp	r3, #192	; 0xc0
 800570c:	d016      	beq.n	800573c <UART_SetConfig+0x1f0>
 800570e:	2bc0      	cmp	r3, #192	; 0xc0
 8005710:	d818      	bhi.n	8005744 <UART_SetConfig+0x1f8>
 8005712:	2b80      	cmp	r3, #128	; 0x80
 8005714:	d00a      	beq.n	800572c <UART_SetConfig+0x1e0>
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d814      	bhi.n	8005744 <UART_SetConfig+0x1f8>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <UART_SetConfig+0x1d8>
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d008      	beq.n	8005734 <UART_SetConfig+0x1e8>
 8005722:	e00f      	b.n	8005744 <UART_SetConfig+0x1f8>
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572a:	e082      	b.n	8005832 <UART_SetConfig+0x2e6>
 800572c:	2302      	movs	r3, #2
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005732:	e07e      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005734:	2304      	movs	r3, #4
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e07a      	b.n	8005832 <UART_SetConfig+0x2e6>
 800573c:	2308      	movs	r3, #8
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005742:	e076      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005744:	2310      	movs	r3, #16
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574a:	e072      	b.n	8005832 <UART_SetConfig+0x2e6>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a35      	ldr	r2, [pc, #212]	; (8005828 <UART_SetConfig+0x2dc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d12a      	bne.n	80057ac <UART_SetConfig+0x260>
 8005756:	4b30      	ldr	r3, [pc, #192]	; (8005818 <UART_SetConfig+0x2cc>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005764:	d01a      	beq.n	800579c <UART_SetConfig+0x250>
 8005766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576a:	d81b      	bhi.n	80057a4 <UART_SetConfig+0x258>
 800576c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005770:	d00c      	beq.n	800578c <UART_SetConfig+0x240>
 8005772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005776:	d815      	bhi.n	80057a4 <UART_SetConfig+0x258>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <UART_SetConfig+0x238>
 800577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005780:	d008      	beq.n	8005794 <UART_SetConfig+0x248>
 8005782:	e00f      	b.n	80057a4 <UART_SetConfig+0x258>
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578a:	e052      	b.n	8005832 <UART_SetConfig+0x2e6>
 800578c:	2302      	movs	r3, #2
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005792:	e04e      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005794:	2304      	movs	r3, #4
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579a:	e04a      	b.n	8005832 <UART_SetConfig+0x2e6>
 800579c:	2308      	movs	r3, #8
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a2:	e046      	b.n	8005832 <UART_SetConfig+0x2e6>
 80057a4:	2310      	movs	r3, #16
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057aa:	e042      	b.n	8005832 <UART_SetConfig+0x2e6>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a17      	ldr	r2, [pc, #92]	; (8005810 <UART_SetConfig+0x2c4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d13a      	bne.n	800582c <UART_SetConfig+0x2e0>
 80057b6:	4b18      	ldr	r3, [pc, #96]	; (8005818 <UART_SetConfig+0x2cc>)
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057c4:	d01a      	beq.n	80057fc <UART_SetConfig+0x2b0>
 80057c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ca:	d81b      	bhi.n	8005804 <UART_SetConfig+0x2b8>
 80057cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d0:	d00c      	beq.n	80057ec <UART_SetConfig+0x2a0>
 80057d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d6:	d815      	bhi.n	8005804 <UART_SetConfig+0x2b8>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <UART_SetConfig+0x298>
 80057dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e0:	d008      	beq.n	80057f4 <UART_SetConfig+0x2a8>
 80057e2:	e00f      	b.n	8005804 <UART_SetConfig+0x2b8>
 80057e4:	2300      	movs	r3, #0
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e022      	b.n	8005832 <UART_SetConfig+0x2e6>
 80057ec:	2302      	movs	r3, #2
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f2:	e01e      	b.n	8005832 <UART_SetConfig+0x2e6>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e01a      	b.n	8005832 <UART_SetConfig+0x2e6>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005802:	e016      	b.n	8005832 <UART_SetConfig+0x2e6>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580a:	e012      	b.n	8005832 <UART_SetConfig+0x2e6>
 800580c:	efff69f3 	.word	0xefff69f3
 8005810:	40008000 	.word	0x40008000
 8005814:	40013800 	.word	0x40013800
 8005818:	40021000 	.word	0x40021000
 800581c:	40004400 	.word	0x40004400
 8005820:	40004800 	.word	0x40004800
 8005824:	40004c00 	.word	0x40004c00
 8005828:	40005000 	.word	0x40005000
 800582c:	2310      	movs	r3, #16
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a9f      	ldr	r2, [pc, #636]	; (8005ab4 <UART_SetConfig+0x568>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d17a      	bne.n	8005932 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800583c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005840:	2b08      	cmp	r3, #8
 8005842:	d824      	bhi.n	800588e <UART_SetConfig+0x342>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <UART_SetConfig+0x300>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005871 	.word	0x08005871
 8005850:	0800588f 	.word	0x0800588f
 8005854:	08005879 	.word	0x08005879
 8005858:	0800588f 	.word	0x0800588f
 800585c:	0800587f 	.word	0x0800587f
 8005860:	0800588f 	.word	0x0800588f
 8005864:	0800588f 	.word	0x0800588f
 8005868:	0800588f 	.word	0x0800588f
 800586c:	08005887 	.word	0x08005887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005870:	f7fe fa62 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005874:	61f8      	str	r0, [r7, #28]
        break;
 8005876:	e010      	b.n	800589a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005878:	4b8f      	ldr	r3, [pc, #572]	; (8005ab8 <UART_SetConfig+0x56c>)
 800587a:	61fb      	str	r3, [r7, #28]
        break;
 800587c:	e00d      	b.n	800589a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587e:	f7fe f9c3 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8005882:	61f8      	str	r0, [r7, #28]
        break;
 8005884:	e009      	b.n	800589a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	61fb      	str	r3, [r7, #28]
        break;
 800588c:	e005      	b.n	800589a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80fb 	beq.w	8005a98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	4413      	add	r3, r2
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d305      	bcc.n	80058be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d903      	bls.n	80058c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058c4:	e0e8      	b.n	8005a98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	2200      	movs	r2, #0
 80058ca:	461c      	mov	r4, r3
 80058cc:	4615      	mov	r5, r2
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	022b      	lsls	r3, r5, #8
 80058d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80058dc:	0222      	lsls	r2, r4, #8
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	6849      	ldr	r1, [r1, #4]
 80058e2:	0849      	lsrs	r1, r1, #1
 80058e4:	2000      	movs	r0, #0
 80058e6:	4688      	mov	r8, r1
 80058e8:	4681      	mov	r9, r0
 80058ea:	eb12 0a08 	adds.w	sl, r2, r8
 80058ee:	eb43 0b09 	adc.w	fp, r3, r9
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005900:	4650      	mov	r0, sl
 8005902:	4659      	mov	r1, fp
 8005904:	f7fa fc64 	bl	80001d0 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4613      	mov	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005916:	d308      	bcc.n	800592a <UART_SetConfig+0x3de>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800591e:	d204      	bcs.n	800592a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	60da      	str	r2, [r3, #12]
 8005928:	e0b6      	b.n	8005a98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005930:	e0b2      	b.n	8005a98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593a:	d15e      	bne.n	80059fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800593c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005940:	2b08      	cmp	r3, #8
 8005942:	d828      	bhi.n	8005996 <UART_SetConfig+0x44a>
 8005944:	a201      	add	r2, pc, #4	; (adr r2, 800594c <UART_SetConfig+0x400>)
 8005946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594a:	bf00      	nop
 800594c:	08005971 	.word	0x08005971
 8005950:	08005979 	.word	0x08005979
 8005954:	08005981 	.word	0x08005981
 8005958:	08005997 	.word	0x08005997
 800595c:	08005987 	.word	0x08005987
 8005960:	08005997 	.word	0x08005997
 8005964:	08005997 	.word	0x08005997
 8005968:	08005997 	.word	0x08005997
 800596c:	0800598f 	.word	0x0800598f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005970:	f7fe f9e2 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005974:	61f8      	str	r0, [r7, #28]
        break;
 8005976:	e014      	b.n	80059a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005978:	f7fe f9f4 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 800597c:	61f8      	str	r0, [r7, #28]
        break;
 800597e:	e010      	b.n	80059a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005980:	4b4d      	ldr	r3, [pc, #308]	; (8005ab8 <UART_SetConfig+0x56c>)
 8005982:	61fb      	str	r3, [r7, #28]
        break;
 8005984:	e00d      	b.n	80059a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005986:	f7fe f93f 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 800598a:	61f8      	str	r0, [r7, #28]
        break;
 800598c:	e009      	b.n	80059a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005992:	61fb      	str	r3, [r7, #28]
        break;
 8005994:	e005      	b.n	80059a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d077      	beq.n	8005a98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	005a      	lsls	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	441a      	add	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2b0f      	cmp	r3, #15
 80059c2:	d916      	bls.n	80059f2 <UART_SetConfig+0x4a6>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ca:	d212      	bcs.n	80059f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f023 030f 	bic.w	r3, r3, #15
 80059d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	8afb      	ldrh	r3, [r7, #22]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	8afa      	ldrh	r2, [r7, #22]
 80059ee:	60da      	str	r2, [r3, #12]
 80059f0:	e052      	b.n	8005a98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059f8:	e04e      	b.n	8005a98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d827      	bhi.n	8005a52 <UART_SetConfig+0x506>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <UART_SetConfig+0x4bc>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a35 	.word	0x08005a35
 8005a10:	08005a3d 	.word	0x08005a3d
 8005a14:	08005a53 	.word	0x08005a53
 8005a18:	08005a43 	.word	0x08005a43
 8005a1c:	08005a53 	.word	0x08005a53
 8005a20:	08005a53 	.word	0x08005a53
 8005a24:	08005a53 	.word	0x08005a53
 8005a28:	08005a4b 	.word	0x08005a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a2c:	f7fe f984 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8005a30:	61f8      	str	r0, [r7, #28]
        break;
 8005a32:	e014      	b.n	8005a5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a34:	f7fe f996 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 8005a38:	61f8      	str	r0, [r7, #28]
        break;
 8005a3a:	e010      	b.n	8005a5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a3c:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <UART_SetConfig+0x56c>)
 8005a3e:	61fb      	str	r3, [r7, #28]
        break;
 8005a40:	e00d      	b.n	8005a5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a42:	f7fe f8e1 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8005a46:	61f8      	str	r0, [r7, #28]
        break;
 8005a48:	e009      	b.n	8005a5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4e:	61fb      	str	r3, [r7, #28]
        break;
 8005a50:	e005      	b.n	8005a5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a5c:	bf00      	nop
    }

    if (pclk != 0U)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d019      	beq.n	8005a98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	085a      	lsrs	r2, r3, #1
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	441a      	add	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b0f      	cmp	r3, #15
 8005a7c:	d909      	bls.n	8005a92 <UART_SetConfig+0x546>
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a84:	d205      	bcs.n	8005a92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60da      	str	r2, [r3, #12]
 8005a90:	e002      	b.n	8005a98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005aa4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3728      	adds	r7, #40	; 0x28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40008000 	.word	0x40008000
 8005ab8:	00f42400 	.word	0x00f42400

08005abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01a      	beq.n	8005bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bba:	d10a      	bne.n	8005bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b098      	sub	sp, #96	; 0x60
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c10:	f7fc fdd6 	bl	80027c0 <HAL_GetTick>
 8005c14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d12e      	bne.n	8005c82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f88c 	bl	8005d50 <UART_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d021      	beq.n	8005c82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c52:	653b      	str	r3, [r7, #80]	; 0x50
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e6      	bne.n	8005c3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e062      	b.n	8005d48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d149      	bne.n	8005d24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f856 	bl	8005d50 <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d03c      	beq.n	8005d24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e6      	bne.n	8005caa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cfc:	61fa      	str	r2, [r7, #28]
 8005cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	69b9      	ldr	r1, [r7, #24]
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	617b      	str	r3, [r7, #20]
   return(result);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e011      	b.n	8005d48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3758      	adds	r7, #88	; 0x58
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d60:	e049      	b.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d68:	d045      	beq.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6a:	f7fc fd29 	bl	80027c0 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d302      	bcc.n	8005d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e048      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d031      	beq.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d110      	bne.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2208      	movs	r2, #8
 8005da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f838 	bl	8005e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2208      	movs	r2, #8
 8005db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e029      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd0:	d111      	bne.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f81e 	bl	8005e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e00f      	b.n	8005e16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	bf0c      	ite	eq
 8005e06:	2301      	moveq	r3, #1
 8005e08:	2300      	movne	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d0a6      	beq.n	8005d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b095      	sub	sp, #84	; 0x54
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e44:	643b      	str	r3, [r7, #64]	; 0x40
 8005e46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e6      	bne.n	8005e26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3308      	adds	r3, #8
 8005e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e5      	bne.n	8005e58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d118      	bne.n	8005ec6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f023 0310 	bic.w	r3, r3, #16
 8005ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6979      	ldr	r1, [r7, #20]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e6      	bne.n	8005e94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005eda:	bf00      	nop
 8005edc:	3754      	adds	r7, #84	; 0x54
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <__NVIC_SetPriority>:
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	db0a      	blt.n	8005f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	490c      	ldr	r1, [pc, #48]	; (8005f34 <__NVIC_SetPriority+0x4c>)
 8005f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f06:	0112      	lsls	r2, r2, #4
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f10:	e00a      	b.n	8005f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	4908      	ldr	r1, [pc, #32]	; (8005f38 <__NVIC_SetPriority+0x50>)
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	3b04      	subs	r3, #4
 8005f20:	0112      	lsls	r2, r2, #4
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	440b      	add	r3, r1
 8005f26:	761a      	strb	r2, [r3, #24]
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	e000e100 	.word	0xe000e100
 8005f38:	e000ed00 	.word	0xe000ed00

08005f3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <SysTick_Handler+0x1c>)
 8005f42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f44:	f001 fe3a 	bl	8007bbc <xTaskGetSchedulerState>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d001      	beq.n	8005f52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f4e:	f002 fcdb 	bl	8008908 <xPortSysTickHandler>
  }
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	e000e010 	.word	0xe000e010

08005f5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f60:	2100      	movs	r1, #0
 8005f62:	f06f 0004 	mvn.w	r0, #4
 8005f66:	f7ff ffbf 	bl	8005ee8 <__NVIC_SetPriority>
#endif
}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f76:	f3ef 8305 	mrs	r3, IPSR
 8005f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f82:	f06f 0305 	mvn.w	r3, #5
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	e00c      	b.n	8005fa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <osKernelInitialize+0x44>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <osKernelInitialize+0x44>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	e002      	b.n	8005fa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fa4:	687b      	ldr	r3, [r7, #4]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	200001f4 	.word	0x200001f4

08005fb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fbe:	f3ef 8305 	mrs	r3, IPSR
 8005fc2:	603b      	str	r3, [r7, #0]
  return(result);
 8005fc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005fca:	f06f 0305 	mvn.w	r3, #5
 8005fce:	607b      	str	r3, [r7, #4]
 8005fd0:	e010      	b.n	8005ff4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fd2:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <osKernelStart+0x48>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d109      	bne.n	8005fee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fda:	f7ff ffbf 	bl	8005f5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fde:	4b08      	ldr	r3, [pc, #32]	; (8006000 <osKernelStart+0x48>)
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fe4:	f001 f9a2 	bl	800732c <vTaskStartScheduler>
      stat = osOK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	e002      	b.n	8005ff4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ff4:	687b      	ldr	r3, [r7, #4]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	200001f4 	.word	0x200001f4

08006004 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b08e      	sub	sp, #56	; 0x38
 8006008:	af04      	add	r7, sp, #16
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006014:	f3ef 8305 	mrs	r3, IPSR
 8006018:	617b      	str	r3, [r7, #20]
  return(result);
 800601a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800601c:	2b00      	cmp	r3, #0
 800601e:	d17e      	bne.n	800611e <osThreadNew+0x11a>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d07b      	beq.n	800611e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800602a:	2318      	movs	r3, #24
 800602c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006036:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d045      	beq.n	80060ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <osThreadNew+0x48>
        name = attr->name;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <osThreadNew+0x6e>
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	2b38      	cmp	r3, #56	; 0x38
 8006064:	d805      	bhi.n	8006072 <osThreadNew+0x6e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <osThreadNew+0x72>
        return (NULL);
 8006072:	2300      	movs	r3, #0
 8006074:	e054      	b.n	8006120 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	089b      	lsrs	r3, r3, #2
 8006084:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <osThreadNew+0xa8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b5b      	cmp	r3, #91	; 0x5b
 8006094:	d90a      	bls.n	80060ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800609a:	2b00      	cmp	r3, #0
 800609c:	d006      	beq.n	80060ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <osThreadNew+0xa8>
        mem = 1;
 80060a6:	2301      	movs	r3, #1
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	e010      	b.n	80060ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10c      	bne.n	80060ce <osThreadNew+0xca>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d108      	bne.n	80060ce <osThreadNew+0xca>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <osThreadNew+0xca>
          mem = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
 80060c8:	e001      	b.n	80060ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d110      	bne.n	80060f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060dc:	9202      	str	r2, [sp, #8]
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 feca 	bl	8006e84 <xTaskCreateStatic>
 80060f0:	4603      	mov	r3, r0
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	e013      	b.n	800611e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d110      	bne.n	800611e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f107 0310 	add.w	r3, r7, #16
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 ff15 	bl	8006f3e <xTaskCreate>
 8006114:	4603      	mov	r3, r0
 8006116:	2b01      	cmp	r3, #1
 8006118:	d001      	beq.n	800611e <osThreadNew+0x11a>
            hTask = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800611e:	693b      	ldr	r3, [r7, #16]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3728      	adds	r7, #40	; 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006130:	f3ef 8305 	mrs	r3, IPSR
 8006134:	60bb      	str	r3, [r7, #8]
  return(result);
 8006136:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <osDelay+0x1c>
    stat = osErrorISR;
 800613c:	f06f 0305 	mvn.w	r3, #5
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e007      	b.n	8006154 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <osDelay+0x2c>
      vTaskDelay(ticks);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 f8b8 	bl	80072c4 <vTaskDelay>
    }
  }

  return (stat);
 8006154:	68fb      	ldr	r3, [r7, #12]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f002 f9f0 	bl	800854c <pvTimerGetTimerID>
 800616c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	4610      	mov	r0, r2
 800617e:	4798      	blx	r3
  }
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b08c      	sub	sp, #48	; 0x30
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	460b      	mov	r3, r1
 8006196:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800619c:	f3ef 8305 	mrs	r3, IPSR
 80061a0:	613b      	str	r3, [r7, #16]
  return(result);
 80061a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d163      	bne.n	8006270 <osTimerNew+0xe8>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d060      	beq.n	8006270 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80061ae:	2008      	movs	r0, #8
 80061b0:	f002 fc3a 	bl	8008a28 <pvPortMalloc>
 80061b4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d059      	beq.n	8006270 <osTimerNew+0xe8>
      callb->func = func;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80061c8:	7afb      	ldrb	r3, [r7, #11]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d102      	bne.n	80061d4 <osTimerNew+0x4c>
        reload = pdFALSE;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
 80061d2:	e001      	b.n	80061d8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80061d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061dc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01c      	beq.n	8006222 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <osTimerNew+0x6e>
          name = attr->name;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d006      	beq.n	800620c <osTimerNew+0x84>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2b2b      	cmp	r3, #43	; 0x2b
 8006204:	d902      	bls.n	800620c <osTimerNew+0x84>
          mem = 1;
 8006206:	2301      	movs	r3, #1
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	e00c      	b.n	8006226 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d108      	bne.n	8006226 <osTimerNew+0x9e>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <osTimerNew+0x9e>
            mem = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	e001      	b.n	8006226 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d10c      	bne.n	8006246 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <osTimerNew+0xf4>)
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	2101      	movs	r1, #1
 800623c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800623e:	f001 fe06 	bl	8007e4e <xTimerCreateStatic>
 8006242:	6238      	str	r0, [r7, #32]
 8006244:	e00b      	b.n	800625e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d108      	bne.n	800625e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800624c:	4b0b      	ldr	r3, [pc, #44]	; (800627c <osTimerNew+0xf4>)
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	2101      	movs	r1, #1
 8006256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006258:	f001 fdd8 	bl	8007e0c <xTimerCreate>
 800625c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <osTimerNew+0xe8>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <osTimerNew+0xe8>
        vPortFree (callb);
 800626a:	6978      	ldr	r0, [r7, #20]
 800626c:	f002 fca8 	bl	8008bc0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006270:	6a3b      	ldr	r3, [r7, #32]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3728      	adds	r7, #40	; 0x28
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	0800615f 	.word	0x0800615f

08006280 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800628e:	f3ef 8305 	mrs	r3, IPSR
 8006292:	60fb      	str	r3, [r7, #12]
  return(result);
 8006294:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <osTimerStart+0x22>
    stat = osErrorISR;
 800629a:	f06f 0305 	mvn.w	r3, #5
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e017      	b.n	80062d2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <osTimerStart+0x30>
    stat = osErrorParameter;
 80062a8:	f06f 0303 	mvn.w	r3, #3
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e010      	b.n	80062d2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80062b0:	2300      	movs	r3, #0
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2300      	movs	r3, #0
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	2104      	movs	r1, #4
 80062ba:	6938      	ldr	r0, [r7, #16]
 80062bc:	f001 fe40 	bl	8007f40 <xTimerGenericCommand>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d102      	bne.n	80062cc <osTimerStart+0x4c>
      stat = osOK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e002      	b.n	80062d2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80062cc:	f06f 0302 	mvn.w	r3, #2
 80062d0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80062d2:	697b      	ldr	r3, [r7, #20]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a07      	ldr	r2, [pc, #28]	; (8006308 <vApplicationGetIdleTaskMemory+0x2c>)
 80062ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4a06      	ldr	r2, [pc, #24]	; (800630c <vApplicationGetIdleTaskMemory+0x30>)
 80062f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2280      	movs	r2, #128	; 0x80
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	200001f8 	.word	0x200001f8
 800630c:	20000254 	.word	0x20000254

08006310 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a07      	ldr	r2, [pc, #28]	; (800633c <vApplicationGetTimerTaskMemory+0x2c>)
 8006320:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4a06      	ldr	r2, [pc, #24]	; (8006340 <vApplicationGetTimerTaskMemory+0x30>)
 8006326:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20000454 	.word	0x20000454
 8006340:	200004b0 	.word	0x200004b0

08006344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f103 0208 	add.w	r2, r3, #8
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800635c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f103 0208 	add.w	r2, r3, #8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f103 0208 	add.w	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
}
 80063da:	bf00      	nop
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063fc:	d103      	bne.n	8006406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e00c      	b.n	8006420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3308      	adds	r3, #8
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	e002      	b.n	8006414 <vListInsert+0x2e>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	429a      	cmp	r2, r3
 800641e:	d2f6      	bcs.n	800640e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	601a      	str	r2, [r3, #0]
}
 800644c:	bf00      	nop
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6892      	ldr	r2, [r2, #8]
 800646e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6852      	ldr	r2, [r2, #4]
 8006478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d103      	bne.n	800648c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	1e5a      	subs	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064d6:	f002 f985 	bl	80087e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	441a      	add	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006506:	3b01      	subs	r3, #1
 8006508:	68f9      	ldr	r1, [r7, #12]
 800650a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	441a      	add	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	22ff      	movs	r2, #255	; 0xff
 800651a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	22ff      	movs	r2, #255	; 0xff
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d114      	bne.n	8006556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01a      	beq.n	800656a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3310      	adds	r3, #16
 8006538:	4618      	mov	r0, r3
 800653a:	f001 f981 	bl	8007840 <xTaskRemoveFromEventList>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d012      	beq.n	800656a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006544:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <xQueueGenericReset+0xcc>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	e009      	b.n	800656a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3310      	adds	r3, #16
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff fef2 	bl	8006344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3324      	adds	r3, #36	; 0x24
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff feed 	bl	8006344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800656a:	f002 f96b 	bl	8008844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800656e:	2301      	movs	r3, #1
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08e      	sub	sp, #56	; 0x38
 8006580:	af02      	add	r7, sp, #8
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <xQueueGenericCreateStatic+0x52>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <xQueueGenericCreateStatic+0x56>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <xQueueGenericCreateStatic+0x58>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	623b      	str	r3, [r7, #32]
}
 80065ea:	bf00      	nop
 80065ec:	e7fe      	b.n	80065ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <xQueueGenericCreateStatic+0x7e>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <xQueueGenericCreateStatic+0x82>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <xQueueGenericCreateStatic+0x84>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	61fb      	str	r3, [r7, #28]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800661a:	2350      	movs	r3, #80	; 0x50
 800661c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b50      	cmp	r3, #80	; 0x50
 8006622:	d00a      	beq.n	800663a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	61bb      	str	r3, [r7, #24]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800663a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800664e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	4613      	mov	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	68b9      	ldr	r1, [r7, #8]
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f805 	bl	800666c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006664:	4618      	mov	r0, r3
 8006666:	3730      	adds	r7, #48	; 0x30
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e002      	b.n	800668e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800669a:	2101      	movs	r1, #1
 800669c:	69b8      	ldr	r0, [r7, #24]
 800669e:	f7ff ff05 	bl	80064ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08e      	sub	sp, #56	; 0x38
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066c2:	2300      	movs	r3, #0
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xQueueGenericSend+0x32>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <xQueueGenericSend+0x40>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <xQueueGenericSend+0x44>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <xQueueGenericSend+0x46>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <xQueueGenericSend+0x60>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d103      	bne.n	8006722 <xQueueGenericSend+0x6e>
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <xQueueGenericSend+0x72>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <xQueueGenericSend+0x74>
 8006726:	2300      	movs	r3, #0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <xQueueGenericSend+0x8e>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	623b      	str	r3, [r7, #32]
}
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006742:	f001 fa3b 	bl	8007bbc <xTaskGetSchedulerState>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <xQueueGenericSend+0x9e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <xQueueGenericSend+0xa2>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <xQueueGenericSend+0xa4>
 8006756:	2300      	movs	r3, #0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <xQueueGenericSend+0xbe>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	61fb      	str	r3, [r7, #28]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006772:	f002 f837 	bl	80087e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <xQueueGenericSend+0xd4>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d129      	bne.n	80067dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800678e:	f000 fa0b 	bl	8006ba8 <prvCopyDataToQueue>
 8006792:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	2b00      	cmp	r3, #0
 800679a:	d010      	beq.n	80067be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	3324      	adds	r3, #36	; 0x24
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 f84d 	bl	8007840 <xTaskRemoveFromEventList>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d013      	beq.n	80067d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067ac:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <xQueueGenericSend+0x1f8>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	e00a      	b.n	80067d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067c4:	4b39      	ldr	r3, [pc, #228]	; (80068ac <xQueueGenericSend+0x1f8>)
 80067c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067d4:	f002 f836 	bl	8008844 <vPortExitCritical>
				return pdPASS;
 80067d8:	2301      	movs	r3, #1
 80067da:	e063      	b.n	80068a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067e2:	f002 f82f 	bl	8008844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e05c      	b.n	80068a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	4618      	mov	r0, r3
 80067f6:	f001 f887 	bl	8007908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067fa:	2301      	movs	r3, #1
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067fe:	f002 f821 	bl	8008844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006802:	f000 fdf9 	bl	80073f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006806:	f001 ffed 	bl	80087e4 <vPortEnterCritical>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006810:	b25b      	sxtb	r3, r3
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006816:	d103      	bne.n	8006820 <xQueueGenericSend+0x16c>
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006826:	b25b      	sxtb	r3, r3
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800682c:	d103      	bne.n	8006836 <xQueueGenericSend+0x182>
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006836:	f002 f805 	bl	8008844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800683a:	1d3a      	adds	r2, r7, #4
 800683c:	f107 0314 	add.w	r3, r7, #20
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f001 f876 	bl	8007934 <xTaskCheckForTimeOut>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d124      	bne.n	8006898 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800684e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006850:	f000 faa2 	bl	8006d98 <prvIsQueueFull>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d018      	beq.n	800688c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	3310      	adds	r3, #16
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f000 ff9c 	bl	80077a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800686a:	f000 fa2d 	bl	8006cc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800686e:	f000 fdd1 	bl	8007414 <xTaskResumeAll>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f af7c 	bne.w	8006772 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800687a:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <xQueueGenericSend+0x1f8>)
 800687c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	e772      	b.n	8006772 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800688c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800688e:	f000 fa1b 	bl	8006cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006892:	f000 fdbf 	bl	8007414 <xTaskResumeAll>
 8006896:	e76c      	b.n	8006772 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800689a:	f000 fa15 	bl	8006cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800689e:	f000 fdb9 	bl	8007414 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3738      	adds	r7, #56	; 0x38
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	e000ed04 	.word	0xe000ed04

080068b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b090      	sub	sp, #64	; 0x40
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <xQueueGenericSendFromISR+0x3c>
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <xQueueGenericSendFromISR+0x40>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <xQueueGenericSendFromISR+0x42>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d103      	bne.n	800691a <xQueueGenericSendFromISR+0x6a>
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <xQueueGenericSendFromISR+0x6e>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <xQueueGenericSendFromISR+0x70>
 800691e:	2300      	movs	r3, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	623b      	str	r3, [r7, #32]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800693a:	f002 f835 	bl	80089a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800693e:	f3ef 8211 	mrs	r2, BASEPRI
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	61fa      	str	r2, [r7, #28]
 8006954:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006956:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <xQueueGenericSendFromISR+0xbc>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d12f      	bne.n	80069cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006982:	f000 f911 	bl	8006ba8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006986:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800698e:	d112      	bne.n	80069b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	d016      	beq.n	80069c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	3324      	adds	r3, #36	; 0x24
 800699c:	4618      	mov	r0, r3
 800699e:	f000 ff4f 	bl	8007840 <xTaskRemoveFromEventList>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00e      	beq.n	80069c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e007      	b.n	80069c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	b25a      	sxtb	r2, r3
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80069c6:	2301      	movs	r3, #1
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80069ca:	e001      	b.n	80069d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3740      	adds	r7, #64	; 0x40
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08c      	sub	sp, #48	; 0x30
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <xQueueReceive+0x30>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	623b      	str	r3, [r7, #32]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <xQueueReceive+0x3e>
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <xQueueReceive+0x42>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <xQueueReceive+0x44>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xQueueReceive+0x5e>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61fb      	str	r3, [r7, #28]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a46:	f001 f8b9 	bl	8007bbc <xTaskGetSchedulerState>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <xQueueReceive+0x6e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <xQueueReceive+0x72>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <xQueueReceive+0x74>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <xQueueReceive+0x8e>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	61bb      	str	r3, [r7, #24]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a76:	f001 feb5 	bl	80087e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01f      	beq.n	8006ac6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8a:	f000 f8f7 	bl	8006c7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	1e5a      	subs	r2, r3, #1
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00f      	beq.n	8006abe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	3310      	adds	r3, #16
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fecc 	bl	8007840 <xTaskRemoveFromEventList>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aae:	4b3d      	ldr	r3, [pc, #244]	; (8006ba4 <xQueueReceive+0x1bc>)
 8006ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006abe:	f001 fec1 	bl	8008844 <vPortExitCritical>
				return pdPASS;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e069      	b.n	8006b9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006acc:	f001 feba 	bl	8008844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e062      	b.n	8006b9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ada:	f107 0310 	add.w	r3, r7, #16
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 ff12 	bl	8007908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ae8:	f001 feac 	bl	8008844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aec:	f000 fc84 	bl	80073f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006af0:	f001 fe78 	bl	80087e4 <vPortEnterCritical>
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b00:	d103      	bne.n	8006b0a <xQueueReceive+0x122>
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b16:	d103      	bne.n	8006b20 <xQueueReceive+0x138>
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b20:	f001 fe90 	bl	8008844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b24:	1d3a      	adds	r2, r7, #4
 8006b26:	f107 0310 	add.w	r3, r7, #16
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 ff01 	bl	8007934 <xTaskCheckForTimeOut>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d123      	bne.n	8006b80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b3a:	f000 f917 	bl	8006d6c <prvIsQueueEmpty>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d017      	beq.n	8006b74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	3324      	adds	r3, #36	; 0x24
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fe27 	bl	80077a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b54:	f000 f8b8 	bl	8006cc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b58:	f000 fc5c 	bl	8007414 <xTaskResumeAll>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d189      	bne.n	8006a76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b62:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <xQueueReceive+0x1bc>)
 8006b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	e780      	b.n	8006a76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b76:	f000 f8a7 	bl	8006cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b7a:	f000 fc4b 	bl	8007414 <xTaskResumeAll>
 8006b7e:	e77a      	b.n	8006a76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b82:	f000 f8a1 	bl	8006cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b86:	f000 fc45 	bl	8007414 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8c:	f000 f8ee 	bl	8006d6c <prvIsQueueEmpty>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f43f af6f 	beq.w	8006a76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3730      	adds	r7, #48	; 0x30
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10d      	bne.n	8006be2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d14d      	bne.n	8006c6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f810 	bl	8007bf8 <xTaskPriorityDisinherit>
 8006bd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	e043      	b.n	8006c6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d119      	bne.n	8006c1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6858      	ldr	r0, [r3, #4]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	f002 f92e 	bl	8008e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	441a      	add	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d32b      	bcc.n	8006c6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	605a      	str	r2, [r3, #4]
 8006c1a:	e026      	b.n	8006c6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68d8      	ldr	r0, [r3, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	461a      	mov	r2, r3
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	f002 f914 	bl	8008e54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	425b      	negs	r3, r3
 8006c36:	441a      	add	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d207      	bcs.n	8006c58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	425b      	negs	r3, r3
 8006c52:	441a      	add	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d105      	bne.n	8006c6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c72:	697b      	ldr	r3, [r7, #20]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d018      	beq.n	8006cc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	441a      	add	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d303      	bcc.n	8006cb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68d9      	ldr	r1, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6838      	ldr	r0, [r7, #0]
 8006cbc:	f002 f8ca 	bl	8008e54 <memcpy>
	}
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cd0:	f001 fd88 	bl	80087e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cdc:	e011      	b.n	8006d02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d012      	beq.n	8006d0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3324      	adds	r3, #36	; 0x24
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fda8 	bl	8007840 <xTaskRemoveFromEventList>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006cf6:	f000 fe7f 	bl	80079f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	dce9      	bgt.n	8006cde <prvUnlockQueue+0x16>
 8006d0a:	e000      	b.n	8006d0e <prvUnlockQueue+0x46>
					break;
 8006d0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	22ff      	movs	r2, #255	; 0xff
 8006d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d16:	f001 fd95 	bl	8008844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d1a:	f001 fd63 	bl	80087e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d26:	e011      	b.n	8006d4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d012      	beq.n	8006d56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3310      	adds	r3, #16
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fd83 	bl	8007840 <xTaskRemoveFromEventList>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d40:	f000 fe5a 	bl	80079f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dce9      	bgt.n	8006d28 <prvUnlockQueue+0x60>
 8006d54:	e000      	b.n	8006d58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	22ff      	movs	r2, #255	; 0xff
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d60:	f001 fd70 	bl	8008844 <vPortExitCritical>
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d74:	f001 fd36 	bl	80087e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d80:	2301      	movs	r3, #1
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e001      	b.n	8006d8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d8a:	f001 fd5b 	bl	8008844 <vPortExitCritical>

	return xReturn;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006da0:	f001 fd20 	bl	80087e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d102      	bne.n	8006db6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e001      	b.n	8006dba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dba:	f001 fd43 	bl	8008844 <vPortExitCritical>

	return xReturn;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	e014      	b.n	8006e02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006dd8:	4a0f      	ldr	r2, [pc, #60]	; (8006e18 <vQueueAddToRegistry+0x50>)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006de4:	490c      	ldr	r1, [pc, #48]	; (8006e18 <vQueueAddToRegistry+0x50>)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006dee:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <vQueueAddToRegistry+0x50>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	4413      	add	r3, r2
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006dfa:	e006      	b.n	8006e0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b07      	cmp	r3, #7
 8006e06:	d9e7      	bls.n	8006dd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	200008b0 	.word	0x200008b0

08006e1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e2c:	f001 fcda 	bl	80087e4 <vPortEnterCritical>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e36:	b25b      	sxtb	r3, r3
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e3c:	d103      	bne.n	8006e46 <vQueueWaitForMessageRestricted+0x2a>
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e52:	d103      	bne.n	8006e5c <vQueueWaitForMessageRestricted+0x40>
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e5c:	f001 fcf2 	bl	8008844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	3324      	adds	r3, #36	; 0x24
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fcb9 	bl	80077e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e76:	6978      	ldr	r0, [r7, #20]
 8006e78:	f7ff ff26 	bl	8006cc8 <prvUnlockQueue>
	}
 8006e7c:	bf00      	nop
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08e      	sub	sp, #56	; 0x38
 8006e88:	af04      	add	r7, sp, #16
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	623b      	str	r3, [r7, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xTaskCreateStatic+0x46>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	61fb      	str	r3, [r7, #28]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eca:	235c      	movs	r3, #92	; 0x5c
 8006ecc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ed2:	d00a      	beq.n	8006eea <xTaskCreateStatic+0x66>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	61bb      	str	r3, [r7, #24]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006eea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01e      	beq.n	8006f30 <xTaskCreateStatic+0xac>
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01b      	beq.n	8006f30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	2202      	movs	r2, #2
 8006f06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9303      	str	r3, [sp, #12]
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	9302      	str	r3, [sp, #8]
 8006f12:	f107 0314 	add.w	r3, r7, #20
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 f850 	bl	8006fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f2a:	f000 f8dd 	bl	80070e8 <prvAddNewTaskToReadyList>
 8006f2e:	e001      	b.n	8006f34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f34:	697b      	ldr	r3, [r7, #20]
	}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3728      	adds	r7, #40	; 0x28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b08c      	sub	sp, #48	; 0x30
 8006f42:	af04      	add	r7, sp, #16
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 fd68 	bl	8008a28 <pvPortMalloc>
 8006f58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00e      	beq.n	8006f7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f60:	205c      	movs	r0, #92	; 0x5c
 8006f62:	f001 fd61 	bl	8008a28 <pvPortMalloc>
 8006f66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
 8006f74:	e005      	b.n	8006f82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f76:	6978      	ldr	r0, [r7, #20]
 8006f78:	f001 fe22 	bl	8008bc0 <vPortFree>
 8006f7c:	e001      	b.n	8006f82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d017      	beq.n	8006fb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	2300      	movs	r3, #0
 8006f94:	9303      	str	r3, [sp, #12]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	9302      	str	r3, [sp, #8]
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f80e 	bl	8006fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fac:	69f8      	ldr	r0, [r7, #28]
 8006fae:	f000 f89b 	bl	80070e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e002      	b.n	8006fbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
	}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	461a      	mov	r2, r3
 8006fe0:	21a5      	movs	r1, #165	; 0xa5
 8006fe2:	f001 ff0b 	bl	8008dfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <prvInitialiseNewTask+0x58>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	617b      	str	r3, [r7, #20]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01f      	beq.n	8007066 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	e012      	b.n	8007052 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	7819      	ldrb	r1, [r3, #0]
 8007034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	3334      	adds	r3, #52	; 0x34
 800703c:	460a      	mov	r2, r1
 800703e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4413      	add	r3, r2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	3301      	adds	r3, #1
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b0f      	cmp	r3, #15
 8007056:	d9e9      	bls.n	800702c <prvInitialiseNewTask+0x64>
 8007058:	e000      	b.n	800705c <prvInitialiseNewTask+0x94>
			{
				break;
 800705a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007064:	e003      	b.n	800706e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	2b37      	cmp	r3, #55	; 0x37
 8007072:	d901      	bls.n	8007078 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007074:	2337      	movs	r3, #55	; 0x37
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800707c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007082:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	2200      	movs	r2, #0
 8007088:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	3304      	adds	r3, #4
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff f978 	bl	8006384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	3318      	adds	r3, #24
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff f973 	bl	8006384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	2200      	movs	r2, #0
 80070b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	68f9      	ldr	r1, [r7, #12]
 80070c6:	69b8      	ldr	r0, [r7, #24]
 80070c8:	f001 fa60 	bl	800858c <pxPortInitialiseStack>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070de:	bf00      	nop
 80070e0:	3720      	adds	r7, #32
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070f0:	f001 fb78 	bl	80087e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070f4:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <prvAddNewTaskToReadyList+0xc4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3301      	adds	r3, #1
 80070fa:	4a2c      	ldr	r2, [pc, #176]	; (80071ac <prvAddNewTaskToReadyList+0xc4>)
 80070fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070fe:	4b2c      	ldr	r3, [pc, #176]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007106:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800710c:	4b27      	ldr	r3, [pc, #156]	; (80071ac <prvAddNewTaskToReadyList+0xc4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d110      	bne.n	8007136 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007114:	f000 fc94 	bl	8007a40 <prvInitialiseTaskLists>
 8007118:	e00d      	b.n	8007136 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800711a:	4b26      	ldr	r3, [pc, #152]	; (80071b4 <prvAddNewTaskToReadyList+0xcc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007122:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	429a      	cmp	r2, r3
 800712e:	d802      	bhi.n	8007136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007130:	4a1f      	ldr	r2, [pc, #124]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007136:	4b20      	ldr	r3, [pc, #128]	; (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	4a1e      	ldr	r2, [pc, #120]	; (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 800713e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007140:	4b1d      	ldr	r3, [pc, #116]	; (80071b8 <prvAddNewTaskToReadyList+0xd0>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714c:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <prvAddNewTaskToReadyList+0xd4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d903      	bls.n	800715c <prvAddNewTaskToReadyList+0x74>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	4a18      	ldr	r2, [pc, #96]	; (80071bc <prvAddNewTaskToReadyList+0xd4>)
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <prvAddNewTaskToReadyList+0xd8>)
 800716a:	441a      	add	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3304      	adds	r3, #4
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	f7ff f913 	bl	800639e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007178:	f001 fb64 	bl	8008844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800717c:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <prvAddNewTaskToReadyList+0xcc>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007184:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <prvAddNewTaskToReadyList+0xc8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	429a      	cmp	r2, r3
 8007190:	d207      	bcs.n	80071a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <prvAddNewTaskToReadyList+0xdc>)
 8007194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000dc4 	.word	0x20000dc4
 80071b0:	200008f0 	.word	0x200008f0
 80071b4:	20000dd0 	.word	0x20000dd0
 80071b8:	20000de0 	.word	0x20000de0
 80071bc:	20000dcc 	.word	0x20000dcc
 80071c0:	200008f4 	.word	0x200008f4
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <vTaskDelayUntil+0x2a>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	617b      	str	r3, [r7, #20]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <vTaskDelayUntil+0x46>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	613b      	str	r3, [r7, #16]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800720e:	4b2a      	ldr	r3, [pc, #168]	; (80072b8 <vTaskDelayUntil+0xf0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <vTaskDelayUntil+0x64>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60fb      	str	r3, [r7, #12]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800722c:	f000 f8e4 	bl	80073f8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007230:	4b22      	ldr	r3, [pc, #136]	; (80072bc <vTaskDelayUntil+0xf4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4413      	add	r3, r2
 800723e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	429a      	cmp	r2, r3
 8007248:	d20b      	bcs.n	8007262 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	429a      	cmp	r2, r3
 8007252:	d211      	bcs.n	8007278 <vTaskDelayUntil+0xb0>
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	429a      	cmp	r2, r3
 800725a:	d90d      	bls.n	8007278 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800725c:	2301      	movs	r3, #1
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
 8007260:	e00a      	b.n	8007278 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	429a      	cmp	r2, r3
 800726a:	d303      	bcc.n	8007274 <vTaskDelayUntil+0xac>
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	429a      	cmp	r2, r3
 8007272:	d901      	bls.n	8007278 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007274:	2301      	movs	r3, #1
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2100      	movs	r1, #0
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fd21 	bl	8007cd4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007292:	f000 f8bf 	bl	8007414 <xTaskResumeAll>
 8007296:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d107      	bne.n	80072ae <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800729e:	4b08      	ldr	r3, [pc, #32]	; (80072c0 <vTaskDelayUntil+0xf8>)
 80072a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072ae:	bf00      	nop
 80072b0:	3728      	adds	r7, #40	; 0x28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000dec 	.word	0x20000dec
 80072bc:	20000dc8 	.word	0x20000dc8
 80072c0:	e000ed04 	.word	0xe000ed04

080072c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072d6:	4b13      	ldr	r3, [pc, #76]	; (8007324 <vTaskDelay+0x60>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <vTaskDelay+0x30>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	60bb      	str	r3, [r7, #8]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072f4:	f000 f880 	bl	80073f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072f8:	2100      	movs	r1, #0
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fcea 	bl	8007cd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007300:	f000 f888 	bl	8007414 <xTaskResumeAll>
 8007304:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d107      	bne.n	800731c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800730c:	4b06      	ldr	r3, [pc, #24]	; (8007328 <vTaskDelay+0x64>)
 800730e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000dec 	.word	0x20000dec
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	; 0x28
 8007330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007332:	2300      	movs	r3, #0
 8007334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800733a:	463a      	mov	r2, r7
 800733c:	1d39      	adds	r1, r7, #4
 800733e:	f107 0308 	add.w	r3, r7, #8
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe ffca 	bl	80062dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	9202      	str	r2, [sp, #8]
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	2300      	movs	r3, #0
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	460a      	mov	r2, r1
 800735a:	4921      	ldr	r1, [pc, #132]	; (80073e0 <vTaskStartScheduler+0xb4>)
 800735c:	4821      	ldr	r0, [pc, #132]	; (80073e4 <vTaskStartScheduler+0xb8>)
 800735e:	f7ff fd91 	bl	8006e84 <xTaskCreateStatic>
 8007362:	4603      	mov	r3, r0
 8007364:	4a20      	ldr	r2, [pc, #128]	; (80073e8 <vTaskStartScheduler+0xbc>)
 8007366:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007368:	4b1f      	ldr	r3, [pc, #124]	; (80073e8 <vTaskStartScheduler+0xbc>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007370:	2301      	movs	r3, #1
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	e001      	b.n	800737a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d102      	bne.n	8007386 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007380:	f000 fcfc 	bl	8007d7c <xTimerCreateTimerTask>
 8007384:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d116      	bne.n	80073ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	613b      	str	r3, [r7, #16]
}
 800739e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073a0:	4b12      	ldr	r3, [pc, #72]	; (80073ec <vTaskStartScheduler+0xc0>)
 80073a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073a8:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <vTaskStartScheduler+0xc4>)
 80073aa:	2201      	movs	r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073ae:	4b11      	ldr	r3, [pc, #68]	; (80073f4 <vTaskStartScheduler+0xc8>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073b4:	f001 f974 	bl	80086a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073b8:	e00e      	b.n	80073d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073c0:	d10a      	bne.n	80073d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	60fb      	str	r3, [r7, #12]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <vTaskStartScheduler+0xaa>
}
 80073d8:	bf00      	nop
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	08008ecc 	.word	0x08008ecc
 80073e4:	08007a11 	.word	0x08007a11
 80073e8:	20000de8 	.word	0x20000de8
 80073ec:	20000de4 	.word	0x20000de4
 80073f0:	20000dd0 	.word	0x20000dd0
 80073f4:	20000dc8 	.word	0x20000dc8

080073f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <vTaskSuspendAll+0x18>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3301      	adds	r3, #1
 8007402:	4a03      	ldr	r2, [pc, #12]	; (8007410 <vTaskSuspendAll+0x18>)
 8007404:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007406:	bf00      	nop
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	20000dec 	.word	0x20000dec

08007414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007422:	4b42      	ldr	r3, [pc, #264]	; (800752c <xTaskResumeAll+0x118>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xTaskResumeAll+0x2c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	603b      	str	r3, [r7, #0]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007440:	f001 f9d0 	bl	80087e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007444:	4b39      	ldr	r3, [pc, #228]	; (800752c <xTaskResumeAll+0x118>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3b01      	subs	r3, #1
 800744a:	4a38      	ldr	r2, [pc, #224]	; (800752c <xTaskResumeAll+0x118>)
 800744c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800744e:	4b37      	ldr	r3, [pc, #220]	; (800752c <xTaskResumeAll+0x118>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d162      	bne.n	800751c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007456:	4b36      	ldr	r3, [pc, #216]	; (8007530 <xTaskResumeAll+0x11c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d05e      	beq.n	800751c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800745e:	e02f      	b.n	80074c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007460:	4b34      	ldr	r3, [pc, #208]	; (8007534 <xTaskResumeAll+0x120>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3318      	adds	r3, #24
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fff3 	bl	8006458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3304      	adds	r3, #4
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe ffee 	bl	8006458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	4b2d      	ldr	r3, [pc, #180]	; (8007538 <xTaskResumeAll+0x124>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d903      	bls.n	8007490 <xTaskResumeAll+0x7c>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <xTaskResumeAll+0x124>)
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4a27      	ldr	r2, [pc, #156]	; (800753c <xTaskResumeAll+0x128>)
 800749e:	441a      	add	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3304      	adds	r3, #4
 80074a4:	4619      	mov	r1, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	f7fe ff79 	bl	800639e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	4b23      	ldr	r3, [pc, #140]	; (8007540 <xTaskResumeAll+0x12c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d302      	bcc.n	80074c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074ba:	4b22      	ldr	r3, [pc, #136]	; (8007544 <xTaskResumeAll+0x130>)
 80074bc:	2201      	movs	r2, #1
 80074be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074c0:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <xTaskResumeAll+0x120>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1cb      	bne.n	8007460 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074ce:	f000 fb55 	bl	8007b7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074d2:	4b1d      	ldr	r3, [pc, #116]	; (8007548 <xTaskResumeAll+0x134>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d010      	beq.n	8007500 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074de:	f000 f847 	bl	8007570 <xTaskIncrementTick>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80074e8:	4b16      	ldr	r3, [pc, #88]	; (8007544 <xTaskResumeAll+0x130>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1f1      	bne.n	80074de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80074fa:	4b13      	ldr	r3, [pc, #76]	; (8007548 <xTaskResumeAll+0x134>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <xTaskResumeAll+0x130>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800750c:	4b0f      	ldr	r3, [pc, #60]	; (800754c <xTaskResumeAll+0x138>)
 800750e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800751c:	f001 f992 	bl	8008844 <vPortExitCritical>

	return xAlreadyYielded;
 8007520:	68bb      	ldr	r3, [r7, #8]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20000dec 	.word	0x20000dec
 8007530:	20000dc4 	.word	0x20000dc4
 8007534:	20000d84 	.word	0x20000d84
 8007538:	20000dcc 	.word	0x20000dcc
 800753c:	200008f4 	.word	0x200008f4
 8007540:	200008f0 	.word	0x200008f0
 8007544:	20000dd8 	.word	0x20000dd8
 8007548:	20000dd4 	.word	0x20000dd4
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <xTaskGetTickCount+0x1c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800755c:	687b      	ldr	r3, [r7, #4]
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	20000dc8 	.word	0x20000dc8

08007570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007576:	2300      	movs	r3, #0
 8007578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800757a:	4b4f      	ldr	r3, [pc, #316]	; (80076b8 <xTaskIncrementTick+0x148>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f040 808f 	bne.w	80076a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007584:	4b4d      	ldr	r3, [pc, #308]	; (80076bc <xTaskIncrementTick+0x14c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800758c:	4a4b      	ldr	r2, [pc, #300]	; (80076bc <xTaskIncrementTick+0x14c>)
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d120      	bne.n	80075da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007598:	4b49      	ldr	r3, [pc, #292]	; (80076c0 <xTaskIncrementTick+0x150>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	603b      	str	r3, [r7, #0]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xTaskIncrementTick+0x46>
 80075b8:	4b41      	ldr	r3, [pc, #260]	; (80076c0 <xTaskIncrementTick+0x150>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	4b41      	ldr	r3, [pc, #260]	; (80076c4 <xTaskIncrementTick+0x154>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a3f      	ldr	r2, [pc, #252]	; (80076c0 <xTaskIncrementTick+0x150>)
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	4a3f      	ldr	r2, [pc, #252]	; (80076c4 <xTaskIncrementTick+0x154>)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	4b3e      	ldr	r3, [pc, #248]	; (80076c8 <xTaskIncrementTick+0x158>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3301      	adds	r3, #1
 80075d2:	4a3d      	ldr	r2, [pc, #244]	; (80076c8 <xTaskIncrementTick+0x158>)
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	f000 fad1 	bl	8007b7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075da:	4b3c      	ldr	r3, [pc, #240]	; (80076cc <xTaskIncrementTick+0x15c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d349      	bcc.n	8007678 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e4:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <xTaskIncrementTick+0x150>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d104      	bne.n	80075f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ee:	4b37      	ldr	r3, [pc, #220]	; (80076cc <xTaskIncrementTick+0x15c>)
 80075f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075f4:	601a      	str	r2, [r3, #0]
					break;
 80075f6:	e03f      	b.n	8007678 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f8:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <xTaskIncrementTick+0x150>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	d203      	bcs.n	8007618 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007610:	4a2e      	ldr	r2, [pc, #184]	; (80076cc <xTaskIncrementTick+0x15c>)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007616:	e02f      	b.n	8007678 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3304      	adds	r3, #4
 800761c:	4618      	mov	r0, r3
 800761e:	f7fe ff1b 	bl	8006458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	3318      	adds	r3, #24
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe ff12 	bl	8006458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <xTaskIncrementTick+0x160>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d903      	bls.n	8007648 <xTaskIncrementTick+0xd8>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	4a22      	ldr	r2, [pc, #136]	; (80076d0 <xTaskIncrementTick+0x160>)
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4a1f      	ldr	r2, [pc, #124]	; (80076d4 <xTaskIncrementTick+0x164>)
 8007656:	441a      	add	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3304      	adds	r3, #4
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	f7fe fe9d 	bl	800639e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <xTaskIncrementTick+0x168>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766e:	429a      	cmp	r2, r3
 8007670:	d3b8      	bcc.n	80075e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007672:	2301      	movs	r3, #1
 8007674:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007676:	e7b5      	b.n	80075e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007678:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <xTaskIncrementTick+0x168>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767e:	4915      	ldr	r1, [pc, #84]	; (80076d4 <xTaskIncrementTick+0x164>)
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d901      	bls.n	8007694 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007694:	4b11      	ldr	r3, [pc, #68]	; (80076dc <xTaskIncrementTick+0x16c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800769c:	2301      	movs	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e004      	b.n	80076ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <xTaskIncrementTick+0x170>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	4a0d      	ldr	r2, [pc, #52]	; (80076e0 <xTaskIncrementTick+0x170>)
 80076aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076ac:	697b      	ldr	r3, [r7, #20]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000dec 	.word	0x20000dec
 80076bc:	20000dc8 	.word	0x20000dc8
 80076c0:	20000d7c 	.word	0x20000d7c
 80076c4:	20000d80 	.word	0x20000d80
 80076c8:	20000ddc 	.word	0x20000ddc
 80076cc:	20000de4 	.word	0x20000de4
 80076d0:	20000dcc 	.word	0x20000dcc
 80076d4:	200008f4 	.word	0x200008f4
 80076d8:	200008f0 	.word	0x200008f0
 80076dc:	20000dd8 	.word	0x20000dd8
 80076e0:	20000dd4 	.word	0x20000dd4

080076e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076ea:	4b28      	ldr	r3, [pc, #160]	; (800778c <vTaskSwitchContext+0xa8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076f2:	4b27      	ldr	r3, [pc, #156]	; (8007790 <vTaskSwitchContext+0xac>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076f8:	e041      	b.n	800777e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80076fa:	4b25      	ldr	r3, [pc, #148]	; (8007790 <vTaskSwitchContext+0xac>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007700:	4b24      	ldr	r3, [pc, #144]	; (8007794 <vTaskSwitchContext+0xb0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	e010      	b.n	800772a <vTaskSwitchContext+0x46>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <vTaskSwitchContext+0x40>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	607b      	str	r3, [r7, #4]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <vTaskSwitchContext+0x3e>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3b01      	subs	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	491b      	ldr	r1, [pc, #108]	; (8007798 <vTaskSwitchContext+0xb4>)
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0e4      	beq.n	8007708 <vTaskSwitchContext+0x24>
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4613      	mov	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4a13      	ldr	r2, [pc, #76]	; (8007798 <vTaskSwitchContext+0xb4>)
 800774a:	4413      	add	r3, r2
 800774c:	60bb      	str	r3, [r7, #8]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	605a      	str	r2, [r3, #4]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	3308      	adds	r3, #8
 8007760:	429a      	cmp	r2, r3
 8007762:	d104      	bne.n	800776e <vTaskSwitchContext+0x8a>
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	605a      	str	r2, [r3, #4]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	4a09      	ldr	r2, [pc, #36]	; (800779c <vTaskSwitchContext+0xb8>)
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	4a06      	ldr	r2, [pc, #24]	; (8007794 <vTaskSwitchContext+0xb0>)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6013      	str	r3, [r2, #0]
}
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	20000dec 	.word	0x20000dec
 8007790:	20000dd8 	.word	0x20000dd8
 8007794:	20000dcc 	.word	0x20000dcc
 8007798:	200008f4 	.word	0x200008f4
 800779c:	200008f0 	.word	0x200008f0

080077a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	60fb      	str	r3, [r7, #12]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077c6:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <vTaskPlaceOnEventList+0x44>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3318      	adds	r3, #24
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fe fe09 	bl	80063e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077d4:	2101      	movs	r1, #1
 80077d6:	6838      	ldr	r0, [r7, #0]
 80077d8:	f000 fa7c 	bl	8007cd4 <prvAddCurrentTaskToDelayedList>
}
 80077dc:	bf00      	nop
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	200008f0 	.word	0x200008f0

080077e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	617b      	str	r3, [r7, #20]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <vTaskPlaceOnEventListRestricted+0x54>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3318      	adds	r3, #24
 8007816:	4619      	mov	r1, r3
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7fe fdc0 	bl	800639e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007828:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	68b8      	ldr	r0, [r7, #8]
 800782e:	f000 fa51 	bl	8007cd4 <prvAddCurrentTaskToDelayedList>
	}
 8007832:	bf00      	nop
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200008f0 	.word	0x200008f0

08007840 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	60fb      	str	r3, [r7, #12]
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	3318      	adds	r3, #24
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe fdf1 	bl	8006458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007876:	4b1e      	ldr	r3, [pc, #120]	; (80078f0 <xTaskRemoveFromEventList+0xb0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d11d      	bne.n	80078ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	3304      	adds	r3, #4
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fde8 	bl	8006458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <xTaskRemoveFromEventList+0xb4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d903      	bls.n	800789c <xTaskRemoveFromEventList+0x5c>
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <xTaskRemoveFromEventList+0xb4>)
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4a13      	ldr	r2, [pc, #76]	; (80078f8 <xTaskRemoveFromEventList+0xb8>)
 80078aa:	441a      	add	r2, r3
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7fe fd73 	bl	800639e <vListInsertEnd>
 80078b8:	e005      	b.n	80078c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	3318      	adds	r3, #24
 80078be:	4619      	mov	r1, r3
 80078c0:	480e      	ldr	r0, [pc, #56]	; (80078fc <xTaskRemoveFromEventList+0xbc>)
 80078c2:	f7fe fd6c 	bl	800639e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ca:	4b0d      	ldr	r3, [pc, #52]	; (8007900 <xTaskRemoveFromEventList+0xc0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d905      	bls.n	80078e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078d4:	2301      	movs	r3, #1
 80078d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <xTaskRemoveFromEventList+0xc4>)
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e001      	b.n	80078e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078e4:	697b      	ldr	r3, [r7, #20]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20000dec 	.word	0x20000dec
 80078f4:	20000dcc 	.word	0x20000dcc
 80078f8:	200008f4 	.word	0x200008f4
 80078fc:	20000d84 	.word	0x20000d84
 8007900:	200008f0 	.word	0x200008f0
 8007904:	20000dd8 	.word	0x20000dd8

08007908 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007910:	4b06      	ldr	r3, [pc, #24]	; (800792c <vTaskInternalSetTimeOutState+0x24>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <vTaskInternalSetTimeOutState+0x28>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20000ddc 	.word	0x20000ddc
 8007930:	20000dc8 	.word	0x20000dc8

08007934 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	613b      	str	r3, [r7, #16]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007976:	f000 ff35 	bl	80087e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800797a:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <xTaskCheckForTimeOut+0xbc>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007992:	d102      	bne.n	800799a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	e023      	b.n	80079e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b15      	ldr	r3, [pc, #84]	; (80079f4 <xTaskCheckForTimeOut+0xc0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d007      	beq.n	80079b6 <xTaskCheckForTimeOut+0x82>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d302      	bcc.n	80079b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	e015      	b.n	80079e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d20b      	bcs.n	80079d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ff9b 	bl	8007908 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
 80079d6:	e004      	b.n	80079e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079de:	2301      	movs	r3, #1
 80079e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079e2:	f000 ff2f 	bl	8008844 <vPortExitCritical>

	return xReturn;
 80079e6:	69fb      	ldr	r3, [r7, #28]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3720      	adds	r7, #32
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20000dc8 	.word	0x20000dc8
 80079f4:	20000ddc 	.word	0x20000ddc

080079f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079fc:	4b03      	ldr	r3, [pc, #12]	; (8007a0c <vTaskMissedYield+0x14>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
}
 8007a02:	bf00      	nop
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20000dd8 	.word	0x20000dd8

08007a10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a18:	f000 f852 	bl	8007ac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <prvIdleTask+0x28>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d9f9      	bls.n	8007a18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a24:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <prvIdleTask+0x2c>)
 8007a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a34:	e7f0      	b.n	8007a18 <prvIdleTask+0x8>
 8007a36:	bf00      	nop
 8007a38:	200008f4 	.word	0x200008f4
 8007a3c:	e000ed04 	.word	0xe000ed04

08007a40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a46:	2300      	movs	r3, #0
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	e00c      	b.n	8007a66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4a12      	ldr	r2, [pc, #72]	; (8007aa0 <prvInitialiseTaskLists+0x60>)
 8007a58:	4413      	add	r3, r2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fc72 	bl	8006344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3301      	adds	r3, #1
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b37      	cmp	r3, #55	; 0x37
 8007a6a:	d9ef      	bls.n	8007a4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a6c:	480d      	ldr	r0, [pc, #52]	; (8007aa4 <prvInitialiseTaskLists+0x64>)
 8007a6e:	f7fe fc69 	bl	8006344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a72:	480d      	ldr	r0, [pc, #52]	; (8007aa8 <prvInitialiseTaskLists+0x68>)
 8007a74:	f7fe fc66 	bl	8006344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a78:	480c      	ldr	r0, [pc, #48]	; (8007aac <prvInitialiseTaskLists+0x6c>)
 8007a7a:	f7fe fc63 	bl	8006344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a7e:	480c      	ldr	r0, [pc, #48]	; (8007ab0 <prvInitialiseTaskLists+0x70>)
 8007a80:	f7fe fc60 	bl	8006344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a84:	480b      	ldr	r0, [pc, #44]	; (8007ab4 <prvInitialiseTaskLists+0x74>)
 8007a86:	f7fe fc5d 	bl	8006344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <prvInitialiseTaskLists+0x78>)
 8007a8c:	4a05      	ldr	r2, [pc, #20]	; (8007aa4 <prvInitialiseTaskLists+0x64>)
 8007a8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <prvInitialiseTaskLists+0x7c>)
 8007a92:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <prvInitialiseTaskLists+0x68>)
 8007a94:	601a      	str	r2, [r3, #0]
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200008f4 	.word	0x200008f4
 8007aa4:	20000d54 	.word	0x20000d54
 8007aa8:	20000d68 	.word	0x20000d68
 8007aac:	20000d84 	.word	0x20000d84
 8007ab0:	20000d98 	.word	0x20000d98
 8007ab4:	20000db0 	.word	0x20000db0
 8007ab8:	20000d7c 	.word	0x20000d7c
 8007abc:	20000d80 	.word	0x20000d80

08007ac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ac6:	e019      	b.n	8007afc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ac8:	f000 fe8c 	bl	80087e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007acc:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <prvCheckTasksWaitingTermination+0x50>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe fcbd 	bl	8006458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ade:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <prvCheckTasksWaitingTermination+0x54>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	4a0b      	ldr	r2, [pc, #44]	; (8007b14 <prvCheckTasksWaitingTermination+0x54>)
 8007ae6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ae8:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <prvCheckTasksWaitingTermination+0x58>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	4a0a      	ldr	r2, [pc, #40]	; (8007b18 <prvCheckTasksWaitingTermination+0x58>)
 8007af0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007af2:	f000 fea7 	bl	8008844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f810 	bl	8007b1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <prvCheckTasksWaitingTermination+0x58>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e1      	bne.n	8007ac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000d98 	.word	0x20000d98
 8007b14:	20000dc4 	.word	0x20000dc4
 8007b18:	20000dac 	.word	0x20000dac

08007b1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d108      	bne.n	8007b40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 f844 	bl	8008bc0 <vPortFree>
				vPortFree( pxTCB );
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f841 	bl	8008bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b3e:	e018      	b.n	8007b72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d103      	bne.n	8007b52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 f838 	bl	8008bc0 <vPortFree>
	}
 8007b50:	e00f      	b.n	8007b72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d00a      	beq.n	8007b72 <prvDeleteTCB+0x56>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60fb      	str	r3, [r7, #12]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <prvDeleteTCB+0x54>
	}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b82:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <prvResetNextTaskUnblockTime+0x38>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8007b8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b94:	e008      	b.n	8007ba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b96:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <prvResetNextTaskUnblockTime+0x38>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	4a04      	ldr	r2, [pc, #16]	; (8007bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ba6:	6013      	str	r3, [r2, #0]
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	20000d7c 	.word	0x20000d7c
 8007bb8:	20000de4 	.word	0x20000de4

08007bbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bc2:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <xTaskGetSchedulerState+0x34>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d102      	bne.n	8007bd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	607b      	str	r3, [r7, #4]
 8007bce:	e008      	b.n	8007be2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bd0:	4b08      	ldr	r3, [pc, #32]	; (8007bf4 <xTaskGetSchedulerState+0x38>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	607b      	str	r3, [r7, #4]
 8007bdc:	e001      	b.n	8007be2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bde:	2300      	movs	r3, #0
 8007be0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007be2:	687b      	ldr	r3, [r7, #4]
	}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	20000dd0 	.word	0x20000dd0
 8007bf4:	20000dec 	.word	0x20000dec

08007bf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d056      	beq.n	8007cbc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c0e:	4b2e      	ldr	r3, [pc, #184]	; (8007cc8 <xTaskPriorityDisinherit+0xd0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d00a      	beq.n	8007c2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	60fb      	str	r3, [r7, #12]
}
 8007c2a:	bf00      	nop
 8007c2c:	e7fe      	b.n	8007c2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	60bb      	str	r3, [r7, #8]
}
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c50:	1e5a      	subs	r2, r3, #1
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d02c      	beq.n	8007cbc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d128      	bne.n	8007cbc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fbf2 	bl	8006458 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <xTaskPriorityDisinherit+0xd4>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d903      	bls.n	8007c9c <xTaskPriorityDisinherit+0xa4>
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	4a0c      	ldr	r2, [pc, #48]	; (8007ccc <xTaskPriorityDisinherit+0xd4>)
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4a09      	ldr	r2, [pc, #36]	; (8007cd0 <xTaskPriorityDisinherit+0xd8>)
 8007caa:	441a      	add	r2, r3
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f7fe fb73 	bl	800639e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cbc:	697b      	ldr	r3, [r7, #20]
	}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200008f0 	.word	0x200008f0
 8007ccc:	20000dcc 	.word	0x20000dcc
 8007cd0:	200008f4 	.word	0x200008f4

08007cd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cde:	4b21      	ldr	r3, [pc, #132]	; (8007d64 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ce4:	4b20      	ldr	r3, [pc, #128]	; (8007d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe fbb4 	bl	8006458 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cf6:	d10a      	bne.n	8007d0e <prvAddCurrentTaskToDelayedList+0x3a>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cfe:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3304      	adds	r3, #4
 8007d04:	4619      	mov	r1, r3
 8007d06:	4819      	ldr	r0, [pc, #100]	; (8007d6c <prvAddCurrentTaskToDelayedList+0x98>)
 8007d08:	f7fe fb49 	bl	800639e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d0c:	e026      	b.n	8007d5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4413      	add	r3, r2
 8007d14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d209      	bcs.n	8007d3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d26:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4619      	mov	r1, r3
 8007d32:	4610      	mov	r0, r2
 8007d34:	f7fe fb57 	bl	80063e6 <vListInsert>
}
 8007d38:	e010      	b.n	8007d5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d3a:	4b0e      	ldr	r3, [pc, #56]	; (8007d74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f7fe fb4d 	bl	80063e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d202      	bcs.n	8007d5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d56:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6013      	str	r3, [r2, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20000dc8 	.word	0x20000dc8
 8007d68:	200008f0 	.word	0x200008f0
 8007d6c:	20000db0 	.word	0x20000db0
 8007d70:	20000d80 	.word	0x20000d80
 8007d74:	20000d7c 	.word	0x20000d7c
 8007d78:	20000de4 	.word	0x20000de4

08007d7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d86:	f000 fba1 	bl	80084cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d8a:	4b1c      	ldr	r3, [pc, #112]	; (8007dfc <xTimerCreateTimerTask+0x80>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d021      	beq.n	8007dd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d9a:	1d3a      	adds	r2, r7, #4
 8007d9c:	f107 0108 	add.w	r1, r7, #8
 8007da0:	f107 030c 	add.w	r3, r7, #12
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fe fab3 	bl	8006310 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	9202      	str	r2, [sp, #8]
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	2302      	movs	r3, #2
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	2300      	movs	r3, #0
 8007dba:	460a      	mov	r2, r1
 8007dbc:	4910      	ldr	r1, [pc, #64]	; (8007e00 <xTimerCreateTimerTask+0x84>)
 8007dbe:	4811      	ldr	r0, [pc, #68]	; (8007e04 <xTimerCreateTimerTask+0x88>)
 8007dc0:	f7ff f860 	bl	8006e84 <xTaskCreateStatic>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	4a10      	ldr	r2, [pc, #64]	; (8007e08 <xTimerCreateTimerTask+0x8c>)
 8007dc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dca:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <xTimerCreateTimerTask+0x8c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10a      	bne.n	8007df2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	613b      	str	r3, [r7, #16]
}
 8007dee:	bf00      	nop
 8007df0:	e7fe      	b.n	8007df0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007df2:	697b      	ldr	r3, [r7, #20]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20000e20 	.word	0x20000e20
 8007e00:	08008ed4 	.word	0x08008ed4
 8007e04:	08008075 	.word	0x08008075
 8007e08:	20000e24 	.word	0x20000e24

08007e0c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007e1a:	202c      	movs	r0, #44	; 0x2c
 8007e1c:	f000 fe04 	bl	8008a28 <pvPortMalloc>
 8007e20:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00d      	beq.n	8007e44 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f843 	bl	8007eca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007e44:	697b      	ldr	r3, [r7, #20]
	}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b08a      	sub	sp, #40	; 0x28
 8007e52:	af02      	add	r7, sp, #8
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
 8007e5a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007e5c:	232c      	movs	r3, #44	; 0x2c
 8007e5e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	2b2c      	cmp	r3, #44	; 0x2c
 8007e64:	d00a      	beq.n	8007e7c <xTimerCreateStatic+0x2e>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	61bb      	str	r3, [r7, #24]
}
 8007e78:	bf00      	nop
 8007e7a:	e7fe      	b.n	8007e7a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10a      	bne.n	8007e9a <xTimerCreateStatic+0x4c>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	617b      	str	r3, [r7, #20]
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00d      	beq.n	8007ec0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f805 	bl	8007eca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
	}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3720      	adds	r7, #32
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b086      	sub	sp, #24
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10a      	bne.n	8007ef4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	617b      	str	r3, [r7, #20]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d01e      	beq.n	8007f38 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007efa:	f000 fae7 	bl	80084cc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	6a3a      	ldr	r2, [r7, #32]
 8007f14:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	3304      	adds	r3, #4
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fa32 	bl	8006384 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d008      	beq.n	8007f38 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f2c:	f043 0304 	orr.w	r3, r3, #4
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007f38:	bf00      	nop
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	623b      	str	r3, [r7, #32]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <xTimerGenericCommand+0x98>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d02a      	beq.n	8007fcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b05      	cmp	r3, #5
 8007f86:	dc18      	bgt.n	8007fba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f88:	f7ff fe18 	bl	8007bbc <xTaskGetSchedulerState>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d109      	bne.n	8007fa6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f92:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <xTimerGenericCommand+0x98>)
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	f107 0110 	add.w	r1, r7, #16
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f9e:	f7fe fb89 	bl	80066b4 <xQueueGenericSend>
 8007fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8007fa4:	e012      	b.n	8007fcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <xTimerGenericCommand+0x98>)
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	f107 0110 	add.w	r1, r7, #16
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f7fe fb7f 	bl	80066b4 <xQueueGenericSend>
 8007fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8007fb8:	e008      	b.n	8007fcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fba:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <xTimerGenericCommand+0x98>)
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	f107 0110 	add.w	r1, r7, #16
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	f7fe fc73 	bl	80068b0 <xQueueGenericSendFromISR>
 8007fca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3728      	adds	r7, #40	; 0x28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000e20 	.word	0x20000e20

08007fdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe6:	4b22      	ldr	r3, [pc, #136]	; (8008070 <prvProcessExpiredTimer+0x94>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fa2f 	bl	8006458 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d022      	beq.n	800804e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	18d1      	adds	r1, r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	6978      	ldr	r0, [r7, #20]
 8008016:	f000 f8d1 	bl	80081bc <prvInsertTimerInActiveList>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01f      	beq.n	8008060 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008020:	2300      	movs	r3, #0
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	2300      	movs	r3, #0
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	2100      	movs	r1, #0
 800802a:	6978      	ldr	r0, [r7, #20]
 800802c:	f7ff ff88 	bl	8007f40 <xTimerGenericCommand>
 8008030:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d113      	bne.n	8008060 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	60fb      	str	r3, [r7, #12]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008054:	f023 0301 	bic.w	r3, r3, #1
 8008058:	b2da      	uxtb	r2, r3
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	6978      	ldr	r0, [r7, #20]
 8008066:	4798      	blx	r3
}
 8008068:	bf00      	nop
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000e18 	.word	0x20000e18

08008074 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800807c:	f107 0308 	add.w	r3, r7, #8
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f857 	bl	8008134 <prvGetNextExpireTime>
 8008086:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4619      	mov	r1, r3
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 f803 	bl	8008098 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008092:	f000 f8d5 	bl	8008240 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008096:	e7f1      	b.n	800807c <prvTimerTask+0x8>

08008098 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080a2:	f7ff f9a9 	bl	80073f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080a6:	f107 0308 	add.w	r3, r7, #8
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f866 	bl	800817c <prvSampleTimeNow>
 80080b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d130      	bne.n	800811a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <prvProcessTimerOrBlockTask+0x3c>
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d806      	bhi.n	80080d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080c6:	f7ff f9a5 	bl	8007414 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080ca:	68f9      	ldr	r1, [r7, #12]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff ff85 	bl	8007fdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080d2:	e024      	b.n	800811e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d008      	beq.n	80080ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080da:	4b13      	ldr	r3, [pc, #76]	; (8008128 <prvProcessTimerOrBlockTask+0x90>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <prvProcessTimerOrBlockTask+0x50>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <prvProcessTimerOrBlockTask+0x52>
 80080e8:	2300      	movs	r3, #0
 80080ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080ec:	4b0f      	ldr	r3, [pc, #60]	; (800812c <prvProcessTimerOrBlockTask+0x94>)
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	4619      	mov	r1, r3
 80080fa:	f7fe fe8f 	bl	8006e1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080fe:	f7ff f989 	bl	8007414 <xTaskResumeAll>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008108:	4b09      	ldr	r3, [pc, #36]	; (8008130 <prvProcessTimerOrBlockTask+0x98>)
 800810a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	f3bf 8f6f 	isb	sy
}
 8008118:	e001      	b.n	800811e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800811a:	f7ff f97b 	bl	8007414 <xTaskResumeAll>
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000e1c 	.word	0x20000e1c
 800812c:	20000e20 	.word	0x20000e20
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <prvGetNextExpireTime+0x44>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <prvGetNextExpireTime+0x16>
 8008146:	2201      	movs	r2, #1
 8008148:	e000      	b.n	800814c <prvGetNextExpireTime+0x18>
 800814a:	2200      	movs	r2, #0
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d105      	bne.n	8008164 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008158:	4b07      	ldr	r3, [pc, #28]	; (8008178 <prvGetNextExpireTime+0x44>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	e001      	b.n	8008168 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008168:	68fb      	ldr	r3, [r7, #12]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	20000e18 	.word	0x20000e18

0800817c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008184:	f7ff f9e4 	bl	8007550 <xTaskGetTickCount>
 8008188:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800818a:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <prvSampleTimeNow+0x3c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	429a      	cmp	r2, r3
 8008192:	d205      	bcs.n	80081a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008194:	f000 f936 	bl	8008404 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e002      	b.n	80081a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081a6:	4a04      	ldr	r2, [pc, #16]	; (80081b8 <prvSampleTimeNow+0x3c>)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081ac:	68fb      	ldr	r3, [r7, #12]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000e28 	.word	0x20000e28

080081bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d812      	bhi.n	8008208 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	1ad2      	subs	r2, r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d302      	bcc.n	80081f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	e01b      	b.n	800822e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081f6:	4b10      	ldr	r3, [pc, #64]	; (8008238 <prvInsertTimerInActiveList+0x7c>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4619      	mov	r1, r3
 8008200:	4610      	mov	r0, r2
 8008202:	f7fe f8f0 	bl	80063e6 <vListInsert>
 8008206:	e012      	b.n	800822e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d206      	bcs.n	800821e <prvInsertTimerInActiveList+0x62>
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	429a      	cmp	r2, r3
 8008216:	d302      	bcc.n	800821e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008218:	2301      	movs	r3, #1
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	e007      	b.n	800822e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800821e:	4b07      	ldr	r3, [pc, #28]	; (800823c <prvInsertTimerInActiveList+0x80>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3304      	adds	r3, #4
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f7fe f8dc 	bl	80063e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800822e:	697b      	ldr	r3, [r7, #20]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20000e1c 	.word	0x20000e1c
 800823c:	20000e18 	.word	0x20000e18

08008240 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08e      	sub	sp, #56	; 0x38
 8008244:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008246:	e0ca      	b.n	80083de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	da18      	bge.n	8008280 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800824e:	1d3b      	adds	r3, r7, #4
 8008250:	3304      	adds	r3, #4
 8008252:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10a      	bne.n	8008270 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	61fb      	str	r3, [r7, #28]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008276:	6850      	ldr	r0, [r2, #4]
 8008278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827a:	6892      	ldr	r2, [r2, #8]
 800827c:	4611      	mov	r1, r2
 800827e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f2c0 80ab 	blt.w	80083de <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	3304      	adds	r3, #4
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe f8dd 	bl	8006458 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800829e:	463b      	mov	r3, r7
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff ff6b 	bl	800817c <prvSampleTimeNow>
 80082a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b09      	cmp	r3, #9
 80082ac:	f200 8096 	bhi.w	80083dc <prvProcessReceivedCommands+0x19c>
 80082b0:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <prvProcessReceivedCommands+0x78>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082e1 	.word	0x080082e1
 80082bc:	080082e1 	.word	0x080082e1
 80082c0:	080082e1 	.word	0x080082e1
 80082c4:	08008355 	.word	0x08008355
 80082c8:	08008369 	.word	0x08008369
 80082cc:	080083b3 	.word	0x080083b3
 80082d0:	080082e1 	.word	0x080082e1
 80082d4:	080082e1 	.word	0x080082e1
 80082d8:	08008355 	.word	0x08008355
 80082dc:	08008369 	.word	0x08008369
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082e6:	f043 0301 	orr.w	r3, r3, #1
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	18d1      	adds	r1, r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008300:	f7ff ff5c 	bl	80081bc <prvInsertTimerInActiveList>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d069      	beq.n	80083de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008310:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05e      	beq.n	80083de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	441a      	add	r2, r3
 8008328:	2300      	movs	r3, #0
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	2100      	movs	r1, #0
 8008330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008332:	f7ff fe05 	bl	8007f40 <xTimerGenericCommand>
 8008336:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d14f      	bne.n	80083de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	61bb      	str	r3, [r7, #24]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800835a:	f023 0301 	bic.w	r3, r3, #1
 800835e:	b2da      	uxtb	r2, r3
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008366:	e03a      	b.n	80083de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800836e:	f043 0301 	orr.w	r3, r3, #1
 8008372:	b2da      	uxtb	r2, r3
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	617b      	str	r3, [r7, #20]
}
 800839a:	bf00      	nop
 800839c:	e7fe      	b.n	800839c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	18d1      	adds	r1, r2, r3
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ac:	f7ff ff06 	bl	80081bc <prvInsertTimerInActiveList>
					break;
 80083b0:	e015      	b.n	80083de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d103      	bne.n	80083c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80083c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083c2:	f000 fbfd 	bl	8008bc0 <vPortFree>
 80083c6:	e00a      	b.n	80083de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083da:	e000      	b.n	80083de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80083dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083de:	4b08      	ldr	r3, [pc, #32]	; (8008400 <prvProcessReceivedCommands+0x1c0>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	1d39      	adds	r1, r7, #4
 80083e4:	2200      	movs	r2, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fafe 	bl	80069e8 <xQueueReceive>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f47f af2a 	bne.w	8008248 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop
 80083f8:	3730      	adds	r7, #48	; 0x30
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000e20 	.word	0x20000e20

08008404 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800840a:	e048      	b.n	800849e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800840c:	4b2d      	ldr	r3, [pc, #180]	; (80084c4 <prvSwitchTimerLists+0xc0>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008416:	4b2b      	ldr	r3, [pc, #172]	; (80084c4 <prvSwitchTimerLists+0xc0>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3304      	adds	r3, #4
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe f817 	bl	8006458 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d02e      	beq.n	800849e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	4413      	add	r3, r2
 8008448:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	429a      	cmp	r2, r3
 8008450:	d90e      	bls.n	8008470 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800845e:	4b19      	ldr	r3, [pc, #100]	; (80084c4 <prvSwitchTimerLists+0xc0>)
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3304      	adds	r3, #4
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f7fd ffbc 	bl	80063e6 <vListInsert>
 800846e:	e016      	b.n	800849e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008470:	2300      	movs	r3, #0
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	2300      	movs	r3, #0
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	2100      	movs	r1, #0
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f7ff fd60 	bl	8007f40 <xTimerGenericCommand>
 8008480:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	603b      	str	r3, [r7, #0]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <prvSwitchTimerLists+0xc0>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1b1      	bne.n	800840c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084a8:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <prvSwitchTimerLists+0xc0>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084ae:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <prvSwitchTimerLists+0xc4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a04      	ldr	r2, [pc, #16]	; (80084c4 <prvSwitchTimerLists+0xc0>)
 80084b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084b6:	4a04      	ldr	r2, [pc, #16]	; (80084c8 <prvSwitchTimerLists+0xc4>)
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	6013      	str	r3, [r2, #0]
}
 80084bc:	bf00      	nop
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000e18 	.word	0x20000e18
 80084c8:	20000e1c 	.word	0x20000e1c

080084cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084d2:	f000 f987 	bl	80087e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084d6:	4b15      	ldr	r3, [pc, #84]	; (800852c <prvCheckForValidListAndQueue+0x60>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d120      	bne.n	8008520 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084de:	4814      	ldr	r0, [pc, #80]	; (8008530 <prvCheckForValidListAndQueue+0x64>)
 80084e0:	f7fd ff30 	bl	8006344 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084e4:	4813      	ldr	r0, [pc, #76]	; (8008534 <prvCheckForValidListAndQueue+0x68>)
 80084e6:	f7fd ff2d 	bl	8006344 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084ea:	4b13      	ldr	r3, [pc, #76]	; (8008538 <prvCheckForValidListAndQueue+0x6c>)
 80084ec:	4a10      	ldr	r2, [pc, #64]	; (8008530 <prvCheckForValidListAndQueue+0x64>)
 80084ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084f0:	4b12      	ldr	r3, [pc, #72]	; (800853c <prvCheckForValidListAndQueue+0x70>)
 80084f2:	4a10      	ldr	r2, [pc, #64]	; (8008534 <prvCheckForValidListAndQueue+0x68>)
 80084f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084f6:	2300      	movs	r3, #0
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4b11      	ldr	r3, [pc, #68]	; (8008540 <prvCheckForValidListAndQueue+0x74>)
 80084fc:	4a11      	ldr	r2, [pc, #68]	; (8008544 <prvCheckForValidListAndQueue+0x78>)
 80084fe:	2110      	movs	r1, #16
 8008500:	200a      	movs	r0, #10
 8008502:	f7fe f83b 	bl	800657c <xQueueGenericCreateStatic>
 8008506:	4603      	mov	r3, r0
 8008508:	4a08      	ldr	r2, [pc, #32]	; (800852c <prvCheckForValidListAndQueue+0x60>)
 800850a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800850c:	4b07      	ldr	r3, [pc, #28]	; (800852c <prvCheckForValidListAndQueue+0x60>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <prvCheckForValidListAndQueue+0x60>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	490b      	ldr	r1, [pc, #44]	; (8008548 <prvCheckForValidListAndQueue+0x7c>)
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fc54 	bl	8006dc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008520:	f000 f990 	bl	8008844 <vPortExitCritical>
}
 8008524:	bf00      	nop
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000e20 	.word	0x20000e20
 8008530:	20000df0 	.word	0x20000df0
 8008534:	20000e04 	.word	0x20000e04
 8008538:	20000e18 	.word	0x20000e18
 800853c:	20000e1c 	.word	0x20000e1c
 8008540:	20000ecc 	.word	0x20000ecc
 8008544:	20000e2c 	.word	0x20000e2c
 8008548:	08008edc 	.word	0x08008edc

0800854c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10a      	bne.n	8008574 <pvTimerGetTimerID+0x28>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	60fb      	str	r3, [r7, #12]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008574:	f000 f936 	bl	80087e4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800857e:	f000 f961 	bl	8008844 <vPortExitCritical>

	return pvReturn;
 8008582:	693b      	ldr	r3, [r7, #16]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3b04      	subs	r3, #4
 800859c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3b04      	subs	r3, #4
 80085aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f023 0201 	bic.w	r2, r3, #1
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3b04      	subs	r3, #4
 80085ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085bc:	4a0c      	ldr	r2, [pc, #48]	; (80085f0 <pxPortInitialiseStack+0x64>)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3b14      	subs	r3, #20
 80085c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3b04      	subs	r3, #4
 80085d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f06f 0202 	mvn.w	r2, #2
 80085da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3b20      	subs	r3, #32
 80085e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085e2:	68fb      	ldr	r3, [r7, #12]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	080085f5 	.word	0x080085f5

080085f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085fe:	4b12      	ldr	r3, [pc, #72]	; (8008648 <prvTaskExitError+0x54>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008606:	d00a      	beq.n	800861e <prvTaskExitError+0x2a>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	60fb      	str	r3, [r7, #12]
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <prvTaskExitError+0x28>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	60bb      	str	r3, [r7, #8]
}
 8008630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008632:	bf00      	nop
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d0fc      	beq.n	8008634 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	2000000c 	.word	0x2000000c
 800864c:	00000000 	.word	0x00000000

08008650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008650:	4b07      	ldr	r3, [pc, #28]	; (8008670 <pxCurrentTCBConst2>)
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	6808      	ldr	r0, [r1, #0]
 8008656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	f380 8809 	msr	PSP, r0
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f04f 0000 	mov.w	r0, #0
 8008666:	f380 8811 	msr	BASEPRI, r0
 800866a:	4770      	bx	lr
 800866c:	f3af 8000 	nop.w

08008670 <pxCurrentTCBConst2>:
 8008670:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop

08008678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008678:	4808      	ldr	r0, [pc, #32]	; (800869c <prvPortStartFirstTask+0x24>)
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	6800      	ldr	r0, [r0, #0]
 800867e:	f380 8808 	msr	MSP, r0
 8008682:	f04f 0000 	mov.w	r0, #0
 8008686:	f380 8814 	msr	CONTROL, r0
 800868a:	b662      	cpsie	i
 800868c:	b661      	cpsie	f
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	df00      	svc	0
 8008698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800869a:	bf00      	nop
 800869c:	e000ed08 	.word	0xe000ed08

080086a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086a6:	4b46      	ldr	r3, [pc, #280]	; (80087c0 <xPortStartScheduler+0x120>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a46      	ldr	r2, [pc, #280]	; (80087c4 <xPortStartScheduler+0x124>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d10a      	bne.n	80086c6 <xPortStartScheduler+0x26>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	613b      	str	r3, [r7, #16]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086c6:	4b3e      	ldr	r3, [pc, #248]	; (80087c0 <xPortStartScheduler+0x120>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a3f      	ldr	r2, [pc, #252]	; (80087c8 <xPortStartScheduler+0x128>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10a      	bne.n	80086e6 <xPortStartScheduler+0x46>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086e6:	4b39      	ldr	r3, [pc, #228]	; (80087cc <xPortStartScheduler+0x12c>)
 80086e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	22ff      	movs	r2, #255	; 0xff
 80086f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008708:	b2da      	uxtb	r2, r3
 800870a:	4b31      	ldr	r3, [pc, #196]	; (80087d0 <xPortStartScheduler+0x130>)
 800870c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800870e:	4b31      	ldr	r3, [pc, #196]	; (80087d4 <xPortStartScheduler+0x134>)
 8008710:	2207      	movs	r2, #7
 8008712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008714:	e009      	b.n	800872a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008716:	4b2f      	ldr	r3, [pc, #188]	; (80087d4 <xPortStartScheduler+0x134>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3b01      	subs	r3, #1
 800871c:	4a2d      	ldr	r2, [pc, #180]	; (80087d4 <xPortStartScheduler+0x134>)
 800871e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	b2db      	uxtb	r3, r3
 8008728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008732:	2b80      	cmp	r3, #128	; 0x80
 8008734:	d0ef      	beq.n	8008716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008736:	4b27      	ldr	r3, [pc, #156]	; (80087d4 <xPortStartScheduler+0x134>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1c3 0307 	rsb	r3, r3, #7
 800873e:	2b04      	cmp	r3, #4
 8008740:	d00a      	beq.n	8008758 <xPortStartScheduler+0xb8>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60bb      	str	r3, [r7, #8]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008758:	4b1e      	ldr	r3, [pc, #120]	; (80087d4 <xPortStartScheduler+0x134>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <xPortStartScheduler+0x134>)
 8008760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008762:	4b1c      	ldr	r3, [pc, #112]	; (80087d4 <xPortStartScheduler+0x134>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800876a:	4a1a      	ldr	r2, [pc, #104]	; (80087d4 <xPortStartScheduler+0x134>)
 800876c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	b2da      	uxtb	r2, r3
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008776:	4b18      	ldr	r3, [pc, #96]	; (80087d8 <xPortStartScheduler+0x138>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <xPortStartScheduler+0x138>)
 800877c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <xPortStartScheduler+0x138>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a14      	ldr	r2, [pc, #80]	; (80087d8 <xPortStartScheduler+0x138>)
 8008788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800878c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800878e:	f000 f8dd 	bl	800894c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008792:	4b12      	ldr	r3, [pc, #72]	; (80087dc <xPortStartScheduler+0x13c>)
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008798:	f000 f8fc 	bl	8008994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800879c:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <xPortStartScheduler+0x140>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a0f      	ldr	r2, [pc, #60]	; (80087e0 <xPortStartScheduler+0x140>)
 80087a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087a8:	f7ff ff66 	bl	8008678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087ac:	f7fe ff9a 	bl	80076e4 <vTaskSwitchContext>
	prvTaskExitError();
 80087b0:	f7ff ff20 	bl	80085f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	e000ed00 	.word	0xe000ed00
 80087c4:	410fc271 	.word	0x410fc271
 80087c8:	410fc270 	.word	0x410fc270
 80087cc:	e000e400 	.word	0xe000e400
 80087d0:	20000f1c 	.word	0x20000f1c
 80087d4:	20000f20 	.word	0x20000f20
 80087d8:	e000ed20 	.word	0xe000ed20
 80087dc:	2000000c 	.word	0x2000000c
 80087e0:	e000ef34 	.word	0xe000ef34

080087e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	607b      	str	r3, [r7, #4]
}
 80087fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087fe:	4b0f      	ldr	r3, [pc, #60]	; (800883c <vPortEnterCritical+0x58>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3301      	adds	r3, #1
 8008804:	4a0d      	ldr	r2, [pc, #52]	; (800883c <vPortEnterCritical+0x58>)
 8008806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008808:	4b0c      	ldr	r3, [pc, #48]	; (800883c <vPortEnterCritical+0x58>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d10f      	bne.n	8008830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <vPortEnterCritical+0x5c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <vPortEnterCritical+0x4c>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	603b      	str	r3, [r7, #0]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <vPortEnterCritical+0x4a>
	}
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	2000000c 	.word	0x2000000c
 8008840:	e000ed04 	.word	0xe000ed04

08008844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800884a:	4b12      	ldr	r3, [pc, #72]	; (8008894 <vPortExitCritical+0x50>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <vPortExitCritical+0x24>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	607b      	str	r3, [r7, #4]
}
 8008864:	bf00      	nop
 8008866:	e7fe      	b.n	8008866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008868:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <vPortExitCritical+0x50>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3b01      	subs	r3, #1
 800886e:	4a09      	ldr	r2, [pc, #36]	; (8008894 <vPortExitCritical+0x50>)
 8008870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <vPortExitCritical+0x50>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <vPortExitCritical+0x42>
 800887a:	2300      	movs	r3, #0
 800887c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	f383 8811 	msr	BASEPRI, r3
}
 8008884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	2000000c 	.word	0x2000000c
	...

080088a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088a0:	f3ef 8009 	mrs	r0, PSP
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	4b15      	ldr	r3, [pc, #84]	; (8008900 <pxCurrentTCBConst>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	f01e 0f10 	tst.w	lr, #16
 80088b0:	bf08      	it	eq
 80088b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ba:	6010      	str	r0, [r2, #0]
 80088bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088c4:	f380 8811 	msr	BASEPRI, r0
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f7fe ff08 	bl	80076e4 <vTaskSwitchContext>
 80088d4:	f04f 0000 	mov.w	r0, #0
 80088d8:	f380 8811 	msr	BASEPRI, r0
 80088dc:	bc09      	pop	{r0, r3}
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	6808      	ldr	r0, [r1, #0]
 80088e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e6:	f01e 0f10 	tst.w	lr, #16
 80088ea:	bf08      	it	eq
 80088ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088f0:	f380 8809 	msr	PSP, r0
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w

08008900 <pxCurrentTCBConst>:
 8008900:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop

08008908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	607b      	str	r3, [r7, #4]
}
 8008920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008922:	f7fe fe25 	bl	8007570 <xTaskIncrementTick>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <xPortSysTickHandler+0x40>)
 800892e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f383 8811 	msr	BASEPRI, r3
}
 800893e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800894c:	b480      	push	{r7}
 800894e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008950:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <vPortSetupTimerInterrupt+0x34>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008956:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <vPortSetupTimerInterrupt+0x38>)
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800895c:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <vPortSetupTimerInterrupt+0x3c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a0a      	ldr	r2, [pc, #40]	; (800898c <vPortSetupTimerInterrupt+0x40>)
 8008962:	fba2 2303 	umull	r2, r3, r2, r3
 8008966:	099b      	lsrs	r3, r3, #6
 8008968:	4a09      	ldr	r2, [pc, #36]	; (8008990 <vPortSetupTimerInterrupt+0x44>)
 800896a:	3b01      	subs	r3, #1
 800896c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800896e:	4b04      	ldr	r3, [pc, #16]	; (8008980 <vPortSetupTimerInterrupt+0x34>)
 8008970:	2207      	movs	r2, #7
 8008972:	601a      	str	r2, [r3, #0]
}
 8008974:	bf00      	nop
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	e000e010 	.word	0xe000e010
 8008984:	e000e018 	.word	0xe000e018
 8008988:	20000000 	.word	0x20000000
 800898c:	10624dd3 	.word	0x10624dd3
 8008990:	e000e014 	.word	0xe000e014

08008994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089a4 <vPortEnableVFP+0x10>
 8008998:	6801      	ldr	r1, [r0, #0]
 800899a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800899e:	6001      	str	r1, [r0, #0]
 80089a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089a2:	bf00      	nop
 80089a4:	e000ed88 	.word	0xe000ed88

080089a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089ae:	f3ef 8305 	mrs	r3, IPSR
 80089b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b0f      	cmp	r3, #15
 80089b8:	d914      	bls.n	80089e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089ba:	4a17      	ldr	r2, [pc, #92]	; (8008a18 <vPortValidateInterruptPriority+0x70>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089c4:	4b15      	ldr	r3, [pc, #84]	; (8008a1c <vPortValidateInterruptPriority+0x74>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	7afa      	ldrb	r2, [r7, #11]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d20a      	bcs.n	80089e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	607b      	str	r3, [r7, #4]
}
 80089e0:	bf00      	nop
 80089e2:	e7fe      	b.n	80089e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089e4:	4b0e      	ldr	r3, [pc, #56]	; (8008a20 <vPortValidateInterruptPriority+0x78>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089ec:	4b0d      	ldr	r3, [pc, #52]	; (8008a24 <vPortValidateInterruptPriority+0x7c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d90a      	bls.n	8008a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	603b      	str	r3, [r7, #0]
}
 8008a06:	bf00      	nop
 8008a08:	e7fe      	b.n	8008a08 <vPortValidateInterruptPriority+0x60>
	}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	e000e3f0 	.word	0xe000e3f0
 8008a1c:	20000f1c 	.word	0x20000f1c
 8008a20:	e000ed0c 	.word	0xe000ed0c
 8008a24:	20000f20 	.word	0x20000f20

08008a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08a      	sub	sp, #40	; 0x28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a34:	f7fe fce0 	bl	80073f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a38:	4b5b      	ldr	r3, [pc, #364]	; (8008ba8 <pvPortMalloc+0x180>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a40:	f000 f920 	bl	8008c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a44:	4b59      	ldr	r3, [pc, #356]	; (8008bac <pvPortMalloc+0x184>)
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f040 8093 	bne.w	8008b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01d      	beq.n	8008a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a58:	2208      	movs	r2, #8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d014      	beq.n	8008a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f023 0307 	bic.w	r3, r3, #7
 8008a70:	3308      	adds	r3, #8
 8008a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <pvPortMalloc+0x6c>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	617b      	str	r3, [r7, #20]
}
 8008a90:	bf00      	nop
 8008a92:	e7fe      	b.n	8008a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d06e      	beq.n	8008b78 <pvPortMalloc+0x150>
 8008a9a:	4b45      	ldr	r3, [pc, #276]	; (8008bb0 <pvPortMalloc+0x188>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d869      	bhi.n	8008b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aa4:	4b43      	ldr	r3, [pc, #268]	; (8008bb4 <pvPortMalloc+0x18c>)
 8008aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008aa8:	4b42      	ldr	r3, [pc, #264]	; (8008bb4 <pvPortMalloc+0x18c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aae:	e004      	b.n	8008aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d903      	bls.n	8008acc <pvPortMalloc+0xa4>
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1f1      	bne.n	8008ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008acc:	4b36      	ldr	r3, [pc, #216]	; (8008ba8 <pvPortMalloc+0x180>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d050      	beq.n	8008b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2208      	movs	r2, #8
 8008adc:	4413      	add	r3, r2
 8008ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	2308      	movs	r3, #8
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d91f      	bls.n	8008b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <pvPortMalloc+0xf8>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	613b      	str	r3, [r7, #16]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	1ad2      	subs	r2, r2, r3
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b32:	69b8      	ldr	r0, [r7, #24]
 8008b34:	f000 f908 	bl	8008d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b38:	4b1d      	ldr	r3, [pc, #116]	; (8008bb0 <pvPortMalloc+0x188>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	4a1b      	ldr	r2, [pc, #108]	; (8008bb0 <pvPortMalloc+0x188>)
 8008b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b46:	4b1a      	ldr	r3, [pc, #104]	; (8008bb0 <pvPortMalloc+0x188>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b1b      	ldr	r3, [pc, #108]	; (8008bb8 <pvPortMalloc+0x190>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d203      	bcs.n	8008b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b52:	4b17      	ldr	r3, [pc, #92]	; (8008bb0 <pvPortMalloc+0x188>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a18      	ldr	r2, [pc, #96]	; (8008bb8 <pvPortMalloc+0x190>)
 8008b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	4b13      	ldr	r3, [pc, #76]	; (8008bac <pvPortMalloc+0x184>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	431a      	orrs	r2, r3
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b6e:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <pvPortMalloc+0x194>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3301      	adds	r3, #1
 8008b74:	4a11      	ldr	r2, [pc, #68]	; (8008bbc <pvPortMalloc+0x194>)
 8008b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b78:	f7fe fc4c 	bl	8007414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <pvPortMalloc+0x174>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60fb      	str	r3, [r7, #12]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <pvPortMalloc+0x172>
	return pvReturn;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3728      	adds	r7, #40	; 0x28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20001ae4 	.word	0x20001ae4
 8008bac:	20001af8 	.word	0x20001af8
 8008bb0:	20001ae8 	.word	0x20001ae8
 8008bb4:	20001adc 	.word	0x20001adc
 8008bb8:	20001aec 	.word	0x20001aec
 8008bbc:	20001af0 	.word	0x20001af0

08008bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d04d      	beq.n	8008c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bd2:	2308      	movs	r3, #8
 8008bd4:	425b      	negs	r3, r3
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4413      	add	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <vPortFree+0xb8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4013      	ands	r3, r2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10a      	bne.n	8008c04 <vPortFree+0x44>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	60fb      	str	r3, [r7, #12]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00a      	beq.n	8008c22 <vPortFree+0x62>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60bb      	str	r3, [r7, #8]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	4b14      	ldr	r3, [pc, #80]	; (8008c78 <vPortFree+0xb8>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01e      	beq.n	8008c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d11a      	bne.n	8008c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	4b0e      	ldr	r3, [pc, #56]	; (8008c78 <vPortFree+0xb8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	43db      	mvns	r3, r3
 8008c42:	401a      	ands	r2, r3
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c48:	f7fe fbd6 	bl	80073f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <vPortFree+0xbc>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4413      	add	r3, r2
 8008c56:	4a09      	ldr	r2, [pc, #36]	; (8008c7c <vPortFree+0xbc>)
 8008c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c5a:	6938      	ldr	r0, [r7, #16]
 8008c5c:	f000 f874 	bl	8008d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c60:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <vPortFree+0xc0>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3301      	adds	r3, #1
 8008c66:	4a06      	ldr	r2, [pc, #24]	; (8008c80 <vPortFree+0xc0>)
 8008c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c6a:	f7fe fbd3 	bl	8007414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c6e:	bf00      	nop
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20001af8 	.word	0x20001af8
 8008c7c:	20001ae8 	.word	0x20001ae8
 8008c80:	20001af4 	.word	0x20001af4

08008c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c90:	4b27      	ldr	r3, [pc, #156]	; (8008d30 <prvHeapInit+0xac>)
 8008c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00c      	beq.n	8008cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3307      	adds	r3, #7
 8008ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0307 	bic.w	r3, r3, #7
 8008caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	4a1f      	ldr	r2, [pc, #124]	; (8008d30 <prvHeapInit+0xac>)
 8008cb4:	4413      	add	r3, r2
 8008cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cbc:	4a1d      	ldr	r2, [pc, #116]	; (8008d34 <prvHeapInit+0xb0>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cc2:	4b1c      	ldr	r3, [pc, #112]	; (8008d34 <prvHeapInit+0xb0>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f023 0307 	bic.w	r3, r3, #7
 8008cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4a15      	ldr	r2, [pc, #84]	; (8008d38 <prvHeapInit+0xb4>)
 8008ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ce6:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <prvHeapInit+0xb4>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2200      	movs	r2, #0
 8008cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cee:	4b12      	ldr	r3, [pc, #72]	; (8008d38 <prvHeapInit+0xb4>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d04:	4b0c      	ldr	r3, [pc, #48]	; (8008d38 <prvHeapInit+0xb4>)
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	4a0a      	ldr	r2, [pc, #40]	; (8008d3c <prvHeapInit+0xb8>)
 8008d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	4a09      	ldr	r2, [pc, #36]	; (8008d40 <prvHeapInit+0xbc>)
 8008d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d1c:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <prvHeapInit+0xc0>)
 8008d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d22:	601a      	str	r2, [r3, #0]
}
 8008d24:	bf00      	nop
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	20000f24 	.word	0x20000f24
 8008d34:	20001adc 	.word	0x20001adc
 8008d38:	20001ae4 	.word	0x20001ae4
 8008d3c:	20001aec 	.word	0x20001aec
 8008d40:	20001ae8 	.word	0x20001ae8
 8008d44:	20001af8 	.word	0x20001af8

08008d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d50:	4b28      	ldr	r3, [pc, #160]	; (8008df4 <prvInsertBlockIntoFreeList+0xac>)
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	e002      	b.n	8008d5c <prvInsertBlockIntoFreeList+0x14>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d8f7      	bhi.n	8008d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	4413      	add	r3, r2
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d108      	bne.n	8008d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	441a      	add	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	441a      	add	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d118      	bne.n	8008dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	4b15      	ldr	r3, [pc, #84]	; (8008df8 <prvInsertBlockIntoFreeList+0xb0>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d00d      	beq.n	8008dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	441a      	add	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e008      	b.n	8008dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <prvInsertBlockIntoFreeList+0xb0>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	e003      	b.n	8008dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d002      	beq.n	8008de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008de6:	bf00      	nop
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20001adc 	.word	0x20001adc
 8008df8:	20001ae4 	.word	0x20001ae4

08008dfc <memset>:
 8008dfc:	4402      	add	r2, r0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d100      	bne.n	8008e06 <memset+0xa>
 8008e04:	4770      	bx	lr
 8008e06:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0a:	e7f9      	b.n	8008e00 <memset+0x4>

08008e0c <__libc_init_array>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	4d0d      	ldr	r5, [pc, #52]	; (8008e44 <__libc_init_array+0x38>)
 8008e10:	4c0d      	ldr	r4, [pc, #52]	; (8008e48 <__libc_init_array+0x3c>)
 8008e12:	1b64      	subs	r4, r4, r5
 8008e14:	10a4      	asrs	r4, r4, #2
 8008e16:	2600      	movs	r6, #0
 8008e18:	42a6      	cmp	r6, r4
 8008e1a:	d109      	bne.n	8008e30 <__libc_init_array+0x24>
 8008e1c:	4d0b      	ldr	r5, [pc, #44]	; (8008e4c <__libc_init_array+0x40>)
 8008e1e:	4c0c      	ldr	r4, [pc, #48]	; (8008e50 <__libc_init_array+0x44>)
 8008e20:	f000 f826 	bl	8008e70 <_init>
 8008e24:	1b64      	subs	r4, r4, r5
 8008e26:	10a4      	asrs	r4, r4, #2
 8008e28:	2600      	movs	r6, #0
 8008e2a:	42a6      	cmp	r6, r4
 8008e2c:	d105      	bne.n	8008e3a <__libc_init_array+0x2e>
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e34:	4798      	blx	r3
 8008e36:	3601      	adds	r6, #1
 8008e38:	e7ee      	b.n	8008e18 <__libc_init_array+0xc>
 8008e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3e:	4798      	blx	r3
 8008e40:	3601      	adds	r6, #1
 8008e42:	e7f2      	b.n	8008e2a <__libc_init_array+0x1e>
 8008e44:	08009064 	.word	0x08009064
 8008e48:	08009064 	.word	0x08009064
 8008e4c:	08009064 	.word	0x08009064
 8008e50:	08009068 	.word	0x08009068

08008e54 <memcpy>:
 8008e54:	440a      	add	r2, r1
 8008e56:	4291      	cmp	r1, r2
 8008e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e5c:	d100      	bne.n	8008e60 <memcpy+0xc>
 8008e5e:	4770      	bx	lr
 8008e60:	b510      	push	{r4, lr}
 8008e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e6a:	4291      	cmp	r1, r2
 8008e6c:	d1f9      	bne.n	8008e62 <memcpy+0xe>
 8008e6e:	bd10      	pop	{r4, pc}

08008e70 <_init>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	bf00      	nop
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr

08008e7c <_fini>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr
