
PRO1_Max_Gulda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008144  08008144  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008144  08008144  00018144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800814c  0800814c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008150  08008150  00018150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae8  20000010  08008164  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af8  08008164  00021af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd6b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004603  00000000  00000000  0003ddee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac8  00000000  00000000  000423f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ab  00000000  00000000  00043ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d1f  00000000  00000000  0004536b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd42  00000000  00000000  0006f08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff0a7  00000000  00000000  0008edcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e80  00000000  00000000  0018de74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00194cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ee0 	.word	0x08007ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007ee0 	.word	0x08007ee0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <init_TrafficInputs>:
#include "TrafficInputs.h"

static ButtonStates buttonState = {0};


void init_TrafficInputs(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	trafficInputs_Update();
 80004d0:	f000 f802 	bl	80004d8 <trafficInputs_Update>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <trafficInputs_Update>:

void trafficInputs_Update(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	buttonState.LeftCar = !HAL_GPIO_ReadPin(TL1_CAR_GPIO_Port, TL1_CAR_Pin);
 80004dc:	2110      	movs	r1, #16
 80004de:	4827      	ldr	r0, [pc, #156]	; (800057c <trafficInputs_Update+0xa4>)
 80004e0:	f001 fdd8 	bl	8002094 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf0c      	ite	eq
 80004ea:	2301      	moveq	r3, #1
 80004ec:	2300      	movne	r3, #0
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <trafficInputs_Update+0xa8>)
 80004f2:	701a      	strb	r2, [r3, #0]
	buttonState.BottomCar = !HAL_GPIO_ReadPin(TL2_CAR_GPIO_Port, TL2_CAR_Pin);
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	4822      	ldr	r0, [pc, #136]	; (8000584 <trafficInputs_Update+0xac>)
 80004fa:	f001 fdcb 	bl	8002094 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf0c      	ite	eq
 8000504:	2301      	moveq	r3, #1
 8000506:	2300      	movne	r3, #0
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <trafficInputs_Update+0xa8>)
 800050c:	705a      	strb	r2, [r3, #1]
	buttonState.RightCar = !HAL_GPIO_ReadPin(TL3_CAR_GPIO_Port, TL3_CAR_Pin);
 800050e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000512:	481c      	ldr	r0, [pc, #112]	; (8000584 <trafficInputs_Update+0xac>)
 8000514:	f001 fdbe 	bl	8002094 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	bf0c      	ite	eq
 800051e:	2301      	moveq	r3, #1
 8000520:	2300      	movne	r3, #0
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <trafficInputs_Update+0xa8>)
 8000526:	709a      	strb	r2, [r3, #2]
	buttonState.TopCar = !HAL_GPIO_ReadPin(TL4_CAR_GPIO_Port, TL4_CAR_Pin);
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f001 fdb0 	bl	8002094 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <trafficInputs_Update+0xa8>)
 8000542:	70da      	strb	r2, [r3, #3]

	buttonState.LeftPed = !HAL_GPIO_ReadPin(PL1_Switch_GPIO_Port, PL1_Switch_Pin);
 8000544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f001 fda2 	bl	8002094 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	bf0c      	ite	eq
 8000556:	2301      	moveq	r3, #1
 8000558:	2300      	movne	r3, #0
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <trafficInputs_Update+0xa8>)
 800055e:	711a      	strb	r2, [r3, #4]
	buttonState.TopPed = !HAL_GPIO_ReadPin(PL2_Switch_GPIO_Port, PL2_Switch_Pin);
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <trafficInputs_Update+0xac>)
 8000564:	f001 fd96 	bl	8002094 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	bf0c      	ite	eq
 800056e:	2301      	moveq	r3, #1
 8000570:	2300      	movne	r3, #0
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <trafficInputs_Update+0xa8>)
 8000576:	715a      	strb	r2, [r3, #5]
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	48000800 	.word	0x48000800
 8000580:	2000002c 	.word	0x2000002c
 8000584:	48000400 	.word	0x48000400

08000588 <getInputState>:

bool getTopPed(){
	return buttonState.TopPed;
}

ButtonStates getInputState(){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	return buttonState;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <getInputState+0x20>)
 8000594:	6810      	ldr	r0, [r2, #0]
 8000596:	6018      	str	r0, [r3, #0]
 8000598:	8892      	ldrh	r2, [r2, #4]
 800059a:	809a      	strh	r2, [r3, #4]
}
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	2000002c 	.word	0x2000002c

080005ac <activateTopBottom>:
 *      Author: gulda
 */

#include "TrafficLogic.h"

void activateTopBottom(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

	turnOffAllLights();
 80005b0:	f000 ffde 	bl	8001570 <turnOffAllLights>
	ControlLight(GREEN_TOP, ON);
 80005b4:	2101      	movs	r1, #1
 80005b6:	2005      	movs	r0, #5
 80005b8:	f000 ff86 	bl	80014c8 <ControlLight>
	ControlLight(GREEN_BOTTOM, ON);
 80005bc:	2101      	movs	r1, #1
 80005be:	2008      	movs	r0, #8
 80005c0:	f000 ff82 	bl	80014c8 <ControlLight>
	ControlLight(RED_PED_LEFT, ON);
 80005c4:	2101      	movs	r1, #1
 80005c6:	200f      	movs	r0, #15
 80005c8:	f000 ff7e 	bl	80014c8 <ControlLight>

	ControlLight(RED_PED_TOP, ON);
 80005cc:	2101      	movs	r1, #1
 80005ce:	2009      	movs	r0, #9
 80005d0:	f000 ff7a 	bl	80014c8 <ControlLight>
	ControlLight(RED_LEFT, ON);
 80005d4:	2101      	movs	r1, #1
 80005d6:	200c      	movs	r0, #12
 80005d8:	f000 ff76 	bl	80014c8 <ControlLight>
	ControlLight(RED_RIGHT, ON);
 80005dc:	2101      	movs	r1, #1
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 ff72 	bl	80014c8 <ControlLight>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <activateLeftRight>:

void activateLeftRight(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	turnOffAllLights();
 80005ec:	f000 ffc0 	bl	8001570 <turnOffAllLights>
	ControlLight(GREEN_LEFT, ON);
 80005f0:	2101      	movs	r1, #1
 80005f2:	200e      	movs	r0, #14
 80005f4:	f000 ff68 	bl	80014c8 <ControlLight>
	ControlLight(GREEN_RIGHT, ON);
 80005f8:	2101      	movs	r1, #1
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 ff64 	bl	80014c8 <ControlLight>

	ControlLight(RED_TOP, ON);
 8000600:	2101      	movs	r1, #1
 8000602:	2003      	movs	r0, #3
 8000604:	f000 ff60 	bl	80014c8 <ControlLight>
	ControlLight(RED_BOTTOM, ON);
 8000608:	2101      	movs	r1, #1
 800060a:	2006      	movs	r0, #6
 800060c:	f000 ff5c 	bl	80014c8 <ControlLight>

	ControlLight(RED_PED_TOP, ON);
 8000610:	2101      	movs	r1, #1
 8000612:	2009      	movs	r0, #9
 8000614:	f000 ff58 	bl	80014c8 <ControlLight>
	ControlLight(RED_PED_LEFT, ON);
 8000618:	2101      	movs	r1, #1
 800061a:	200f      	movs	r0, #15
 800061c:	f000 ff54 	bl	80014c8 <ControlLight>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <activatePedLeft>:

void activatePedLeft(){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	ControlLight(GREEN_PED_LEFT, ON);
 8000628:	2101      	movs	r1, #1
 800062a:	2010      	movs	r0, #16
 800062c:	f000 ff4c 	bl	80014c8 <ControlLight>
	ControlLight(RED_PED_LEFT, OFF);
 8000630:	2100      	movs	r1, #0
 8000632:	200f      	movs	r0, #15
 8000634:	f000 ff48 	bl	80014c8 <ControlLight>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <activatePedTop>:

void activatePedTop(){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	ControlLight(GREEN_PED_TOP, ON);
 8000640:	2101      	movs	r1, #1
 8000642:	200a      	movs	r0, #10
 8000644:	f000 ff40 	bl	80014c8 <ControlLight>
	ControlLight(RED_PED_TOP, OFF);
 8000648:	2100      	movs	r1, #0
 800064a:	2009      	movs	r0, #9
 800064c:	f000 ff3c 	bl	80014c8 <ControlLight>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <activateTransition>:

void activateTransition(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	turnOffAllLights();
 8000658:	f000 ff8a 	bl	8001570 <turnOffAllLights>
	ControlLight(YELLOW_LEFT, ON);
 800065c:	2101      	movs	r1, #1
 800065e:	200d      	movs	r0, #13
 8000660:	f000 ff32 	bl	80014c8 <ControlLight>
	ControlLight(YELLOW_RIGHT, ON);
 8000664:	2101      	movs	r1, #1
 8000666:	2001      	movs	r0, #1
 8000668:	f000 ff2e 	bl	80014c8 <ControlLight>
	ControlLight(YELLOW_BOTTOM, ON);
 800066c:	2101      	movs	r1, #1
 800066e:	2007      	movs	r0, #7
 8000670:	f000 ff2a 	bl	80014c8 <ControlLight>
	ControlLight(YELLOW_TOP, ON);
 8000674:	2101      	movs	r1, #1
 8000676:	2004      	movs	r0, #4
 8000678:	f000 ff26 	bl	80014c8 <ControlLight>

	ControlLight(RED_PED_TOP, ON);
 800067c:	2101      	movs	r1, #1
 800067e:	2009      	movs	r0, #9
 8000680:	f000 ff22 	bl	80014c8 <ControlLight>
	ControlLight(RED_PED_LEFT, ON);
 8000684:	2101      	movs	r1, #1
 8000686:	200f      	movs	r0, #15
 8000688:	f000 ff1e 	bl	80014c8 <ControlLight>

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_DMA_Init+0x38>)
 8000698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <MX_DMA_Init+0x38>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6493      	str	r3, [r2, #72]	; 0x48
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_DMA_Init+0x38>)
 80006a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2105      	movs	r1, #5
 80006b2:	2039      	movs	r0, #57	; 0x39
 80006b4:	f001 f922 	bl	80018fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80006b8:	2039      	movs	r0, #57	; 0x39
 80006ba:	f001 f93b 	bl	8001934 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of RedDelay */
  RedDelayHandle = osTimerNew(RedDelayCallback, osTimerOnce, NULL, &RedDelay_attributes);
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <MX_FREERTOS_Init+0xa8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	4828      	ldr	r0, [pc, #160]	; (8000778 <MX_FREERTOS_Init+0xac>)
 80006d8:	f004 fd0c 	bl	80050f4 <osTimerNew>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a27      	ldr	r2, [pc, #156]	; (800077c <MX_FREERTOS_Init+0xb0>)
 80006e0:	6013      	str	r3, [r2, #0]

  /* creation of YellowDelay */
  YellowDelayHandle = osTimerNew(YellowDelayCallback, osTimerOnce, NULL, &YellowDelay_attributes);
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <MX_FREERTOS_Init+0xb4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	4826      	ldr	r0, [pc, #152]	; (8000784 <MX_FREERTOS_Init+0xb8>)
 80006ea:	f004 fd03 	bl	80050f4 <osTimerNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_FREERTOS_Init+0xbc>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of GreenDelay */
  GreenDelayHandle = osTimerNew(GreenDelayCallback, osTimerOnce, NULL, &GreenDelay_attributes);
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_FREERTOS_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	4825      	ldr	r0, [pc, #148]	; (8000790 <MX_FREERTOS_Init+0xc4>)
 80006fc:	f004 fcfa 	bl	80050f4 <osTimerNew>
 8000700:	4603      	mov	r3, r0
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <MX_FREERTOS_Init+0xc8>)
 8000704:	6013      	str	r3, [r2, #0]

  /* creation of PedDelay */
  PedDelayHandle = osTimerNew(PedDelayCallback, osTimerOnce, NULL, &PedDelay_attributes);
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <MX_FREERTOS_Init+0xcc>)
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	4823      	ldr	r0, [pc, #140]	; (800079c <MX_FREERTOS_Init+0xd0>)
 800070e:	f004 fcf1 	bl	80050f4 <osTimerNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <MX_FREERTOS_Init+0xd4>)
 8000716:	6013      	str	r3, [r2, #0]

  /* creation of WalkingDelay */
  WalkingDelayHandle = osTimerNew(WalkingDelayCallback, osTimerOnce, NULL, &WalkingDelay_attributes);
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_FREERTOS_Init+0xd8>)
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	4822      	ldr	r0, [pc, #136]	; (80007a8 <MX_FREERTOS_Init+0xdc>)
 8000720:	f004 fce8 	bl	80050f4 <osTimerNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_FREERTOS_Init+0xe0>)
 8000728:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <MX_FREERTOS_Init+0xe4>)
 800072c:	2100      	movs	r1, #0
 800072e:	4821      	ldr	r0, [pc, #132]	; (80007b4 <MX_FREERTOS_Init+0xe8>)
 8000730:	f004 fc1e 	bl	8004f70 <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <MX_FREERTOS_Init+0xec>)
 8000738:	6013      	str	r3, [r2, #0]

  /* creation of toggleBlueLight */
  toggleBlueLightHandle = osThreadNew(BlueLight, NULL, &toggleBlueLight_attributes);
 800073a:	4a20      	ldr	r2, [pc, #128]	; (80007bc <MX_FREERTOS_Init+0xf0>)
 800073c:	2100      	movs	r1, #0
 800073e:	4820      	ldr	r0, [pc, #128]	; (80007c0 <MX_FREERTOS_Init+0xf4>)
 8000740:	f004 fc16 	bl	8004f70 <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <MX_FREERTOS_Init+0xf8>)
 8000748:	6013      	str	r3, [r2, #0]

  /* creation of UpdateInputOutp */
  UpdateInputOutpHandle = osThreadNew(inputOutput, NULL, &UpdateInputOutp_attributes);
 800074a:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <MX_FREERTOS_Init+0xfc>)
 800074c:	2100      	movs	r1, #0
 800074e:	481f      	ldr	r0, [pc, #124]	; (80007cc <MX_FREERTOS_Init+0x100>)
 8000750:	f004 fc0e 	bl	8004f70 <osThreadNew>
 8000754:	4603      	mov	r3, r0
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_FREERTOS_Init+0x104>)
 8000758:	6013      	str	r3, [r2, #0]

  /* creation of updateStateTask */
  updateStateTaskHandle = osThreadNew(updateState, NULL, &updateStateTask_attributes);
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <MX_FREERTOS_Init+0x108>)
 800075c:	2100      	movs	r1, #0
 800075e:	481e      	ldr	r0, [pc, #120]	; (80007d8 <MX_FREERTOS_Init+0x10c>)
 8000760:	f004 fc06 	bl	8004f70 <osThreadNew>
 8000764:	4603      	mov	r3, r0
 8000766:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <MX_FREERTOS_Init+0x110>)
 8000768:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  activateTopBottom();
 800076a:	f7ff ff1f 	bl	80005ac <activateTopBottom>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	0800801c 	.word	0x0800801c
 8000778:	08000b49 	.word	0x08000b49
 800077c:	20000050 	.word	0x20000050
 8000780:	0800802c 	.word	0x0800802c
 8000784:	08000b81 	.word	0x08000b81
 8000788:	20000054 	.word	0x20000054
 800078c:	0800803c 	.word	0x0800803c
 8000790:	08000c41 	.word	0x08000c41
 8000794:	20000058 	.word	0x20000058
 8000798:	0800804c 	.word	0x0800804c
 800079c:	08000c79 	.word	0x08000c79
 80007a0:	2000005c 	.word	0x2000005c
 80007a4:	0800805c 	.word	0x0800805c
 80007a8:	08000cb1 	.word	0x08000cb1
 80007ac:	20000060 	.word	0x20000060
 80007b0:	08007f8c 	.word	0x08007f8c
 80007b4:	080007e1 	.word	0x080007e1
 80007b8:	20000040 	.word	0x20000040
 80007bc:	08007fb0 	.word	0x08007fb0
 80007c0:	080007f1 	.word	0x080007f1
 80007c4:	20000044 	.word	0x20000044
 80007c8:	08007fd4 	.word	0x08007fd4
 80007cc:	08000835 	.word	0x08000835
 80007d0:	20000048 	.word	0x20000048
 80007d4:	08007ff8 	.word	0x08007ff8
 80007d8:	08000879 	.word	0x08000879
 80007dc:	2000004c 	.word	0x2000004c

080007e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f004 fc53 	bl	8005094 <osDelay>
 80007ee:	e7fb      	b.n	80007e8 <StartDefaultTask+0x8>

080007f0 <BlueLight>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlueLight */
void BlueLight(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueLight */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(TOGGLE_FREQ) ; // ms to ticks
 80007f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007fc:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80007fe:	f005 feb1 	bl	8006564 <xTaskGetTickCount>
 8000802:	4603      	mov	r3, r0
 8000804:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if(topPedWaiting){
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <BlueLight+0x3c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <BlueLight+0x22>
		  toggleBlueTop();
 800080e:	f000 fe99 	bl	8001544 <toggleBlueTop>
	  }

	  if(leftPedWaiting){
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <BlueLight+0x40>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <BlueLight+0x2e>
		  toggleBlueLeft();
 800081a:	f000 fe7d 	bl	8001518 <toggleBlueLeft>
	  }
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	68f9      	ldr	r1, [r7, #12]
 8000824:	4618      	mov	r0, r3
 8000826:	f005 fcd9 	bl	80061dc <vTaskDelayUntil>
	  if(topPedWaiting){
 800082a:	e7ec      	b.n	8000806 <BlueLight+0x16>
 800082c:	20000034 	.word	0x20000034
 8000830:	20000035 	.word	0x20000035

08000834 <inputOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_inputOutput */
void inputOutput(void *argument)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN inputOutput */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20) ; // ms to ticks
 800083c:	2314      	movs	r3, #20
 800083e:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 8000840:	f005 fe90 	bl	8006564 <xTaskGetTickCount>
 8000844:	4603      	mov	r3, r0
 8000846:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	  trafficInputs_Update();
 8000848:	f7ff fe46 	bl	80004d8 <trafficInputs_Update>
	  inputStates = getInputState();
 800084c:	4c09      	ldr	r4, [pc, #36]	; (8000874 <inputOutput+0x40>)
 800084e:	463b      	mov	r3, r7
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fe99 	bl	8000588 <getInputState>
 8000856:	4622      	mov	r2, r4
 8000858:	463b      	mov	r3, r7
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	6010      	str	r0, [r2, #0]
 800085e:	889b      	ldrh	r3, [r3, #4]
 8000860:	8093      	strh	r3, [r2, #4]
	  updateLights();
 8000862:	f000 fe47 	bl	80014f4 <updateLights>
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	6979      	ldr	r1, [r7, #20]
 800086c:	4618      	mov	r0, r3
 800086e:	f005 fcb5 	bl	80061dc <vTaskDelayUntil>
	  trafficInputs_Update();
 8000872:	e7e9      	b.n	8000848 <inputOutput+0x14>
 8000874:	20000038 	.word	0x20000038

08000878 <updateState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateState */
void updateState(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateState */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(200) ; // ms to ticks
 8000880:	23c8      	movs	r3, #200	; 0xc8
 8000882:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8000884:	f005 fe6e 	bl	8006564 <xTaskGetTickCount>
 8000888:	4603      	mov	r3, r0
 800088a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  switch(state){
 800088c:	4ba3      	ldr	r3, [pc, #652]	; (8000b1c <updateState+0x2a4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b02      	cmp	r3, #2
 8000892:	f000 8117 	beq.w	8000ac4 <updateState+0x24c>
 8000896:	2b02      	cmp	r3, #2
 8000898:	f300 8138 	bgt.w	8000b0c <updateState+0x294>
 800089c:	2b00      	cmp	r3, #0
 800089e:	d003      	beq.n	80008a8 <updateState+0x30>
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	f000 8088 	beq.w	80009b6 <updateState+0x13e>
 80008a6:	e131      	b.n	8000b0c <updateState+0x294>
	  	  case TopBottomActive :
	  		  if(noCar()){
 80008a8:	f000 fa0c 	bl	8000cc4 <noCar>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00f      	beq.n	80008d2 <updateState+0x5a>
	  			  if(!osTimerIsRunning(GreenDelayHandle)){
 80008b2:	4b9b      	ldr	r3, [pc, #620]	; (8000b20 <updateState+0x2a8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f004 fcfd 	bl	80052b6 <osTimerIsRunning>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10c      	bne.n	80008dc <updateState+0x64>
	  				osTimerStart(GreenDelayHandle, pdMS_TO_TICKS(GREEN_DELAY));
 80008c2:	4b97      	ldr	r3, [pc, #604]	; (8000b20 <updateState+0x2a8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f241 7170 	movw	r1, #6000	; 0x1770
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fc8e 	bl	80051ec <osTimerStart>
 80008d0:	e004      	b.n	80008dc <updateState+0x64>
	  			  }
	  		  } else {
	  			  osTimerStop(GreenDelayHandle);
 80008d2:	4b93      	ldr	r3, [pc, #588]	; (8000b20 <updateState+0x2a8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fcb6 	bl	8005248 <osTimerStop>
	  		  }

	  		  if(inputStates.LeftPed){
 80008dc:	4b91      	ldr	r3, [pc, #580]	; (8000b24 <updateState+0x2ac>)
 80008de:	791b      	ldrb	r3, [r3, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d010      	beq.n	8000906 <updateState+0x8e>
	  			  activatePedLeft();
 80008e4:	f7ff fe9e 	bl	8000624 <activatePedLeft>
	  			  if(!osTimerIsRunning(WalkingDelayHandle)){
 80008e8:	4b8f      	ldr	r3, [pc, #572]	; (8000b28 <updateState+0x2b0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 fce2 	bl	80052b6 <osTimerIsRunning>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d106      	bne.n	8000906 <updateState+0x8e>
	  				  osTimerStart(WalkingDelayHandle, pdMS_TO_TICKS(WALKING_DELAY));
 80008f8:	4b8b      	ldr	r3, [pc, #556]	; (8000b28 <updateState+0x2b0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000900:	4618      	mov	r0, r3
 8000902:	f004 fc73 	bl	80051ec <osTimerStart>
	  			  }
	  		  }

	  		  if(inputStates.TopPed){
 8000906:	4b87      	ldr	r3, [pc, #540]	; (8000b24 <updateState+0x2ac>)
 8000908:	795b      	ldrb	r3, [r3, #5]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d011      	beq.n	8000932 <updateState+0xba>
	  			  if(!osTimerIsRunning(PedDelayHandle)){
 800090e:	4b87      	ldr	r3, [pc, #540]	; (8000b2c <updateState+0x2b4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fccf 	bl	80052b6 <osTimerIsRunning>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d106      	bne.n	800092c <updateState+0xb4>
					  osTimerStart(PedDelayHandle, pdMS_TO_TICKS(PEDESTRIAN_DELAY));
 800091e:	4b83      	ldr	r3, [pc, #524]	; (8000b2c <updateState+0x2b4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fc60 	bl	80051ec <osTimerStart>
				  }
	  			  topPedWaiting = true;
 800092c:	4b80      	ldr	r3, [pc, #512]	; (8000b30 <updateState+0x2b8>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  if(noCarTopBottom() && !noCarLeftRight() && !osTimerIsRunning(WalkingDelayHandle)){
 8000932:	f000 fa11 	bl	8000d58 <noCarTopBottom>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d016      	beq.n	800096a <updateState+0xf2>
 800093c:	f000 f9ee 	bl	8000d1c <noCarLeftRight>
 8000940:	4603      	mov	r3, r0
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00e      	beq.n	800096a <updateState+0xf2>
 800094c:	4b76      	ldr	r3, [pc, #472]	; (8000b28 <updateState+0x2b0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f004 fcb0 	bl	80052b6 <osTimerIsRunning>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d106      	bne.n	800096a <updateState+0xf2>
	  			  state = Transition;
 800095c:	4b6f      	ldr	r3, [pc, #444]	; (8000b1c <updateState+0x2a4>)
 800095e:	2202      	movs	r2, #2
 8000960:	701a      	strb	r2, [r3, #0]
	  			  lastActive = TopBottomActive;
 8000962:	4b74      	ldr	r3, [pc, #464]	; (8000b34 <updateState+0x2bc>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e01e      	b.n	80009a8 <updateState+0x130>
	  		  } else if(!noCarTopBottom() && !noCarLeftRight()){
 800096a:	f000 f9f5 	bl	8000d58 <noCarTopBottom>
 800096e:	4603      	mov	r3, r0
 8000970:	f083 0301 	eor.w	r3, r3, #1
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d016      	beq.n	80009a8 <updateState+0x130>
 800097a:	f000 f9cf 	bl	8000d1c <noCarLeftRight>
 800097e:	4603      	mov	r3, r0
 8000980:	f083 0301 	eor.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00e      	beq.n	80009a8 <updateState+0x130>
	  			  if(!osTimerIsRunning(RedDelayHandle)){
 800098a:	4b6b      	ldr	r3, [pc, #428]	; (8000b38 <updateState+0x2c0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f004 fc91 	bl	80052b6 <osTimerIsRunning>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d106      	bne.n	80009a8 <updateState+0x130>
	  				  osTimerStart(RedDelayHandle, pdMS_TO_TICKS(RED_DELAY_MAX));
 800099a:	4b67      	ldr	r3, [pc, #412]	; (8000b38 <updateState+0x2c0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f242 7110 	movw	r1, #10000	; 0x2710
 80009a2:	4618      	mov	r0, r3
 80009a4:	f004 fc22 	bl	80051ec <osTimerStart>
	  			  }
	  		  }
	  		  transitionActivated = false;
 80009a8:	4b64      	ldr	r3, [pc, #400]	; (8000b3c <updateState+0x2c4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
	  		  lastActive = TopBottomActive;
 80009ae:	4b61      	ldr	r3, [pc, #388]	; (8000b34 <updateState+0x2bc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
	  		  break;
 80009b4:	e0aa      	b.n	8000b0c <updateState+0x294>
	  	  case LeftRightActive :
	  		  if(noCar()){
 80009b6:	f000 f985 	bl	8000cc4 <noCar>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00f      	beq.n	80009e0 <updateState+0x168>
	  			  if(!osTimerIsRunning(GreenDelayHandle)){
 80009c0:	4b57      	ldr	r3, [pc, #348]	; (8000b20 <updateState+0x2a8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 fc76 	bl	80052b6 <osTimerIsRunning>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10c      	bne.n	80009ea <updateState+0x172>
	  				  osTimerStart(GreenDelayHandle, pdMS_TO_TICKS(GREEN_DELAY));
 80009d0:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <updateState+0x2a8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f241 7170 	movw	r1, #6000	; 0x1770
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 fc07 	bl	80051ec <osTimerStart>
 80009de:	e004      	b.n	80009ea <updateState+0x172>
	  			  }
			  } else {
				  osTimerStop(GreenDelayHandle);
 80009e0:	4b4f      	ldr	r3, [pc, #316]	; (8000b20 <updateState+0x2a8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f004 fc2f 	bl	8005248 <osTimerStop>
			  }

	  		  if(inputStates.TopPed){
 80009ea:	4b4e      	ldr	r3, [pc, #312]	; (8000b24 <updateState+0x2ac>)
 80009ec:	795b      	ldrb	r3, [r3, #5]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d010      	beq.n	8000a14 <updateState+0x19c>
	  			activatePedTop();
 80009f2:	f7ff fe23 	bl	800063c <activatePedTop>
				if(!osTimerIsRunning(WalkingDelayHandle)){
 80009f6:	4b4c      	ldr	r3, [pc, #304]	; (8000b28 <updateState+0x2b0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 fc5b 	bl	80052b6 <osTimerIsRunning>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d106      	bne.n	8000a14 <updateState+0x19c>
					osTimerStart(WalkingDelayHandle, pdMS_TO_TICKS(WALKING_DELAY));
 8000a06:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <updateState+0x2b0>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 fbec 	bl	80051ec <osTimerStart>
				}
	  		  }

	  		  if(inputStates.LeftPed){
 8000a14:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <updateState+0x2ac>)
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d011      	beq.n	8000a40 <updateState+0x1c8>
	  			  if(!osTimerIsRunning(PedDelayHandle)){
 8000a1c:	4b43      	ldr	r3, [pc, #268]	; (8000b2c <updateState+0x2b4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 fc48 	bl	80052b6 <osTimerIsRunning>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d106      	bne.n	8000a3a <updateState+0x1c2>
	  				  osTimerStart(PedDelayHandle, pdMS_TO_TICKS(PEDESTRIAN_DELAY));
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <updateState+0x2b4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000a34:	4618      	mov	r0, r3
 8000a36:	f004 fbd9 	bl	80051ec <osTimerStart>
	  			  }
				  leftPedWaiting = true;
 8000a3a:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <updateState+0x2c8>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
			  }

	  		  if(noCarLeftRight() && !noCarTopBottom() && !osTimerIsRunning(WalkingDelayHandle)){
 8000a40:	f000 f96c 	bl	8000d1c <noCarLeftRight>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d016      	beq.n	8000a78 <updateState+0x200>
 8000a4a:	f000 f985 	bl	8000d58 <noCarTopBottom>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00e      	beq.n	8000a78 <updateState+0x200>
 8000a5a:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <updateState+0x2b0>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fc29 	bl	80052b6 <osTimerIsRunning>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d106      	bne.n	8000a78 <updateState+0x200>
				  state = Transition;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <updateState+0x2a4>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	701a      	strb	r2, [r3, #0]
				  lastActive = TopBottomActive;
 8000a70:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <updateState+0x2bc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e01e      	b.n	8000ab6 <updateState+0x23e>
	  		  } else if(!noCarTopBottom() && !noCarLeftRight()){
 8000a78:	f000 f96e 	bl	8000d58 <noCarTopBottom>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f083 0301 	eor.w	r3, r3, #1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d016      	beq.n	8000ab6 <updateState+0x23e>
 8000a88:	f000 f948 	bl	8000d1c <noCarLeftRight>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00e      	beq.n	8000ab6 <updateState+0x23e>
	  			  if(!osTimerIsRunning(RedDelayHandle)){
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <updateState+0x2c0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 fc0a 	bl	80052b6 <osTimerIsRunning>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d106      	bne.n	8000ab6 <updateState+0x23e>
	  				  osTimerStart(RedDelayHandle, pdMS_TO_TICKS(RED_DELAY_MAX));
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <updateState+0x2c0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 fb9b 	bl	80051ec <osTimerStart>
	  			  }
	  		  }
	  		  transitionActivated = false;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <updateState+0x2c4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
	  		  lastActive = LeftRightActive;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <updateState+0x2bc>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000ac2:	e023      	b.n	8000b0c <updateState+0x294>
	  	  case Transition :
	  		  if(!osTimerIsRunning(WalkingDelayHandle)){
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <updateState+0x2b0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 fbf4 	bl	80052b6 <osTimerIsRunning>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d11a      	bne.n	8000b0a <updateState+0x292>
	  			if(!osTimerIsRunning(YellowDelayHandle)){
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <updateState+0x2cc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f004 fbec 	bl	80052b6 <osTimerIsRunning>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d106      	bne.n	8000af2 <updateState+0x27a>
	  				osTimerStart(YellowDelayHandle, pdMS_TO_TICKS(YELLOW_DELAY));
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <updateState+0x2cc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000aec:	4618      	mov	r0, r3
 8000aee:	f004 fb7d 	bl	80051ec <osTimerStart>
				}
	  			if(!transitionActivated){
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <updateState+0x2c4>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f083 0301 	eor.w	r3, r3, #1
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <updateState+0x292>
	  				activateTransition();
 8000b00:	f7ff fda8 	bl	8000654 <activateTransition>
	  				transitionActivated = true;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <updateState+0x2c4>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
	  			}

	  		  }

	  		  break;
 8000b0a:	bf00      	nop
	  }

	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	68f9      	ldr	r1, [r7, #12]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f005 fb62 	bl	80061dc <vTaskDelayUntil>
	  switch(state){
 8000b18:	e6b8      	b.n	800088c <updateState+0x14>
 8000b1a:	bf00      	nop
 8000b1c:	20000032 	.word	0x20000032
 8000b20:	20000058 	.word	0x20000058
 8000b24:	20000038 	.word	0x20000038
 8000b28:	20000060 	.word	0x20000060
 8000b2c:	2000005c 	.word	0x2000005c
 8000b30:	20000034 	.word	0x20000034
 8000b34:	20000033 	.word	0x20000033
 8000b38:	20000050 	.word	0x20000050
 8000b3c:	20000036 	.word	0x20000036
 8000b40:	20000035 	.word	0x20000035
 8000b44:	20000054 	.word	0x20000054

08000b48 <RedDelayCallback>:
  /* USER CODE END updateState */
}

/* RedDelayCallback function */
void RedDelayCallback(void *argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedDelayCallback */
	osTimerStop(GreenDelayHandle);
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <RedDelayCallback+0x2c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fb77 	bl	8005248 <osTimerStop>
	osTimerStop(PedDelayHandle);
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <RedDelayCallback+0x30>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 fb72 	bl	8005248 <osTimerStop>
	state = Transition;
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <RedDelayCallback+0x34>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	701a      	strb	r2, [r3, #0]
  /* USER CODE END RedDelayCallback */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000058 	.word	0x20000058
 8000b78:	2000005c 	.word	0x2000005c
 8000b7c:	20000032 	.word	0x20000032

08000b80 <YellowDelayCallback>:

/* YellowDelayCallback function */
void YellowDelayCallback(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN YellowDelayCallback */
	osTimerStop(GreenDelayHandle);
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <YellowDelayCallback+0xa4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f004 fb5b 	bl	8005248 <osTimerStop>
	osTimerStop(RedDelayHandle);
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <YellowDelayCallback+0xa8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f004 fb56 	bl	8005248 <osTimerStop>

	if(lastActive == LeftRightActive){
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <YellowDelayCallback+0xac>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d11d      	bne.n	8000be0 <YellowDelayCallback+0x60>
		activateTopBottom();
 8000ba4:	f7ff fd02 	bl	80005ac <activateTopBottom>
		state = TopBottomActive;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <YellowDelayCallback+0xb0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
		if(leftPedWaiting){
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <YellowDelayCallback+0xb4>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d031      	beq.n	8000c1a <YellowDelayCallback+0x9a>
			activatePedLeft();
 8000bb6:	f7ff fd35 	bl	8000624 <activatePedLeft>
			leftPedWaiting = false;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <YellowDelayCallback+0xb4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
			if(!osTimerIsRunning(WalkingDelayHandle) ){
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <YellowDelayCallback+0xb8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fb76 	bl	80052b6 <osTimerIsRunning>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d124      	bne.n	8000c1a <YellowDelayCallback+0x9a>
				osTimerStart(WalkingDelayHandle, pdMS_TO_TICKS(WALKING_DELAY));
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <YellowDelayCallback+0xb8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fb07 	bl	80051ec <osTimerStart>
				osTimerStart(WalkingDelayHandle, pdMS_TO_TICKS(WALKING_DELAY));
			}
		}
	}
  /* USER CODE END YellowDelayCallback */
}
 8000bde:	e01c      	b.n	8000c1a <YellowDelayCallback+0x9a>
		activateLeftRight();
 8000be0:	f7ff fd02 	bl	80005e8 <activateLeftRight>
		state = LeftRightActive;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <YellowDelayCallback+0xb0>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		if(topPedWaiting){
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <YellowDelayCallback+0xbc>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d013      	beq.n	8000c1a <YellowDelayCallback+0x9a>
			activatePedTop();
 8000bf2:	f7ff fd23 	bl	800063c <activatePedTop>
			topPedWaiting = false;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <YellowDelayCallback+0xbc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
			if(!osTimerIsRunning(WalkingDelayHandle) ){
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <YellowDelayCallback+0xb8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fb58 	bl	80052b6 <osTimerIsRunning>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d106      	bne.n	8000c1a <YellowDelayCallback+0x9a>
				osTimerStart(WalkingDelayHandle, pdMS_TO_TICKS(WALKING_DELAY));
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <YellowDelayCallback+0xb8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fae9 	bl	80051ec <osTimerStart>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000058 	.word	0x20000058
 8000c28:	20000050 	.word	0x20000050
 8000c2c:	20000033 	.word	0x20000033
 8000c30:	20000032 	.word	0x20000032
 8000c34:	20000035 	.word	0x20000035
 8000c38:	20000060 	.word	0x20000060
 8000c3c:	20000034 	.word	0x20000034

08000c40 <GreenDelayCallback>:

/* GreenDelayCallback function */
void GreenDelayCallback(void *argument)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenDelayCallback */
	osTimerStop(RedDelayHandle);
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <GreenDelayCallback+0x2c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fafb 	bl	8005248 <osTimerStop>
	osTimerStop(PedDelayHandle);
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <GreenDelayCallback+0x30>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 faf6 	bl	8005248 <osTimerStop>
	state = Transition;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <GreenDelayCallback+0x34>)
 8000c5e:	2202      	movs	r2, #2
 8000c60:	701a      	strb	r2, [r3, #0]
  /* USER CODE END GreenDelayCallback */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000050 	.word	0x20000050
 8000c70:	2000005c 	.word	0x2000005c
 8000c74:	20000032 	.word	0x20000032

08000c78 <PedDelayCallback>:

/* PedDelayCallback function */
void PedDelayCallback(void *argument)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PedDelayCallback */
	osTimerStop(RedDelayHandle);
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <PedDelayCallback+0x2c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 fadf 	bl	8005248 <osTimerStop>
	osTimerStop(GreenDelayHandle);
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <PedDelayCallback+0x30>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 fada 	bl	8005248 <osTimerStop>

	state = Transition;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <PedDelayCallback+0x34>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	701a      	strb	r2, [r3, #0]


  /* USER CODE END PedDelayCallback */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000050 	.word	0x20000050
 8000ca8:	20000058 	.word	0x20000058
 8000cac:	20000032 	.word	0x20000032

08000cb0 <WalkingDelayCallback>:

/* WalkingDelayCallback function */
void WalkingDelayCallback(void *argument)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WalkingDelayCallback */

  /* USER CODE END WalkingDelayCallback */
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <noCar>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
bool noCar(void){
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
	return !(inputStates.BottomCar || inputStates.LeftCar || inputStates.TopCar || inputStates.RightCar);
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <noCar+0x54>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	f083 0301 	eor.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d016      	beq.n	8000d04 <noCar+0x40>
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <noCar+0x54>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f083 0301 	eor.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00f      	beq.n	8000d04 <noCar+0x40>
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <noCar+0x54>)
 8000ce6:	78db      	ldrb	r3, [r3, #3]
 8000ce8:	f083 0301 	eor.w	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d008      	beq.n	8000d04 <noCar+0x40>
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <noCar+0x54>)
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	f083 0301 	eor.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <noCar+0x40>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <noCar+0x42>
 8000d04:	2300      	movs	r3, #0
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000038 	.word	0x20000038

08000d1c <noCarLeftRight>:

bool noCarLeftRight(void){
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	return !(inputStates.LeftCar || inputStates.RightCar);
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <noCarLeftRight+0x38>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	f083 0301 	eor.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <noCarLeftRight+0x24>
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <noCarLeftRight+0x38>)
 8000d30:	789b      	ldrb	r3, [r3, #2]
 8000d32:	f083 0301 	eor.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <noCarLeftRight+0x24>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <noCarLeftRight+0x26>
 8000d40:	2300      	movs	r3, #0
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000038 	.word	0x20000038

08000d58 <noCarTopBottom>:

bool noCarTopBottom(void){
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	return !(inputStates.BottomCar || inputStates.TopCar);
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <noCarTopBottom+0x38>)
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	f083 0301 	eor.w	r3, r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d008      	beq.n	8000d7c <noCarTopBottom+0x24>
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <noCarTopBottom+0x38>)
 8000d6c:	78db      	ldrb	r3, [r3, #3]
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <noCarTopBottom+0x24>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <noCarTopBottom+0x26>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000038 	.word	0x20000038

08000d94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b54      	ldr	r3, [pc, #336]	; (8000efc <MX_GPIO_Init+0x168>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a53      	ldr	r2, [pc, #332]	; (8000efc <MX_GPIO_Init+0x168>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b51      	ldr	r3, [pc, #324]	; (8000efc <MX_GPIO_Init+0x168>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b4e      	ldr	r3, [pc, #312]	; (8000efc <MX_GPIO_Init+0x168>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a4d      	ldr	r2, [pc, #308]	; (8000efc <MX_GPIO_Init+0x168>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <MX_GPIO_Init+0x168>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b48      	ldr	r3, [pc, #288]	; (8000efc <MX_GPIO_Init+0x168>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a47      	ldr	r2, [pc, #284]	; (8000efc <MX_GPIO_Init+0x168>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b45      	ldr	r3, [pc, #276]	; (8000efc <MX_GPIO_Init+0x168>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b42      	ldr	r3, [pc, #264]	; (8000efc <MX_GPIO_Init+0x168>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a41      	ldr	r2, [pc, #260]	; (8000efc <MX_GPIO_Init+0x168>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <MX_GPIO_Init+0x168>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Reset_595_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f001 f956 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1e:	4838      	ldr	r0, [pc, #224]	; (8000f00 <MX_GPIO_Init+0x16c>)
 8000e20:	f001 f950 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	4836      	ldr	r0, [pc, #216]	; (8000f04 <MX_GPIO_Init+0x170>)
 8000e2a:	f001 f94b 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	482f      	ldr	r0, [pc, #188]	; (8000f04 <MX_GPIO_Init+0x170>)
 8000e46:	f000 ff7b 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Reset_595_Pin;
 8000e4a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f000 ff6b 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_CAR_Pin;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_CAR_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4821      	ldr	r0, [pc, #132]	; (8000f04 <MX_GPIO_Init+0x170>)
 8000e7e:	f000 ff5f 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STCP_595_Pin;
 8000e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STCP_595_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4819      	ldr	r0, [pc, #100]	; (8000f00 <MX_GPIO_Init+0x16c>)
 8000e9c:	f000 ff50 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_CAR_Pin|TL3_CAR_Pin|PL2_Switch_Pin;
 8000ea0:	f44f 43c1 	mov.w	r3, #24704	; 0x6080
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4812      	ldr	r0, [pc, #72]	; (8000f00 <MX_GPIO_Init+0x16c>)
 8000eb6:	f000 ff43 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_595_Pin;
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_595_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_GPIO_Init+0x170>)
 8000ed2:	f000 ff35 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TL4_CAR_Pin|PL1_Switch_Pin;
 8000ed6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f000 ff27 	bl	8001d40 <HAL_GPIO_Init>

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800

08000f08 <hc595_init>:

#include "hc595.h"

static SPI_HandleTypeDef *SPI_Handle;

void hc595_init(SPI_HandleTypeDef *_hspi3){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	SPI_Handle = _hspi3;
 8000f10:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <hc595_init+0x30>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(Reset_595_GPIO_Port, Reset_595_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f001 f8d0 	bl	80020c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <hc595_init+0x34>)
 8000f2a:	f001 f8cb 	bl	80020c4 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000064 	.word	0x20000064
 8000f3c:	48000800 	.word	0x48000800

08000f40 <hc595_update>:
//	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);
	//HAL_Delay(1);
//	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
//}

void hc595_update(uint8_t* dataToSend){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    HAL_SPI_Transmit_DMA(SPI_Handle, dataToSend, 3);
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <hc595_update+0x20>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fcc5 	bl	80038e0 <HAL_SPI_Transmit_DMA>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000064 	.word	0x20000064

08000f64 <HAL_SPI_TxCpltCallback>:

// DMA Transfer Complete callback
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    if (hspi == SPI_Handle) {
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_SPI_TxCpltCallback+0x34>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d10b      	bne.n	8000f8e <HAL_SPI_TxCpltCallback+0x2a>
        HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <HAL_SPI_TxCpltCallback+0x38>)
 8000f7e:	f001 f8a1 	bl	80020c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <HAL_SPI_TxCpltCallback+0x38>)
 8000f8a:	f001 f89b 	bl	80020c4 <HAL_GPIO_WritePin>
    }
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000064 	.word	0x20000064
 8000f9c:	48000400 	.word	0x48000400

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f000 fbb2 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f816 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f7ff fef2 	bl	8000d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb0:	f7ff fb6e 	bl	8000690 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fb4:	f000 faf4 	bl	80015a0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000fb8:	f000 f878 	bl	80010ac <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  initTrafficLights(&hspi3);
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <main+0x34>)
 8000fbe:	f000 fa15 	bl	80013ec <initTrafficLights>
  init_TrafficInputs();
 8000fc2:	f7ff fa83 	bl	80004cc <init_TrafficInputs>
  //Test_Program();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000fc6:	f003 ff89 	bl	8004edc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fca:	f7ff fb7f 	bl	80006cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fce:	f003 ffa9 	bl	8004f24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <main+0x32>
 8000fd4:	20000068 	.word	0x20000068

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b096      	sub	sp, #88	; 0x58
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	2244      	movs	r2, #68	; 0x44
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f006 ff40 	bl	8007e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ffa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ffe:	f001 f887 	bl	8002110 <HAL_PWREx_ControlVoltageScaling>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001008:	f000 f84a 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001014:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001016:	2310      	movs	r3, #16
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101e:	2302      	movs	r3, #2
 8001020:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001026:	230a      	movs	r3, #10
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800102a:	2307      	movs	r3, #7
 800102c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001032:	2302      	movs	r3, #2
 8001034:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4618      	mov	r0, r3
 800103c:	f001 f8be 	bl	80021bc <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001046:	f000 f82b 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104e:	2303      	movs	r3, #3
 8001050:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	2104      	movs	r1, #4
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fc86 	bl	8002974 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800106e:	f000 f817 	bl	80010a0 <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3758      	adds	r7, #88	; 0x58
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800108e:	f000 fb5d 	bl	800174c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012c00 	.word	0x40012c00

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_SPI3_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_SPI3_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_SPI3_Init+0x74>)
 80010b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_SPI3_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_SPI3_Init+0x74>)
 80010c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_SPI3_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_SPI3_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_SPI3_Init+0x74>)
 80010da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_SPI3_Init+0x74>)
 80010e2:	2210      	movs	r2, #16
 80010e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_SPI3_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_SPI3_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_SPI3_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_SPI3_Init+0x74>)
 80010fa:	2207      	movs	r2, #7
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_SPI3_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_SPI3_Init+0x74>)
 8001106:	2208      	movs	r2, #8
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_SPI3_Init+0x74>)
 800110c:	f002 fb44 	bl	8003798 <HAL_SPI_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001116:	f7ff ffc3 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000068 	.word	0x20000068
 8001124:	40003c00 	.word	0x40003c00

08001128 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <HAL_SPI_MspInit+0x108>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d16d      	bne.n	8001226 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_SPI_MspInit+0x10c>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	4a39      	ldr	r2, [pc, #228]	; (8001234 <HAL_SPI_MspInit+0x10c>)
 8001150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001154:	6593      	str	r3, [r2, #88]	; 0x58
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_SPI_MspInit+0x10c>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_SPI_MspInit+0x10c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a33      	ldr	r2, [pc, #204]	; (8001234 <HAL_SPI_MspInit+0x10c>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <HAL_SPI_MspInit+0x10c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_SPI_MspInit+0x10c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_SPI_MspInit+0x10c>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <HAL_SPI_MspInit+0x10c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011a4:	2306      	movs	r3, #6
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4822      	ldr	r0, [pc, #136]	; (8001238 <HAL_SPI_MspInit+0x110>)
 80011b0:	f000 fdc6 	bl	8001d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b4:	2320      	movs	r3, #32
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011c4:	2306      	movs	r3, #6
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	481b      	ldr	r0, [pc, #108]	; (800123c <HAL_SPI_MspInit+0x114>)
 80011d0:	f000 fdb6 	bl	8001d40 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_SPI_MspInit+0x118>)
 80011d6:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <HAL_SPI_MspInit+0x11c>)
 80011d8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_SPI_MspInit+0x118>)
 80011dc:	2203      	movs	r2, #3
 80011de:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_SPI_MspInit+0x118>)
 80011e2:	2210      	movs	r2, #16
 80011e4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_SPI_MspInit+0x118>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_SPI_MspInit+0x118>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_SPI_MspInit+0x118>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_SPI_MspInit+0x118>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_SPI_MspInit+0x118>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_SPI_MspInit+0x118>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <HAL_SPI_MspInit+0x118>)
 800120c:	f000 fba0 	bl	8001950 <HAL_DMA_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001216:	f7ff ff43 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_SPI_MspInit+0x118>)
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_SPI_MspInit+0x118>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40003c00 	.word	0x40003c00
 8001234:	40021000 	.word	0x40021000
 8001238:	48000800 	.word	0x48000800
 800123c:	48000400 	.word	0x48000400
 8001240:	200000cc 	.word	0x200000cc
 8001244:	4002041c 	.word	0x4002041c

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_MspInit+0x4c>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_MspInit+0x4c>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6613      	str	r3, [r2, #96]	; 0x60
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_MspInit+0x4c>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_MspInit+0x4c>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_MspInit+0x4c>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6593      	str	r3, [r2, #88]	; 0x58
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_MspInit+0x4c>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	210f      	movs	r1, #15
 8001282:	f06f 0001 	mvn.w	r0, #1
 8001286:	f000 fb39 	bl	80018fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_InitTick+0xc8>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <HAL_InitTick+0xc8>)
 80012ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012b0:	6613      	str	r3, [r2, #96]	; 0x60
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_InitTick+0xc8>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012be:	f107 020c 	add.w	r2, r7, #12
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fd17 	bl	8002cfc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012ce:	f001 fcff 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 80012d2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <HAL_InitTick+0xcc>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	0c9b      	lsrs	r3, r3, #18
 80012de:	3b01      	subs	r3, #1
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_InitTick+0xd0>)
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_InitTick+0xd4>)
 80012e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <HAL_InitTick+0xd0>)
 80012ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012f0:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_InitTick+0xd0>)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_InitTick+0xd0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_InitTick+0xd0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_InitTick+0xd0>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001308:	4817      	ldr	r0, [pc, #92]	; (8001368 <HAL_InitTick+0xd0>)
 800130a:	f002 fdd3 	bl	8003eb4 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001318:	2b00      	cmp	r3, #0
 800131a:	d11b      	bne.n	8001354 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800131c:	4812      	ldr	r0, [pc, #72]	; (8001368 <HAL_InitTick+0xd0>)
 800131e:	f002 fe2b 	bl	8003f78 <HAL_TIM_Base_Start_IT>
 8001322:	4603      	mov	r3, r0
 8001324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800132c:	2b00      	cmp	r3, #0
 800132e:	d111      	bne.n	8001354 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001330:	2019      	movs	r0, #25
 8001332:	f000 faff 	bl	8001934 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d808      	bhi.n	800134e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	2019      	movs	r0, #25
 8001342:	f000 fadb 	bl	80018fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_InitTick+0xd8>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e002      	b.n	8001354 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001354:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001358:	4618      	mov	r0, r3
 800135a:	3730      	adds	r7, #48	; 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000
 8001364:	431bde83 	.word	0x431bde83
 8001368:	20000114 	.word	0x20000114
 800136c:	40012c00 	.word	0x40012c00
 8001370:	20000004 	.word	0x20000004

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013a6:	f002 fe57 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000114 	.word	0x20000114

080013b4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <DMA2_Channel2_IRQHandler+0x10>)
 80013ba:	f000 fbe1 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200000cc 	.word	0x200000cc

080013c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <initTrafficLights>:
};

static uint8_t buffer[3] = {0, 0, 0};
static bool lightsChanged;

void initTrafficLights(SPI_HandleTypeDef *_hspi3){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	lightsChanged = false;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <initTrafficLights+0x3c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
	hc595_init(_hspi3);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fd84 	bl	8000f08 <hc595_init>
	for(int i = 0; i < 3; i++){
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e007      	b.n	8001416 <initTrafficLights+0x2a>
		buffer[i] = 0;
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <initTrafficLights+0x40>)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3301      	adds	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b02      	cmp	r3, #2
 800141a:	ddf4      	ble.n	8001406 <initTrafficLights+0x1a>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000163 	.word	0x20000163
 800142c:	20000160 	.word	0x20000160

08001430 <setLight>:

void setLight(LightConfig config, LightState state) {
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	e883 0003 	stmia.w	r3, {r0, r1}
 800143e:	4613      	mov	r3, r2
 8001440:	71fb      	strb	r3, [r7, #7]
    uint8_t currentMask = (1 << config.bitPosition);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2201      	movs	r2, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	75fb      	strb	r3, [r7, #23]
    bool isLightCurrentlyOn = (buffer[config.bufferIndex] & currentMask) != 0;
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <setLight+0x90>)
 8001450:	5cd2      	ldrb	r2, [r2, r3]
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	4013      	ands	r3, r2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf14      	ite	ne
 800145c:	2301      	movne	r3, #1
 800145e:	2300      	moveq	r3, #0
 8001460:	75bb      	strb	r3, [r7, #22]
    bool isLightBeingTurnedOn = (state == ON);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b01      	cmp	r3, #1
 8001466:	bf0c      	ite	eq
 8001468:	2301      	moveq	r3, #1
 800146a:	2300      	movne	r3, #0
 800146c:	757b      	strb	r3, [r7, #21]

    if (isLightCurrentlyOn != isLightBeingTurnedOn) {
 800146e:	7dba      	ldrb	r2, [r7, #22]
 8001470:	7d7b      	ldrb	r3, [r7, #21]
 8001472:	429a      	cmp	r2, r3
 8001474:	d01d      	beq.n	80014b2 <setLight+0x82>
        lightsChanged = true;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <setLight+0x94>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]

        if (isLightBeingTurnedOn) {
 800147c:	7d7b      	ldrb	r3, [r7, #21]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <setLight+0x66>
            buffer[config.bufferIndex] |= currentMask;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <setLight+0x90>)
 8001486:	5cd1      	ldrb	r1, [r2, r3]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	7dfa      	ldrb	r2, [r7, #23]
 800148c:	430a      	orrs	r2, r1
 800148e:	b2d1      	uxtb	r1, r2
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <setLight+0x90>)
 8001492:	54d1      	strb	r1, [r2, r3]
        } else {
            buffer[config.bufferIndex] &= ~currentMask;
        }
    }
}
 8001494:	e00d      	b.n	80014b2 <setLight+0x82>
            buffer[config.bufferIndex] &= ~currentMask;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <setLight+0x90>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	b25a      	sxtb	r2, r3
 800149e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	4013      	ands	r3, r2
 80014a8:	b25a      	sxtb	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	b2d1      	uxtb	r1, r2
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <setLight+0x90>)
 80014b0:	54d1      	strb	r1, [r2, r3]
}
 80014b2:	bf00      	nop
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000160 	.word	0x20000160
 80014c4:	20000163 	.word	0x20000163

080014c8 <ControlLight>:


void ControlLight(int lightId, LightState state) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
    setLight(lightConfigs[lightId], state);
 80014d4:	78fa      	ldrb	r2, [r7, #3]
 80014d6:	4906      	ldr	r1, [pc, #24]	; (80014f0 <ControlLight+0x28>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e2:	f7ff ffa5 	bl	8001430 <setLight>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	080080b4 	.word	0x080080b4

080014f4 <updateLights>:

void updateLights(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	if(lightsChanged){
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <updateLights+0x1c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <updateLights+0x18>
		hc595_update(buffer);
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <updateLights+0x20>)
 8001502:	f7ff fd1d 	bl	8000f40 <hc595_update>
		lightsChanged = false;
 8001506:	4b02      	ldr	r3, [pc, #8]	; (8001510 <updateLights+0x1c>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
	}
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000163 	.word	0x20000163
 8001514:	20000160 	.word	0x20000160

08001518 <toggleBlueLeft>:

void toggleBlueLeft() {
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	buffer[2] ^= 0b00100000;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <toggleBlueLeft+0x24>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	f083 0320 	eor.w	r3, r3, #32
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <toggleBlueLeft+0x24>)
 8001528:	709a      	strb	r2, [r3, #2]
	lightsChanged = true;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <toggleBlueLeft+0x28>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000160 	.word	0x20000160
 8001540:	20000163 	.word	0x20000163

08001544 <toggleBlueTop>:

void toggleBlueTop() {
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	buffer[1] ^= 0b00100000;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <toggleBlueTop+0x24>)
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	f083 0320 	eor.w	r3, r3, #32
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <toggleBlueTop+0x24>)
 8001554:	705a      	strb	r2, [r3, #1]
	lightsChanged = true;
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <toggleBlueTop+0x28>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000160 	.word	0x20000160
 800156c:	20000163 	.word	0x20000163

08001570 <turnOffAllLights>:

void turnOffAllLights() {
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	buffer[0] = 0;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <turnOffAllLights+0x28>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <turnOffAllLights+0x28>)
 800157c:	2200      	movs	r2, #0
 800157e:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <turnOffAllLights+0x28>)
 8001582:	2200      	movs	r2, #0
 8001584:	709a      	strb	r2, [r3, #2]
	lightsChanged = true;
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <turnOffAllLights+0x2c>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000160 	.word	0x20000160
 800159c:	20000163 	.word	0x20000163

080015a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015a6:	4a15      	ldr	r2, [pc, #84]	; (80015fc <MX_USART2_UART_Init+0x5c>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_USART2_UART_Init+0x58>)
 80015e4:	f002 ff1a 	bl	800441c <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015ee:	f7ff fd57 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000164 	.word	0x20000164
 80015fc:	40004400 	.word	0x40004400

08001600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0ac      	sub	sp, #176	; 0xb0
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2288      	movs	r2, #136	; 0x88
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f006 fc23 	bl	8007e6c <memset>
  if(uartHandle->Instance==USART2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_UART_MspInit+0xb0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d13b      	bne.n	80016a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001630:	2302      	movs	r3, #2
 8001632:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001634:	2300      	movs	r3, #0
 8001636:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4618      	mov	r0, r3
 800163e:	f001 fbef 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001648:	f7ff fd2a 	bl	80010a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_UART_MspInit+0xb4>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <HAL_UART_MspInit+0xb4>)
 8001652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001656:	6593      	str	r3, [r2, #88]	; 0x58
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_UART_MspInit+0xb4>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_UART_MspInit+0xb4>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <HAL_UART_MspInit+0xb4>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_UART_MspInit+0xb4>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800167c:	230c      	movs	r3, #12
 800167e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001694:	2307      	movs	r3, #7
 8001696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f000 fb4c 	bl	8001d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016a8:	bf00      	nop
 80016aa:	37b0      	adds	r7, #176	; 0xb0
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40004400 	.word	0x40004400
 80016b4:	40021000 	.word	0x40021000

080016b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016bc:	f7ff fe84 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c2:	490d      	ldr	r1, [pc, #52]	; (80016f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <LoopForever+0xe>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d8:	4c0a      	ldr	r4, [pc, #40]	; (8001704 <LoopForever+0x16>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e6:	f006 fbc9 	bl	8007e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ea:	f7ff fc59 	bl	8000fa0 <main>

080016ee <LoopForever>:

LoopForever:
    b LoopForever
 80016ee:	e7fe      	b.n	80016ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016fc:	08008154 	.word	0x08008154
  ldr r2, =_sbss
 8001700:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001704:	20001af8 	.word	0x20001af8

08001708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC1_2_IRQHandler>
	...

0800170c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_Init+0x3c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_Init+0x3c>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001722:	2003      	movs	r0, #3
 8001724:	f000 f8df 	bl	80018e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001728:	200f      	movs	r0, #15
 800172a:	f7ff fdb5 	bl	8001298 <HAL_InitTick>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	e001      	b.n	800173e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800173a:	f7ff fd85 	bl	8001248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800173e:	79fb      	ldrb	r3, [r7, #7]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40022000 	.word	0x40022000

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	200001ec 	.word	0x200001ec

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200001ec 	.word	0x200001ec

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ff4c 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800190e:	f7ff ff61 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001912:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	6978      	ldr	r0, [r7, #20]
 800191a:	f7ff ffb1 	bl	8001880 <NVIC_EncodePriority>
 800191e:	4602      	mov	r2, r0
 8001920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff80 	bl	800182c <__NVIC_SetPriority>
}
 800192c:	bf00      	nop
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff54 	bl	80017f0 <__NVIC_EnableIRQ>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e098      	b.n	8001a94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4b4d      	ldr	r3, [pc, #308]	; (8001aa0 <HAL_DMA_Init+0x150>)
 800196a:	429a      	cmp	r2, r3
 800196c:	d80f      	bhi.n	800198e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <HAL_DMA_Init+0x154>)
 8001976:	4413      	add	r3, r2
 8001978:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_DMA_Init+0x158>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	009a      	lsls	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_DMA_Init+0x15c>)
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
 800198c:	e00e      	b.n	80019ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <HAL_DMA_Init+0x160>)
 8001996:	4413      	add	r3, r2
 8001998:	4a43      	ldr	r2, [pc, #268]	; (8001aa8 <HAL_DMA_Init+0x158>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	009a      	lsls	r2, r3, #2
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a42      	ldr	r2, [pc, #264]	; (8001ab4 <HAL_DMA_Init+0x164>)
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a06:	d039      	beq.n	8001a7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <HAL_DMA_Init+0x15c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d11a      	bne.n	8001a48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a12:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <HAL_DMA_Init+0x168>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f003 031c 	and.w	r3, r3, #28
 8001a1e:	210f      	movs	r1, #15
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4924      	ldr	r1, [pc, #144]	; (8001ab8 <HAL_DMA_Init+0x168>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <HAL_DMA_Init+0x168>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f003 031c 	and.w	r3, r3, #28
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	491d      	ldr	r1, [pc, #116]	; (8001ab8 <HAL_DMA_Init+0x168>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
 8001a46:	e019      	b.n	8001a7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_DMA_Init+0x16c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f003 031c 	and.w	r3, r3, #28
 8001a54:	210f      	movs	r1, #15
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4917      	ldr	r1, [pc, #92]	; (8001abc <HAL_DMA_Init+0x16c>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_DMA_Init+0x16c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f003 031c 	and.w	r3, r3, #28
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	4911      	ldr	r1, [pc, #68]	; (8001abc <HAL_DMA_Init+0x16c>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40020407 	.word	0x40020407
 8001aa4:	bffdfff8 	.word	0xbffdfff8
 8001aa8:	cccccccd 	.word	0xcccccccd
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	bffdfbf8 	.word	0xbffdfbf8
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	400200a8 	.word	0x400200a8
 8001abc:	400204a8 	.word	0x400204a8

08001ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_DMA_Start_IT+0x20>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e04b      	b.n	8001b78 <HAL_DMA_Start_IT+0xb8>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d13a      	bne.n	8001b6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f8e0 	bl	8001cde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 020e 	orr.w	r2, r2, #14
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e00f      	b.n	8001b58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0204 	bic.w	r2, r2, #4
 8001b46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 020a 	orr.w	r2, r2, #10
 8001b56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e005      	b.n	8001b76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
 8001b74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f003 031c 	and.w	r3, r3, #28
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d026      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x7a>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d021      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d107      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	f003 021c 	and.w	r2, r3, #28
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	2104      	movs	r1, #4
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d071      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001bf8:	e06c      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f003 031c 	and.w	r3, r3, #28
 8001c02:	2202      	movs	r2, #2
 8001c04:	409a      	lsls	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d02e      	beq.n	8001c6c <HAL_DMA_IRQHandler+0xec>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d029      	beq.n	8001c6c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10b      	bne.n	8001c3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 020a 	bic.w	r2, r2, #10
 8001c34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f003 021c 	and.w	r2, r3, #28
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d038      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c6a:	e033      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	f003 031c 	and.w	r3, r3, #28
 8001c74:	2208      	movs	r2, #8
 8001c76:	409a      	lsls	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d02a      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x156>
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d025      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 020e 	bic.w	r2, r2, #14
 8001c98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f003 021c 	and.w	r2, r3, #28
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
}
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	f003 021c 	and.w	r2, r3, #28
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d108      	bne.n	8001d22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d20:	e007      	b.n	8001d32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	60da      	str	r2, [r3, #12]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4e:	e17f      	b.n	8002050 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8171 	beq.w	800204a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d005      	beq.n	8001d80 <HAL_GPIO_Init+0x40>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d130      	bne.n	8001de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db6:	2201      	movs	r2, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 0201 	and.w	r2, r3, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d118      	bne.n	8001e20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001df4:	2201      	movs	r2, #1
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	f003 0201 	and.w	r2, r3, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d017      	beq.n	8001e5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d123      	bne.n	8001eb0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	6939      	ldr	r1, [r7, #16]
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0203 	and.w	r2, r3, #3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80ac 	beq.w	800204a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_GPIO_Init+0x330>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef6:	4a5e      	ldr	r2, [pc, #376]	; (8002070 <HAL_GPIO_Init+0x330>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6613      	str	r3, [r2, #96]	; 0x60
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <HAL_GPIO_Init+0x330>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <HAL_GPIO_Init+0x334>)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x242>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	; (8002078 <HAL_GPIO_Init+0x338>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x23e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	; (800207c <HAL_GPIO_Init+0x33c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x23a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_GPIO_Init+0x340>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x236>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	; (8002084 <HAL_GPIO_Init+0x344>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x232>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <HAL_GPIO_Init+0x348>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x22e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4a      	ldr	r2, [pc, #296]	; (800208c <HAL_GPIO_Init+0x34c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x22a>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e00c      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00a      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x244>
 8001f82:	2300      	movs	r3, #0
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f94:	4937      	ldr	r1, [pc, #220]	; (8002074 <HAL_GPIO_Init+0x334>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc6:	4a32      	ldr	r2, [pc, #200]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_GPIO_Init+0x350>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_GPIO_Init+0x350>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_GPIO_Init+0x350>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_GPIO_Init+0x350>)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f47f ae78 	bne.w	8001d50 <HAL_GPIO_Init+0x10>
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	40010000 	.word	0x40010000
 8002078:	48000400 	.word	0x48000400
 800207c:	48000800 	.word	0x48000800
 8002080:	48000c00 	.word	0x48000c00
 8002084:	48001000 	.word	0x48001000
 8002088:	48001400 	.word	0x48001400
 800208c:	48001800 	.word	0x48001800
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e001      	b.n	80020b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <HAL_PWREx_GetVoltageRange+0x18>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40007000 	.word	0x40007000

08002110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800211e:	d130      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212c:	d038      	beq.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002136:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2232      	movs	r2, #50	; 0x32
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9b      	lsrs	r3, r3, #18
 8002150:	3301      	adds	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002154:	e002      	b.n	800215c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3b01      	subs	r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002168:	d102      	bne.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f2      	bne.n	8002156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d110      	bne.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e00f      	b.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218e:	d007      	beq.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002198:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40007000 	.word	0x40007000
 80021b4:	20000000 	.word	0x20000000
 80021b8:	431bde83 	.word	0x431bde83

080021bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e3ca      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ce:	4b97      	ldr	r3, [pc, #604]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d8:	4b94      	ldr	r3, [pc, #592]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80e4 	beq.w	80023b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <HAL_RCC_OscConfig+0x4a>
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	f040 808b 	bne.w	8002314 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b01      	cmp	r3, #1
 8002202:	f040 8087 	bne.w	8002314 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002206:	4b89      	ldr	r3, [pc, #548]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x62>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e3a2      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1a      	ldr	r2, [r3, #32]
 8002222:	4b82      	ldr	r3, [pc, #520]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <HAL_RCC_OscConfig+0x7c>
 800222e:	4b7f      	ldr	r3, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002236:	e005      	b.n	8002244 <HAL_RCC_OscConfig+0x88>
 8002238:	4b7c      	ldr	r3, [pc, #496]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002244:	4293      	cmp	r3, r2
 8002246:	d223      	bcs.n	8002290 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fd87 	bl	8002d60 <RCC_SetFlashLatencyFromMSIRange>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e383      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225c:	4b73      	ldr	r3, [pc, #460]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a72      	ldr	r2, [pc, #456]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b70      	ldr	r3, [pc, #448]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	496d      	ldr	r1, [pc, #436]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227a:	4b6c      	ldr	r3, [pc, #432]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	4968      	ldr	r1, [pc, #416]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
 800228e:	e025      	b.n	80022dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002290:	4b66      	ldr	r3, [pc, #408]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a65      	ldr	r2, [pc, #404]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002296:	f043 0308 	orr.w	r3, r3, #8
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4960      	ldr	r1, [pc, #384]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ae:	4b5f      	ldr	r3, [pc, #380]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	495b      	ldr	r1, [pc, #364]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fd47 	bl	8002d60 <RCC_SetFlashLatencyFromMSIRange>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e343      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022dc:	f000 fc4a 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	4950      	ldr	r1, [pc, #320]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_RCC_OscConfig+0x278>)
 80022fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022fc:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <HAL_RCC_OscConfig+0x27c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe ffc9 	bl	8001298 <HAL_InitTick>
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d052      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	e327      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d032      	beq.n	8002382 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800231c:	4b43      	ldr	r3, [pc, #268]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a42      	ldr	r2, [pc, #264]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002328:	f7ff fa24 	bl	8001774 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002330:	f7ff fa20 	bl	8001774 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e310      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002342:	4b3a      	ldr	r3, [pc, #232]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800234e:	4b37      	ldr	r3, [pc, #220]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a36      	ldr	r2, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002354:	f043 0308 	orr.w	r3, r3, #8
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4931      	ldr	r1, [pc, #196]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	492c      	ldr	r1, [pc, #176]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
 8002380:	e01a      	b.n	80023b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a29      	ldr	r2, [pc, #164]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800238e:	f7ff f9f1 	bl	8001774 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002396:	f7ff f9ed 	bl	8001774 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e2dd      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023a8:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x1da>
 80023b4:	e000      	b.n	80023b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d074      	beq.n	80024ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d005      	beq.n	80023d6 <HAL_RCC_OscConfig+0x21a>
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d10e      	bne.n	80023ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d10b      	bne.n	80023ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d064      	beq.n	80024ac <HAL_RCC_OscConfig+0x2f0>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d160      	bne.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e2ba      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x24a>
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0b      	ldr	r2, [pc, #44]	; (800242c <HAL_RCC_OscConfig+0x270>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e026      	b.n	8002454 <HAL_RCC_OscConfig+0x298>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800240e:	d115      	bne.n	800243c <HAL_RCC_OscConfig+0x280>
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a05      	ldr	r2, [pc, #20]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_RCC_OscConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e014      	b.n	8002454 <HAL_RCC_OscConfig+0x298>
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	0800806c 	.word	0x0800806c
 8002434:	20000000 	.word	0x20000000
 8002438:	20000004 	.word	0x20000004
 800243c:	4ba0      	ldr	r3, [pc, #640]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a9f      	ldr	r2, [pc, #636]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b9d      	ldr	r3, [pc, #628]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a9c      	ldr	r2, [pc, #624]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f98a 	bl	8001774 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff f986 	bl	8001774 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e276      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002476:	4b92      	ldr	r3, [pc, #584]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x2a8>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff f976 	bl	8001774 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff f972 	bl	8001774 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e262      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x2d0>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d060      	beq.n	800257c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d005      	beq.n	80024cc <HAL_RCC_OscConfig+0x310>
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d119      	bne.n	80024fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d116      	bne.n	80024fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024cc:	4b7c      	ldr	r3, [pc, #496]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_OscConfig+0x328>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e23f      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e4:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	061b      	lsls	r3, r3, #24
 80024f2:	4973      	ldr	r1, [pc, #460]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f8:	e040      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d023      	beq.n	800254a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002502:	4b6f      	ldr	r3, [pc, #444]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6e      	ldr	r2, [pc, #440]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7ff f931 	bl	8001774 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7ff f92d 	bl	8001774 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e21d      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002528:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	495f      	ldr	r1, [pc, #380]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
 8002548:	e018      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a5c      	ldr	r2, [pc, #368]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7ff f90d 	bl	8001774 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7ff f909 	bl	8001774 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1f9      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d03c      	beq.n	8002602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01c      	beq.n	80025ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002590:	4b4b      	ldr	r3, [pc, #300]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002596:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7ff f8e8 	bl	8001774 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a8:	f7ff f8e4 	bl	8001774 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1d4      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80025bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ef      	beq.n	80025a8 <HAL_RCC_OscConfig+0x3ec>
 80025c8:	e01b      	b.n	8002602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d0:	4a3b      	ldr	r2, [pc, #236]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7ff f8cb 	bl	8001774 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e2:	f7ff f8c7 	bl	8001774 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1b7      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80025f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ef      	bne.n	80025e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80a6 	beq.w	800275c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002610:	2300      	movs	r3, #0
 8002612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10d      	bne.n	800263c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002620:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262a:	6593      	str	r3, [r2, #88]	; 0x58
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002638:	2301      	movs	r3, #1
 800263a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263c:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_RCC_OscConfig+0x508>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d118      	bne.n	800267a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002648:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <HAL_RCC_OscConfig+0x508>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <HAL_RCC_OscConfig+0x508>)
 800264e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002654:	f7ff f88e 	bl	8001774 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265c:	f7ff f88a 	bl	8001774 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e17a      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_RCC_OscConfig+0x508>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d108      	bne.n	8002694 <HAL_RCC_OscConfig+0x4d8>
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002692:	e029      	b.n	80026e8 <HAL_RCC_OscConfig+0x52c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d115      	bne.n	80026c8 <HAL_RCC_OscConfig+0x50c>
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	4a03      	ldr	r2, [pc, #12]	; (80026c0 <HAL_RCC_OscConfig+0x504>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0x52c>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
 80026c8:	4b9c      	ldr	r3, [pc, #624]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	4a9b      	ldr	r2, [pc, #620]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026d8:	4b98      	ldr	r3, [pc, #608]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	4a97      	ldr	r2, [pc, #604]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80026e0:	f023 0304 	bic.w	r3, r3, #4
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d016      	beq.n	800271e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7ff f840 	bl	8001774 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f6:	e00a      	b.n	800270e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7ff f83c 	bl	8001774 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e12a      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270e:	4b8b      	ldr	r3, [pc, #556]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ed      	beq.n	80026f8 <HAL_RCC_OscConfig+0x53c>
 800271c:	e015      	b.n	800274a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff f829 	bl	8001774 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff f825 	bl	8001774 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e113      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800273c:	4b7f      	ldr	r3, [pc, #508]	; (800293c <HAL_RCC_OscConfig+0x780>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ed      	bne.n	8002726 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800274a:	7ffb      	ldrb	r3, [r7, #31]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002750:	4b7a      	ldr	r3, [pc, #488]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	4a79      	ldr	r2, [pc, #484]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80fe 	beq.w	8002962 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	2b02      	cmp	r3, #2
 800276c:	f040 80d0 	bne.w	8002910 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002770:	4b72      	ldr	r3, [pc, #456]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	429a      	cmp	r2, r3
 8002782:	d130      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	3b01      	subs	r3, #1
 8002790:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	429a      	cmp	r2, r3
 8002794:	d127      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d11f      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b0:	2a07      	cmp	r2, #7
 80027b2:	bf14      	ite	ne
 80027b4:	2201      	movne	r2, #1
 80027b6:	2200      	moveq	r2, #0
 80027b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d113      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	3b01      	subs	r3, #1
 80027cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	3b01      	subs	r3, #1
 80027e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d06e      	beq.n	80028c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d069      	beq.n	80028c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0ad      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002808:	4b4c      	ldr	r3, [pc, #304]	; (800293c <HAL_RCC_OscConfig+0x780>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a4b      	ldr	r2, [pc, #300]	; (800293c <HAL_RCC_OscConfig+0x780>)
 800280e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002812:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002814:	f7fe ffae 	bl	8001774 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe ffaa 	bl	8001774 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e09a      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282e:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283a:	4b40      	ldr	r3, [pc, #256]	; (800293c <HAL_RCC_OscConfig+0x780>)
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b40      	ldr	r3, [pc, #256]	; (8002940 <HAL_RCC_OscConfig+0x784>)
 8002840:	4013      	ands	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800284a:	3a01      	subs	r2, #1
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002854:	0212      	lsls	r2, r2, #8
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800285c:	0852      	lsrs	r2, r2, #1
 800285e:	3a01      	subs	r2, #1
 8002860:	0552      	lsls	r2, r2, #21
 8002862:	4311      	orrs	r1, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002868:	0852      	lsrs	r2, r2, #1
 800286a:	3a01      	subs	r2, #1
 800286c:	0652      	lsls	r2, r2, #25
 800286e:	4311      	orrs	r1, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002874:	0912      	lsrs	r2, r2, #4
 8002876:	0452      	lsls	r2, r2, #17
 8002878:	430a      	orrs	r2, r1
 800287a:	4930      	ldr	r1, [pc, #192]	; (800293c <HAL_RCC_OscConfig+0x780>)
 800287c:	4313      	orrs	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002880:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2d      	ldr	r2, [pc, #180]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_OscConfig+0x780>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a2a      	ldr	r2, [pc, #168]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002898:	f7fe ff6c 	bl	8001774 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe ff68 	bl	8001774 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e058      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028be:	e050      	b.n	8002962 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e04f      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d148      	bne.n	8002962 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_RCC_OscConfig+0x780>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028e8:	f7fe ff44 	bl	8001774 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe ff40 	bl	8001774 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e030      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x734>
 800290e:	e028      	b.n	8002962 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d023      	beq.n	800295e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_OscConfig+0x780>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a08      	ldr	r2, [pc, #32]	; (800293c <HAL_RCC_OscConfig+0x780>)
 800291c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe ff27 	bl	8001774 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002928:	e00c      	b.n	8002944 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292a:	f7fe ff23 	bl	8001774 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d905      	bls.n	8002944 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e013      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
 800293c:	40021000 	.word	0x40021000
 8002940:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_OscConfig+0x7b0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ec      	bne.n	800292a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x7b0>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4905      	ldr	r1, [pc, #20]	; (800296c <HAL_RCC_OscConfig+0x7b0>)
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_OscConfig+0x7b4>)
 8002958:	4013      	ands	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
 800295c:	e001      	b.n	8002962 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	feeefffc 	.word	0xfeeefffc

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0e7      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b75      	ldr	r3, [pc, #468]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b72      	ldr	r3, [pc, #456]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	4970      	ldr	r1, [pc, #448]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b6e      	ldr	r3, [pc, #440]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0cf      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d908      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4960      	ldr	r1, [pc, #384]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04c      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d121      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0a6      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a12:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d115      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e09a      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a2a:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e08e      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e086      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4943      	ldr	r1, [pc, #268]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fe8a 	bl	8001774 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7fe fe86 	bl	8001774 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e06e      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1eb      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d208      	bcs.n	8002aba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	492b      	ldr	r1, [pc, #172]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d210      	bcs.n	8002aea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac8:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 0207 	bic.w	r2, r3, #7
 8002ad0:	4923      	ldr	r1, [pc, #140]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e036      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4918      	ldr	r1, [pc, #96]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4910      	ldr	r1, [pc, #64]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b28:	f000 f824 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	490b      	ldr	r1, [pc, #44]	; (8002b68 <HAL_RCC_ClockConfig+0x1f4>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002b46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1fc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fba3 	bl	8001298 <HAL_InitTick>
 8002b52:	4603      	mov	r3, r0
 8002b54:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b56:	7afb      	ldrb	r3, [r7, #11]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	0800806c 	.word	0x0800806c
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004

08002b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8c:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d121      	bne.n	8002be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d11e      	bne.n	8002be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ba8:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bd0:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10d      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	e004      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d134      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c02:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d003      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0xac>
 8002c18:	e005      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c1c:	617b      	str	r3, [r7, #20]
      break;
 8002c1e:	e005      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c22:	617b      	str	r3, [r7, #20]
      break;
 8002c24:	e002      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	617b      	str	r3, [r7, #20]
      break;
 8002c2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	3301      	adds	r3, #1
 8002c38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	fb03 f202 	mul.w	r2, r3, r2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	0e5b      	lsrs	r3, r3, #25
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	08008084 	.word	0x08008084
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200

08002c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ca8:	f7ff fff0 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4904      	ldr	r1, [pc, #16]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	0800807c 	.word	0x0800807c

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cd4:	f7ff ffda 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	0800807c 	.word	0x0800807c

08002cfc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	220f      	movs	r2, #15
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_RCC_GetClockConfig+0x5c>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_RCC_GetClockConfig+0x5c>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_GetClockConfig+0x5c>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_GetClockConfig+0x5c>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_RCC_GetClockConfig+0x60>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0207 	and.w	r2, r3, #7
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40022000 	.word	0x40022000

08002d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d78:	f7ff f9bc 	bl	80020f4 <HAL_PWREx_GetVoltageRange>
 8002d7c:	6178      	str	r0, [r7, #20]
 8002d7e:	e014      	b.n	8002daa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d80:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8c:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d98:	f7ff f9ac 	bl	80020f4 <HAL_PWREx_GetVoltageRange>
 8002d9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db0:	d10b      	bne.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d919      	bls.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2ba0      	cmp	r3, #160	; 0xa0
 8002dbc:	d902      	bls.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	e013      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	e010      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d902      	bls.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e00a      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d102      	bne.n	8002de2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ddc:	2302      	movs	r3, #2
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	e004      	b.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b70      	cmp	r3, #112	; 0x70
 8002de6:	d101      	bne.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002de8:	2301      	movs	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 0207 	bic.w	r2, r3, #7
 8002df4:	4909      	ldr	r1, [pc, #36]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40022000 	.word	0x40022000

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e28:	2300      	movs	r3, #0
 8002e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d041      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e44:	d02a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e4a:	d824      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e56:	d81e      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e60:	d010      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e62:	e018      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e64:	4b86      	ldr	r3, [pc, #536]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a85      	ldr	r2, [pc, #532]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e70:	e015      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fabb 	bl	80033f4 <RCCEx_PLLSAI1_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e82:	e00c      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3320      	adds	r3, #32
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fba6 	bl	80035dc <RCCEx_PLLSAI2_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e94:	e003      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	74fb      	strb	r3, [r7, #19]
      break;
 8002e9a:	e000      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ea4:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb2:	4973      	ldr	r1, [pc, #460]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eba:	e001      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d041      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ed4:	d02a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ed6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eda:	d824      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002edc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ee6:	d81e      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ef2:	e018      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ef4:	4b62      	ldr	r3, [pc, #392]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a61      	ldr	r2, [pc, #388]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f00:	e015      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fa73 	bl	80033f4 <RCCEx_PLLSAI1_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f12:	e00c      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3320      	adds	r3, #32
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fb5e 	bl	80035dc <RCCEx_PLLSAI2_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f24:	e003      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	74fb      	strb	r3, [r7, #19]
      break;
 8002f2a:	e000      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f34:	4b52      	ldr	r3, [pc, #328]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f42:	494f      	ldr	r1, [pc, #316]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f4a:	e001      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a0 	beq.w	800309e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00d      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f78:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	4a40      	ldr	r2, [pc, #256]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f82:	6593      	str	r3, [r2, #88]	; 0x58
 8002f84:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f90:	2301      	movs	r3, #1
 8002f92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f94:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fbe8 	bl	8001774 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fa6:	e009      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa8:	f7fe fbe4 	bl	8001774 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d902      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	74fb      	strb	r3, [r7, #19]
        break;
 8002fba:	e005      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ef      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d15c      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fce:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01f      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d019      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff8:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	4a20      	ldr	r2, [pc, #128]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe fba3 	bl	8001774 <HAL_GetTick>
 800302e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003030:	e00b      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7fe fb9f 	bl	8001774 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d902      	bls.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	74fb      	strb	r3, [r7, #19]
            break;
 8003048:	e006      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ec      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306e:	4904      	ldr	r1, [pc, #16]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003076:	e009      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
 800307c:	e006      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	7cfb      	ldrb	r3, [r7, #19]
 800308a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800308c:	7c7b      	ldrb	r3, [r7, #17]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d105      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003092:	4b9e      	ldr	r3, [pc, #632]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	4a9d      	ldr	r2, [pc, #628]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030aa:	4b98      	ldr	r3, [pc, #608]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f023 0203 	bic.w	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	4994      	ldr	r1, [pc, #592]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030cc:	4b8f      	ldr	r3, [pc, #572]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 020c 	bic.w	r2, r3, #12
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	498c      	ldr	r1, [pc, #560]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030ee:	4b87      	ldr	r3, [pc, #540]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	4983      	ldr	r1, [pc, #524]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003110:	4b7e      	ldr	r3, [pc, #504]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	497b      	ldr	r1, [pc, #492]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003132:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	4972      	ldr	r1, [pc, #456]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003154:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	496a      	ldr	r1, [pc, #424]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003176:	4b65      	ldr	r3, [pc, #404]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	4961      	ldr	r1, [pc, #388]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003198:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a6:	4959      	ldr	r1, [pc, #356]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ba:	4b54      	ldr	r3, [pc, #336]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	4950      	ldr	r1, [pc, #320]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031dc:	4b4b      	ldr	r3, [pc, #300]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	4948      	ldr	r1, [pc, #288]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031fe:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	493f      	ldr	r1, [pc, #252]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d028      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003220:	4b3a      	ldr	r3, [pc, #232]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322e:	4937      	ldr	r1, [pc, #220]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323e:	d106      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a31      	ldr	r2, [pc, #196]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324a:	60d3      	str	r3, [r2, #12]
 800324c:	e011      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003256:	d10c      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	2101      	movs	r1, #1
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f8c8 	bl	80033f4 <RCCEx_PLLSAI1_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d028      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	491f      	ldr	r1, [pc, #124]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800329c:	d106      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a8:	60d3      	str	r3, [r2, #12]
 80032aa:	e011      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f899 	bl	80033f4 <RCCEx_PLLSAI1_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d02b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032fa:	d109      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a02      	ldr	r2, [pc, #8]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003306:	60d3      	str	r3, [r2, #12]
 8003308:	e014      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003318:	d10c      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	2101      	movs	r1, #1
 8003320:	4618      	mov	r0, r3
 8003322:	f000 f867 	bl	80033f4 <RCCEx_PLLSAI1_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d02f      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800334e:	4928      	ldr	r1, [pc, #160]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800335e:	d10d      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	2102      	movs	r1, #2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f844 	bl	80033f4 <RCCEx_PLLSAI1_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d014      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	74bb      	strb	r3, [r7, #18]
 800337a:	e011      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3320      	adds	r3, #32
 800338a:	2102      	movs	r1, #2
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f925 	bl	80035dc <RCCEx_PLLSAI2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ba:	490d      	ldr	r1, [pc, #52]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033de:	4904      	ldr	r1, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000

080033f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003402:	4b75      	ldr	r3, [pc, #468]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d018      	beq.n	8003440 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800340e:	4b72      	ldr	r3, [pc, #456]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0203 	and.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d10d      	bne.n	800343a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
       ||
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003426:	4b6c      	ldr	r3, [pc, #432]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
       ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d047      	beq.n	80034ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	e044      	b.n	80034ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d018      	beq.n	800347a <RCCEx_PLLSAI1_Config+0x86>
 8003448:	2b03      	cmp	r3, #3
 800344a:	d825      	bhi.n	8003498 <RCCEx_PLLSAI1_Config+0xa4>
 800344c:	2b01      	cmp	r3, #1
 800344e:	d002      	beq.n	8003456 <RCCEx_PLLSAI1_Config+0x62>
 8003450:	2b02      	cmp	r3, #2
 8003452:	d009      	beq.n	8003468 <RCCEx_PLLSAI1_Config+0x74>
 8003454:	e020      	b.n	8003498 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003456:	4b60      	ldr	r3, [pc, #384]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11d      	bne.n	800349e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003466:	e01a      	b.n	800349e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003468:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e013      	b.n	80034a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800347a:	4b57      	ldr	r3, [pc, #348]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003486:	4b54      	ldr	r3, [pc, #336]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003496:	e006      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e004      	b.n	80034a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349e:	bf00      	nop
 80034a0:	e002      	b.n	80034a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10d      	bne.n	80034ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ae:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	430b      	orrs	r3, r1
 80034c4:	4944      	ldr	r1, [pc, #272]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d17d      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034d0:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a40      	ldr	r2, [pc, #256]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034dc:	f7fe f94a 	bl	8001774 <HAL_GetTick>
 80034e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034e2:	e009      	b.n	80034f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034e4:	f7fe f946 	bl	8001774 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d902      	bls.n	80034f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	73fb      	strb	r3, [r7, #15]
        break;
 80034f6:	e005      	b.n	8003504 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034f8:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ef      	bne.n	80034e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d160      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d111      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003510:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6892      	ldr	r2, [r2, #8]
 8003520:	0211      	lsls	r1, r2, #8
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68d2      	ldr	r2, [r2, #12]
 8003526:	0912      	lsrs	r2, r2, #4
 8003528:	0452      	lsls	r2, r2, #17
 800352a:	430a      	orrs	r2, r1
 800352c:	492a      	ldr	r1, [pc, #168]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	610b      	str	r3, [r1, #16]
 8003532:	e027      	b.n	8003584 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d112      	bne.n	8003560 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800353a:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003542:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6892      	ldr	r2, [r2, #8]
 800354a:	0211      	lsls	r1, r2, #8
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6912      	ldr	r2, [r2, #16]
 8003550:	0852      	lsrs	r2, r2, #1
 8003552:	3a01      	subs	r2, #1
 8003554:	0552      	lsls	r2, r2, #21
 8003556:	430a      	orrs	r2, r1
 8003558:	491f      	ldr	r1, [pc, #124]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	610b      	str	r3, [r1, #16]
 800355e:	e011      	b.n	8003584 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003568:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6892      	ldr	r2, [r2, #8]
 8003570:	0211      	lsls	r1, r2, #8
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6952      	ldr	r2, [r2, #20]
 8003576:	0852      	lsrs	r2, r2, #1
 8003578:	3a01      	subs	r2, #1
 800357a:	0652      	lsls	r2, r2, #25
 800357c:	430a      	orrs	r2, r1
 800357e:	4916      	ldr	r1, [pc, #88]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003580:	4313      	orrs	r3, r2
 8003582:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800358e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fe f8f0 	bl	8001774 <HAL_GetTick>
 8003594:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003596:	e009      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003598:	f7fe f8ec 	bl	8001774 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d902      	bls.n	80035ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	73fb      	strb	r3, [r7, #15]
          break;
 80035aa:	e005      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ef      	beq.n	8003598 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	4904      	ldr	r1, [pc, #16]	; (80035d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000

080035dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ea:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d018      	beq.n	8003628 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0203 	and.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d10d      	bne.n	8003622 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
       ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800360e:	4b61      	ldr	r3, [pc, #388]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
       ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d047      	beq.n	80036b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
 8003626:	e044      	b.n	80036b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d018      	beq.n	8003662 <RCCEx_PLLSAI2_Config+0x86>
 8003630:	2b03      	cmp	r3, #3
 8003632:	d825      	bhi.n	8003680 <RCCEx_PLLSAI2_Config+0xa4>
 8003634:	2b01      	cmp	r3, #1
 8003636:	d002      	beq.n	800363e <RCCEx_PLLSAI2_Config+0x62>
 8003638:	2b02      	cmp	r3, #2
 800363a:	d009      	beq.n	8003650 <RCCEx_PLLSAI2_Config+0x74>
 800363c:	e020      	b.n	8003680 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800363e:	4b55      	ldr	r3, [pc, #340]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d11d      	bne.n	8003686 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364e:	e01a      	b.n	8003686 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d116      	bne.n	800368a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003660:	e013      	b.n	800368a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800366e:	4b49      	ldr	r3, [pc, #292]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800367e:	e006      	b.n	800368e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      break;
 8003684:	e004      	b.n	8003690 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003686:	bf00      	nop
 8003688:	e002      	b.n	8003690 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800368e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10d      	bne.n	80036b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003696:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	430b      	orrs	r3, r1
 80036ac:	4939      	ldr	r1, [pc, #228]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d167      	bne.n	8003788 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a35      	ldr	r2, [pc, #212]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c4:	f7fe f856 	bl	8001774 <HAL_GetTick>
 80036c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ca:	e009      	b.n	80036e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036cc:	f7fe f852 	bl	8001774 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d902      	bls.n	80036e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	73fb      	strb	r3, [r7, #15]
        break;
 80036de:	e005      	b.n	80036ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036e0:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ef      	bne.n	80036cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d14a      	bne.n	8003788 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d111      	bne.n	800371c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036f8:	4b26      	ldr	r3, [pc, #152]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6892      	ldr	r2, [r2, #8]
 8003708:	0211      	lsls	r1, r2, #8
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	0912      	lsrs	r2, r2, #4
 8003710:	0452      	lsls	r2, r2, #17
 8003712:	430a      	orrs	r2, r1
 8003714:	491f      	ldr	r1, [pc, #124]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	614b      	str	r3, [r1, #20]
 800371a:	e011      	b.n	8003740 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003724:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6892      	ldr	r2, [r2, #8]
 800372c:	0211      	lsls	r1, r2, #8
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6912      	ldr	r2, [r2, #16]
 8003732:	0852      	lsrs	r2, r2, #1
 8003734:	3a01      	subs	r2, #1
 8003736:	0652      	lsls	r2, r2, #25
 8003738:	430a      	orrs	r2, r1
 800373a:	4916      	ldr	r1, [pc, #88]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a13      	ldr	r2, [pc, #76]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fe f812 	bl	8001774 <HAL_GetTick>
 8003750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003752:	e009      	b.n	8003768 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003754:	f7fe f80e 	bl	8001774 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d902      	bls.n	8003768 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	73fb      	strb	r3, [r7, #15]
          break;
 8003766:	e005      	b.n	8003774 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ef      	beq.n	8003754 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003784:	4313      	orrs	r3, r2
 8003786:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000

08003798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e095      	b.n	80038d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d108      	bne.n	80037c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ba:	d009      	beq.n	80037d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	61da      	str	r2, [r3, #28]
 80037c2:	e005      	b.n	80037d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fc9c 	bl	8001128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003806:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003810:	d902      	bls.n	8003818 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e002      	b.n	800381e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800381c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003826:	d007      	beq.n	8003838 <HAL_SPI_Init+0xa0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003830:	d002      	beq.n	8003838 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	ea42 0103 	orr.w	r1, r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	0c1b      	lsrs	r3, r3, #16
 8003894:	f003 0204 	and.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038b4:	ea42 0103 	orr.w	r1, r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_SPI_Transmit_DMA+0x20>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0d4      	b.n	8003aaa <HAL_SPI_Transmit_DMA+0x1ca>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d002      	beq.n	800391a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003914:	2302      	movs	r3, #2
 8003916:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003918:	e0c2      	b.n	8003aa0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_SPI_Transmit_DMA+0x46>
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
    goto error;
 800392a:	e0b9      	b.n	8003aa0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2203      	movs	r2, #3
 8003930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	88fa      	ldrh	r2, [r7, #6]
 800394a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003976:	d10f      	bne.n	8003998 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003986:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003996:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	4a45      	ldr	r2, [pc, #276]	; (8003ab4 <HAL_SPI_Transmit_DMA+0x1d4>)
 800399e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	4a44      	ldr	r2, [pc, #272]	; (8003ab8 <HAL_SPI_Transmit_DMA+0x1d8>)
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	4a43      	ldr	r2, [pc, #268]	; (8003abc <HAL_SPI_Transmit_DMA+0x1dc>)
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	2200      	movs	r2, #0
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039c6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039d0:	d82d      	bhi.n	8003a2e <HAL_SPI_Transmit_DMA+0x14e>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039dc:	d127      	bne.n	8003a2e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039fa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a0a:	e010      	b.n	8003a2e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a1a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	4619      	mov	r1, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a46:	f7fe f83b 	bl	8001ac0 <HAL_DMA_Start_IT>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a54:	f043 0210 	orr.w	r2, r3, #16
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003a60:	e01e      	b.n	8003aa0 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d007      	beq.n	8003a80 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0220 	orr.w	r2, r2, #32
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0202 	orr.w	r2, r2, #2
 8003a9e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	08003b8f 	.word	0x08003b8f
 8003ab8:	08003ae9 	.word	0x08003ae9
 8003abc:	08003bab 	.word	0x08003bab

08003ac0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af6:	f7fd fe3d 	bl	8001774 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d03b      	beq.n	8003b82 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0220 	bic.w	r2, r2, #32
 8003b18:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0202 	bic.w	r2, r2, #2
 8003b28:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	2164      	movs	r1, #100	; 0x64
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f000 f97a 	bl	8003e28 <SPI_EndRxTxTransaction>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2200      	movs	r2, #0
 8003b68:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b7a:	6978      	ldr	r0, [r7, #20]
 8003b7c:	f7ff ffaa 	bl	8003ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b80:	e002      	b.n	8003b88 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7fd f9ee 	bl	8000f64 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff ff8f 	bl	8003ac0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0203 	bic.w	r2, r2, #3
 8003bc6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bcc:	f043 0210 	orr.w	r2, r3, #16
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff ff79 	bl	8003ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bfc:	f7fd fdba 	bl	8001774 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	4413      	add	r3, r2
 8003c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c0c:	f7fd fdb2 	bl	8001774 <HAL_GetTick>
 8003c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	015b      	lsls	r3, r3, #5
 8003c18:	0d1b      	lsrs	r3, r3, #20
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c22:	e054      	b.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c2a:	d050      	beq.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c2c:	f7fd fda2 	bl	8001774 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d902      	bls.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d13d      	bne.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5a:	d111      	bne.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c64:	d004      	beq.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6e:	d107      	bne.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c88:	d10f      	bne.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e017      	b.n	8003cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d19b      	bne.n	8003c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000000 	.word	0x20000000

08003cfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d0e:	f7fd fd31 	bl	8001774 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d1e:	f7fd fd29 	bl	8001774 <HAL_GetTick>
 8003d22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	00da      	lsls	r2, r3, #3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	0d1b      	lsrs	r3, r3, #20
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d44:	e060      	b.n	8003e08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d4c:	d107      	bne.n	8003d5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d64:	d050      	beq.n	8003e08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d66:	f7fd fd05 	bl	8001774 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d902      	bls.n	8003d7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d13d      	bne.n	8003df8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d94:	d111      	bne.n	8003dba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9e:	d004      	beq.n	8003daa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da8:	d107      	bne.n	8003dba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc2:	d10f      	bne.n	8003de4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e010      	b.n	8003e1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d196      	bne.n	8003d46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3728      	adds	r7, #40	; 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000000 	.word	0x20000000

08003e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff ff5b 	bl	8003cfc <SPI_WaitFifoStateUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e027      	b.n	8003eac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2200      	movs	r2, #0
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fec0 	bl	8003bec <SPI_WaitFlagStateUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e014      	b.n	8003eac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff ff34 	bl	8003cfc <SPI_WaitFifoStateUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e000      	b.n	8003eac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e049      	b.n	8003f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f841 	bl	8003f62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f000 f9da 	bl	80042ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d001      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e04f      	b.n	8004030 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a23      	ldr	r2, [pc, #140]	; (800403c <HAL_TIM_Base_Start_IT+0xc4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01d      	beq.n	8003fee <HAL_TIM_Base_Start_IT+0x76>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d018      	beq.n	8003fee <HAL_TIM_Base_Start_IT+0x76>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_TIM_Base_Start_IT+0x76>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1e      	ldr	r2, [pc, #120]	; (8004044 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_TIM_Base_Start_IT+0x76>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_TIM_Base_Start_IT+0x76>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_TIM_Base_Start_IT+0xd4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_TIM_Base_Start_IT+0x76>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a19      	ldr	r2, [pc, #100]	; (8004050 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d115      	bne.n	800401a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b06      	cmp	r3, #6
 8003ffe:	d015      	beq.n	800402c <HAL_TIM_Base_Start_IT+0xb4>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004006:	d011      	beq.n	800402c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004018:	e008      	b.n	800402c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e000      	b.n	800402e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40013400 	.word	0x40013400
 8004050:	40014000 	.word	0x40014000
 8004054:	00010007 	.word	0x00010007

08004058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d020      	beq.n	80040bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01b      	beq.n	80040bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0202 	mvn.w	r2, #2
 800408c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8e4 	bl	8004270 <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f8d6 	bl	800425c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f8e7 	bl	8004284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d020      	beq.n	8004108 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01b      	beq.n	8004108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0204 	mvn.w	r2, #4
 80040d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8be 	bl	8004270 <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8b0 	bl	800425c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8c1 	bl	8004284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d020      	beq.n	8004154 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01b      	beq.n	8004154 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0208 	mvn.w	r2, #8
 8004124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2204      	movs	r2, #4
 800412a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f898 	bl	8004270 <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f88a 	bl	800425c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f89b 	bl	8004284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	d020      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01b      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0210 	mvn.w	r2, #16
 8004170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2208      	movs	r2, #8
 8004176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f872 	bl	8004270 <HAL_TIM_IC_CaptureCallback>
 800418c:	e005      	b.n	800419a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f864 	bl	800425c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f875 	bl	8004284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00c      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0201 	mvn.w	r2, #1
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc ff5c 	bl	800107c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00c      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f906 	bl	80043f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00c      	beq.n	800420c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8fe 	bl	8004408 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f834 	bl	8004298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00c      	beq.n	8004254 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0220 	mvn.w	r2, #32
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8c6 	bl	80043e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a40      	ldr	r2, [pc, #256]	; (80043c0 <TIM_Base_SetConfig+0x114>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ca:	d00f      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a3d      	ldr	r2, [pc, #244]	; (80043c4 <TIM_Base_SetConfig+0x118>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00b      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <TIM_Base_SetConfig+0x11c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a3b      	ldr	r2, [pc, #236]	; (80043cc <TIM_Base_SetConfig+0x120>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a3a      	ldr	r2, [pc, #232]	; (80043d0 <TIM_Base_SetConfig+0x124>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d108      	bne.n	80042fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2f      	ldr	r2, [pc, #188]	; (80043c0 <TIM_Base_SetConfig+0x114>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01f      	beq.n	8004346 <TIM_Base_SetConfig+0x9a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430c:	d01b      	beq.n	8004346 <TIM_Base_SetConfig+0x9a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <TIM_Base_SetConfig+0x118>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d017      	beq.n	8004346 <TIM_Base_SetConfig+0x9a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2b      	ldr	r2, [pc, #172]	; (80043c8 <TIM_Base_SetConfig+0x11c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <TIM_Base_SetConfig+0x9a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a2a      	ldr	r2, [pc, #168]	; (80043cc <TIM_Base_SetConfig+0x120>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00f      	beq.n	8004346 <TIM_Base_SetConfig+0x9a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a29      	ldr	r2, [pc, #164]	; (80043d0 <TIM_Base_SetConfig+0x124>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00b      	beq.n	8004346 <TIM_Base_SetConfig+0x9a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a28      	ldr	r2, [pc, #160]	; (80043d4 <TIM_Base_SetConfig+0x128>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d007      	beq.n	8004346 <TIM_Base_SetConfig+0x9a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <TIM_Base_SetConfig+0x12c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_Base_SetConfig+0x9a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a26      	ldr	r2, [pc, #152]	; (80043dc <TIM_Base_SetConfig+0x130>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d108      	bne.n	8004358 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a10      	ldr	r2, [pc, #64]	; (80043c0 <TIM_Base_SetConfig+0x114>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00f      	beq.n	80043a4 <TIM_Base_SetConfig+0xf8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <TIM_Base_SetConfig+0x124>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00b      	beq.n	80043a4 <TIM_Base_SetConfig+0xf8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a11      	ldr	r2, [pc, #68]	; (80043d4 <TIM_Base_SetConfig+0x128>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <TIM_Base_SetConfig+0xf8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a10      	ldr	r2, [pc, #64]	; (80043d8 <TIM_Base_SetConfig+0x12c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d003      	beq.n	80043a4 <TIM_Base_SetConfig+0xf8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a0f      	ldr	r2, [pc, #60]	; (80043dc <TIM_Base_SetConfig+0x130>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d103      	bne.n	80043ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	615a      	str	r2, [r3, #20]
}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800
 80043cc:	40000c00 	.word	0x40000c00
 80043d0:	40013400 	.word	0x40013400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800

080043e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e040      	b.n	80044b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd f8de 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fae0 	bl	8004a28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f825 	bl	80044b8 <UART_SetConfig>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e01b      	b.n	80044b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fb5f 	bl	8004b6c <UART_CheckIdleState>
 80044ae:	4603      	mov	r3, r0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b08a      	sub	sp, #40	; 0x28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4313      	orrs	r3, r2
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4ba4      	ldr	r3, [pc, #656]	; (8004778 <UART_SetConfig+0x2c0>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a99      	ldr	r2, [pc, #612]	; (800477c <UART_SetConfig+0x2c4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	4313      	orrs	r3, r2
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	430a      	orrs	r2, r1
 8004536:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a90      	ldr	r2, [pc, #576]	; (8004780 <UART_SetConfig+0x2c8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d126      	bne.n	8004590 <UART_SetConfig+0xd8>
 8004542:	4b90      	ldr	r3, [pc, #576]	; (8004784 <UART_SetConfig+0x2cc>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	2b03      	cmp	r3, #3
 800454e:	d81b      	bhi.n	8004588 <UART_SetConfig+0xd0>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0xa0>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	08004569 	.word	0x08004569
 800455c:	08004579 	.word	0x08004579
 8004560:	08004571 	.word	0x08004571
 8004564:	08004581 	.word	0x08004581
 8004568:	2301      	movs	r3, #1
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456e:	e116      	b.n	800479e <UART_SetConfig+0x2e6>
 8004570:	2302      	movs	r3, #2
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e112      	b.n	800479e <UART_SetConfig+0x2e6>
 8004578:	2304      	movs	r3, #4
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457e:	e10e      	b.n	800479e <UART_SetConfig+0x2e6>
 8004580:	2308      	movs	r3, #8
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004586:	e10a      	b.n	800479e <UART_SetConfig+0x2e6>
 8004588:	2310      	movs	r3, #16
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e106      	b.n	800479e <UART_SetConfig+0x2e6>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a7c      	ldr	r2, [pc, #496]	; (8004788 <UART_SetConfig+0x2d0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d138      	bne.n	800460c <UART_SetConfig+0x154>
 800459a:	4b7a      	ldr	r3, [pc, #488]	; (8004784 <UART_SetConfig+0x2cc>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d82d      	bhi.n	8004604 <UART_SetConfig+0x14c>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0xf8>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045e5 	.word	0x080045e5
 80045b4:	08004605 	.word	0x08004605
 80045b8:	08004605 	.word	0x08004605
 80045bc:	08004605 	.word	0x08004605
 80045c0:	080045f5 	.word	0x080045f5
 80045c4:	08004605 	.word	0x08004605
 80045c8:	08004605 	.word	0x08004605
 80045cc:	08004605 	.word	0x08004605
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	08004605 	.word	0x08004605
 80045d8:	08004605 	.word	0x08004605
 80045dc:	08004605 	.word	0x08004605
 80045e0:	080045fd 	.word	0x080045fd
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ea:	e0d8      	b.n	800479e <UART_SetConfig+0x2e6>
 80045ec:	2302      	movs	r3, #2
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f2:	e0d4      	b.n	800479e <UART_SetConfig+0x2e6>
 80045f4:	2304      	movs	r3, #4
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fa:	e0d0      	b.n	800479e <UART_SetConfig+0x2e6>
 80045fc:	2308      	movs	r3, #8
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004602:	e0cc      	b.n	800479e <UART_SetConfig+0x2e6>
 8004604:	2310      	movs	r3, #16
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460a:	e0c8      	b.n	800479e <UART_SetConfig+0x2e6>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a5e      	ldr	r2, [pc, #376]	; (800478c <UART_SetConfig+0x2d4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d125      	bne.n	8004662 <UART_SetConfig+0x1aa>
 8004616:	4b5b      	ldr	r3, [pc, #364]	; (8004784 <UART_SetConfig+0x2cc>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004620:	2b30      	cmp	r3, #48	; 0x30
 8004622:	d016      	beq.n	8004652 <UART_SetConfig+0x19a>
 8004624:	2b30      	cmp	r3, #48	; 0x30
 8004626:	d818      	bhi.n	800465a <UART_SetConfig+0x1a2>
 8004628:	2b20      	cmp	r3, #32
 800462a:	d00a      	beq.n	8004642 <UART_SetConfig+0x18a>
 800462c:	2b20      	cmp	r3, #32
 800462e:	d814      	bhi.n	800465a <UART_SetConfig+0x1a2>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <UART_SetConfig+0x182>
 8004634:	2b10      	cmp	r3, #16
 8004636:	d008      	beq.n	800464a <UART_SetConfig+0x192>
 8004638:	e00f      	b.n	800465a <UART_SetConfig+0x1a2>
 800463a:	2300      	movs	r3, #0
 800463c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004640:	e0ad      	b.n	800479e <UART_SetConfig+0x2e6>
 8004642:	2302      	movs	r3, #2
 8004644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004648:	e0a9      	b.n	800479e <UART_SetConfig+0x2e6>
 800464a:	2304      	movs	r3, #4
 800464c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004650:	e0a5      	b.n	800479e <UART_SetConfig+0x2e6>
 8004652:	2308      	movs	r3, #8
 8004654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004658:	e0a1      	b.n	800479e <UART_SetConfig+0x2e6>
 800465a:	2310      	movs	r3, #16
 800465c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004660:	e09d      	b.n	800479e <UART_SetConfig+0x2e6>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a4a      	ldr	r2, [pc, #296]	; (8004790 <UART_SetConfig+0x2d8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d125      	bne.n	80046b8 <UART_SetConfig+0x200>
 800466c:	4b45      	ldr	r3, [pc, #276]	; (8004784 <UART_SetConfig+0x2cc>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004676:	2bc0      	cmp	r3, #192	; 0xc0
 8004678:	d016      	beq.n	80046a8 <UART_SetConfig+0x1f0>
 800467a:	2bc0      	cmp	r3, #192	; 0xc0
 800467c:	d818      	bhi.n	80046b0 <UART_SetConfig+0x1f8>
 800467e:	2b80      	cmp	r3, #128	; 0x80
 8004680:	d00a      	beq.n	8004698 <UART_SetConfig+0x1e0>
 8004682:	2b80      	cmp	r3, #128	; 0x80
 8004684:	d814      	bhi.n	80046b0 <UART_SetConfig+0x1f8>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <UART_SetConfig+0x1d8>
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d008      	beq.n	80046a0 <UART_SetConfig+0x1e8>
 800468e:	e00f      	b.n	80046b0 <UART_SetConfig+0x1f8>
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004696:	e082      	b.n	800479e <UART_SetConfig+0x2e6>
 8004698:	2302      	movs	r3, #2
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469e:	e07e      	b.n	800479e <UART_SetConfig+0x2e6>
 80046a0:	2304      	movs	r3, #4
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a6:	e07a      	b.n	800479e <UART_SetConfig+0x2e6>
 80046a8:	2308      	movs	r3, #8
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ae:	e076      	b.n	800479e <UART_SetConfig+0x2e6>
 80046b0:	2310      	movs	r3, #16
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b6:	e072      	b.n	800479e <UART_SetConfig+0x2e6>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a35      	ldr	r2, [pc, #212]	; (8004794 <UART_SetConfig+0x2dc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d12a      	bne.n	8004718 <UART_SetConfig+0x260>
 80046c2:	4b30      	ldr	r3, [pc, #192]	; (8004784 <UART_SetConfig+0x2cc>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d0:	d01a      	beq.n	8004708 <UART_SetConfig+0x250>
 80046d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d6:	d81b      	bhi.n	8004710 <UART_SetConfig+0x258>
 80046d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046dc:	d00c      	beq.n	80046f8 <UART_SetConfig+0x240>
 80046de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e2:	d815      	bhi.n	8004710 <UART_SetConfig+0x258>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <UART_SetConfig+0x238>
 80046e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ec:	d008      	beq.n	8004700 <UART_SetConfig+0x248>
 80046ee:	e00f      	b.n	8004710 <UART_SetConfig+0x258>
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e052      	b.n	800479e <UART_SetConfig+0x2e6>
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e04e      	b.n	800479e <UART_SetConfig+0x2e6>
 8004700:	2304      	movs	r3, #4
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e04a      	b.n	800479e <UART_SetConfig+0x2e6>
 8004708:	2308      	movs	r3, #8
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e046      	b.n	800479e <UART_SetConfig+0x2e6>
 8004710:	2310      	movs	r3, #16
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e042      	b.n	800479e <UART_SetConfig+0x2e6>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a17      	ldr	r2, [pc, #92]	; (800477c <UART_SetConfig+0x2c4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d13a      	bne.n	8004798 <UART_SetConfig+0x2e0>
 8004722:	4b18      	ldr	r3, [pc, #96]	; (8004784 <UART_SetConfig+0x2cc>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800472c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004730:	d01a      	beq.n	8004768 <UART_SetConfig+0x2b0>
 8004732:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004736:	d81b      	bhi.n	8004770 <UART_SetConfig+0x2b8>
 8004738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473c:	d00c      	beq.n	8004758 <UART_SetConfig+0x2a0>
 800473e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004742:	d815      	bhi.n	8004770 <UART_SetConfig+0x2b8>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <UART_SetConfig+0x298>
 8004748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474c:	d008      	beq.n	8004760 <UART_SetConfig+0x2a8>
 800474e:	e00f      	b.n	8004770 <UART_SetConfig+0x2b8>
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e022      	b.n	800479e <UART_SetConfig+0x2e6>
 8004758:	2302      	movs	r3, #2
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e01e      	b.n	800479e <UART_SetConfig+0x2e6>
 8004760:	2304      	movs	r3, #4
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e01a      	b.n	800479e <UART_SetConfig+0x2e6>
 8004768:	2308      	movs	r3, #8
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e016      	b.n	800479e <UART_SetConfig+0x2e6>
 8004770:	2310      	movs	r3, #16
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e012      	b.n	800479e <UART_SetConfig+0x2e6>
 8004778:	efff69f3 	.word	0xefff69f3
 800477c:	40008000 	.word	0x40008000
 8004780:	40013800 	.word	0x40013800
 8004784:	40021000 	.word	0x40021000
 8004788:	40004400 	.word	0x40004400
 800478c:	40004800 	.word	0x40004800
 8004790:	40004c00 	.word	0x40004c00
 8004794:	40005000 	.word	0x40005000
 8004798:	2310      	movs	r3, #16
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a9f      	ldr	r2, [pc, #636]	; (8004a20 <UART_SetConfig+0x568>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d17a      	bne.n	800489e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d824      	bhi.n	80047fa <UART_SetConfig+0x342>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0x300>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	080047fb 	.word	0x080047fb
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	080047fb 	.word	0x080047fb
 80047c8:	080047eb 	.word	0x080047eb
 80047cc:	080047fb 	.word	0x080047fb
 80047d0:	080047fb 	.word	0x080047fb
 80047d4:	080047fb 	.word	0x080047fb
 80047d8:	080047f3 	.word	0x080047f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7fe fa62 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80047e0:	61f8      	str	r0, [r7, #28]
        break;
 80047e2:	e010      	b.n	8004806 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e4:	4b8f      	ldr	r3, [pc, #572]	; (8004a24 <UART_SetConfig+0x56c>)
 80047e6:	61fb      	str	r3, [r7, #28]
        break;
 80047e8:	e00d      	b.n	8004806 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7fe f9c3 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 80047ee:	61f8      	str	r0, [r7, #28]
        break;
 80047f0:	e009      	b.n	8004806 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f6:	61fb      	str	r3, [r7, #28]
        break;
 80047f8:	e005      	b.n	8004806 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004804:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80fb 	beq.w	8004a04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	429a      	cmp	r2, r3
 800481c:	d305      	bcc.n	800482a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	429a      	cmp	r2, r3
 8004828:	d903      	bls.n	8004832 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004830:	e0e8      	b.n	8004a04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	2200      	movs	r2, #0
 8004836:	461c      	mov	r4, r3
 8004838:	4615      	mov	r5, r2
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	022b      	lsls	r3, r5, #8
 8004844:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004848:	0222      	lsls	r2, r4, #8
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	6849      	ldr	r1, [r1, #4]
 800484e:	0849      	lsrs	r1, r1, #1
 8004850:	2000      	movs	r0, #0
 8004852:	4688      	mov	r8, r1
 8004854:	4681      	mov	r9, r0
 8004856:	eb12 0a08 	adds.w	sl, r2, r8
 800485a:	eb43 0b09 	adc.w	fp, r3, r9
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800486c:	4650      	mov	r0, sl
 800486e:	4659      	mov	r1, fp
 8004870:	f7fb fcae 	bl	80001d0 <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4613      	mov	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004882:	d308      	bcc.n	8004896 <UART_SetConfig+0x3de>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800488a:	d204      	bcs.n	8004896 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	e0b6      	b.n	8004a04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800489c:	e0b2      	b.n	8004a04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a6:	d15e      	bne.n	8004966 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d828      	bhi.n	8004902 <UART_SetConfig+0x44a>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x400>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048e5 	.word	0x080048e5
 80048c0:	080048ed 	.word	0x080048ed
 80048c4:	08004903 	.word	0x08004903
 80048c8:	080048f3 	.word	0x080048f3
 80048cc:	08004903 	.word	0x08004903
 80048d0:	08004903 	.word	0x08004903
 80048d4:	08004903 	.word	0x08004903
 80048d8:	080048fb 	.word	0x080048fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fe f9e2 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80048e0:	61f8      	str	r0, [r7, #28]
        break;
 80048e2:	e014      	b.n	800490e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7fe f9f4 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 80048e8:	61f8      	str	r0, [r7, #28]
        break;
 80048ea:	e010      	b.n	800490e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ec:	4b4d      	ldr	r3, [pc, #308]	; (8004a24 <UART_SetConfig+0x56c>)
 80048ee:	61fb      	str	r3, [r7, #28]
        break;
 80048f0:	e00d      	b.n	800490e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f2:	f7fe f93f 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 80048f6:	61f8      	str	r0, [r7, #28]
        break;
 80048f8:	e009      	b.n	800490e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fe:	61fb      	str	r3, [r7, #28]
        break;
 8004900:	e005      	b.n	800490e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800490c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d077      	beq.n	8004a04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005a      	lsls	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	441a      	add	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b0f      	cmp	r3, #15
 800492e:	d916      	bls.n	800495e <UART_SetConfig+0x4a6>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004936:	d212      	bcs.n	800495e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f023 030f 	bic.w	r3, r3, #15
 8004940:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	b29b      	uxth	r3, r3
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	b29a      	uxth	r2, r3
 800494e:	8afb      	ldrh	r3, [r7, #22]
 8004950:	4313      	orrs	r3, r2
 8004952:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	8afa      	ldrh	r2, [r7, #22]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	e052      	b.n	8004a04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004964:	e04e      	b.n	8004a04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800496a:	2b08      	cmp	r3, #8
 800496c:	d827      	bhi.n	80049be <UART_SetConfig+0x506>
 800496e:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <UART_SetConfig+0x4bc>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	08004999 	.word	0x08004999
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a9 	.word	0x080049a9
 8004980:	080049bf 	.word	0x080049bf
 8004984:	080049af 	.word	0x080049af
 8004988:	080049bf 	.word	0x080049bf
 800498c:	080049bf 	.word	0x080049bf
 8004990:	080049bf 	.word	0x080049bf
 8004994:	080049b7 	.word	0x080049b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004998:	f7fe f984 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 800499c:	61f8      	str	r0, [r7, #28]
        break;
 800499e:	e014      	b.n	80049ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a0:	f7fe f996 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 80049a4:	61f8      	str	r0, [r7, #28]
        break;
 80049a6:	e010      	b.n	80049ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a8:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <UART_SetConfig+0x56c>)
 80049aa:	61fb      	str	r3, [r7, #28]
        break;
 80049ac:	e00d      	b.n	80049ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ae:	f7fe f8e1 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 80049b2:	61f8      	str	r0, [r7, #28]
        break;
 80049b4:	e009      	b.n	80049ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	61fb      	str	r3, [r7, #28]
        break;
 80049bc:	e005      	b.n	80049ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049c8:	bf00      	nop
    }

    if (pclk != 0U)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d019      	beq.n	8004a04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	085a      	lsrs	r2, r3, #1
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	441a      	add	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d909      	bls.n	80049fe <UART_SetConfig+0x546>
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f0:	d205      	bcs.n	80049fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60da      	str	r2, [r3, #12]
 80049fc:	e002      	b.n	8004a04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3728      	adds	r7, #40	; 0x28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1e:	bf00      	nop
 8004a20:	40008000 	.word	0x40008000
 8004a24:	00f42400 	.word	0x00f42400

08004a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01a      	beq.n	8004b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b26:	d10a      	bne.n	8004b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
  }
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b098      	sub	sp, #96	; 0x60
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b7c:	f7fc fdfa 	bl	8001774 <HAL_GetTick>
 8004b80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d12e      	bne.n	8004bee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f88c 	bl	8004cbc <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d021      	beq.n	8004bee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e6      	bne.n	8004baa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e062      	b.n	8004cb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d149      	bne.n	8004c90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c04:	2200      	movs	r2, #0
 8004c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f856 	bl	8004cbc <UART_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d03c      	beq.n	8004c90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	623b      	str	r3, [r7, #32]
   return(result);
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
 8004c36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e6      	bne.n	8004c16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c68:	61fa      	str	r2, [r7, #28]
 8004c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	69b9      	ldr	r1, [r7, #24]
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	617b      	str	r3, [r7, #20]
   return(result);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e5      	bne.n	8004c48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e011      	b.n	8004cb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3758      	adds	r7, #88	; 0x58
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ccc:	e049      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd4:	d045      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd6:	f7fc fd4d 	bl	8001774 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e048      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d031      	beq.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d110      	bne.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2208      	movs	r2, #8
 8004d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f838 	bl	8004d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e029      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3c:	d111      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f81e 	bl	8004d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e00f      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d0a6      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b095      	sub	sp, #84	; 0x54
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db0:	643b      	str	r3, [r7, #64]	; 0x40
 8004db2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e6      	bne.n	8004d92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3308      	adds	r3, #8
 8004de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e5      	bne.n	8004dc4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d118      	bne.n	8004e32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f023 0310 	bic.w	r3, r3, #16
 8004e14:	647b      	str	r3, [r7, #68]	; 0x44
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6979      	ldr	r1, [r7, #20]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e6      	bne.n	8004e00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e46:	bf00      	nop
 8004e48:	3754      	adds	r7, #84	; 0x54
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <__NVIC_SetPriority>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	6039      	str	r1, [r7, #0]
 8004e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	db0a      	blt.n	8004e7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	490c      	ldr	r1, [pc, #48]	; (8004ea0 <__NVIC_SetPriority+0x4c>)
 8004e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e72:	0112      	lsls	r2, r2, #4
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	440b      	add	r3, r1
 8004e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e7c:	e00a      	b.n	8004e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4908      	ldr	r1, [pc, #32]	; (8004ea4 <__NVIC_SetPriority+0x50>)
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	3b04      	subs	r3, #4
 8004e8c:	0112      	lsls	r2, r2, #4
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	440b      	add	r3, r1
 8004e92:	761a      	strb	r2, [r3, #24]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000e100 	.word	0xe000e100
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <SysTick_Handler+0x1c>)
 8004eae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004eb0:	f001 fe8e 	bl	8006bd0 <xTaskGetSchedulerState>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d001      	beq.n	8004ebe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004eba:	f002 fd5d 	bl	8007978 <xPortSysTickHandler>
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	e000e010 	.word	0xe000e010

08004ec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ecc:	2100      	movs	r1, #0
 8004ece:	f06f 0004 	mvn.w	r0, #4
 8004ed2:	f7ff ffbf 	bl	8004e54 <__NVIC_SetPriority>
#endif
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ee2:	f3ef 8305 	mrs	r3, IPSR
 8004ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004eee:	f06f 0305 	mvn.w	r3, #5
 8004ef2:	607b      	str	r3, [r7, #4]
 8004ef4:	e00c      	b.n	8004f10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <osKernelInitialize+0x44>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004efe:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <osKernelInitialize+0x44>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	e002      	b.n	8004f10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f10:	687b      	ldr	r3, [r7, #4]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	200001f0 	.word	0x200001f0

08004f24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2a:	f3ef 8305 	mrs	r3, IPSR
 8004f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f36:	f06f 0305 	mvn.w	r3, #5
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	e010      	b.n	8004f60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <osKernelStart+0x48>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d109      	bne.n	8004f5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f46:	f7ff ffbf 	bl	8004ec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f4a:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <osKernelStart+0x48>)
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f50:	f001 f9f6 	bl	8006340 <vTaskStartScheduler>
      stat = osOK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	e002      	b.n	8004f60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f60:	687b      	ldr	r3, [r7, #4]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200001f0 	.word	0x200001f0

08004f70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08e      	sub	sp, #56	; 0x38
 8004f74:	af04      	add	r7, sp, #16
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f80:	f3ef 8305 	mrs	r3, IPSR
 8004f84:	617b      	str	r3, [r7, #20]
  return(result);
 8004f86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d17e      	bne.n	800508a <osThreadNew+0x11a>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d07b      	beq.n	800508a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f96:	2318      	movs	r3, #24
 8004f98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d045      	beq.n	8005036 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <osThreadNew+0x48>
        name = attr->name;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <osThreadNew+0x6e>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b38      	cmp	r3, #56	; 0x38
 8004fd0:	d805      	bhi.n	8004fde <osThreadNew+0x6e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <osThreadNew+0x72>
        return (NULL);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e054      	b.n	800508c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	089b      	lsrs	r3, r3, #2
 8004ff0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00e      	beq.n	8005018 <osThreadNew+0xa8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b5b      	cmp	r3, #91	; 0x5b
 8005000:	d90a      	bls.n	8005018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005006:	2b00      	cmp	r3, #0
 8005008:	d006      	beq.n	8005018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <osThreadNew+0xa8>
        mem = 1;
 8005012:	2301      	movs	r3, #1
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	e010      	b.n	800503a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10c      	bne.n	800503a <osThreadNew+0xca>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d108      	bne.n	800503a <osThreadNew+0xca>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <osThreadNew+0xca>
          mem = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	e001      	b.n	800503a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d110      	bne.n	8005062 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005048:	9202      	str	r2, [sp, #8]
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	6a3a      	ldr	r2, [r7, #32]
 8005054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 ff1e 	bl	8005e98 <xTaskCreateStatic>
 800505c:	4603      	mov	r3, r0
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e013      	b.n	800508a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d110      	bne.n	800508a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	b29a      	uxth	r2, r3
 800506c:	f107 0310 	add.w	r3, r7, #16
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 ff69 	bl	8005f52 <xTaskCreate>
 8005080:	4603      	mov	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d001      	beq.n	800508a <osThreadNew+0x11a>
            hTask = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800508a:	693b      	ldr	r3, [r7, #16]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800509c:	f3ef 8305 	mrs	r3, IPSR
 80050a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80050a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <osDelay+0x1c>
    stat = osErrorISR;
 80050a8:	f06f 0305 	mvn.w	r3, #5
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e007      	b.n	80050c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f001 f90c 	bl	80062d8 <vTaskDelay>
    }
  }

  return (stat);
 80050c0:	68fb      	ldr	r3, [r7, #12]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f002 fa6d 	bl	80075b2 <pvTimerGetTimerID>
 80050d8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <TimerCallback+0x22>
    callb->func (callb->arg);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	6852      	ldr	r2, [r2, #4]
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
  }
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08c      	sub	sp, #48	; 0x30
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	460b      	mov	r3, r1
 8005102:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005108:	f3ef 8305 	mrs	r3, IPSR
 800510c:	613b      	str	r3, [r7, #16]
  return(result);
 800510e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005110:	2b00      	cmp	r3, #0
 8005112:	d163      	bne.n	80051dc <osTimerNew+0xe8>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d060      	beq.n	80051dc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800511a:	2008      	movs	r0, #8
 800511c:	f002 fcbc 	bl	8007a98 <pvPortMalloc>
 8005120:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d059      	beq.n	80051dc <osTimerNew+0xe8>
      callb->func = func;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005134:	7afb      	ldrb	r3, [r7, #11]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d102      	bne.n	8005140 <osTimerNew+0x4c>
        reload = pdFALSE;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	e001      	b.n	8005144 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005140:	2301      	movs	r3, #1
 8005142:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005148:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01c      	beq.n	800518e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <osTimerNew+0x6e>
          name = attr->name;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d006      	beq.n	8005178 <osTimerNew+0x84>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b2b      	cmp	r3, #43	; 0x2b
 8005170:	d902      	bls.n	8005178 <osTimerNew+0x84>
          mem = 1;
 8005172:	2301      	movs	r3, #1
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e00c      	b.n	8005192 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d108      	bne.n	8005192 <osTimerNew+0x9e>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <osTimerNew+0x9e>
            mem = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	e001      	b.n	8005192 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d10c      	bne.n	80051b2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <osTimerNew+0xf4>)
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	2101      	movs	r1, #1
 80051a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051aa:	f001 fe5a 	bl	8006e62 <xTimerCreateStatic>
 80051ae:	6238      	str	r0, [r7, #32]
 80051b0:	e00b      	b.n	80051ca <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <osTimerNew+0xf4>)
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	2101      	movs	r1, #1
 80051c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051c4:	f001 fe2c 	bl	8006e20 <xTimerCreate>
 80051c8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <osTimerNew+0xe8>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <osTimerNew+0xe8>
        vPortFree (callb);
 80051d6:	6978      	ldr	r0, [r7, #20]
 80051d8:	f002 fd2a 	bl	8007c30 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80051dc:	6a3b      	ldr	r3, [r7, #32]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3728      	adds	r7, #40	; 0x28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	080050cb 	.word	0x080050cb

080051ec <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051fa:	f3ef 8305 	mrs	r3, IPSR
 80051fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005200:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <osTimerStart+0x22>
    stat = osErrorISR;
 8005206:	f06f 0305 	mvn.w	r3, #5
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e017      	b.n	800523e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <osTimerStart+0x30>
    stat = osErrorParameter;
 8005214:	f06f 0303 	mvn.w	r3, #3
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e010      	b.n	800523e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800521c:	2300      	movs	r3, #0
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	2300      	movs	r3, #0
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	2104      	movs	r1, #4
 8005226:	6938      	ldr	r0, [r7, #16]
 8005228:	f001 fe94 	bl	8006f54 <xTimerGenericCommand>
 800522c:	4603      	mov	r3, r0
 800522e:	2b01      	cmp	r3, #1
 8005230:	d102      	bne.n	8005238 <osTimerStart+0x4c>
      stat = osOK;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e002      	b.n	800523e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005238:	f06f 0302 	mvn.w	r3, #2
 800523c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800523e:	697b      	ldr	r3, [r7, #20]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005254:	f3ef 8305 	mrs	r3, IPSR
 8005258:	60fb      	str	r3, [r7, #12]
  return(result);
 800525a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <osTimerStop+0x20>
    stat = osErrorISR;
 8005260:	f06f 0305 	mvn.w	r3, #5
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e021      	b.n	80052ac <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800526e:	f06f 0303 	mvn.w	r3, #3
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e01a      	b.n	80052ac <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8005276:	6938      	ldr	r0, [r7, #16]
 8005278:	f002 f972 	bl	8007560 <xTimerIsTimerActive>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <osTimerStop+0x42>
      stat = osErrorResource;
 8005282:	f06f 0302 	mvn.w	r3, #2
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e010      	b.n	80052ac <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800528a:	2300      	movs	r3, #0
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	2200      	movs	r2, #0
 8005292:	2103      	movs	r1, #3
 8005294:	6938      	ldr	r0, [r7, #16]
 8005296:	f001 fe5d 	bl	8006f54 <xTimerGenericCommand>
 800529a:	4603      	mov	r3, r0
 800529c:	2b01      	cmp	r3, #1
 800529e:	d102      	bne.n	80052a6 <osTimerStop+0x5e>
        stat = osOK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e002      	b.n	80052ac <osTimerStop+0x64>
      } else {
        stat = osError;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80052ac:	697b      	ldr	r3, [r7, #20]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c2:	f3ef 8305 	mrs	r3, IPSR
 80052c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80052c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <osTimerIsRunning+0x1e>
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <osTimerIsRunning+0x24>
    running = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	e004      	b.n	80052e4 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80052da:	6938      	ldr	r0, [r7, #16]
 80052dc:	f002 f940 	bl	8007560 <xTimerIsTimerActive>
 80052e0:	4603      	mov	r3, r0
 80052e2:	617b      	str	r3, [r7, #20]
  }

  return (running);
 80052e4:	697b      	ldr	r3, [r7, #20]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a07      	ldr	r2, [pc, #28]	; (800531c <vApplicationGetIdleTaskMemory+0x2c>)
 8005300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a06      	ldr	r2, [pc, #24]	; (8005320 <vApplicationGetIdleTaskMemory+0x30>)
 8005306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	601a      	str	r2, [r3, #0]
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	200001f4 	.word	0x200001f4
 8005320:	20000250 	.word	0x20000250

08005324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a07      	ldr	r2, [pc, #28]	; (8005350 <vApplicationGetTimerTaskMemory+0x2c>)
 8005334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a06      	ldr	r2, [pc, #24]	; (8005354 <vApplicationGetTimerTaskMemory+0x30>)
 800533a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20000450 	.word	0x20000450
 8005354:	200004ac 	.word	0x200004ac

08005358 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f103 0208 	add.w	r2, r3, #8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005370:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f103 0208 	add.w	r2, r3, #8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f103 0208 	add.w	r2, r3, #8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005410:	d103      	bne.n	800541a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	e00c      	b.n	8005434 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3308      	adds	r3, #8
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e002      	b.n	8005428 <vListInsert+0x2e>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	429a      	cmp	r2, r3
 8005432:	d2f6      	bcs.n	8005422 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	601a      	str	r2, [r3, #0]
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6892      	ldr	r2, [r2, #8]
 8005482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6852      	ldr	r2, [r2, #4]
 800548c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d103      	bne.n	80054a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054ea:	f002 f9b3 	bl	8007854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	68f9      	ldr	r1, [r7, #12]
 80054f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	441a      	add	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	3b01      	subs	r3, #1
 800551c:	68f9      	ldr	r1, [r7, #12]
 800551e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005520:	fb01 f303 	mul.w	r3, r1, r3
 8005524:	441a      	add	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	22ff      	movs	r2, #255	; 0xff
 800552e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	22ff      	movs	r2, #255	; 0xff
 8005536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d114      	bne.n	800556a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01a      	beq.n	800557e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3310      	adds	r3, #16
 800554c:	4618      	mov	r0, r3
 800554e:	f001 f981 	bl	8006854 <xTaskRemoveFromEventList>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d012      	beq.n	800557e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <xQueueGenericReset+0xcc>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	e009      	b.n	800557e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3310      	adds	r3, #16
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff fef2 	bl	8005358 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3324      	adds	r3, #36	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff feed 	bl	8005358 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800557e:	f002 f999 	bl	80078b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005582:	2301      	movs	r3, #1
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	; 0x38
 8005594:	af02      	add	r7, sp, #8
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <xQueueGenericCreateStatic+0x52>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <xQueueGenericCreateStatic+0x56>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueGenericCreateStatic+0x58>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	623b      	str	r3, [r7, #32]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <xQueueGenericCreateStatic+0x7e>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <xQueueGenericCreateStatic+0x82>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <xQueueGenericCreateStatic+0x84>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	61fb      	str	r3, [r7, #28]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800562e:	2350      	movs	r3, #80	; 0x50
 8005630:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b50      	cmp	r3, #80	; 0x50
 8005636:	d00a      	beq.n	800564e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	61bb      	str	r3, [r7, #24]
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800564e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005662:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	4613      	mov	r3, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f805 	bl	8005680 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005678:	4618      	mov	r0, r3
 800567a:	3730      	adds	r7, #48	; 0x30
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e002      	b.n	80056a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056ae:	2101      	movs	r1, #1
 80056b0:	69b8      	ldr	r0, [r7, #24]
 80056b2:	f7ff ff05 	bl	80054c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056d6:	2300      	movs	r3, #0
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <xQueueGenericSend+0x32>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d103      	bne.n	8005708 <xQueueGenericSend+0x40>
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <xQueueGenericSend+0x44>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <xQueueGenericSend+0x46>
 800570c:	2300      	movs	r3, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <xQueueGenericSend+0x60>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d103      	bne.n	8005736 <xQueueGenericSend+0x6e>
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <xQueueGenericSend+0x72>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <xQueueGenericSend+0x74>
 800573a:	2300      	movs	r3, #0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xQueueGenericSend+0x8e>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	623b      	str	r3, [r7, #32]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005756:	f001 fa3b 	bl	8006bd0 <xTaskGetSchedulerState>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <xQueueGenericSend+0x9e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <xQueueGenericSend+0xa2>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <xQueueGenericSend+0xa4>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <xQueueGenericSend+0xbe>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	61fb      	str	r3, [r7, #28]
}
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005786:	f002 f865 	bl	8007854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	429a      	cmp	r2, r3
 8005794:	d302      	bcc.n	800579c <xQueueGenericSend+0xd4>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d129      	bne.n	80057f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057a2:	f000 fa0b 	bl	8005bbc <prvCopyDataToQueue>
 80057a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d010      	beq.n	80057d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	3324      	adds	r3, #36	; 0x24
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 f84d 	bl	8006854 <xTaskRemoveFromEventList>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d013      	beq.n	80057e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057c0:	4b3f      	ldr	r3, [pc, #252]	; (80058c0 <xQueueGenericSend+0x1f8>)
 80057c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	e00a      	b.n	80057e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057d8:	4b39      	ldr	r3, [pc, #228]	; (80058c0 <xQueueGenericSend+0x1f8>)
 80057da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057e8:	f002 f864 	bl	80078b4 <vPortExitCritical>
				return pdPASS;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e063      	b.n	80058b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057f6:	f002 f85d 	bl	80078b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e05c      	b.n	80058b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005804:	f107 0314 	add.w	r3, r7, #20
 8005808:	4618      	mov	r0, r3
 800580a:	f001 f887 	bl	800691c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800580e:	2301      	movs	r3, #1
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005812:	f002 f84f 	bl	80078b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005816:	f000 fdf9 	bl	800640c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800581a:	f002 f81b 	bl	8007854 <vPortEnterCritical>
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005824:	b25b      	sxtb	r3, r3
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582a:	d103      	bne.n	8005834 <xQueueGenericSend+0x16c>
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800583a:	b25b      	sxtb	r3, r3
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005840:	d103      	bne.n	800584a <xQueueGenericSend+0x182>
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800584a:	f002 f833 	bl	80078b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800584e:	1d3a      	adds	r2, r7, #4
 8005850:	f107 0314 	add.w	r3, r7, #20
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f001 f876 	bl	8006948 <xTaskCheckForTimeOut>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d124      	bne.n	80058ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005864:	f000 faa2 	bl	8005dac <prvIsQueueFull>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d018      	beq.n	80058a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	3310      	adds	r3, #16
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4611      	mov	r1, r2
 8005876:	4618      	mov	r0, r3
 8005878:	f000 ff9c 	bl	80067b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800587c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587e:	f000 fa2d 	bl	8005cdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005882:	f000 fdd1 	bl	8006428 <xTaskResumeAll>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	f47f af7c 	bne.w	8005786 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800588e:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <xQueueGenericSend+0x1f8>)
 8005890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	e772      	b.n	8005786 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058a2:	f000 fa1b 	bl	8005cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058a6:	f000 fdbf 	bl	8006428 <xTaskResumeAll>
 80058aa:	e76c      	b.n	8005786 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ae:	f000 fa15 	bl	8005cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058b2:	f000 fdb9 	bl	8006428 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3738      	adds	r7, #56	; 0x38
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b090      	sub	sp, #64	; 0x40
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d103      	bne.n	8005900 <xQueueGenericSendFromISR+0x3c>
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <xQueueGenericSendFromISR+0x40>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <xQueueGenericSendFromISR+0x42>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10a      	bne.n	8005920 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d103      	bne.n	800592e <xQueueGenericSendFromISR+0x6a>
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <xQueueGenericSendFromISR+0x6e>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <xQueueGenericSendFromISR+0x70>
 8005932:	2300      	movs	r3, #0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	623b      	str	r3, [r7, #32]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800594e:	f002 f863 	bl	8007a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005952:	f3ef 8211 	mrs	r2, BASEPRI
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	61fa      	str	r2, [r7, #28]
 8005968:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800596a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <xQueueGenericSendFromISR+0xbc>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d12f      	bne.n	80059e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005996:	f000 f911 	bl	8005bbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800599a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a2:	d112      	bne.n	80059ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d016      	beq.n	80059da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	3324      	adds	r3, #36	; 0x24
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 ff4f 	bl	8006854 <xTaskRemoveFromEventList>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00e      	beq.n	80059da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e007      	b.n	80059da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059ce:	3301      	adds	r3, #1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	b25a      	sxtb	r2, r3
 80059d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059da:	2301      	movs	r3, #1
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059de:	e001      	b.n	80059e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3740      	adds	r7, #64	; 0x40
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08c      	sub	sp, #48	; 0x30
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <xQueueReceive+0x30>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	623b      	str	r3, [r7, #32]
}
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <xQueueReceive+0x3e>
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <xQueueReceive+0x42>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <xQueueReceive+0x44>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <xQueueReceive+0x5e>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	61fb      	str	r3, [r7, #28]
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a5a:	f001 f8b9 	bl	8006bd0 <xTaskGetSchedulerState>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <xQueueReceive+0x6e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <xQueueReceive+0x72>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <xQueueReceive+0x74>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <xQueueReceive+0x8e>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	61bb      	str	r3, [r7, #24]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a8a:	f001 fee3 	bl	8007854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01f      	beq.n	8005ada <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9e:	f000 f8f7 	bl	8005c90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	1e5a      	subs	r2, r3, #1
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00f      	beq.n	8005ad2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	3310      	adds	r3, #16
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fecc 	bl	8006854 <xTaskRemoveFromEventList>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ac2:	4b3d      	ldr	r3, [pc, #244]	; (8005bb8 <xQueueReceive+0x1bc>)
 8005ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ad2:	f001 feef 	bl	80078b4 <vPortExitCritical>
				return pdPASS;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e069      	b.n	8005bae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d103      	bne.n	8005ae8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ae0:	f001 fee8 	bl	80078b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e062      	b.n	8005bae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aee:	f107 0310 	add.w	r3, r7, #16
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 ff12 	bl	800691c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005afc:	f001 feda 	bl	80078b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b00:	f000 fc84 	bl	800640c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b04:	f001 fea6 	bl	8007854 <vPortEnterCritical>
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b0e:	b25b      	sxtb	r3, r3
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b14:	d103      	bne.n	8005b1e <xQueueReceive+0x122>
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b24:	b25b      	sxtb	r3, r3
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b2a:	d103      	bne.n	8005b34 <xQueueReceive+0x138>
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b34:	f001 febe 	bl	80078b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b38:	1d3a      	adds	r2, r7, #4
 8005b3a:	f107 0310 	add.w	r3, r7, #16
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 ff01 	bl	8006948 <xTaskCheckForTimeOut>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d123      	bne.n	8005b94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4e:	f000 f917 	bl	8005d80 <prvIsQueueEmpty>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d017      	beq.n	8005b88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	3324      	adds	r3, #36	; 0x24
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fe27 	bl	80067b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b68:	f000 f8b8 	bl	8005cdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b6c:	f000 fc5c 	bl	8006428 <xTaskResumeAll>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d189      	bne.n	8005a8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <xQueueReceive+0x1bc>)
 8005b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	e780      	b.n	8005a8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b8a:	f000 f8a7 	bl	8005cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8e:	f000 fc4b 	bl	8006428 <xTaskResumeAll>
 8005b92:	e77a      	b.n	8005a8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b96:	f000 f8a1 	bl	8005cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b9a:	f000 fc45 	bl	8006428 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba0:	f000 f8ee 	bl	8005d80 <prvIsQueueEmpty>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f43f af6f 	beq.w	8005a8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3730      	adds	r7, #48	; 0x30
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10d      	bne.n	8005bf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d14d      	bne.n	8005c7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 f810 	bl	8006c0c <xTaskPriorityDisinherit>
 8005bec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	e043      	b.n	8005c7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d119      	bne.n	8005c30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6858      	ldr	r0, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	461a      	mov	r2, r3
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	f002 f95c 	bl	8007ec4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	441a      	add	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d32b      	bcc.n	8005c7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	e026      	b.n	8005c7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68d8      	ldr	r0, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	f002 f942 	bl	8007ec4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	425b      	negs	r3, r3
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d207      	bcs.n	8005c6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	425b      	negs	r3, r3
 8005c66:	441a      	add	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d105      	bne.n	8005c7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c86:	697b      	ldr	r3, [r7, #20]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d018      	beq.n	8005cd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	441a      	add	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d303      	bcc.n	8005cc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68d9      	ldr	r1, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6838      	ldr	r0, [r7, #0]
 8005cd0:	f002 f8f8 	bl	8007ec4 <memcpy>
	}
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ce4:	f001 fdb6 	bl	8007854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cf0:	e011      	b.n	8005d16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d012      	beq.n	8005d20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3324      	adds	r3, #36	; 0x24
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fda8 	bl	8006854 <xTaskRemoveFromEventList>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d0a:	f000 fe7f 	bl	8006a0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	dce9      	bgt.n	8005cf2 <prvUnlockQueue+0x16>
 8005d1e:	e000      	b.n	8005d22 <prvUnlockQueue+0x46>
					break;
 8005d20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	22ff      	movs	r2, #255	; 0xff
 8005d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d2a:	f001 fdc3 	bl	80078b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d2e:	f001 fd91 	bl	8007854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d3a:	e011      	b.n	8005d60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d012      	beq.n	8005d6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3310      	adds	r3, #16
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fd83 	bl	8006854 <xTaskRemoveFromEventList>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d54:	f000 fe5a 	bl	8006a0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dce9      	bgt.n	8005d3c <prvUnlockQueue+0x60>
 8005d68:	e000      	b.n	8005d6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	22ff      	movs	r2, #255	; 0xff
 8005d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d74:	f001 fd9e 	bl	80078b4 <vPortExitCritical>
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d88:	f001 fd64 	bl	8007854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d94:	2301      	movs	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e001      	b.n	8005d9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d9e:	f001 fd89 	bl	80078b4 <vPortExitCritical>

	return xReturn;
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005db4:	f001 fd4e 	bl	8007854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d102      	bne.n	8005dca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e001      	b.n	8005dce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dce:	f001 fd71 	bl	80078b4 <vPortExitCritical>

	return xReturn;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e014      	b.n	8005e16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dec:	4a0f      	ldr	r2, [pc, #60]	; (8005e2c <vQueueAddToRegistry+0x50>)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10b      	bne.n	8005e10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005df8:	490c      	ldr	r1, [pc, #48]	; (8005e2c <vQueueAddToRegistry+0x50>)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e02:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <vQueueAddToRegistry+0x50>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	4413      	add	r3, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e0e:	e006      	b.n	8005e1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b07      	cmp	r3, #7
 8005e1a:	d9e7      	bls.n	8005dec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	200008ac 	.word	0x200008ac

08005e30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e40:	f001 fd08 	bl	8007854 <vPortEnterCritical>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e4a:	b25b      	sxtb	r3, r3
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e50:	d103      	bne.n	8005e5a <vQueueWaitForMessageRestricted+0x2a>
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e60:	b25b      	sxtb	r3, r3
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e66:	d103      	bne.n	8005e70 <vQueueWaitForMessageRestricted+0x40>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e70:	f001 fd20 	bl	80078b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	3324      	adds	r3, #36	; 0x24
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fcb9 	bl	80067fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f7ff ff26 	bl	8005cdc <prvUnlockQueue>
	}
 8005e90:	bf00      	nop
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	; 0x38
 8005e9c:	af04      	add	r7, sp, #16
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	623b      	str	r3, [r7, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <xTaskCreateStatic+0x46>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	61fb      	str	r3, [r7, #28]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ede:	235c      	movs	r3, #92	; 0x5c
 8005ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8005ee6:	d00a      	beq.n	8005efe <xTaskCreateStatic+0x66>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	61bb      	str	r3, [r7, #24]
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005efe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01e      	beq.n	8005f44 <xTaskCreateStatic+0xac>
 8005f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	2202      	movs	r2, #2
 8005f1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9303      	str	r3, [sp, #12]
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	9302      	str	r3, [sp, #8]
 8005f26:	f107 0314 	add.w	r3, r7, #20
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f850 	bl	8005fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f3e:	f000 f8dd 	bl	80060fc <prvAddNewTaskToReadyList>
 8005f42:	e001      	b.n	8005f48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f48:	697b      	ldr	r3, [r7, #20]
	}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3728      	adds	r7, #40	; 0x28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b08c      	sub	sp, #48	; 0x30
 8005f56:	af04      	add	r7, sp, #16
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 fd96 	bl	8007a98 <pvPortMalloc>
 8005f6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00e      	beq.n	8005f92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f74:	205c      	movs	r0, #92	; 0x5c
 8005f76:	f001 fd8f 	bl	8007a98 <pvPortMalloc>
 8005f7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
 8005f88:	e005      	b.n	8005f96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f8a:	6978      	ldr	r0, [r7, #20]
 8005f8c:	f001 fe50 	bl	8007c30 <vPortFree>
 8005f90:	e001      	b.n	8005f96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d017      	beq.n	8005fcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fa4:	88fa      	ldrh	r2, [r7, #6]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9303      	str	r3, [sp, #12]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	9302      	str	r3, [sp, #8]
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 f80e 	bl	8005fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fc0:	69f8      	ldr	r0, [r7, #28]
 8005fc2:	f000 f89b 	bl	80060fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	e002      	b.n	8005fd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	21a5      	movs	r1, #165	; 0xa5
 8005ff6:	f001 ff39 	bl	8007e6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006004:	3b01      	subs	r3, #1
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f023 0307 	bic.w	r3, r3, #7
 8006012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <prvInitialiseNewTask+0x58>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	617b      	str	r3, [r7, #20]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d01f      	beq.n	800607a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	e012      	b.n	8006066 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	7819      	ldrb	r1, [r3, #0]
 8006048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	3334      	adds	r3, #52	; 0x34
 8006050:	460a      	mov	r2, r1
 8006052:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d006      	beq.n	800606e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	2b0f      	cmp	r3, #15
 800606a:	d9e9      	bls.n	8006040 <prvInitialiseNewTask+0x64>
 800606c:	e000      	b.n	8006070 <prvInitialiseNewTask+0x94>
			{
				break;
 800606e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006078:	e003      	b.n	8006082 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	2b37      	cmp	r3, #55	; 0x37
 8006086:	d901      	bls.n	800608c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006088:	2337      	movs	r3, #55	; 0x37
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006090:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006096:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	2200      	movs	r2, #0
 800609c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	3304      	adds	r3, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff f978 	bl	8005398 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	3318      	adds	r3, #24
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff f973 	bl	8005398 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	2200      	movs	r2, #0
 80060cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	68f9      	ldr	r1, [r7, #12]
 80060da:	69b8      	ldr	r0, [r7, #24]
 80060dc:	f001 fa8a 	bl	80075f4 <pxPortInitialiseStack>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f2:	bf00      	nop
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006104:	f001 fba6 	bl	8007854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006108:	4b2d      	ldr	r3, [pc, #180]	; (80061c0 <prvAddNewTaskToReadyList+0xc4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3301      	adds	r3, #1
 800610e:	4a2c      	ldr	r2, [pc, #176]	; (80061c0 <prvAddNewTaskToReadyList+0xc4>)
 8006110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006112:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <prvAddNewTaskToReadyList+0xc8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800611a:	4a2a      	ldr	r2, [pc, #168]	; (80061c4 <prvAddNewTaskToReadyList+0xc8>)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006120:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <prvAddNewTaskToReadyList+0xc4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d110      	bne.n	800614a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006128:	f000 fc94 	bl	8006a54 <prvInitialiseTaskLists>
 800612c:	e00d      	b.n	800614a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800612e:	4b26      	ldr	r3, [pc, #152]	; (80061c8 <prvAddNewTaskToReadyList+0xcc>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d109      	bne.n	800614a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006136:	4b23      	ldr	r3, [pc, #140]	; (80061c4 <prvAddNewTaskToReadyList+0xc8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	429a      	cmp	r2, r3
 8006142:	d802      	bhi.n	800614a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006144:	4a1f      	ldr	r2, [pc, #124]	; (80061c4 <prvAddNewTaskToReadyList+0xc8>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <prvAddNewTaskToReadyList+0xd0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3301      	adds	r3, #1
 8006150:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <prvAddNewTaskToReadyList+0xd0>)
 8006152:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006154:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <prvAddNewTaskToReadyList+0xd0>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <prvAddNewTaskToReadyList+0xd4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d903      	bls.n	8006170 <prvAddNewTaskToReadyList+0x74>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a18      	ldr	r2, [pc, #96]	; (80061d0 <prvAddNewTaskToReadyList+0xd4>)
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <prvAddNewTaskToReadyList+0xd8>)
 800617e:	441a      	add	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7ff f913 	bl	80053b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800618c:	f001 fb92 	bl	80078b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006190:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <prvAddNewTaskToReadyList+0xcc>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00e      	beq.n	80061b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006198:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <prvAddNewTaskToReadyList+0xc8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d207      	bcs.n	80061b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <prvAddNewTaskToReadyList+0xdc>)
 80061a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000dc0 	.word	0x20000dc0
 80061c4:	200008ec 	.word	0x200008ec
 80061c8:	20000dcc 	.word	0x20000dcc
 80061cc:	20000ddc 	.word	0x20000ddc
 80061d0:	20000dc8 	.word	0x20000dc8
 80061d4:	200008f0 	.word	0x200008f0
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <vTaskDelayUntil+0x2a>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	617b      	str	r3, [r7, #20]
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <vTaskDelayUntil+0x46>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	613b      	str	r3, [r7, #16]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006222:	4b2a      	ldr	r3, [pc, #168]	; (80062cc <vTaskDelayUntil+0xf0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <vTaskDelayUntil+0x64>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	60fb      	str	r3, [r7, #12]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006240:	f000 f8e4 	bl	800640c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006244:	4b22      	ldr	r3, [pc, #136]	; (80062d0 <vTaskDelayUntil+0xf4>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	4413      	add	r3, r2
 8006252:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	429a      	cmp	r2, r3
 800625c:	d20b      	bcs.n	8006276 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	429a      	cmp	r2, r3
 8006266:	d211      	bcs.n	800628c <vTaskDelayUntil+0xb0>
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	429a      	cmp	r2, r3
 800626e:	d90d      	bls.n	800628c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006270:	2301      	movs	r3, #1
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
 8006274:	e00a      	b.n	800628c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	429a      	cmp	r2, r3
 800627e:	d303      	bcc.n	8006288 <vTaskDelayUntil+0xac>
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	429a      	cmp	r2, r3
 8006286:	d901      	bls.n	800628c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006288:	2301      	movs	r3, #1
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d006      	beq.n	80062a6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2100      	movs	r1, #0
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fd21 	bl	8006ce8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80062a6:	f000 f8bf 	bl	8006428 <xTaskResumeAll>
 80062aa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d107      	bne.n	80062c2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <vTaskDelayUntil+0xf8>)
 80062b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062c2:	bf00      	nop
 80062c4:	3728      	adds	r7, #40	; 0x28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000de8 	.word	0x20000de8
 80062d0:	20000dc4 	.word	0x20000dc4
 80062d4:	e000ed04 	.word	0xe000ed04

080062d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d017      	beq.n	800631a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062ea:	4b13      	ldr	r3, [pc, #76]	; (8006338 <vTaskDelay+0x60>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <vTaskDelay+0x30>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60bb      	str	r3, [r7, #8]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006308:	f000 f880 	bl	800640c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800630c:	2100      	movs	r1, #0
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fcea 	bl	8006ce8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006314:	f000 f888 	bl	8006428 <xTaskResumeAll>
 8006318:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d107      	bne.n	8006330 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <vTaskDelay+0x64>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20000de8 	.word	0x20000de8
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	; 0x28
 8006344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800634e:	463a      	mov	r2, r7
 8006350:	1d39      	adds	r1, r7, #4
 8006352:	f107 0308 	add.w	r3, r7, #8
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe ffca 	bl	80052f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	9202      	str	r2, [sp, #8]
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	2300      	movs	r3, #0
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	2300      	movs	r3, #0
 800636c:	460a      	mov	r2, r1
 800636e:	4921      	ldr	r1, [pc, #132]	; (80063f4 <vTaskStartScheduler+0xb4>)
 8006370:	4821      	ldr	r0, [pc, #132]	; (80063f8 <vTaskStartScheduler+0xb8>)
 8006372:	f7ff fd91 	bl	8005e98 <xTaskCreateStatic>
 8006376:	4603      	mov	r3, r0
 8006378:	4a20      	ldr	r2, [pc, #128]	; (80063fc <vTaskStartScheduler+0xbc>)
 800637a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800637c:	4b1f      	ldr	r3, [pc, #124]	; (80063fc <vTaskStartScheduler+0xbc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006384:	2301      	movs	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e001      	b.n	800638e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d102      	bne.n	800639a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006394:	f000 fcfc 	bl	8006d90 <xTimerCreateTimerTask>
 8006398:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d116      	bne.n	80063ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	613b      	str	r3, [r7, #16]
}
 80063b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063b4:	4b12      	ldr	r3, [pc, #72]	; (8006400 <vTaskStartScheduler+0xc0>)
 80063b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063bc:	4b11      	ldr	r3, [pc, #68]	; (8006404 <vTaskStartScheduler+0xc4>)
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063c2:	4b11      	ldr	r3, [pc, #68]	; (8006408 <vTaskStartScheduler+0xc8>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063c8:	f001 f9a2 	bl	8007710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063cc:	e00e      	b.n	80063ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d4:	d10a      	bne.n	80063ec <vTaskStartScheduler+0xac>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60fb      	str	r3, [r7, #12]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <vTaskStartScheduler+0xaa>
}
 80063ec:	bf00      	nop
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	08007f74 	.word	0x08007f74
 80063f8:	08006a25 	.word	0x08006a25
 80063fc:	20000de4 	.word	0x20000de4
 8006400:	20000de0 	.word	0x20000de0
 8006404:	20000dcc 	.word	0x20000dcc
 8006408:	20000dc4 	.word	0x20000dc4

0800640c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <vTaskSuspendAll+0x18>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	4a03      	ldr	r2, [pc, #12]	; (8006424 <vTaskSuspendAll+0x18>)
 8006418:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800641a:	bf00      	nop
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	20000de8 	.word	0x20000de8

08006428 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006436:	4b42      	ldr	r3, [pc, #264]	; (8006540 <xTaskResumeAll+0x118>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10a      	bne.n	8006454 <xTaskResumeAll+0x2c>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	603b      	str	r3, [r7, #0]
}
 8006450:	bf00      	nop
 8006452:	e7fe      	b.n	8006452 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006454:	f001 f9fe 	bl	8007854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006458:	4b39      	ldr	r3, [pc, #228]	; (8006540 <xTaskResumeAll+0x118>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3b01      	subs	r3, #1
 800645e:	4a38      	ldr	r2, [pc, #224]	; (8006540 <xTaskResumeAll+0x118>)
 8006460:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006462:	4b37      	ldr	r3, [pc, #220]	; (8006540 <xTaskResumeAll+0x118>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d162      	bne.n	8006530 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800646a:	4b36      	ldr	r3, [pc, #216]	; (8006544 <xTaskResumeAll+0x11c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d05e      	beq.n	8006530 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006472:	e02f      	b.n	80064d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006474:	4b34      	ldr	r3, [pc, #208]	; (8006548 <xTaskResumeAll+0x120>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3318      	adds	r3, #24
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe fff3 	bl	800546c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3304      	adds	r3, #4
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe ffee 	bl	800546c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	4b2d      	ldr	r3, [pc, #180]	; (800654c <xTaskResumeAll+0x124>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d903      	bls.n	80064a4 <xTaskResumeAll+0x7c>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	4a2a      	ldr	r2, [pc, #168]	; (800654c <xTaskResumeAll+0x124>)
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4a27      	ldr	r2, [pc, #156]	; (8006550 <xTaskResumeAll+0x128>)
 80064b2:	441a      	add	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f7fe ff79 	bl	80053b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	4b23      	ldr	r3, [pc, #140]	; (8006554 <xTaskResumeAll+0x12c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d302      	bcc.n	80064d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064ce:	4b22      	ldr	r3, [pc, #136]	; (8006558 <xTaskResumeAll+0x130>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064d4:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <xTaskResumeAll+0x120>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1cb      	bne.n	8006474 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064e2:	f000 fb55 	bl	8006b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064e6:	4b1d      	ldr	r3, [pc, #116]	; (800655c <xTaskResumeAll+0x134>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d010      	beq.n	8006514 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064f2:	f000 f847 	bl	8006584 <xTaskIncrementTick>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064fc:	4b16      	ldr	r3, [pc, #88]	; (8006558 <xTaskResumeAll+0x130>)
 80064fe:	2201      	movs	r2, #1
 8006500:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3b01      	subs	r3, #1
 8006506:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f1      	bne.n	80064f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <xTaskResumeAll+0x134>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006514:	4b10      	ldr	r3, [pc, #64]	; (8006558 <xTaskResumeAll+0x130>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d009      	beq.n	8006530 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006520:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <xTaskResumeAll+0x138>)
 8006522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006530:	f001 f9c0 	bl	80078b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006534:	68bb      	ldr	r3, [r7, #8]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000de8 	.word	0x20000de8
 8006544:	20000dc0 	.word	0x20000dc0
 8006548:	20000d80 	.word	0x20000d80
 800654c:	20000dc8 	.word	0x20000dc8
 8006550:	200008f0 	.word	0x200008f0
 8006554:	200008ec 	.word	0x200008ec
 8006558:	20000dd4 	.word	0x20000dd4
 800655c:	20000dd0 	.word	0x20000dd0
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <xTaskGetTickCount+0x1c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006570:	687b      	ldr	r3, [r7, #4]
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000dc4 	.word	0x20000dc4

08006584 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800658e:	4b4f      	ldr	r3, [pc, #316]	; (80066cc <xTaskIncrementTick+0x148>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 808f 	bne.w	80066b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006598:	4b4d      	ldr	r3, [pc, #308]	; (80066d0 <xTaskIncrementTick+0x14c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3301      	adds	r3, #1
 800659e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065a0:	4a4b      	ldr	r2, [pc, #300]	; (80066d0 <xTaskIncrementTick+0x14c>)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d120      	bne.n	80065ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80065ac:	4b49      	ldr	r3, [pc, #292]	; (80066d4 <xTaskIncrementTick+0x150>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <xTaskIncrementTick+0x48>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	603b      	str	r3, [r7, #0]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <xTaskIncrementTick+0x46>
 80065cc:	4b41      	ldr	r3, [pc, #260]	; (80066d4 <xTaskIncrementTick+0x150>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	4b41      	ldr	r3, [pc, #260]	; (80066d8 <xTaskIncrementTick+0x154>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a3f      	ldr	r2, [pc, #252]	; (80066d4 <xTaskIncrementTick+0x150>)
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4a3f      	ldr	r2, [pc, #252]	; (80066d8 <xTaskIncrementTick+0x154>)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4b3e      	ldr	r3, [pc, #248]	; (80066dc <xTaskIncrementTick+0x158>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	4a3d      	ldr	r2, [pc, #244]	; (80066dc <xTaskIncrementTick+0x158>)
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	f000 fad1 	bl	8006b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065ee:	4b3c      	ldr	r3, [pc, #240]	; (80066e0 <xTaskIncrementTick+0x15c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d349      	bcc.n	800668c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065f8:	4b36      	ldr	r3, [pc, #216]	; (80066d4 <xTaskIncrementTick+0x150>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d104      	bne.n	800660c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006602:	4b37      	ldr	r3, [pc, #220]	; (80066e0 <xTaskIncrementTick+0x15c>)
 8006604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006608:	601a      	str	r2, [r3, #0]
					break;
 800660a:	e03f      	b.n	800668c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660c:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <xTaskIncrementTick+0x150>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	429a      	cmp	r2, r3
 8006622:	d203      	bcs.n	800662c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006624:	4a2e      	ldr	r2, [pc, #184]	; (80066e0 <xTaskIncrementTick+0x15c>)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800662a:	e02f      	b.n	800668c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	3304      	adds	r3, #4
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe ff1b 	bl	800546c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3318      	adds	r3, #24
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe ff12 	bl	800546c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <xTaskIncrementTick+0x160>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d903      	bls.n	800665c <xTaskIncrementTick+0xd8>
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	4a22      	ldr	r2, [pc, #136]	; (80066e4 <xTaskIncrementTick+0x160>)
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <xTaskIncrementTick+0x164>)
 800666a:	441a      	add	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f7fe fe9d 	bl	80053b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <xTaskIncrementTick+0x168>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	429a      	cmp	r2, r3
 8006684:	d3b8      	bcc.n	80065f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006686:	2301      	movs	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800668a:	e7b5      	b.n	80065f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800668c:	4b17      	ldr	r3, [pc, #92]	; (80066ec <xTaskIncrementTick+0x168>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	4915      	ldr	r1, [pc, #84]	; (80066e8 <xTaskIncrementTick+0x164>)
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d901      	bls.n	80066a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066a8:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <xTaskIncrementTick+0x16c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e004      	b.n	80066c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <xTaskIncrementTick+0x170>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3301      	adds	r3, #1
 80066bc:	4a0d      	ldr	r2, [pc, #52]	; (80066f4 <xTaskIncrementTick+0x170>)
 80066be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066c0:	697b      	ldr	r3, [r7, #20]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000de8 	.word	0x20000de8
 80066d0:	20000dc4 	.word	0x20000dc4
 80066d4:	20000d78 	.word	0x20000d78
 80066d8:	20000d7c 	.word	0x20000d7c
 80066dc:	20000dd8 	.word	0x20000dd8
 80066e0:	20000de0 	.word	0x20000de0
 80066e4:	20000dc8 	.word	0x20000dc8
 80066e8:	200008f0 	.word	0x200008f0
 80066ec:	200008ec 	.word	0x200008ec
 80066f0:	20000dd4 	.word	0x20000dd4
 80066f4:	20000dd0 	.word	0x20000dd0

080066f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066fe:	4b28      	ldr	r3, [pc, #160]	; (80067a0 <vTaskSwitchContext+0xa8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006706:	4b27      	ldr	r3, [pc, #156]	; (80067a4 <vTaskSwitchContext+0xac>)
 8006708:	2201      	movs	r2, #1
 800670a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800670c:	e041      	b.n	8006792 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800670e:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <vTaskSwitchContext+0xac>)
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <vTaskSwitchContext+0xb0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e010      	b.n	800673e <vTaskSwitchContext+0x46>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <vTaskSwitchContext+0x40>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	607b      	str	r3, [r7, #4]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <vTaskSwitchContext+0x3e>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3b01      	subs	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	491b      	ldr	r1, [pc, #108]	; (80067ac <vTaskSwitchContext+0xb4>)
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0e4      	beq.n	800671c <vTaskSwitchContext+0x24>
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4a13      	ldr	r2, [pc, #76]	; (80067ac <vTaskSwitchContext+0xb4>)
 800675e:	4413      	add	r3, r2
 8006760:	60bb      	str	r3, [r7, #8]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	605a      	str	r2, [r3, #4]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	3308      	adds	r3, #8
 8006774:	429a      	cmp	r2, r3
 8006776:	d104      	bne.n	8006782 <vTaskSwitchContext+0x8a>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	605a      	str	r2, [r3, #4]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <vTaskSwitchContext+0xb8>)
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	4a06      	ldr	r2, [pc, #24]	; (80067a8 <vTaskSwitchContext+0xb0>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6013      	str	r3, [r2, #0]
}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20000de8 	.word	0x20000de8
 80067a4:	20000dd4 	.word	0x20000dd4
 80067a8:	20000dc8 	.word	0x20000dc8
 80067ac:	200008f0 	.word	0x200008f0
 80067b0:	200008ec 	.word	0x200008ec

080067b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60fb      	str	r3, [r7, #12]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067da:	4b07      	ldr	r3, [pc, #28]	; (80067f8 <vTaskPlaceOnEventList+0x44>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3318      	adds	r3, #24
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fe fe09 	bl	80053fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067e8:	2101      	movs	r1, #1
 80067ea:	6838      	ldr	r0, [r7, #0]
 80067ec:	f000 fa7c 	bl	8006ce8 <prvAddCurrentTaskToDelayedList>
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	200008ec 	.word	0x200008ec

080067fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617b      	str	r3, [r7, #20]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006824:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <vTaskPlaceOnEventListRestricted+0x54>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3318      	adds	r3, #24
 800682a:	4619      	mov	r1, r3
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f7fe fdc0 	bl	80053b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800683c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	68b8      	ldr	r0, [r7, #8]
 8006842:	f000 fa51 	bl	8006ce8 <prvAddCurrentTaskToDelayedList>
	}
 8006846:	bf00      	nop
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	200008ec 	.word	0x200008ec

08006854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	60fb      	str	r3, [r7, #12]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3318      	adds	r3, #24
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fdf1 	bl	800546c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800688a:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <xTaskRemoveFromEventList+0xb0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d11d      	bne.n	80068ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3304      	adds	r3, #4
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe fde8 	bl	800546c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4b19      	ldr	r3, [pc, #100]	; (8006908 <xTaskRemoveFromEventList+0xb4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d903      	bls.n	80068b0 <xTaskRemoveFromEventList+0x5c>
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	4a16      	ldr	r2, [pc, #88]	; (8006908 <xTaskRemoveFromEventList+0xb4>)
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4a13      	ldr	r2, [pc, #76]	; (800690c <xTaskRemoveFromEventList+0xb8>)
 80068be:	441a      	add	r2, r3
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f7fe fd73 	bl	80053b2 <vListInsertEnd>
 80068cc:	e005      	b.n	80068da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3318      	adds	r3, #24
 80068d2:	4619      	mov	r1, r3
 80068d4:	480e      	ldr	r0, [pc, #56]	; (8006910 <xTaskRemoveFromEventList+0xbc>)
 80068d6:	f7fe fd6c 	bl	80053b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <xTaskRemoveFromEventList+0xc0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d905      	bls.n	80068f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068e8:	2301      	movs	r3, #1
 80068ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <xTaskRemoveFromEventList+0xc4>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e001      	b.n	80068f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068f8:	697b      	ldr	r3, [r7, #20]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000de8 	.word	0x20000de8
 8006908:	20000dc8 	.word	0x20000dc8
 800690c:	200008f0 	.word	0x200008f0
 8006910:	20000d80 	.word	0x20000d80
 8006914:	200008ec 	.word	0x200008ec
 8006918:	20000dd4 	.word	0x20000dd4

0800691c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <vTaskInternalSetTimeOutState+0x24>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <vTaskInternalSetTimeOutState+0x28>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	605a      	str	r2, [r3, #4]
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	20000dd8 	.word	0x20000dd8
 8006944:	20000dc4 	.word	0x20000dc4

08006948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	613b      	str	r3, [r7, #16]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60fb      	str	r3, [r7, #12]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800698a:	f000 ff63 	bl	8007854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800698e:	4b1d      	ldr	r3, [pc, #116]	; (8006a04 <xTaskCheckForTimeOut+0xbc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069a6:	d102      	bne.n	80069ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	e023      	b.n	80069f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	4b15      	ldr	r3, [pc, #84]	; (8006a08 <xTaskCheckForTimeOut+0xc0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d007      	beq.n	80069ca <xTaskCheckForTimeOut+0x82>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d302      	bcc.n	80069ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069c4:	2301      	movs	r3, #1
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	e015      	b.n	80069f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d20b      	bcs.n	80069ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	1ad2      	subs	r2, r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff9b 	bl	800691c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	e004      	b.n	80069f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069f2:	2301      	movs	r3, #1
 80069f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069f6:	f000 ff5d 	bl	80078b4 <vPortExitCritical>

	return xReturn;
 80069fa:	69fb      	ldr	r3, [r7, #28]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3720      	adds	r7, #32
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20000dc4 	.word	0x20000dc4
 8006a08:	20000dd8 	.word	0x20000dd8

08006a0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <vTaskMissedYield+0x14>)
 8006a12:	2201      	movs	r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
}
 8006a16:	bf00      	nop
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	20000dd4 	.word	0x20000dd4

08006a24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a2c:	f000 f852 	bl	8006ad4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <prvIdleTask+0x28>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d9f9      	bls.n	8006a2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <prvIdleTask+0x2c>)
 8006a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a48:	e7f0      	b.n	8006a2c <prvIdleTask+0x8>
 8006a4a:	bf00      	nop
 8006a4c:	200008f0 	.word	0x200008f0
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	e00c      	b.n	8006a7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4a12      	ldr	r2, [pc, #72]	; (8006ab4 <prvInitialiseTaskLists+0x60>)
 8006a6c:	4413      	add	r3, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fc72 	bl	8005358 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3301      	adds	r3, #1
 8006a78:	607b      	str	r3, [r7, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b37      	cmp	r3, #55	; 0x37
 8006a7e:	d9ef      	bls.n	8006a60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a80:	480d      	ldr	r0, [pc, #52]	; (8006ab8 <prvInitialiseTaskLists+0x64>)
 8006a82:	f7fe fc69 	bl	8005358 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a86:	480d      	ldr	r0, [pc, #52]	; (8006abc <prvInitialiseTaskLists+0x68>)
 8006a88:	f7fe fc66 	bl	8005358 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a8c:	480c      	ldr	r0, [pc, #48]	; (8006ac0 <prvInitialiseTaskLists+0x6c>)
 8006a8e:	f7fe fc63 	bl	8005358 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a92:	480c      	ldr	r0, [pc, #48]	; (8006ac4 <prvInitialiseTaskLists+0x70>)
 8006a94:	f7fe fc60 	bl	8005358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a98:	480b      	ldr	r0, [pc, #44]	; (8006ac8 <prvInitialiseTaskLists+0x74>)
 8006a9a:	f7fe fc5d 	bl	8005358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <prvInitialiseTaskLists+0x78>)
 8006aa0:	4a05      	ldr	r2, [pc, #20]	; (8006ab8 <prvInitialiseTaskLists+0x64>)
 8006aa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <prvInitialiseTaskLists+0x7c>)
 8006aa6:	4a05      	ldr	r2, [pc, #20]	; (8006abc <prvInitialiseTaskLists+0x68>)
 8006aa8:	601a      	str	r2, [r3, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200008f0 	.word	0x200008f0
 8006ab8:	20000d50 	.word	0x20000d50
 8006abc:	20000d64 	.word	0x20000d64
 8006ac0:	20000d80 	.word	0x20000d80
 8006ac4:	20000d94 	.word	0x20000d94
 8006ac8:	20000dac 	.word	0x20000dac
 8006acc:	20000d78 	.word	0x20000d78
 8006ad0:	20000d7c 	.word	0x20000d7c

08006ad4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ada:	e019      	b.n	8006b10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006adc:	f000 feba 	bl	8007854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae0:	4b10      	ldr	r3, [pc, #64]	; (8006b24 <prvCheckTasksWaitingTermination+0x50>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe fcbd 	bl	800546c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006af2:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <prvCheckTasksWaitingTermination+0x54>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	4a0b      	ldr	r2, [pc, #44]	; (8006b28 <prvCheckTasksWaitingTermination+0x54>)
 8006afa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <prvCheckTasksWaitingTermination+0x58>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <prvCheckTasksWaitingTermination+0x58>)
 8006b04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b06:	f000 fed5 	bl	80078b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f810 	bl	8006b30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <prvCheckTasksWaitingTermination+0x58>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e1      	bne.n	8006adc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000d94 	.word	0x20000d94
 8006b28:	20000dc0 	.word	0x20000dc0
 8006b2c:	20000da8 	.word	0x20000da8

08006b30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d108      	bne.n	8006b54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	4618      	mov	r0, r3
 8006b48:	f001 f872 	bl	8007c30 <vPortFree>
				vPortFree( pxTCB );
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 f86f 	bl	8007c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b52:	e018      	b.n	8006b86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d103      	bne.n	8006b66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 f866 	bl	8007c30 <vPortFree>
	}
 8006b64:	e00f      	b.n	8006b86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d00a      	beq.n	8006b86 <prvDeleteTCB+0x56>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	60fb      	str	r3, [r7, #12]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <prvDeleteTCB+0x54>
	}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvResetNextTaskUnblockTime+0x38>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <prvResetNextTaskUnblockTime+0x3c>)
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ba8:	e008      	b.n	8006bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006baa:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <prvResetNextTaskUnblockTime+0x38>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4a04      	ldr	r2, [pc, #16]	; (8006bcc <prvResetNextTaskUnblockTime+0x3c>)
 8006bba:	6013      	str	r3, [r2, #0]
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	20000d78 	.word	0x20000d78
 8006bcc:	20000de0 	.word	0x20000de0

08006bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <xTaskGetSchedulerState+0x34>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bde:	2301      	movs	r3, #1
 8006be0:	607b      	str	r3, [r7, #4]
 8006be2:	e008      	b.n	8006bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006be4:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <xTaskGetSchedulerState+0x38>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bec:	2302      	movs	r3, #2
 8006bee:	607b      	str	r3, [r7, #4]
 8006bf0:	e001      	b.n	8006bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bf6:	687b      	ldr	r3, [r7, #4]
	}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	20000dcc 	.word	0x20000dcc
 8006c08:	20000de8 	.word	0x20000de8

08006c0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d056      	beq.n	8006cd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c22:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <xTaskPriorityDisinherit+0xd0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d00a      	beq.n	8006c42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	60fb      	str	r3, [r7, #12]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10a      	bne.n	8006c60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	60bb      	str	r3, [r7, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	e7fe      	b.n	8006c5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c64:	1e5a      	subs	r2, r3, #1
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d02c      	beq.n	8006cd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d128      	bne.n	8006cd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fbf2 	bl	800546c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <xTaskPriorityDisinherit+0xd4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d903      	bls.n	8006cb0 <xTaskPriorityDisinherit+0xa4>
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	4a0c      	ldr	r2, [pc, #48]	; (8006ce0 <xTaskPriorityDisinherit+0xd4>)
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4a09      	ldr	r2, [pc, #36]	; (8006ce4 <xTaskPriorityDisinherit+0xd8>)
 8006cbe:	441a      	add	r2, r3
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f7fe fb73 	bl	80053b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cd0:	697b      	ldr	r3, [r7, #20]
	}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200008ec 	.word	0x200008ec
 8006ce0:	20000dc8 	.word	0x20000dc8
 8006ce4:	200008f0 	.word	0x200008f0

08006ce8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cf2:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <prvAddCurrentTaskToDelayedList+0x90>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cf8:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe fbb4 	bl	800546c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d0a:	d10a      	bne.n	8006d22 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d12:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4819      	ldr	r0, [pc, #100]	; (8006d80 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d1c:	f7fe fb49 	bl	80053b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d20:	e026      	b.n	8006d70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4413      	add	r3, r2
 8006d28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d209      	bcs.n	8006d4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d3a:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f7fe fb57 	bl	80053fa <vListInsert>
}
 8006d4c:	e010      	b.n	8006d70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d4e:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f7fe fb4d 	bl	80053fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d202      	bcs.n	8006d70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d6a:	4a08      	ldr	r2, [pc, #32]	; (8006d8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	6013      	str	r3, [r2, #0]
}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000dc4 	.word	0x20000dc4
 8006d7c:	200008ec 	.word	0x200008ec
 8006d80:	20000dac 	.word	0x20000dac
 8006d84:	20000d7c 	.word	0x20000d7c
 8006d88:	20000d78 	.word	0x20000d78
 8006d8c:	20000de0 	.word	0x20000de0

08006d90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08a      	sub	sp, #40	; 0x28
 8006d94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d9a:	f000 fba1 	bl	80074e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d9e:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <xTimerCreateTimerTask+0x80>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d021      	beq.n	8006dea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006dae:	1d3a      	adds	r2, r7, #4
 8006db0:	f107 0108 	add.w	r1, r7, #8
 8006db4:	f107 030c 	add.w	r3, r7, #12
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe fab3 	bl	8005324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	9202      	str	r2, [sp, #8]
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	2302      	movs	r3, #2
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	460a      	mov	r2, r1
 8006dd0:	4910      	ldr	r1, [pc, #64]	; (8006e14 <xTimerCreateTimerTask+0x84>)
 8006dd2:	4811      	ldr	r0, [pc, #68]	; (8006e18 <xTimerCreateTimerTask+0x88>)
 8006dd4:	f7ff f860 	bl	8005e98 <xTaskCreateStatic>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <xTimerCreateTimerTask+0x8c>)
 8006ddc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006dde:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <xTimerCreateTimerTask+0x8c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006de6:	2301      	movs	r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	613b      	str	r3, [r7, #16]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e06:	697b      	ldr	r3, [r7, #20]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	20000e1c 	.word	0x20000e1c
 8006e14:	08007f7c 	.word	0x08007f7c
 8006e18:	08007089 	.word	0x08007089
 8006e1c:	20000e20 	.word	0x20000e20

08006e20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006e2e:	202c      	movs	r0, #44	; 0x2c
 8006e30:	f000 fe32 	bl	8007a98 <pvPortMalloc>
 8006e34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f843 	bl	8006ede <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006e58:	697b      	ldr	r3, [r7, #20]
	}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b08a      	sub	sp, #40	; 0x28
 8006e66:	af02      	add	r7, sp, #8
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	607a      	str	r2, [r7, #4]
 8006e6e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006e70:	232c      	movs	r3, #44	; 0x2c
 8006e72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2b2c      	cmp	r3, #44	; 0x2c
 8006e78:	d00a      	beq.n	8006e90 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	61bb      	str	r3, [r7, #24]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <xTimerCreateStatic+0x4c>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	617b      	str	r3, [r7, #20]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00d      	beq.n	8006ed4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f805 	bl	8006ede <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
	}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3720      	adds	r7, #32
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b086      	sub	sp, #24
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	617b      	str	r3, [r7, #20]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d01e      	beq.n	8006f4c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006f0e:	f000 fae7 	bl	80074e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	6a3a      	ldr	r2, [r7, #32]
 8006f28:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fa32 	bl	8005398 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f40:	f043 0304 	orr.w	r3, r3, #4
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006f4c:	bf00      	nop
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	623b      	str	r3, [r7, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f82:	4b1a      	ldr	r3, [pc, #104]	; (8006fec <xTimerGenericCommand+0x98>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d02a      	beq.n	8006fe0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	dc18      	bgt.n	8006fce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f9c:	f7ff fe18 	bl	8006bd0 <xTaskGetSchedulerState>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d109      	bne.n	8006fba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fa6:	4b11      	ldr	r3, [pc, #68]	; (8006fec <xTimerGenericCommand+0x98>)
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	f107 0110 	add.w	r1, r7, #16
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb2:	f7fe fb89 	bl	80056c8 <xQueueGenericSend>
 8006fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8006fb8:	e012      	b.n	8006fe0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <xTimerGenericCommand+0x98>)
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	f107 0110 	add.w	r1, r7, #16
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f7fe fb7f 	bl	80056c8 <xQueueGenericSend>
 8006fca:	6278      	str	r0, [r7, #36]	; 0x24
 8006fcc:	e008      	b.n	8006fe0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fce:	4b07      	ldr	r3, [pc, #28]	; (8006fec <xTimerGenericCommand+0x98>)
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	f107 0110 	add.w	r1, r7, #16
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	f7fe fc73 	bl	80058c4 <xQueueGenericSendFromISR>
 8006fde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3728      	adds	r7, #40	; 0x28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000e1c 	.word	0x20000e1c

08006ff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	4b22      	ldr	r3, [pc, #136]	; (8007084 <prvProcessExpiredTimer+0x94>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fa2f 	bl	800546c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d022      	beq.n	8007062 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	699a      	ldr	r2, [r3, #24]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	18d1      	adds	r1, r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	6978      	ldr	r0, [r7, #20]
 800702a:	f000 f8d1 	bl	80071d0 <prvInsertTimerInActiveList>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01f      	beq.n	8007074 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007034:	2300      	movs	r3, #0
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	2300      	movs	r3, #0
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	2100      	movs	r1, #0
 800703e:	6978      	ldr	r0, [r7, #20]
 8007040:	f7ff ff88 	bl	8006f54 <xTimerGenericCommand>
 8007044:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d113      	bne.n	8007074 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60fb      	str	r3, [r7, #12]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	b2da      	uxtb	r2, r3
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	6978      	ldr	r0, [r7, #20]
 800707a:	4798      	blx	r3
}
 800707c:	bf00      	nop
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000e14 	.word	0x20000e14

08007088 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007090:	f107 0308 	add.w	r3, r7, #8
 8007094:	4618      	mov	r0, r3
 8007096:	f000 f857 	bl	8007148 <prvGetNextExpireTime>
 800709a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4619      	mov	r1, r3
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f803 	bl	80070ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070a6:	f000 f8d5 	bl	8007254 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070aa:	e7f1      	b.n	8007090 <prvTimerTask+0x8>

080070ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070b6:	f7ff f9a9 	bl	800640c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070ba:	f107 0308 	add.w	r3, r7, #8
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f866 	bl	8007190 <prvSampleTimeNow>
 80070c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d130      	bne.n	800712e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <prvProcessTimerOrBlockTask+0x3c>
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d806      	bhi.n	80070e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80070da:	f7ff f9a5 	bl	8006428 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070de:	68f9      	ldr	r1, [r7, #12]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff ff85 	bl	8006ff0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070e6:	e024      	b.n	8007132 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <prvProcessTimerOrBlockTask+0x90>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <prvProcessTimerOrBlockTask+0x50>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e000      	b.n	80070fe <prvProcessTimerOrBlockTask+0x52>
 80070fc:	2300      	movs	r3, #0
 80070fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007100:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <prvProcessTimerOrBlockTask+0x94>)
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	4619      	mov	r1, r3
 800710e:	f7fe fe8f 	bl	8005e30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007112:	f7ff f989 	bl	8006428 <xTaskResumeAll>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800711c:	4b09      	ldr	r3, [pc, #36]	; (8007144 <prvProcessTimerOrBlockTask+0x98>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	f3bf 8f6f 	isb	sy
}
 800712c:	e001      	b.n	8007132 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800712e:	f7ff f97b 	bl	8006428 <xTaskResumeAll>
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000e18 	.word	0x20000e18
 8007140:	20000e1c 	.word	0x20000e1c
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007150:	4b0e      	ldr	r3, [pc, #56]	; (800718c <prvGetNextExpireTime+0x44>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <prvGetNextExpireTime+0x16>
 800715a:	2201      	movs	r2, #1
 800715c:	e000      	b.n	8007160 <prvGetNextExpireTime+0x18>
 800715e:	2200      	movs	r2, #0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d105      	bne.n	8007178 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800716c:	4b07      	ldr	r3, [pc, #28]	; (800718c <prvGetNextExpireTime+0x44>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	e001      	b.n	800717c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800717c:	68fb      	ldr	r3, [r7, #12]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000e14 	.word	0x20000e14

08007190 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007198:	f7ff f9e4 	bl	8006564 <xTaskGetTickCount>
 800719c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <prvSampleTimeNow+0x3c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d205      	bcs.n	80071b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071a8:	f000 f936 	bl	8007418 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	e002      	b.n	80071ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071ba:	4a04      	ldr	r2, [pc, #16]	; (80071cc <prvSampleTimeNow+0x3c>)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071c0:	68fb      	ldr	r3, [r7, #12]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000e24 	.word	0x20000e24

080071d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d812      	bhi.n	800721c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e01b      	b.n	8007242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800720a:	4b10      	ldr	r3, [pc, #64]	; (800724c <prvInsertTimerInActiveList+0x7c>)
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fe f8f0 	bl	80053fa <vListInsert>
 800721a:	e012      	b.n	8007242 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d206      	bcs.n	8007232 <prvInsertTimerInActiveList+0x62>
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d302      	bcc.n	8007232 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	e007      	b.n	8007242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007232:	4b07      	ldr	r3, [pc, #28]	; (8007250 <prvInsertTimerInActiveList+0x80>)
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3304      	adds	r3, #4
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7fe f8dc 	bl	80053fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007242:	697b      	ldr	r3, [r7, #20]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	20000e18 	.word	0x20000e18
 8007250:	20000e14 	.word	0x20000e14

08007254 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08e      	sub	sp, #56	; 0x38
 8007258:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800725a:	e0ca      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	da18      	bge.n	8007294 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	3304      	adds	r3, #4
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	61fb      	str	r3, [r7, #28]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728a:	6850      	ldr	r0, [r2, #4]
 800728c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728e:	6892      	ldr	r2, [r2, #8]
 8007290:	4611      	mov	r1, r2
 8007292:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f2c0 80ab 	blt.w	80073f2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	3304      	adds	r3, #4
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe f8dd 	bl	800546c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072b2:	463b      	mov	r3, r7
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ff6b 	bl	8007190 <prvSampleTimeNow>
 80072ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b09      	cmp	r3, #9
 80072c0:	f200 8096 	bhi.w	80073f0 <prvProcessReceivedCommands+0x19c>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <prvProcessReceivedCommands+0x78>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072f5 	.word	0x080072f5
 80072d4:	080072f5 	.word	0x080072f5
 80072d8:	08007369 	.word	0x08007369
 80072dc:	0800737d 	.word	0x0800737d
 80072e0:	080073c7 	.word	0x080073c7
 80072e4:	080072f5 	.word	0x080072f5
 80072e8:	080072f5 	.word	0x080072f5
 80072ec:	08007369 	.word	0x08007369
 80072f0:	0800737d 	.word	0x0800737d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072fa:	f043 0301 	orr.w	r3, r3, #1
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	18d1      	adds	r1, r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007314:	f7ff ff5c 	bl	80071d0 <prvInsertTimerInActiveList>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d069      	beq.n	80073f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007324:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d05e      	beq.n	80073f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	441a      	add	r2, r3
 800733c:	2300      	movs	r3, #0
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	2300      	movs	r3, #0
 8007342:	2100      	movs	r1, #0
 8007344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007346:	f7ff fe05 	bl	8006f54 <xTimerGenericCommand>
 800734a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d14f      	bne.n	80073f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	61bb      	str	r3, [r7, #24]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	b2da      	uxtb	r2, r3
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800737a:	e03a      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007382:	f043 0301 	orr.w	r3, r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	617b      	str	r3, [r7, #20]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	699a      	ldr	r2, [r3, #24]
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	18d1      	adds	r1, r2, r3
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c0:	f7ff ff06 	bl	80071d0 <prvInsertTimerInActiveList>
					break;
 80073c4:	e015      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80073d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d6:	f000 fc2b 	bl	8007c30 <vPortFree>
 80073da:	e00a      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e2:	f023 0301 	bic.w	r3, r3, #1
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073ee:	e000      	b.n	80073f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80073f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <prvProcessReceivedCommands+0x1c0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	1d39      	adds	r1, r7, #4
 80073f8:	2200      	movs	r2, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fafe 	bl	80059fc <xQueueReceive>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	f47f af2a 	bne.w	800725c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	3730      	adds	r7, #48	; 0x30
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20000e1c 	.word	0x20000e1c

08007418 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800741e:	e048      	b.n	80074b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007420:	4b2d      	ldr	r3, [pc, #180]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800742a:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3304      	adds	r3, #4
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe f817 	bl	800546c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02e      	beq.n	80074b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	4413      	add	r3, r2
 800745c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	d90e      	bls.n	8007484 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007472:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3304      	adds	r3, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4610      	mov	r0, r2
 800747e:	f7fd ffbc 	bl	80053fa <vListInsert>
 8007482:	e016      	b.n	80074b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007484:	2300      	movs	r3, #0
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	2300      	movs	r3, #0
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	2100      	movs	r1, #0
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fd60 	bl	8006f54 <xTimerGenericCommand>
 8007494:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	603b      	str	r3, [r7, #0]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074b2:	4b09      	ldr	r3, [pc, #36]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1b1      	bne.n	8007420 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074c2:	4b06      	ldr	r3, [pc, #24]	; (80074dc <prvSwitchTimerLists+0xc4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <prvSwitchTimerLists+0xc0>)
 80074c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074ca:	4a04      	ldr	r2, [pc, #16]	; (80074dc <prvSwitchTimerLists+0xc4>)
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	6013      	str	r3, [r2, #0]
}
 80074d0:	bf00      	nop
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000e14 	.word	0x20000e14
 80074dc:	20000e18 	.word	0x20000e18

080074e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074e6:	f000 f9b5 	bl	8007854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074ea:	4b15      	ldr	r3, [pc, #84]	; (8007540 <prvCheckForValidListAndQueue+0x60>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d120      	bne.n	8007534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074f2:	4814      	ldr	r0, [pc, #80]	; (8007544 <prvCheckForValidListAndQueue+0x64>)
 80074f4:	f7fd ff30 	bl	8005358 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074f8:	4813      	ldr	r0, [pc, #76]	; (8007548 <prvCheckForValidListAndQueue+0x68>)
 80074fa:	f7fd ff2d 	bl	8005358 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <prvCheckForValidListAndQueue+0x6c>)
 8007500:	4a10      	ldr	r2, [pc, #64]	; (8007544 <prvCheckForValidListAndQueue+0x64>)
 8007502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007504:	4b12      	ldr	r3, [pc, #72]	; (8007550 <prvCheckForValidListAndQueue+0x70>)
 8007506:	4a10      	ldr	r2, [pc, #64]	; (8007548 <prvCheckForValidListAndQueue+0x68>)
 8007508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800750a:	2300      	movs	r3, #0
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	4b11      	ldr	r3, [pc, #68]	; (8007554 <prvCheckForValidListAndQueue+0x74>)
 8007510:	4a11      	ldr	r2, [pc, #68]	; (8007558 <prvCheckForValidListAndQueue+0x78>)
 8007512:	2110      	movs	r1, #16
 8007514:	200a      	movs	r0, #10
 8007516:	f7fe f83b 	bl	8005590 <xQueueGenericCreateStatic>
 800751a:	4603      	mov	r3, r0
 800751c:	4a08      	ldr	r2, [pc, #32]	; (8007540 <prvCheckForValidListAndQueue+0x60>)
 800751e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007520:	4b07      	ldr	r3, [pc, #28]	; (8007540 <prvCheckForValidListAndQueue+0x60>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <prvCheckForValidListAndQueue+0x60>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	490b      	ldr	r1, [pc, #44]	; (800755c <prvCheckForValidListAndQueue+0x7c>)
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fc54 	bl	8005ddc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007534:	f000 f9be 	bl	80078b4 <vPortExitCritical>
}
 8007538:	bf00      	nop
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000e1c 	.word	0x20000e1c
 8007544:	20000dec 	.word	0x20000dec
 8007548:	20000e00 	.word	0x20000e00
 800754c:	20000e14 	.word	0x20000e14
 8007550:	20000e18 	.word	0x20000e18
 8007554:	20000ec8 	.word	0x20000ec8
 8007558:	20000e28 	.word	0x20000e28
 800755c:	08007f84 	.word	0x08007f84

08007560 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <xTimerIsTimerActive+0x28>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60fb      	str	r3, [r7, #12]
}
 8007584:	bf00      	nop
 8007586:	e7fe      	b.n	8007586 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8007588:	f000 f964 	bl	8007854 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d102      	bne.n	80075a0 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800759a:	2300      	movs	r3, #0
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	e001      	b.n	80075a4 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80075a4:	f000 f986 	bl	80078b4 <vPortExitCritical>

	return xReturn;
 80075a8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <pvTimerGetTimerID+0x28>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	60fb      	str	r3, [r7, #12]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80075da:	f000 f93b 	bl	8007854 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80075e4:	f000 f966 	bl	80078b4 <vPortExitCritical>

	return pvReturn;
 80075e8:	693b      	ldr	r3, [r7, #16]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3b04      	subs	r3, #4
 8007604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800760c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3b04      	subs	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f023 0201 	bic.w	r2, r3, #1
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3b04      	subs	r3, #4
 8007622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007624:	4a0c      	ldr	r2, [pc, #48]	; (8007658 <pxPortInitialiseStack+0x64>)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3b14      	subs	r3, #20
 800762e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3b04      	subs	r3, #4
 800763a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f06f 0202 	mvn.w	r2, #2
 8007642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3b20      	subs	r3, #32
 8007648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800764a:	68fb      	ldr	r3, [r7, #12]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	0800765d 	.word	0x0800765d

0800765c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007666:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <prvTaskExitError+0x54>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800766e:	d00a      	beq.n	8007686 <prvTaskExitError+0x2a>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	60fb      	str	r3, [r7, #12]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <prvTaskExitError+0x28>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60bb      	str	r3, [r7, #8]
}
 8007698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800769a:	bf00      	nop
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0fc      	beq.n	800769c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076a2:	bf00      	nop
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	2000000c 	.word	0x2000000c
	...

080076c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076c0:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <pxCurrentTCBConst2>)
 80076c2:	6819      	ldr	r1, [r3, #0]
 80076c4:	6808      	ldr	r0, [r1, #0]
 80076c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ca:	f380 8809 	msr	PSP, r0
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f380 8811 	msr	BASEPRI, r0
 80076da:	4770      	bx	lr
 80076dc:	f3af 8000 	nop.w

080076e0 <pxCurrentTCBConst2>:
 80076e0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop

080076e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076e8:	4808      	ldr	r0, [pc, #32]	; (800770c <prvPortStartFirstTask+0x24>)
 80076ea:	6800      	ldr	r0, [r0, #0]
 80076ec:	6800      	ldr	r0, [r0, #0]
 80076ee:	f380 8808 	msr	MSP, r0
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	f380 8814 	msr	CONTROL, r0
 80076fa:	b662      	cpsie	i
 80076fc:	b661      	cpsie	f
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	df00      	svc	0
 8007708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800770a:	bf00      	nop
 800770c:	e000ed08 	.word	0xe000ed08

08007710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007716:	4b46      	ldr	r3, [pc, #280]	; (8007830 <xPortStartScheduler+0x120>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a46      	ldr	r2, [pc, #280]	; (8007834 <xPortStartScheduler+0x124>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d10a      	bne.n	8007736 <xPortStartScheduler+0x26>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	613b      	str	r3, [r7, #16]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007736:	4b3e      	ldr	r3, [pc, #248]	; (8007830 <xPortStartScheduler+0x120>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a3f      	ldr	r2, [pc, #252]	; (8007838 <xPortStartScheduler+0x128>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d10a      	bne.n	8007756 <xPortStartScheduler+0x46>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	60fb      	str	r3, [r7, #12]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007756:	4b39      	ldr	r3, [pc, #228]	; (800783c <xPortStartScheduler+0x12c>)
 8007758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	b2db      	uxtb	r3, r3
 8007760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	22ff      	movs	r2, #255	; 0xff
 8007766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007778:	b2da      	uxtb	r2, r3
 800777a:	4b31      	ldr	r3, [pc, #196]	; (8007840 <xPortStartScheduler+0x130>)
 800777c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800777e:	4b31      	ldr	r3, [pc, #196]	; (8007844 <xPortStartScheduler+0x134>)
 8007780:	2207      	movs	r2, #7
 8007782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007784:	e009      	b.n	800779a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007786:	4b2f      	ldr	r3, [pc, #188]	; (8007844 <xPortStartScheduler+0x134>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3b01      	subs	r3, #1
 800778c:	4a2d      	ldr	r2, [pc, #180]	; (8007844 <xPortStartScheduler+0x134>)
 800778e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	b2db      	uxtb	r3, r3
 8007798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	b2db      	uxtb	r3, r3
 800779e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d0ef      	beq.n	8007786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077a6:	4b27      	ldr	r3, [pc, #156]	; (8007844 <xPortStartScheduler+0x134>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f1c3 0307 	rsb	r3, r3, #7
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d00a      	beq.n	80077c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	60bb      	str	r3, [r7, #8]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077c8:	4b1e      	ldr	r3, [pc, #120]	; (8007844 <xPortStartScheduler+0x134>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <xPortStartScheduler+0x134>)
 80077d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077d2:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <xPortStartScheduler+0x134>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077da:	4a1a      	ldr	r2, [pc, #104]	; (8007844 <xPortStartScheduler+0x134>)
 80077dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077e6:	4b18      	ldr	r3, [pc, #96]	; (8007848 <xPortStartScheduler+0x138>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a17      	ldr	r2, [pc, #92]	; (8007848 <xPortStartScheduler+0x138>)
 80077ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077f2:	4b15      	ldr	r3, [pc, #84]	; (8007848 <xPortStartScheduler+0x138>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a14      	ldr	r2, [pc, #80]	; (8007848 <xPortStartScheduler+0x138>)
 80077f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077fe:	f000 f8dd 	bl	80079bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007802:	4b12      	ldr	r3, [pc, #72]	; (800784c <xPortStartScheduler+0x13c>)
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007808:	f000 f8fc 	bl	8007a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800780c:	4b10      	ldr	r3, [pc, #64]	; (8007850 <xPortStartScheduler+0x140>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a0f      	ldr	r2, [pc, #60]	; (8007850 <xPortStartScheduler+0x140>)
 8007812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007818:	f7ff ff66 	bl	80076e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800781c:	f7fe ff6c 	bl	80066f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007820:	f7ff ff1c 	bl	800765c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	e000ed00 	.word	0xe000ed00
 8007834:	410fc271 	.word	0x410fc271
 8007838:	410fc270 	.word	0x410fc270
 800783c:	e000e400 	.word	0xe000e400
 8007840:	20000f18 	.word	0x20000f18
 8007844:	20000f1c 	.word	0x20000f1c
 8007848:	e000ed20 	.word	0xe000ed20
 800784c:	2000000c 	.word	0x2000000c
 8007850:	e000ef34 	.word	0xe000ef34

08007854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	607b      	str	r3, [r7, #4]
}
 800786c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <vPortEnterCritical+0x58>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3301      	adds	r3, #1
 8007874:	4a0d      	ldr	r2, [pc, #52]	; (80078ac <vPortEnterCritical+0x58>)
 8007876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <vPortEnterCritical+0x58>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d10f      	bne.n	80078a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007880:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <vPortEnterCritical+0x5c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	603b      	str	r3, [r7, #0]
}
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <vPortEnterCritical+0x4a>
	}
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	2000000c 	.word	0x2000000c
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <vPortExitCritical+0x50>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10a      	bne.n	80078d8 <vPortExitCritical+0x24>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	607b      	str	r3, [r7, #4]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <vPortExitCritical+0x50>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3b01      	subs	r3, #1
 80078de:	4a09      	ldr	r2, [pc, #36]	; (8007904 <vPortExitCritical+0x50>)
 80078e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078e2:	4b08      	ldr	r3, [pc, #32]	; (8007904 <vPortExitCritical+0x50>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d105      	bne.n	80078f6 <vPortExitCritical+0x42>
 80078ea:	2300      	movs	r3, #0
 80078ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f383 8811 	msr	BASEPRI, r3
}
 80078f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	2000000c 	.word	0x2000000c
	...

08007910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007910:	f3ef 8009 	mrs	r0, PSP
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	4b15      	ldr	r3, [pc, #84]	; (8007970 <pxCurrentTCBConst>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	f01e 0f10 	tst.w	lr, #16
 8007920:	bf08      	it	eq
 8007922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792a:	6010      	str	r0, [r2, #0]
 800792c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007934:	f380 8811 	msr	BASEPRI, r0
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f7fe feda 	bl	80066f8 <vTaskSwitchContext>
 8007944:	f04f 0000 	mov.w	r0, #0
 8007948:	f380 8811 	msr	BASEPRI, r0
 800794c:	bc09      	pop	{r0, r3}
 800794e:	6819      	ldr	r1, [r3, #0]
 8007950:	6808      	ldr	r0, [r1, #0]
 8007952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007956:	f01e 0f10 	tst.w	lr, #16
 800795a:	bf08      	it	eq
 800795c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007960:	f380 8809 	msr	PSP, r0
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	f3af 8000 	nop.w

08007970 <pxCurrentTCBConst>:
 8007970:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop

08007978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	607b      	str	r3, [r7, #4]
}
 8007990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007992:	f7fe fdf7 	bl	8006584 <xTaskIncrementTick>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800799c:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <xPortSysTickHandler+0x40>)
 800799e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	2300      	movs	r3, #0
 80079a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	f383 8811 	msr	BASEPRI, r3
}
 80079ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079c0:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <vPortSetupTimerInterrupt+0x34>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079c6:	4b0b      	ldr	r3, [pc, #44]	; (80079f4 <vPortSetupTimerInterrupt+0x38>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <vPortSetupTimerInterrupt+0x3c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a0a      	ldr	r2, [pc, #40]	; (80079fc <vPortSetupTimerInterrupt+0x40>)
 80079d2:	fba2 2303 	umull	r2, r3, r2, r3
 80079d6:	099b      	lsrs	r3, r3, #6
 80079d8:	4a09      	ldr	r2, [pc, #36]	; (8007a00 <vPortSetupTimerInterrupt+0x44>)
 80079da:	3b01      	subs	r3, #1
 80079dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079de:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <vPortSetupTimerInterrupt+0x34>)
 80079e0:	2207      	movs	r2, #7
 80079e2:	601a      	str	r2, [r3, #0]
}
 80079e4:	bf00      	nop
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	e000e010 	.word	0xe000e010
 80079f4:	e000e018 	.word	0xe000e018
 80079f8:	20000000 	.word	0x20000000
 80079fc:	10624dd3 	.word	0x10624dd3
 8007a00:	e000e014 	.word	0xe000e014

08007a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a14 <vPortEnableVFP+0x10>
 8007a08:	6801      	ldr	r1, [r0, #0]
 8007a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a0e:	6001      	str	r1, [r0, #0]
 8007a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a12:	bf00      	nop
 8007a14:	e000ed88 	.word	0xe000ed88

08007a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a1e:	f3ef 8305 	mrs	r3, IPSR
 8007a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b0f      	cmp	r3, #15
 8007a28:	d914      	bls.n	8007a54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a2a:	4a17      	ldr	r2, [pc, #92]	; (8007a88 <vPortValidateInterruptPriority+0x70>)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a34:	4b15      	ldr	r3, [pc, #84]	; (8007a8c <vPortValidateInterruptPriority+0x74>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	7afa      	ldrb	r2, [r7, #11]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d20a      	bcs.n	8007a54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	607b      	str	r3, [r7, #4]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a54:	4b0e      	ldr	r3, [pc, #56]	; (8007a90 <vPortValidateInterruptPriority+0x78>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a5c:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <vPortValidateInterruptPriority+0x7c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d90a      	bls.n	8007a7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	603b      	str	r3, [r7, #0]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <vPortValidateInterruptPriority+0x60>
	}
 8007a7a:	bf00      	nop
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	e000e3f0 	.word	0xe000e3f0
 8007a8c:	20000f18 	.word	0x20000f18
 8007a90:	e000ed0c 	.word	0xe000ed0c
 8007a94:	20000f1c 	.word	0x20000f1c

08007a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	; 0x28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007aa4:	f7fe fcb2 	bl	800640c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007aa8:	4b5b      	ldr	r3, [pc, #364]	; (8007c18 <pvPortMalloc+0x180>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ab0:	f000 f920 	bl	8007cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ab4:	4b59      	ldr	r3, [pc, #356]	; (8007c1c <pvPortMalloc+0x184>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f040 8093 	bne.w	8007be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01d      	beq.n	8007b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ac8:	2208      	movs	r2, #8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d014      	beq.n	8007b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f023 0307 	bic.w	r3, r3, #7
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00a      	beq.n	8007b04 <pvPortMalloc+0x6c>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	617b      	str	r3, [r7, #20]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d06e      	beq.n	8007be8 <pvPortMalloc+0x150>
 8007b0a:	4b45      	ldr	r3, [pc, #276]	; (8007c20 <pvPortMalloc+0x188>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d869      	bhi.n	8007be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b14:	4b43      	ldr	r3, [pc, #268]	; (8007c24 <pvPortMalloc+0x18c>)
 8007b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b18:	4b42      	ldr	r3, [pc, #264]	; (8007c24 <pvPortMalloc+0x18c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b1e:	e004      	b.n	8007b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d903      	bls.n	8007b3c <pvPortMalloc+0xa4>
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f1      	bne.n	8007b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b3c:	4b36      	ldr	r3, [pc, #216]	; (8007c18 <pvPortMalloc+0x180>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d050      	beq.n	8007be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2208      	movs	r2, #8
 8007b4c:	4413      	add	r3, r2
 8007b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	2308      	movs	r3, #8
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d91f      	bls.n	8007ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <pvPortMalloc+0xf8>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	613b      	str	r3, [r7, #16]
}
 8007b8c:	bf00      	nop
 8007b8e:	e7fe      	b.n	8007b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	1ad2      	subs	r2, r2, r3
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ba2:	69b8      	ldr	r0, [r7, #24]
 8007ba4:	f000 f908 	bl	8007db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ba8:	4b1d      	ldr	r3, [pc, #116]	; (8007c20 <pvPortMalloc+0x188>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <pvPortMalloc+0x188>)
 8007bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bb6:	4b1a      	ldr	r3, [pc, #104]	; (8007c20 <pvPortMalloc+0x188>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	4b1b      	ldr	r3, [pc, #108]	; (8007c28 <pvPortMalloc+0x190>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d203      	bcs.n	8007bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bc2:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <pvPortMalloc+0x188>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <pvPortMalloc+0x190>)
 8007bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <pvPortMalloc+0x184>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bde:	4b13      	ldr	r3, [pc, #76]	; (8007c2c <pvPortMalloc+0x194>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3301      	adds	r3, #1
 8007be4:	4a11      	ldr	r2, [pc, #68]	; (8007c2c <pvPortMalloc+0x194>)
 8007be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007be8:	f7fe fc1e 	bl	8006428 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <pvPortMalloc+0x174>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	60fb      	str	r3, [r7, #12]
}
 8007c08:	bf00      	nop
 8007c0a:	e7fe      	b.n	8007c0a <pvPortMalloc+0x172>
	return pvReturn;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3728      	adds	r7, #40	; 0x28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20001ae0 	.word	0x20001ae0
 8007c1c:	20001af4 	.word	0x20001af4
 8007c20:	20001ae4 	.word	0x20001ae4
 8007c24:	20001ad8 	.word	0x20001ad8
 8007c28:	20001ae8 	.word	0x20001ae8
 8007c2c:	20001aec 	.word	0x20001aec

08007c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d04d      	beq.n	8007cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c42:	2308      	movs	r3, #8
 8007c44:	425b      	negs	r3, r3
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	4413      	add	r3, r2
 8007c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	4b24      	ldr	r3, [pc, #144]	; (8007ce8 <vPortFree+0xb8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <vPortFree+0x44>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	60fb      	str	r3, [r7, #12]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <vPortFree+0x62>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	60bb      	str	r3, [r7, #8]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	4b14      	ldr	r3, [pc, #80]	; (8007ce8 <vPortFree+0xb8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d01e      	beq.n	8007cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d11a      	bne.n	8007cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	4b0e      	ldr	r3, [pc, #56]	; (8007ce8 <vPortFree+0xb8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	43db      	mvns	r3, r3
 8007cb2:	401a      	ands	r2, r3
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cb8:	f7fe fba8 	bl	800640c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	4b0a      	ldr	r3, [pc, #40]	; (8007cec <vPortFree+0xbc>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	4a09      	ldr	r2, [pc, #36]	; (8007cec <vPortFree+0xbc>)
 8007cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cca:	6938      	ldr	r0, [r7, #16]
 8007ccc:	f000 f874 	bl	8007db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cd0:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <vPortFree+0xc0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	4a06      	ldr	r2, [pc, #24]	; (8007cf0 <vPortFree+0xc0>)
 8007cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cda:	f7fe fba5 	bl	8006428 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cde:	bf00      	nop
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20001af4 	.word	0x20001af4
 8007cec:	20001ae4 	.word	0x20001ae4
 8007cf0:	20001af0 	.word	0x20001af0

08007cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d00:	4b27      	ldr	r3, [pc, #156]	; (8007da0 <prvHeapInit+0xac>)
 8007d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00c      	beq.n	8007d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3307      	adds	r3, #7
 8007d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0307 	bic.w	r3, r3, #7
 8007d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	4a1f      	ldr	r2, [pc, #124]	; (8007da0 <prvHeapInit+0xac>)
 8007d24:	4413      	add	r3, r2
 8007d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d2c:	4a1d      	ldr	r2, [pc, #116]	; (8007da4 <prvHeapInit+0xb0>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d32:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <prvHeapInit+0xb0>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d40:	2208      	movs	r2, #8
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 0307 	bic.w	r3, r3, #7
 8007d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4a15      	ldr	r2, [pc, #84]	; (8007da8 <prvHeapInit+0xb4>)
 8007d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d56:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <prvHeapInit+0xb4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d5e:	4b12      	ldr	r3, [pc, #72]	; (8007da8 <prvHeapInit+0xb4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d74:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <prvHeapInit+0xb4>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	4a0a      	ldr	r2, [pc, #40]	; (8007dac <prvHeapInit+0xb8>)
 8007d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	4a09      	ldr	r2, [pc, #36]	; (8007db0 <prvHeapInit+0xbc>)
 8007d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d8c:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <prvHeapInit+0xc0>)
 8007d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d92:	601a      	str	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	20000f20 	.word	0x20000f20
 8007da4:	20001ad8 	.word	0x20001ad8
 8007da8:	20001ae0 	.word	0x20001ae0
 8007dac:	20001ae8 	.word	0x20001ae8
 8007db0:	20001ae4 	.word	0x20001ae4
 8007db4:	20001af4 	.word	0x20001af4

08007db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007dc0:	4b28      	ldr	r3, [pc, #160]	; (8007e64 <prvInsertBlockIntoFreeList+0xac>)
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	e002      	b.n	8007dcc <prvInsertBlockIntoFreeList+0x14>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d8f7      	bhi.n	8007dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	4413      	add	r3, r2
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d108      	bne.n	8007dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	441a      	add	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	441a      	add	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d118      	bne.n	8007e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	4b15      	ldr	r3, [pc, #84]	; (8007e68 <prvInsertBlockIntoFreeList+0xb0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d00d      	beq.n	8007e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	441a      	add	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	e008      	b.n	8007e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e36:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <prvInsertBlockIntoFreeList+0xb0>)
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	e003      	b.n	8007e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d002      	beq.n	8007e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e56:	bf00      	nop
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20001ad8 	.word	0x20001ad8
 8007e68:	20001ae0 	.word	0x20001ae0

08007e6c <memset>:
 8007e6c:	4402      	add	r2, r0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d100      	bne.n	8007e76 <memset+0xa>
 8007e74:	4770      	bx	lr
 8007e76:	f803 1b01 	strb.w	r1, [r3], #1
 8007e7a:	e7f9      	b.n	8007e70 <memset+0x4>

08007e7c <__libc_init_array>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	4d0d      	ldr	r5, [pc, #52]	; (8007eb4 <__libc_init_array+0x38>)
 8007e80:	4c0d      	ldr	r4, [pc, #52]	; (8007eb8 <__libc_init_array+0x3c>)
 8007e82:	1b64      	subs	r4, r4, r5
 8007e84:	10a4      	asrs	r4, r4, #2
 8007e86:	2600      	movs	r6, #0
 8007e88:	42a6      	cmp	r6, r4
 8007e8a:	d109      	bne.n	8007ea0 <__libc_init_array+0x24>
 8007e8c:	4d0b      	ldr	r5, [pc, #44]	; (8007ebc <__libc_init_array+0x40>)
 8007e8e:	4c0c      	ldr	r4, [pc, #48]	; (8007ec0 <__libc_init_array+0x44>)
 8007e90:	f000 f826 	bl	8007ee0 <_init>
 8007e94:	1b64      	subs	r4, r4, r5
 8007e96:	10a4      	asrs	r4, r4, #2
 8007e98:	2600      	movs	r6, #0
 8007e9a:	42a6      	cmp	r6, r4
 8007e9c:	d105      	bne.n	8007eaa <__libc_init_array+0x2e>
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea4:	4798      	blx	r3
 8007ea6:	3601      	adds	r6, #1
 8007ea8:	e7ee      	b.n	8007e88 <__libc_init_array+0xc>
 8007eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eae:	4798      	blx	r3
 8007eb0:	3601      	adds	r6, #1
 8007eb2:	e7f2      	b.n	8007e9a <__libc_init_array+0x1e>
 8007eb4:	0800814c 	.word	0x0800814c
 8007eb8:	0800814c 	.word	0x0800814c
 8007ebc:	0800814c 	.word	0x0800814c
 8007ec0:	08008150 	.word	0x08008150

08007ec4 <memcpy>:
 8007ec4:	440a      	add	r2, r1
 8007ec6:	4291      	cmp	r1, r2
 8007ec8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ecc:	d100      	bne.n	8007ed0 <memcpy+0xc>
 8007ece:	4770      	bx	lr
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eda:	4291      	cmp	r1, r2
 8007edc:	d1f9      	bne.n	8007ed2 <memcpy+0xe>
 8007ede:	bd10      	pop	{r4, pc}

08007ee0 <_init>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr

08007eec <_fini>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	bf00      	nop
 8007ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef2:	bc08      	pop	{r3}
 8007ef4:	469e      	mov	lr, r3
 8007ef6:	4770      	bx	lr
