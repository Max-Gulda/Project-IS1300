
PRO1_Max_Gulda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a468  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800a5f8  0800a5f8  0001a5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a82c  0800a82c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a82c  0800a82c  0001a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a834  0800a834  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a834  0800a834  0001a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a838  0800a838  0001a838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800a83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c54  2000006c  0800a8a8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc0  0800a8a8  00021cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f977  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bd5  00000000  00000000  0003fa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb8  00000000  00000000  00044630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001615  00000000  00000000  000462e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b972  00000000  00000000  000478fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021c0b  00000000  00000000  0007326f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101978  00000000  00000000  00094e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d94  00000000  00000000  001967f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0019e588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5e0 	.word	0x0800a5e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a5e0 	.word	0x0800a5e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <init_TrafficInputs>:
#include "TrafficInputs.h"

static ButtonStates buttonState = {0};


void init_TrafficInputs(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	trafficInputs_Update();
 8000570:	f000 f802 	bl	8000578 <trafficInputs_Update>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <trafficInputs_Update>:

void trafficInputs_Update(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	buttonState.LeftCar 	= !HAL_GPIO_ReadPin(TL1_CAR_GPIO_Port, TL1_CAR_Pin);
 800057c:	2110      	movs	r1, #16
 800057e:	4827      	ldr	r0, [pc, #156]	; (800061c <trafficInputs_Update+0xa4>)
 8000580:	f002 fc2a 	bl	8002dd8 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	bf0c      	ite	eq
 800058a:	2301      	moveq	r3, #1
 800058c:	2300      	movne	r3, #0
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <trafficInputs_Update+0xa8>)
 8000592:	701a      	strb	r2, [r3, #0]
	buttonState.BottomCar 	= !HAL_GPIO_ReadPin(TL2_CAR_GPIO_Port, TL2_CAR_Pin);
 8000594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000598:	4822      	ldr	r0, [pc, #136]	; (8000624 <trafficInputs_Update+0xac>)
 800059a:	f002 fc1d 	bl	8002dd8 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	bf0c      	ite	eq
 80005a4:	2301      	moveq	r3, #1
 80005a6:	2300      	movne	r3, #0
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <trafficInputs_Update+0xa8>)
 80005ac:	705a      	strb	r2, [r3, #1]
	buttonState.RightCar 	= !HAL_GPIO_ReadPin(TL3_CAR_GPIO_Port, TL3_CAR_Pin);
 80005ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b2:	481c      	ldr	r0, [pc, #112]	; (8000624 <trafficInputs_Update+0xac>)
 80005b4:	f002 fc10 	bl	8002dd8 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	bf0c      	ite	eq
 80005be:	2301      	moveq	r3, #1
 80005c0:	2300      	movne	r3, #0
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <trafficInputs_Update+0xa8>)
 80005c6:	709a      	strb	r2, [r3, #2]
	buttonState.TopCar 		= !HAL_GPIO_ReadPin(TL4_CAR_GPIO_Port, TL4_CAR_Pin);
 80005c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f002 fc02 	bl	8002dd8 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bf0c      	ite	eq
 80005da:	2301      	moveq	r3, #1
 80005dc:	2300      	movne	r3, #0
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <trafficInputs_Update+0xa8>)
 80005e2:	70da      	strb	r2, [r3, #3]
	buttonState.LeftPed 	= !HAL_GPIO_ReadPin(PL1_Switch_GPIO_Port, PL1_Switch_Pin);
 80005e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f002 fbf4 	bl	8002dd8 <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	bf0c      	ite	eq
 80005f6:	2301      	moveq	r3, #1
 80005f8:	2300      	movne	r3, #0
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <trafficInputs_Update+0xa8>)
 80005fe:	711a      	strb	r2, [r3, #4]
	buttonState.TopPed 		= !HAL_GPIO_ReadPin(PL2_Switch_GPIO_Port, PL2_Switch_Pin);
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <trafficInputs_Update+0xac>)
 8000604:	f002 fbe8 	bl	8002dd8 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf0c      	ite	eq
 800060e:	2301      	moveq	r3, #1
 8000610:	2300      	movne	r3, #0
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b02      	ldr	r3, [pc, #8]	; (8000620 <trafficInputs_Update+0xa8>)
 8000616:	715a      	strb	r2, [r3, #5]
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	48000800 	.word	0x48000800
 8000620:	20000088 	.word	0x20000088
 8000624:	48000400 	.word	0x48000400

08000628 <getInputState>:

ButtonStates getInputState(){
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	return buttonState;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <getInputState+0x20>)
 8000634:	6810      	ldr	r0, [r2, #0]
 8000636:	6018      	str	r0, [r3, #0]
 8000638:	8892      	ldrh	r2, [r2, #4]
 800063a:	809a      	strh	r2, [r3, #4]
}
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	20000088 	.word	0x20000088

0800064c <initTrafficLogic>:
	bool delayUntilNextState;
	uint16_t delayTime;
}TrafficCrossingAction;
*/

void initTrafficLogic(CrossingVersion cross){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	turnOffAllLights();
 8000656:	f001 fe2d 	bl	80022b4 <turnOffAllLights>
	previousDelayExpireAt = UINT16_MAX;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <initTrafficLogic+0x48>)
 800065c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000660:	601a      	str	r2, [r3, #0]
	lightsActivated = false;
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <initTrafficLogic+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
	delaySent = false;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <initTrafficLogic+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
	crossing = cross;
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <initTrafficLogic+0x54>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	7013      	strb	r3, [r2, #0]
	state = V_Active;
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <initTrafficLogic+0x58>)
 8000676:	2202      	movs	r2, #2
 8000678:	701a      	strb	r2, [r3, #0]
	action.StartTimerForNextState = false;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <initTrafficLogic+0x5c>)
 800067c:	2200      	movs	r2, #0
 800067e:	709a      	strb	r2, [r3, #2]
	action.KeepStateFor = 0;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <initTrafficLogic+0x5c>)
 8000682:	2200      	movs	r2, #0
 8000684:	80da      	strh	r2, [r3, #6]
	action.AbortTimer = false;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <initTrafficLogic+0x5c>)
 8000688:	2200      	movs	r2, #0
 800068a:	711a      	strb	r2, [r3, #4]

}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000009c 	.word	0x2000009c
 8000698:	20000091 	.word	0x20000091
 800069c:	20000092 	.word	0x20000092
 80006a0:	2000008e 	.word	0x2000008e
 80006a4:	2000008f 	.word	0x2000008f
 80006a8:	20000094 	.word	0x20000094

080006ac <TrafficCrossing>:

void TrafficCrossing(ButtonStates _buttonState){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	463b      	mov	r3, r7
 80006b4:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(crossing){
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <TrafficCrossing+0x50>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d012      	beq.n	80006e6 <TrafficCrossing+0x3a>
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	dc16      	bgt.n	80006f2 <TrafficCrossing+0x46>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <TrafficCrossing+0x22>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d006      	beq.n	80006da <TrafficCrossing+0x2e>
			break;
		case PedTwoLane:
			TwoLanePed(_buttonState);
			break;
	}
}
 80006cc:	e011      	b.n	80006f2 <TrafficCrossing+0x46>
			OneLane(_buttonState);
 80006ce:	463b      	mov	r3, r7
 80006d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006d4:	f000 f842 	bl	800075c <OneLane>
			break;
 80006d8:	e00b      	b.n	80006f2 <TrafficCrossing+0x46>
			TwoLane(_buttonState);
 80006da:	463b      	mov	r3, r7
 80006dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e0:	f000 f94e 	bl	8000980 <TwoLane>
			break;
 80006e4:	e005      	b.n	80006f2 <TrafficCrossing+0x46>
			TwoLanePed(_buttonState);
 80006e6:	463b      	mov	r3, r7
 80006e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ec:	f000 fb4e 	bl	8000d8c <TwoLanePed>
			break;
 80006f0:	bf00      	nop
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000008e 	.word	0x2000008e

08000700 <getTrafficAction>:

TrafficCrossingAction* getTrafficAction(){
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	return &action;
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <getTrafficAction+0x10>)
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	20000094 	.word	0x20000094

08000714 <ActivateNextState>:

void ActivateNextState(){
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	state = nextState;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <ActivateNextState+0x30>)
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <ActivateNextState+0x34>)
 800071e:	701a      	strb	r2, [r3, #0]
	delaySent = false;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <ActivateNextState+0x38>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	lightsActivated = false;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <ActivateNextState+0x3c>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	previousDelayExpireAt = UINT16_MAX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <ActivateNextState+0x40>)
 800072e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000732:	601a      	str	r2, [r3, #0]
	action.SwitchImidiate = false;
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <ActivateNextState+0x44>)
 8000736:	2200      	movs	r2, #0
 8000738:	70da      	strb	r2, [r3, #3]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	20000090 	.word	0x20000090
 8000748:	2000008f 	.word	0x2000008f
 800074c:	20000092 	.word	0x20000092
 8000750:	20000091 	.word	0x20000091
 8000754:	2000009c 	.word	0x2000009c
 8000758:	20000094 	.word	0x20000094

0800075c <OneLane>:


void OneLane(ButtonStates button){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	463b      	mov	r3, r7
 8000764:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 8000768:	4b80      	ldr	r3, [pc, #512]	; (800096c <OneLane+0x210>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	2b04      	cmp	r3, #4
 8000770:	f200 80f8 	bhi.w	8000964 <OneLane+0x208>
 8000774:	a201      	add	r2, pc, #4	; (adr r2, 800077c <OneLane+0x20>)
 8000776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077a:	bf00      	nop
 800077c:	08000817 	.word	0x08000817
 8000780:	08000791 	.word	0x08000791
 8000784:	08000965 	.word	0x08000965
 8000788:	080008f9 	.word	0x080008f9
 800078c:	0800088b 	.word	0x0800088b
		case V_Active:
			nextState = Transition_To_H;
 8000790:	4b77      	ldr	r3, [pc, #476]	; (8000970 <OneLane+0x214>)
 8000792:	2204      	movs	r2, #4
 8000794:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000796:	4b77      	ldr	r3, [pc, #476]	; (8000974 <OneLane+0x218>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	f083 0301 	eor.w	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d01e      	beq.n	80007e2 <OneLane+0x86>
				ControlLight(YELLOW_BOTTOM, OFF);
 80007a4:	2100      	movs	r1, #0
 80007a6:	2007      	movs	r0, #7
 80007a8:	f001 fd30 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2004      	movs	r0, #4
 80007b0:	f001 fd2c 	bl	800220c <ControlLight>

				ControlLight(GREEN_BOTTOM, ON);
 80007b4:	2101      	movs	r1, #1
 80007b6:	2008      	movs	r0, #8
 80007b8:	f001 fd28 	bl	800220c <ControlLight>
				ControlLight(GREEN_TOP, ON);
 80007bc:	2101      	movs	r1, #1
 80007be:	2005      	movs	r0, #5
 80007c0:	f001 fd24 	bl	800220c <ControlLight>

				ControlLight(RED_TOP, OFF);
 80007c4:	2100      	movs	r1, #0
 80007c6:	2003      	movs	r0, #3
 80007c8:	f001 fd20 	bl	800220c <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2006      	movs	r0, #6
 80007d0:	f001 fd1c 	bl	800220c <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 80007d4:	2101      	movs	r1, #1
 80007d6:	2009      	movs	r0, #9
 80007d8:	f001 fd18 	bl	800220c <ControlLight>
				lightsActivated = true;
 80007dc:	4b65      	ldr	r3, [pc, #404]	; (8000974 <OneLane+0x218>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed && !delaySent){
 80007e2:	797b      	ldrb	r3, [r7, #5]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 80b6 	beq.w	8000956 <OneLane+0x1fa>
 80007ea:	4b63      	ldr	r3, [pc, #396]	; (8000978 <OneLane+0x21c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	f083 0301 	eor.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f000 80ae 	beq.w	8000956 <OneLane+0x1fa>
				action.KeepStateFor = PEDESTRIAN_DELAY;
 80007fa:	4b60      	ldr	r3, [pc, #384]	; (800097c <OneLane+0x220>)
 80007fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000800:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000802:	4b5e      	ldr	r3, [pc, #376]	; (800097c <OneLane+0x220>)
 8000804:	2201      	movs	r2, #1
 8000806:	709a      	strb	r2, [r3, #2]
				action.TopPedWaiting = true;
 8000808:	4b5c      	ldr	r3, [pc, #368]	; (800097c <OneLane+0x220>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
				delaySent = true;
 800080e:	4b5a      	ldr	r3, [pc, #360]	; (8000978 <OneLane+0x21c>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000814:	e09f      	b.n	8000956 <OneLane+0x1fa>
		case H_P_Active:
			nextState = Transition_To_V;
 8000816:	4b56      	ldr	r3, [pc, #344]	; (8000970 <OneLane+0x214>)
 8000818:	2205      	movs	r2, #5
 800081a:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 800081c:	4b55      	ldr	r3, [pc, #340]	; (8000974 <OneLane+0x218>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	f083 0301 	eor.w	r3, r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d01a      	beq.n	8000860 <OneLane+0x104>
				ControlLight(YELLOW_BOTTOM, OFF);
 800082a:	2100      	movs	r1, #0
 800082c:	2007      	movs	r0, #7
 800082e:	f001 fced 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000832:	2100      	movs	r1, #0
 8000834:	2004      	movs	r0, #4
 8000836:	f001 fce9 	bl	800220c <ControlLight>

				ControlLight(GREEN_PED_TOP, ON);
 800083a:	2101      	movs	r1, #1
 800083c:	200a      	movs	r0, #10
 800083e:	f001 fce5 	bl	800220c <ControlLight>
				ControlLight(RED_PED_TOP, OFF);
 8000842:	2100      	movs	r1, #0
 8000844:	2009      	movs	r0, #9
 8000846:	f001 fce1 	bl	800220c <ControlLight>

				ControlLight(RED_TOP, ON);
 800084a:	2101      	movs	r1, #1
 800084c:	2003      	movs	r0, #3
 800084e:	f001 fcdd 	bl	800220c <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 8000852:	2101      	movs	r1, #1
 8000854:	2006      	movs	r0, #6
 8000856:	f001 fcd9 	bl	800220c <ControlLight>
				lightsActivated = true;
 800085a:	4b46      	ldr	r3, [pc, #280]	; (8000974 <OneLane+0x218>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
			}
			action.TopPedWaiting = false;
 8000860:	4b46      	ldr	r3, [pc, #280]	; (800097c <OneLane+0x220>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
			if(!delaySent){
 8000866:	4b44      	ldr	r3, [pc, #272]	; (8000978 <OneLane+0x21c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	f083 0301 	eor.w	r3, r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d072      	beq.n	800095a <OneLane+0x1fe>
				action.KeepStateFor = WALKING_DELAY;
 8000874:	4b41      	ldr	r3, [pc, #260]	; (800097c <OneLane+0x220>)
 8000876:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800087a:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 800087c:	4b3f      	ldr	r3, [pc, #252]	; (800097c <OneLane+0x220>)
 800087e:	2201      	movs	r2, #1
 8000880:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000882:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <OneLane+0x21c>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000888:	e067      	b.n	800095a <OneLane+0x1fe>
		case Transition_To_V:
			nextState = V_Active;
 800088a:	4b39      	ldr	r3, [pc, #228]	; (8000970 <OneLane+0x214>)
 800088c:	2202      	movs	r2, #2
 800088e:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000890:	4b38      	ldr	r3, [pc, #224]	; (8000974 <OneLane+0x218>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	f083 0301 	eor.w	r3, r3, #1
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d01a      	beq.n	80008d4 <OneLane+0x178>
				ControlLight(GREEN_PED_TOP, OFF);
 800089e:	2100      	movs	r1, #0
 80008a0:	200a      	movs	r0, #10
 80008a2:	f001 fcb3 	bl	800220c <ControlLight>
				ControlLight(RED_PED_TOP, ON);
 80008a6:	2101      	movs	r1, #1
 80008a8:	2009      	movs	r0, #9
 80008aa:	f001 fcaf 	bl	800220c <ControlLight>

				ControlLight(RED_TOP, OFF);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2003      	movs	r0, #3
 80008b2:	f001 fcab 	bl	800220c <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2006      	movs	r0, #6
 80008ba:	f001 fca7 	bl	800220c <ControlLight>

				ControlLight(YELLOW_BOTTOM, ON);
 80008be:	2101      	movs	r1, #1
 80008c0:	2007      	movs	r0, #7
 80008c2:	f001 fca3 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 80008c6:	2101      	movs	r1, #1
 80008c8:	2004      	movs	r0, #4
 80008ca:	f001 fc9f 	bl	800220c <ControlLight>
				lightsActivated = true;
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <OneLane+0x218>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <OneLane+0x21c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d03d      	beq.n	800095e <OneLane+0x202>
				action.KeepStateFor = YELLOW_DELAY;
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <OneLane+0x220>)
 80008e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80008e8:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <OneLane+0x220>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <OneLane+0x21c>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80008f6:	e032      	b.n	800095e <OneLane+0x202>
		case Transition_To_H:
			nextState = H_P_Active;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <OneLane+0x214>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <OneLane+0x218>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f083 0301 	eor.w	r3, r3, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d012      	beq.n	8000932 <OneLane+0x1d6>
				ControlLight(YELLOW_BOTTOM, ON);
 800090c:	2101      	movs	r1, #1
 800090e:	2007      	movs	r0, #7
 8000910:	f001 fc7c 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000914:	2101      	movs	r1, #1
 8000916:	2004      	movs	r0, #4
 8000918:	f001 fc78 	bl	800220c <ControlLight>

				ControlLight(GREEN_BOTTOM, OFF);
 800091c:	2100      	movs	r1, #0
 800091e:	2008      	movs	r0, #8
 8000920:	f001 fc74 	bl	800220c <ControlLight>
				ControlLight(GREEN_TOP, OFF);
 8000924:	2100      	movs	r1, #0
 8000926:	2005      	movs	r0, #5
 8000928:	f001 fc70 	bl	800220c <ControlLight>
				lightsActivated = true;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <OneLane+0x218>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <OneLane+0x21c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	f083 0301 	eor.w	r3, r3, #1
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d010      	beq.n	8000962 <OneLane+0x206>
				action.KeepStateFor = YELLOW_DELAY;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <OneLane+0x220>)
 8000942:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000946:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <OneLane+0x220>)
 800094a:	2201      	movs	r2, #1
 800094c:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <OneLane+0x21c>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000954:	e005      	b.n	8000962 <OneLane+0x206>
			break;
 8000956:	bf00      	nop
 8000958:	e004      	b.n	8000964 <OneLane+0x208>
			break;
 800095a:	bf00      	nop
 800095c:	e002      	b.n	8000964 <OneLane+0x208>
			break;
 800095e:	bf00      	nop
 8000960:	e000      	b.n	8000964 <OneLane+0x208>
			break;
 8000962:	bf00      	nop
	}
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000008f 	.word	0x2000008f
 8000970:	20000090 	.word	0x20000090
 8000974:	20000091 	.word	0x20000091
 8000978:	20000092 	.word	0x20000092
 800097c:	20000094 	.word	0x20000094

08000980 <TwoLane>:


void TwoLane(ButtonStates button){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	463b      	mov	r3, r7
 8000988:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 800098c:	4bb1      	ldr	r3, [pc, #708]	; (8000c54 <TwoLane+0x2d4>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b05      	cmp	r3, #5
 8000992:	f200 81ee 	bhi.w	8000d72 <TwoLane+0x3f2>
 8000996:	a201      	add	r2, pc, #4	; (adr r2, 800099c <TwoLane+0x1c>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	08000b05 	.word	0x08000b05
 80009a0:	08000d73 	.word	0x08000d73
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	08000d73 	.word	0x08000d73
 80009ac:	08000c69 	.word	0x08000c69
 80009b0:	08000ce7 	.word	0x08000ce7
		case V_Active:
			nextState = Transition_To_H;
 80009b4:	4ba8      	ldr	r3, [pc, #672]	; (8000c58 <TwoLane+0x2d8>)
 80009b6:	2204      	movs	r2, #4
 80009b8:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 80009ba:	4ba8      	ldr	r3, [pc, #672]	; (8000c5c <TwoLane+0x2dc>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	f083 0301 	eor.w	r3, r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d022      	beq.n	8000a0e <TwoLane+0x8e>
				ControlLight(GREEN_BOTTOM, ON);
 80009c8:	2101      	movs	r1, #1
 80009ca:	2008      	movs	r0, #8
 80009cc:	f001 fc1e 	bl	800220c <ControlLight>
				ControlLight(GREEN_TOP, ON);
 80009d0:	2101      	movs	r1, #1
 80009d2:	2005      	movs	r0, #5
 80009d4:	f001 fc1a 	bl	800220c <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 80009d8:	2100      	movs	r1, #0
 80009da:	2007      	movs	r0, #7
 80009dc:	f001 fc16 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 80009e0:	2100      	movs	r1, #0
 80009e2:	2004      	movs	r0, #4
 80009e4:	f001 fc12 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2001      	movs	r0, #1
 80009ec:	f001 fc0e 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 80009f0:	2100      	movs	r1, #0
 80009f2:	200d      	movs	r0, #13
 80009f4:	f001 fc0a 	bl	800220c <ControlLight>

				ControlLight(RED_LEFT, ON);
 80009f8:	2101      	movs	r1, #1
 80009fa:	200c      	movs	r0, #12
 80009fc:	f001 fc06 	bl	800220c <ControlLight>
				ControlLight(RED_RIGHT, ON);
 8000a00:	2101      	movs	r1, #1
 8000a02:	2000      	movs	r0, #0
 8000a04:	f001 fc02 	bl	800220c <ControlLight>
				lightsActivated = true;
 8000a08:	4b94      	ldr	r3, [pc, #592]	; (8000c5c <TwoLane+0x2dc>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
			}



			if(!NoCarH(button) && NoCarV(button)){
 8000a0e:	463b      	mov	r3, r7
 8000a10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a14:	f000 fdd1 	bl	80015ba <NoCarH>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f083 0301 	eor.w	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00b      	beq.n	8000a3c <TwoLane+0xbc>
 8000a24:	463b      	mov	r3, r7
 8000a26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a2a:	f000 fdab 	bl	8001584 <NoCarV>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d003      	beq.n	8000a3c <TwoLane+0xbc>
				action.SwitchImidiate = true;
 8000a34:	4b8a      	ldr	r3, [pc, #552]	; (8000c60 <TwoLane+0x2e0>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	70da      	strb	r2, [r3, #3]
 8000a3a:	e062      	b.n	8000b02 <TwoLane+0x182>
			} else if (!NoCarH(button) && !NoCarV(button) && !delaySent) {
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a42:	f000 fdba 	bl	80015ba <NoCarH>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f083 0301 	eor.w	r3, r3, #1
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d01c      	beq.n	8000a8c <TwoLane+0x10c>
 8000a52:	463b      	mov	r3, r7
 8000a54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a58:	f000 fd94 	bl	8001584 <NoCarV>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f083 0301 	eor.w	r3, r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d011      	beq.n	8000a8c <TwoLane+0x10c>
 8000a68:	4b7e      	ldr	r3, [pc, #504]	; (8000c64 <TwoLane+0x2e4>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	f083 0301 	eor.w	r3, r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00a      	beq.n	8000a8c <TwoLane+0x10c>
				action.KeepStateFor = RED_DELAY_MAX;
 8000a76:	4b7a      	ldr	r3, [pc, #488]	; (8000c60 <TwoLane+0x2e0>)
 8000a78:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a7c:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000a7e:	4b78      	ldr	r3, [pc, #480]	; (8000c60 <TwoLane+0x2e0>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000a84:	4b77      	ldr	r3, [pc, #476]	; (8000c64 <TwoLane+0x2e4>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e03a      	b.n	8000b02 <TwoLane+0x182>

			} else if (NoCarH(button) && NoCarV(button) && !delaySent){
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a92:	f000 fd92 	bl	80015ba <NoCarH>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d019      	beq.n	8000ad0 <TwoLane+0x150>
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000aa2:	f000 fd6f 	bl	8001584 <NoCarV>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d011      	beq.n	8000ad0 <TwoLane+0x150>
 8000aac:	4b6d      	ldr	r3, [pc, #436]	; (8000c64 <TwoLane+0x2e4>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00a      	beq.n	8000ad0 <TwoLane+0x150>
				action.KeepStateFor = GREEN_DELAY;
 8000aba:	4b69      	ldr	r3, [pc, #420]	; (8000c60 <TwoLane+0x2e0>)
 8000abc:	f241 7270 	movw	r2, #6000	; 0x1770
 8000ac0:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000ac2:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <TwoLane+0x2e0>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000ac8:	4b66      	ldr	r3, [pc, #408]	; (8000c64 <TwoLane+0x2e4>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e018      	b.n	8000b02 <TwoLane+0x182>
			} else if (NoCarH(button) && !NoCarV(button)){
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ad6:	f000 fd70 	bl	80015ba <NoCarH>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f000 8141 	beq.w	8000d64 <TwoLane+0x3e4>
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ae8:	f000 fd4c 	bl	8001584 <NoCarV>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f083 0301 	eor.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 8135 	beq.w	8000d64 <TwoLane+0x3e4>
				action.AbortTimer = true;
 8000afa:	4b59      	ldr	r3, [pc, #356]	; (8000c60 <TwoLane+0x2e0>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	711a      	strb	r2, [r3, #4]
			}

			break;
 8000b00:	e130      	b.n	8000d64 <TwoLane+0x3e4>
 8000b02:	e12f      	b.n	8000d64 <TwoLane+0x3e4>
		case H_Active:

			nextState = Transition_To_V;
 8000b04:	4b54      	ldr	r3, [pc, #336]	; (8000c58 <TwoLane+0x2d8>)
 8000b06:	2205      	movs	r2, #5
 8000b08:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000b0a:	4b54      	ldr	r3, [pc, #336]	; (8000c5c <TwoLane+0x2dc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f083 0301 	eor.w	r3, r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d022      	beq.n	8000b5e <TwoLane+0x1de>
				ControlLight(GREEN_RIGHT, ON);
 8000b18:	2101      	movs	r1, #1
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f001 fb76 	bl	800220c <ControlLight>
				ControlLight(GREEN_LEFT, ON);
 8000b20:	2101      	movs	r1, #1
 8000b22:	200e      	movs	r0, #14
 8000b24:	f001 fb72 	bl	800220c <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	f001 fb6e 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2004      	movs	r0, #4
 8000b34:	f001 fb6a 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f001 fb66 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000b40:	2100      	movs	r1, #0
 8000b42:	200d      	movs	r0, #13
 8000b44:	f001 fb62 	bl	800220c <ControlLight>

				ControlLight(RED_TOP, ON);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f001 fb5e 	bl	800220c <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 8000b50:	2101      	movs	r1, #1
 8000b52:	2006      	movs	r0, #6
 8000b54:	f001 fb5a 	bl	800220c <ControlLight>
				lightsActivated = true;
 8000b58:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <TwoLane+0x2dc>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
			}

			if(NoCarH(button) && !NoCarV(button)){
 8000b5e:	463b      	mov	r3, r7
 8000b60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b64:	f000 fd29 	bl	80015ba <NoCarH>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00e      	beq.n	8000b8c <TwoLane+0x20c>
 8000b6e:	463b      	mov	r3, r7
 8000b70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b74:	f000 fd06 	bl	8001584 <NoCarV>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f083 0301 	eor.w	r3, r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <TwoLane+0x20c>
				action.SwitchImidiate = true;
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <TwoLane+0x2e0>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	70da      	strb	r2, [r3, #3]
 8000b8a:	e062      	b.n	8000c52 <TwoLane+0x2d2>
			} else if (!NoCarH(button) && !NoCarV(button) && !delaySent) {
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b92:	f000 fd12 	bl	80015ba <NoCarH>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f083 0301 	eor.w	r3, r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d01c      	beq.n	8000bdc <TwoLane+0x25c>
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ba8:	f000 fcec 	bl	8001584 <NoCarV>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f083 0301 	eor.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d011      	beq.n	8000bdc <TwoLane+0x25c>
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <TwoLane+0x2e4>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f083 0301 	eor.w	r3, r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00a      	beq.n	8000bdc <TwoLane+0x25c>
				action.KeepStateFor = RED_DELAY_MAX;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <TwoLane+0x2e0>)
 8000bc8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bcc:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <TwoLane+0x2e0>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <TwoLane+0x2e4>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
 8000bda:	e03a      	b.n	8000c52 <TwoLane+0x2d2>

			} else if (NoCarH(button) && NoCarV(button) && !delaySent){
 8000bdc:	463b      	mov	r3, r7
 8000bde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000be2:	f000 fcea 	bl	80015ba <NoCarH>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d019      	beq.n	8000c20 <TwoLane+0x2a0>
 8000bec:	463b      	mov	r3, r7
 8000bee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bf2:	f000 fcc7 	bl	8001584 <NoCarV>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d011      	beq.n	8000c20 <TwoLane+0x2a0>
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <TwoLane+0x2e4>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	f083 0301 	eor.w	r3, r3, #1
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00a      	beq.n	8000c20 <TwoLane+0x2a0>
				action.KeepStateFor = GREEN_DELAY;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <TwoLane+0x2e0>)
 8000c0c:	f241 7270 	movw	r2, #6000	; 0x1770
 8000c10:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <TwoLane+0x2e0>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <TwoLane+0x2e4>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e018      	b.n	8000c52 <TwoLane+0x2d2>
			} else if (!NoCarH(button) && NoCarV(button)){
 8000c20:	463b      	mov	r3, r7
 8000c22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c26:	f000 fcc8 	bl	80015ba <NoCarH>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f083 0301 	eor.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 8098 	beq.w	8000d68 <TwoLane+0x3e8>
 8000c38:	463b      	mov	r3, r7
 8000c3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c3e:	f000 fca1 	bl	8001584 <NoCarV>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 808f 	beq.w	8000d68 <TwoLane+0x3e8>
				action.AbortTimer = true;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <TwoLane+0x2e0>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	711a      	strb	r2, [r3, #4]
			}

			break;
 8000c50:	e08a      	b.n	8000d68 <TwoLane+0x3e8>
 8000c52:	e089      	b.n	8000d68 <TwoLane+0x3e8>
 8000c54:	2000008f 	.word	0x2000008f
 8000c58:	20000090 	.word	0x20000090
 8000c5c:	20000091 	.word	0x20000091
 8000c60:	20000094 	.word	0x20000094
 8000c64:	20000092 	.word	0x20000092
		case Transition_To_H:

			nextState = H_Active;
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <TwoLane+0x3fc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000c6e:	4b44      	ldr	r3, [pc, #272]	; (8000d80 <TwoLane+0x400>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	f083 0301 	eor.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d022      	beq.n	8000cc2 <TwoLane+0x342>
				ControlLight(YELLOW_BOTTOM, ON);
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f001 fac4 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000c84:	2101      	movs	r1, #1
 8000c86:	2004      	movs	r0, #4
 8000c88:	f001 fac0 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f001 fabc 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 8000c94:	2101      	movs	r1, #1
 8000c96:	200d      	movs	r0, #13
 8000c98:	f001 fab8 	bl	800220c <ControlLight>

				ControlLight(GREEN_TOP, OFF);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2005      	movs	r0, #5
 8000ca0:	f001 fab4 	bl	800220c <ControlLight>
				ControlLight(GREEN_BOTTOM, OFF);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2008      	movs	r0, #8
 8000ca8:	f001 fab0 	bl	800220c <ControlLight>

				ControlLight(RED_RIGHT, OFF);
 8000cac:	2100      	movs	r1, #0
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 faac 	bl	800220c <ControlLight>
				ControlLight(RED_LEFT, OFF);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	200c      	movs	r0, #12
 8000cb8:	f001 faa8 	bl	800220c <ControlLight>
				lightsActivated = true;
 8000cbc:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <TwoLane+0x400>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <TwoLane+0x404>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d04d      	beq.n	8000d6c <TwoLane+0x3ec>
				action.KeepStateFor = YELLOW_DELAY;
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <TwoLane+0x408>)
 8000cd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000cd6:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <TwoLane+0x408>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000cde:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <TwoLane+0x404>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000ce4:	e042      	b.n	8000d6c <TwoLane+0x3ec>
		case Transition_To_V:

			nextState = V_Active;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <TwoLane+0x3fc>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <TwoLane+0x400>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	f083 0301 	eor.w	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d022      	beq.n	8000d40 <TwoLane+0x3c0>
				ControlLight(YELLOW_BOTTOM, ON);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	2007      	movs	r0, #7
 8000cfe:	f001 fa85 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000d02:	2101      	movs	r1, #1
 8000d04:	2004      	movs	r0, #4
 8000d06:	f001 fa81 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f001 fa7d 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 8000d12:	2101      	movs	r1, #1
 8000d14:	200d      	movs	r0, #13
 8000d16:	f001 fa79 	bl	800220c <ControlLight>

				ControlLight(GREEN_RIGHT, OFF);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f001 fa75 	bl	800220c <ControlLight>
				ControlLight(GREEN_LEFT, OFF);
 8000d22:	2100      	movs	r1, #0
 8000d24:	200e      	movs	r0, #14
 8000d26:	f001 fa71 	bl	800220c <ControlLight>

				ControlLight(RED_TOP, OFF);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f001 fa6d 	bl	800220c <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 8000d32:	2100      	movs	r1, #0
 8000d34:	2006      	movs	r0, #6
 8000d36:	f001 fa69 	bl	800220c <ControlLight>
				lightsActivated = true;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <TwoLane+0x400>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <TwoLane+0x404>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	f083 0301 	eor.w	r3, r3, #1
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d010      	beq.n	8000d70 <TwoLane+0x3f0>
				action.KeepStateFor = YELLOW_DELAY;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <TwoLane+0x408>)
 8000d50:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d54:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <TwoLane+0x408>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <TwoLane+0x404>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000d62:	e005      	b.n	8000d70 <TwoLane+0x3f0>
			break;
 8000d64:	bf00      	nop
 8000d66:	e004      	b.n	8000d72 <TwoLane+0x3f2>
			break;
 8000d68:	bf00      	nop
 8000d6a:	e002      	b.n	8000d72 <TwoLane+0x3f2>
			break;
 8000d6c:	bf00      	nop
 8000d6e:	e000      	b.n	8000d72 <TwoLane+0x3f2>
			break;
 8000d70:	bf00      	nop

	}
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000090 	.word	0x20000090
 8000d80:	20000091 	.word	0x20000091
 8000d84:	20000092 	.word	0x20000092
 8000d88:	20000094 	.word	0x20000094

08000d8c <TwoLanePed>:

void TwoLanePed(ButtonStates button){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	463b      	mov	r3, r7
 8000d94:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 8000d98:	4bba      	ldr	r3, [pc, #744]	; (8001084 <TwoLanePed+0x2f8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b05      	cmp	r3, #5
 8000d9e:	f200 83e5 	bhi.w	800156c <TwoLanePed+0x7e0>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <TwoLanePed+0x1c>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	0800109d 	.word	0x0800109d
 8000dac:	08001283 	.word	0x08001283
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000f95 	.word	0x08000f95
 8000db8:	08001389 	.word	0x08001389
 8000dbc:	08001471 	.word	0x08001471
		case V_Active:
			nextState = Transition_To_H;
 8000dc0:	4bb1      	ldr	r3, [pc, #708]	; (8001088 <TwoLanePed+0x2fc>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000dc6:	4bb1      	ldr	r3, [pc, #708]	; (800108c <TwoLanePed+0x300>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	f083 0301 	eor.w	r3, r3, #1
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d032      	beq.n	8000e3a <TwoLanePed+0xae>
				ControlLight(GREEN_BOTTOM, ON);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2008      	movs	r0, #8
 8000dd8:	f001 fa18 	bl	800220c <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2005      	movs	r0, #5
 8000de0:	f001 fa14 	bl	800220c <ControlLight>

				ControlLight(RED_LEFT, ON);
 8000de4:	2101      	movs	r1, #1
 8000de6:	200c      	movs	r0, #12
 8000de8:	f001 fa10 	bl	800220c <ControlLight>
				ControlLight(RED_RIGHT, ON);
 8000dec:	2101      	movs	r1, #1
 8000dee:	2000      	movs	r0, #0
 8000df0:	f001 fa0c 	bl	800220c <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 8000df4:	2100      	movs	r1, #0
 8000df6:	200a      	movs	r0, #10
 8000df8:	f001 fa08 	bl	800220c <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2010      	movs	r0, #16
 8000e00:	f001 fa04 	bl	800220c <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 8000e04:	2101      	movs	r1, #1
 8000e06:	2009      	movs	r0, #9
 8000e08:	f001 fa00 	bl	800220c <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	200f      	movs	r0, #15
 8000e10:	f001 f9fc 	bl	800220c <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000e14:	2100      	movs	r1, #0
 8000e16:	2007      	movs	r0, #7
 8000e18:	f001 f9f8 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2004      	movs	r0, #4
 8000e20:	f001 f9f4 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000e24:	2100      	movs	r1, #0
 8000e26:	200d      	movs	r0, #13
 8000e28:	f001 f9f0 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f001 f9ec 	bl	800220c <ControlLight>

				lightsActivated = true;
 8000e34:	4b95      	ldr	r3, [pc, #596]	; (800108c <TwoLanePed+0x300>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
			}

			if(button.LeftPed){
 8000e3a:	793b      	ldrb	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <TwoLanePed+0xc2>
				action.SwitchImidiate = true;
 8000e40:	4b93      	ldr	r3, [pc, #588]	; (8001090 <TwoLanePed+0x304>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	70da      	strb	r2, [r3, #3]
				nextState = V_P_Active;
 8000e46:	4b90      	ldr	r3, [pc, #576]	; (8001088 <TwoLanePed+0x2fc>)
 8000e48:	2203      	movs	r2, #3
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e018      	b.n	8000e80 <TwoLanePed+0xf4>
			} else if(!NoCarH(button) && NoCarV(button)) {
 8000e4e:	463b      	mov	r3, r7
 8000e50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e54:	f000 fbb1 	bl	80015ba <NoCarH>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f083 0301 	eor.w	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00d      	beq.n	8000e80 <TwoLanePed+0xf4>
 8000e64:	463b      	mov	r3, r7
 8000e66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e6a:	f000 fb8b 	bl	8001584 <NoCarV>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <TwoLanePed+0xf4>
				action.SwitchImidiate = true;
 8000e74:	4b86      	ldr	r3, [pc, #536]	; (8001090 <TwoLanePed+0x304>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	70da      	strb	r2, [r3, #3]
				nextState = Transition_To_H;
 8000e7a:	4b83      	ldr	r3, [pc, #524]	; (8001088 <TwoLanePed+0x2fc>)
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	701a      	strb	r2, [r3, #0]
			}
			if (!NoCarH(button) && !NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + RED_DELAY_MAX)) {
 8000e80:	463b      	mov	r3, r7
 8000e82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e86:	f000 fb98 	bl	80015ba <NoCarH>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d024      	beq.n	8000ee0 <TwoLanePed+0x154>
 8000e96:	463b      	mov	r3, r7
 8000e98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e9c:	f000 fb72 	bl	8001584 <NoCarV>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f083 0301 	eor.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d019      	beq.n	8000ee0 <TwoLanePed+0x154>
 8000eac:	f001 fb04 	bl	80024b8 <HAL_GetTick>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000eb6:	3310      	adds	r3, #16
 8000eb8:	4a76      	ldr	r2, [pc, #472]	; (8001094 <TwoLanePed+0x308>)
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d20f      	bcs.n	8000ee0 <TwoLanePed+0x154>
				action.KeepStateFor = RED_DELAY_MAX;
 8000ec0:	4b73      	ldr	r3, [pc, #460]	; (8001090 <TwoLanePed+0x304>)
 8000ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ec6:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000ec8:	4b71      	ldr	r3, [pc, #452]	; (8001090 <TwoLanePed+0x304>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + RED_DELAY_MAX;
 8000ece:	f001 faf3 	bl	80024b8 <HAL_GetTick>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000ed8:	3310      	adds	r3, #16
 8000eda:	4a6e      	ldr	r2, [pc, #440]	; (8001094 <TwoLanePed+0x308>)
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e043      	b.n	8000f68 <TwoLanePed+0x1dc>
			} else if (NoCarH(button) && NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + GREEN_DELAY)) {
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ee6:	f000 fb68 	bl	80015ba <NoCarH>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d021      	beq.n	8000f34 <TwoLanePed+0x1a8>
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ef6:	f000 fb45 	bl	8001584 <NoCarV>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d019      	beq.n	8000f34 <TwoLanePed+0x1a8>
 8000f00:	f001 fada 	bl	80024b8 <HAL_GetTick>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	4a61      	ldr	r2, [pc, #388]	; (8001094 <TwoLanePed+0x308>)
 8000f0e:	6812      	ldr	r2, [r2, #0]
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d20f      	bcs.n	8000f34 <TwoLanePed+0x1a8>
				action.KeepStateFor = GREEN_DELAY;
 8000f14:	4b5e      	ldr	r3, [pc, #376]	; (8001090 <TwoLanePed+0x304>)
 8000f16:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f1a:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000f1c:	4b5c      	ldr	r3, [pc, #368]	; (8001090 <TwoLanePed+0x304>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + GREEN_DELAY;
 8000f22:	f001 fac9 	bl	80024b8 <HAL_GetTick>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000f2c:	3310      	adds	r3, #16
 8000f2e:	4a59      	ldr	r2, [pc, #356]	; (8001094 <TwoLanePed+0x308>)
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e019      	b.n	8000f68 <TwoLanePed+0x1dc>
			} else if (NoCarH(button) && !NoCarV(button)){
 8000f34:	463b      	mov	r3, r7
 8000f36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f3a:	f000 fb3e 	bl	80015ba <NoCarH>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d011      	beq.n	8000f68 <TwoLanePed+0x1dc>
 8000f44:	463b      	mov	r3, r7
 8000f46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f4a:	f000 fb1b 	bl	8001584 <NoCarV>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f083 0301 	eor.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <TwoLanePed+0x1dc>
				action.AbortTimer = true;
 8000f5a:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <TwoLanePed+0x304>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	711a      	strb	r2, [r3, #4]
				previousDelayExpireAt = UINT16_MAX;
 8000f60:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <TwoLanePed+0x308>)
 8000f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f66:	601a      	str	r2, [r3, #0]
			}

			if(button.TopPed){
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 82f3 	beq.w	8001556 <TwoLanePed+0x7ca>
				action.TopPedWaiting = true;
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <TwoLanePed+0x304>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
				action.KeepStateFor = PEDESTRIAN_DELAY;
 8000f76:	4b46      	ldr	r3, [pc, #280]	; (8001090 <TwoLanePed+0x304>)
 8000f78:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f7c:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <TwoLanePed+0x304>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + PEDESTRIAN_DELAY;
 8000f84:	f001 fa98 	bl	80024b8 <HAL_GetTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8000f8e:	4a41      	ldr	r2, [pc, #260]	; (8001094 <TwoLanePed+0x308>)
 8000f90:	6013      	str	r3, [r2, #0]
			}

			break;
 8000f92:	e2e0      	b.n	8001556 <TwoLanePed+0x7ca>

		case V_P_Active:
			if(action.TopPedWaiting){
 8000f94:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <TwoLanePed+0x304>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <TwoLanePed+0x218>
				nextState = Transition_To_H;
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <TwoLanePed+0x2fc>)
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e019      	b.n	8000fd8 <TwoLanePed+0x24c>
			} else if (!NoCarV(button) && NoCarH(button)){
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000faa:	f000 faeb 	bl	8001584 <NoCarV>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00b      	beq.n	8000fd2 <TwoLanePed+0x246>
 8000fba:	463b      	mov	r3, r7
 8000fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fc0:	f000 fafb 	bl	80015ba <NoCarH>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <TwoLanePed+0x246>
				nextState = V_Active;
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <TwoLanePed+0x2fc>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e002      	b.n	8000fd8 <TwoLanePed+0x24c>
			}else {
				nextState = Transition_To_H;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <TwoLanePed+0x2fc>)
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	701a      	strb	r2, [r3, #0]
			}

			if(!lightsActivated){
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <TwoLanePed+0x300>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f083 0301 	eor.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d035      	beq.n	8001052 <TwoLanePed+0x2c6>
				ControlLight(GREEN_BOTTOM, ON);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2008      	movs	r0, #8
 8000fea:	f001 f90f 	bl	800220c <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2005      	movs	r0, #5
 8000ff2:	f001 f90b 	bl	800220c <ControlLight>

				ControlLight(RED_LEFT, ON);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	200c      	movs	r0, #12
 8000ffa:	f001 f907 	bl	800220c <ControlLight>
				ControlLight(RED_RIGHT, ON);
 8000ffe:	2101      	movs	r1, #1
 8001000:	2000      	movs	r0, #0
 8001002:	f001 f903 	bl	800220c <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 8001006:	2100      	movs	r1, #0
 8001008:	200a      	movs	r0, #10
 800100a:	f001 f8ff 	bl	800220c <ControlLight>
				ControlLight(GREEN_PED_LEFT, ON);
 800100e:	2101      	movs	r1, #1
 8001010:	2010      	movs	r0, #16
 8001012:	f001 f8fb 	bl	800220c <ControlLight>
				action.LeftPedWaiting = false;
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <TwoLanePed+0x304>)
 8001018:	2200      	movs	r2, #0
 800101a:	705a      	strb	r2, [r3, #1]

				ControlLight(RED_PED_TOP, ON);
 800101c:	2101      	movs	r1, #1
 800101e:	2009      	movs	r0, #9
 8001020:	f001 f8f4 	bl	800220c <ControlLight>
				ControlLight(RED_PED_LEFT, OFF);
 8001024:	2100      	movs	r1, #0
 8001026:	200f      	movs	r0, #15
 8001028:	f001 f8f0 	bl	800220c <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 800102c:	2100      	movs	r1, #0
 800102e:	2007      	movs	r0, #7
 8001030:	f001 f8ec 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8001034:	2100      	movs	r1, #0
 8001036:	2004      	movs	r0, #4
 8001038:	f001 f8e8 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 800103c:	2100      	movs	r1, #0
 800103e:	200d      	movs	r0, #13
 8001040:	f001 f8e4 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8001044:	2100      	movs	r1, #0
 8001046:	2001      	movs	r0, #1
 8001048:	f001 f8e0 	bl	800220c <ControlLight>

				lightsActivated = true;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <TwoLanePed+0x300>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <TwoLanePed+0x30c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f083 0301 	eor.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d009      	beq.n	8001074 <TwoLanePed+0x2e8>
				action.KeepStateFor = WALKING_DELAY;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <TwoLanePed+0x304>)
 8001062:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001066:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <TwoLanePed+0x304>)
 800106a:	2201      	movs	r2, #1
 800106c:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <TwoLanePed+0x30c>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed){
 8001074:	797b      	ldrb	r3, [r7, #5]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 826f 	beq.w	800155a <TwoLanePed+0x7ce>
				action.TopPedWaiting = true;
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <TwoLanePed+0x304>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001082:	e26a      	b.n	800155a <TwoLanePed+0x7ce>
 8001084:	2000008f 	.word	0x2000008f
 8001088:	20000090 	.word	0x20000090
 800108c:	20000091 	.word	0x20000091
 8001090:	20000094 	.word	0x20000094
 8001094:	2000009c 	.word	0x2000009c
 8001098:	20000092 	.word	0x20000092

		case H_Active:
			nextState = Transition_To_V;
 800109c:	4bb5      	ldr	r3, [pc, #724]	; (8001374 <TwoLanePed+0x5e8>)
 800109e:	2205      	movs	r2, #5
 80010a0:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 80010a2:	4bb5      	ldr	r3, [pc, #724]	; (8001378 <TwoLanePed+0x5ec>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d032      	beq.n	8001116 <TwoLanePed+0x38a>
				ControlLight(GREEN_LEFT, ON);
 80010b0:	2101      	movs	r1, #1
 80010b2:	200e      	movs	r0, #14
 80010b4:	f001 f8aa 	bl	800220c <ControlLight>
				ControlLight(GREEN_RIGHT, ON);
 80010b8:	2101      	movs	r1, #1
 80010ba:	2002      	movs	r0, #2
 80010bc:	f001 f8a6 	bl	800220c <ControlLight>

				ControlLight(RED_TOP, ON);
 80010c0:	2101      	movs	r1, #1
 80010c2:	2003      	movs	r0, #3
 80010c4:	f001 f8a2 	bl	800220c <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 80010c8:	2101      	movs	r1, #1
 80010ca:	2006      	movs	r0, #6
 80010cc:	f001 f89e 	bl	800220c <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 80010d0:	2100      	movs	r1, #0
 80010d2:	200a      	movs	r0, #10
 80010d4:	f001 f89a 	bl	800220c <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 80010d8:	2100      	movs	r1, #0
 80010da:	2010      	movs	r0, #16
 80010dc:	f001 f896 	bl	800220c <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 80010e0:	2101      	movs	r1, #1
 80010e2:	2009      	movs	r0, #9
 80010e4:	f001 f892 	bl	800220c <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 80010e8:	2101      	movs	r1, #1
 80010ea:	200f      	movs	r0, #15
 80010ec:	f001 f88e 	bl	800220c <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 80010f0:	2100      	movs	r1, #0
 80010f2:	2007      	movs	r0, #7
 80010f4:	f001 f88a 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 80010f8:	2100      	movs	r1, #0
 80010fa:	2004      	movs	r0, #4
 80010fc:	f001 f886 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8001100:	2100      	movs	r1, #0
 8001102:	200d      	movs	r0, #13
 8001104:	f001 f882 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8001108:	2100      	movs	r1, #0
 800110a:	2001      	movs	r0, #1
 800110c:	f001 f87e 	bl	800220c <ControlLight>

				lightsActivated = true;
 8001110:	4b99      	ldr	r3, [pc, #612]	; (8001378 <TwoLanePed+0x5ec>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed){
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <TwoLanePed+0x39e>
				action.SwitchImidiate = true;
 800111c:	4b97      	ldr	r3, [pc, #604]	; (800137c <TwoLanePed+0x5f0>)
 800111e:	2201      	movs	r2, #1
 8001120:	70da      	strb	r2, [r3, #3]
				nextState = H_P_Active;
 8001122:	4b94      	ldr	r3, [pc, #592]	; (8001374 <TwoLanePed+0x5e8>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e018      	b.n	800115c <TwoLanePed+0x3d0>
			} else if(NoCarH(button) && !NoCarV(button)) {
 800112a:	463b      	mov	r3, r7
 800112c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001130:	f000 fa43 	bl	80015ba <NoCarH>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d010      	beq.n	800115c <TwoLanePed+0x3d0>
 800113a:	463b      	mov	r3, r7
 800113c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001140:	f000 fa20 	bl	8001584 <NoCarV>
 8001144:	4603      	mov	r3, r0
 8001146:	f083 0301 	eor.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <TwoLanePed+0x3d0>
				action.SwitchImidiate = true;
 8001150:	4b8a      	ldr	r3, [pc, #552]	; (800137c <TwoLanePed+0x5f0>)
 8001152:	2201      	movs	r2, #1
 8001154:	70da      	strb	r2, [r3, #3]
				nextState = Transition_To_V;
 8001156:	4b87      	ldr	r3, [pc, #540]	; (8001374 <TwoLanePed+0x5e8>)
 8001158:	2205      	movs	r2, #5
 800115a:	701a      	strb	r2, [r3, #0]
			}
			if (!NoCarH(button) && !NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + RED_DELAY_MAX)) {
 800115c:	463b      	mov	r3, r7
 800115e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001162:	f000 fa2a 	bl	80015ba <NoCarH>
 8001166:	4603      	mov	r3, r0
 8001168:	f083 0301 	eor.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d027      	beq.n	80011c2 <TwoLanePed+0x436>
 8001172:	463b      	mov	r3, r7
 8001174:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001178:	f000 fa04 	bl	8001584 <NoCarV>
 800117c:	4603      	mov	r3, r0
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01c      	beq.n	80011c2 <TwoLanePed+0x436>
 8001188:	f001 f996 	bl	80024b8 <HAL_GetTick>
 800118c:	4603      	mov	r3, r0
 800118e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001192:	3310      	adds	r3, #16
 8001194:	4a7a      	ldr	r2, [pc, #488]	; (8001380 <TwoLanePed+0x5f4>)
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	4293      	cmp	r3, r2
 800119a:	d212      	bcs.n	80011c2 <TwoLanePed+0x436>
				action.KeepStateFor = RED_DELAY_MAX;
 800119c:	4b77      	ldr	r3, [pc, #476]	; (800137c <TwoLanePed+0x5f0>)
 800119e:	f242 7210 	movw	r2, #10000	; 0x2710
 80011a2:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 80011a4:	4b75      	ldr	r3, [pc, #468]	; (800137c <TwoLanePed+0x5f0>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <TwoLanePed+0x5f8>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + RED_DELAY_MAX;
 80011b0:	f001 f982 	bl	80024b8 <HAL_GetTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80011ba:	3310      	adds	r3, #16
 80011bc:	4a70      	ldr	r2, [pc, #448]	; (8001380 <TwoLanePed+0x5f4>)
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e046      	b.n	8001250 <TwoLanePed+0x4c4>
			} else if (NoCarH(button) && NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + GREEN_DELAY)) {
 80011c2:	463b      	mov	r3, r7
 80011c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011c8:	f000 f9f7 	bl	80015ba <NoCarH>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d024      	beq.n	800121c <TwoLanePed+0x490>
 80011d2:	463b      	mov	r3, r7
 80011d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011d8:	f000 f9d4 	bl	8001584 <NoCarV>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d01c      	beq.n	800121c <TwoLanePed+0x490>
 80011e2:	f001 f969 	bl	80024b8 <HAL_GetTick>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80011ec:	3310      	adds	r3, #16
 80011ee:	4a64      	ldr	r2, [pc, #400]	; (8001380 <TwoLanePed+0x5f4>)
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d212      	bcs.n	800121c <TwoLanePed+0x490>
				action.KeepStateFor = GREEN_DELAY;
 80011f6:	4b61      	ldr	r3, [pc, #388]	; (800137c <TwoLanePed+0x5f0>)
 80011f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80011fc:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <TwoLanePed+0x5f0>)
 8001200:	2201      	movs	r2, #1
 8001202:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8001204:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <TwoLanePed+0x5f8>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + GREEN_DELAY;
 800120a:	f001 f955 	bl	80024b8 <HAL_GetTick>
 800120e:	4603      	mov	r3, r0
 8001210:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001214:	3310      	adds	r3, #16
 8001216:	4a5a      	ldr	r2, [pc, #360]	; (8001380 <TwoLanePed+0x5f4>)
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e019      	b.n	8001250 <TwoLanePed+0x4c4>
			} else if (!NoCarH(button) && NoCarV(button)){
 800121c:	463b      	mov	r3, r7
 800121e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001222:	f000 f9ca 	bl	80015ba <NoCarH>
 8001226:	4603      	mov	r3, r0
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00e      	beq.n	8001250 <TwoLanePed+0x4c4>
 8001232:	463b      	mov	r3, r7
 8001234:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001238:	f000 f9a4 	bl	8001584 <NoCarV>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <TwoLanePed+0x4c4>
				action.AbortTimer = true;
 8001242:	4b4e      	ldr	r3, [pc, #312]	; (800137c <TwoLanePed+0x5f0>)
 8001244:	2201      	movs	r2, #1
 8001246:	711a      	strb	r2, [r3, #4]
				previousDelayExpireAt = UINT16_MAX;
 8001248:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <TwoLanePed+0x5f4>)
 800124a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124e:	601a      	str	r2, [r3, #0]
			}

			if(button.LeftPed){
 8001250:	793b      	ldrb	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8183 	beq.w	800155e <TwoLanePed+0x7d2>
				action.LeftPedWaiting = true;
 8001258:	4b48      	ldr	r3, [pc, #288]	; (800137c <TwoLanePed+0x5f0>)
 800125a:	2201      	movs	r2, #1
 800125c:	705a      	strb	r2, [r3, #1]
				action.KeepStateFor = PEDESTRIAN_DELAY;
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <TwoLanePed+0x5f0>)
 8001260:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001264:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <TwoLanePed+0x5f0>)
 8001268:	2201      	movs	r2, #1
 800126a:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <TwoLanePed+0x5f8>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + PEDESTRIAN_DELAY;
 8001272:	f001 f921 	bl	80024b8 <HAL_GetTick>
 8001276:	4603      	mov	r3, r0
 8001278:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800127c:	4a40      	ldr	r2, [pc, #256]	; (8001380 <TwoLanePed+0x5f4>)
 800127e:	6013      	str	r3, [r2, #0]
			}

			break;
 8001280:	e16d      	b.n	800155e <TwoLanePed+0x7d2>

		case H_P_Active:
			if(action.LeftPedWaiting){
 8001282:	4b3e      	ldr	r3, [pc, #248]	; (800137c <TwoLanePed+0x5f0>)
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <TwoLanePed+0x506>
				nextState = Transition_To_V;
 800128a:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <TwoLanePed+0x5e8>)
 800128c:	2205      	movs	r2, #5
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e019      	b.n	80012c6 <TwoLanePed+0x53a>
			} else if (!NoCarH(button) && NoCarV(button)){
 8001292:	463b      	mov	r3, r7
 8001294:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001298:	f000 f98f 	bl	80015ba <NoCarH>
 800129c:	4603      	mov	r3, r0
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00b      	beq.n	80012c0 <TwoLanePed+0x534>
 80012a8:	463b      	mov	r3, r7
 80012aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ae:	f000 f969 	bl	8001584 <NoCarV>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <TwoLanePed+0x534>
				nextState = H_Active;
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <TwoLanePed+0x5e8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	e002      	b.n	80012c6 <TwoLanePed+0x53a>
			} else {
				nextState = Transition_To_V;
 80012c0:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <TwoLanePed+0x5e8>)
 80012c2:	2205      	movs	r2, #5
 80012c4:	701a      	strb	r2, [r3, #0]
			}
			if(!lightsActivated){
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <TwoLanePed+0x5ec>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	f083 0301 	eor.w	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d035      	beq.n	8001340 <TwoLanePed+0x5b4>
				ControlLight(GREEN_LEFT, ON);
 80012d4:	2101      	movs	r1, #1
 80012d6:	200e      	movs	r0, #14
 80012d8:	f000 ff98 	bl	800220c <ControlLight>
				ControlLight(GREEN_RIGHT, ON);
 80012dc:	2101      	movs	r1, #1
 80012de:	2002      	movs	r0, #2
 80012e0:	f000 ff94 	bl	800220c <ControlLight>

				ControlLight(RED_TOP, ON);
 80012e4:	2101      	movs	r1, #1
 80012e6:	2003      	movs	r0, #3
 80012e8:	f000 ff90 	bl	800220c <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 80012ec:	2101      	movs	r1, #1
 80012ee:	2006      	movs	r0, #6
 80012f0:	f000 ff8c 	bl	800220c <ControlLight>

				ControlLight(GREEN_PED_TOP, ON);
 80012f4:	2101      	movs	r1, #1
 80012f6:	200a      	movs	r0, #10
 80012f8:	f000 ff88 	bl	800220c <ControlLight>
				action.TopPedWaiting = false;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <TwoLanePed+0x5f0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
				ControlLight(GREEN_PED_LEFT, OFF);
 8001302:	2100      	movs	r1, #0
 8001304:	2010      	movs	r0, #16
 8001306:	f000 ff81 	bl	800220c <ControlLight>

				ControlLight(RED_PED_TOP, OFF);
 800130a:	2100      	movs	r1, #0
 800130c:	2009      	movs	r0, #9
 800130e:	f000 ff7d 	bl	800220c <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 8001312:	2101      	movs	r1, #1
 8001314:	200f      	movs	r0, #15
 8001316:	f000 ff79 	bl	800220c <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 800131a:	2100      	movs	r1, #0
 800131c:	2007      	movs	r0, #7
 800131e:	f000 ff75 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8001322:	2100      	movs	r1, #0
 8001324:	2004      	movs	r0, #4
 8001326:	f000 ff71 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 800132a:	2100      	movs	r1, #0
 800132c:	200d      	movs	r0, #13
 800132e:	f000 ff6d 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8001332:	2100      	movs	r1, #0
 8001334:	2001      	movs	r0, #1
 8001336:	f000 ff69 	bl	800220c <ControlLight>

				lightsActivated = true;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <TwoLanePed+0x5ec>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <TwoLanePed+0x5f8>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <TwoLanePed+0x5d6>
				action.KeepStateFor = WALKING_DELAY;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <TwoLanePed+0x5f0>)
 8001350:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001354:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <TwoLanePed+0x5f0>)
 8001358:	2201      	movs	r2, #1
 800135a:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <TwoLanePed+0x5f8>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
			}

			if(button.LeftPed){
 8001362:	793b      	ldrb	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80fc 	beq.w	8001562 <TwoLanePed+0x7d6>
				action.LeftPedWaiting = true;
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <TwoLanePed+0x5f0>)
 800136c:	2201      	movs	r2, #1
 800136e:	705a      	strb	r2, [r3, #1]
			}

			break;
 8001370:	e0f7      	b.n	8001562 <TwoLanePed+0x7d6>
 8001372:	bf00      	nop
 8001374:	20000090 	.word	0x20000090
 8001378:	20000091 	.word	0x20000091
 800137c:	20000094 	.word	0x20000094
 8001380:	2000009c 	.word	0x2000009c
 8001384:	20000092 	.word	0x20000092

		case Transition_To_H:
			if(!lightsActivated){
 8001388:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <TwoLanePed+0x7e8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d042      	beq.n	800141c <TwoLanePed+0x690>
				ControlLight(GREEN_LEFT, OFF);
 8001396:	2100      	movs	r1, #0
 8001398:	200e      	movs	r0, #14
 800139a:	f000 ff37 	bl	800220c <ControlLight>
				ControlLight(GREEN_RIGHT, OFF);
 800139e:	2100      	movs	r1, #0
 80013a0:	2002      	movs	r0, #2
 80013a2:	f000 ff33 	bl	800220c <ControlLight>
				ControlLight(GREEN_TOP, OFF);
 80013a6:	2100      	movs	r1, #0
 80013a8:	2005      	movs	r0, #5
 80013aa:	f000 ff2f 	bl	800220c <ControlLight>
				ControlLight(GREEN_BOTTOM, OFF);
 80013ae:	2100      	movs	r1, #0
 80013b0:	2008      	movs	r0, #8
 80013b2:	f000 ff2b 	bl	800220c <ControlLight>

				ControlLight(RED_TOP, OFF);
 80013b6:	2100      	movs	r1, #0
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 ff27 	bl	800220c <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 80013be:	2100      	movs	r1, #0
 80013c0:	2006      	movs	r0, #6
 80013c2:	f000 ff23 	bl	800220c <ControlLight>
				ControlLight(RED_LEFT, OFF);
 80013c6:	2100      	movs	r1, #0
 80013c8:	200c      	movs	r0, #12
 80013ca:	f000 ff1f 	bl	800220c <ControlLight>
				ControlLight(RED_RIGHT, OFF);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 ff1b 	bl	800220c <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 80013d6:	2100      	movs	r1, #0
 80013d8:	200a      	movs	r0, #10
 80013da:	f000 ff17 	bl	800220c <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 80013de:	2100      	movs	r1, #0
 80013e0:	2010      	movs	r0, #16
 80013e2:	f000 ff13 	bl	800220c <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 80013e6:	2101      	movs	r1, #1
 80013e8:	2009      	movs	r0, #9
 80013ea:	f000 ff0f 	bl	800220c <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 80013ee:	2101      	movs	r1, #1
 80013f0:	200f      	movs	r0, #15
 80013f2:	f000 ff0b 	bl	800220c <ControlLight>

				ControlLight(YELLOW_BOTTOM, ON);
 80013f6:	2101      	movs	r1, #1
 80013f8:	2007      	movs	r0, #7
 80013fa:	f000 ff07 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 80013fe:	2101      	movs	r1, #1
 8001400:	2004      	movs	r0, #4
 8001402:	f000 ff03 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 8001406:	2101      	movs	r1, #1
 8001408:	200d      	movs	r0, #13
 800140a:	f000 feff 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 800140e:	2101      	movs	r1, #1
 8001410:	2001      	movs	r0, #1
 8001412:	f000 fefb 	bl	800220c <ControlLight>
				lightsActivated = true;
 8001416:	4b57      	ldr	r3, [pc, #348]	; (8001574 <TwoLanePed+0x7e8>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed){
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <TwoLanePed+0x69c>
				action.TopPedWaiting = true;
 8001422:	4b55      	ldr	r3, [pc, #340]	; (8001578 <TwoLanePed+0x7ec>)
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
			}
			if(button.LeftPed){
 8001428:	793b      	ldrb	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <TwoLanePed+0x6a8>
				action.LeftPedWaiting = true;
 800142e:	4b52      	ldr	r3, [pc, #328]	; (8001578 <TwoLanePed+0x7ec>)
 8001430:	2201      	movs	r2, #1
 8001432:	705a      	strb	r2, [r3, #1]
			}
			if(action.TopPedWaiting){
 8001434:	4b50      	ldr	r3, [pc, #320]	; (8001578 <TwoLanePed+0x7ec>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <TwoLanePed+0x6b8>
				nextState = H_P_Active;
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <TwoLanePed+0x7f0>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e002      	b.n	800144a <TwoLanePed+0x6be>
			}else{
				nextState = H_Active;
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <TwoLanePed+0x7f0>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 800144a:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <TwoLanePed+0x7f4>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f083 0301 	eor.w	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8086 	beq.w	8001566 <TwoLanePed+0x7da>
				action.KeepStateFor = YELLOW_DELAY;
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <TwoLanePed+0x7ec>)
 800145c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001460:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8001462:	4b45      	ldr	r3, [pc, #276]	; (8001578 <TwoLanePed+0x7ec>)
 8001464:	2201      	movs	r2, #1
 8001466:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8001468:	4b45      	ldr	r3, [pc, #276]	; (8001580 <TwoLanePed+0x7f4>)
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800146e:	e07a      	b.n	8001566 <TwoLanePed+0x7da>

		case Transition_To_V:
			if(!lightsActivated){
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <TwoLanePed+0x7e8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d042      	beq.n	8001504 <TwoLanePed+0x778>
				ControlLight(GREEN_LEFT, OFF);
 800147e:	2100      	movs	r1, #0
 8001480:	200e      	movs	r0, #14
 8001482:	f000 fec3 	bl	800220c <ControlLight>
				ControlLight(GREEN_RIGHT, OFF);
 8001486:	2100      	movs	r1, #0
 8001488:	2002      	movs	r0, #2
 800148a:	f000 febf 	bl	800220c <ControlLight>
				ControlLight(GREEN_TOP, OFF);
 800148e:	2100      	movs	r1, #0
 8001490:	2005      	movs	r0, #5
 8001492:	f000 febb 	bl	800220c <ControlLight>
				ControlLight(GREEN_BOTTOM, OFF);
 8001496:	2100      	movs	r1, #0
 8001498:	2008      	movs	r0, #8
 800149a:	f000 feb7 	bl	800220c <ControlLight>

				ControlLight(RED_TOP, OFF);
 800149e:	2100      	movs	r1, #0
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 feb3 	bl	800220c <ControlLight>
				ControlLight(RED_RIGHT, OFF);
 80014a6:	2100      	movs	r1, #0
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 feaf 	bl	800220c <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2006      	movs	r0, #6
 80014b2:	f000 feab 	bl	800220c <ControlLight>
				ControlLight(RED_LEFT, OFF);
 80014b6:	2100      	movs	r1, #0
 80014b8:	200c      	movs	r0, #12
 80014ba:	f000 fea7 	bl	800220c <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 80014be:	2100      	movs	r1, #0
 80014c0:	200a      	movs	r0, #10
 80014c2:	f000 fea3 	bl	800220c <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 80014c6:	2100      	movs	r1, #0
 80014c8:	2010      	movs	r0, #16
 80014ca:	f000 fe9f 	bl	800220c <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 80014ce:	2101      	movs	r1, #1
 80014d0:	2009      	movs	r0, #9
 80014d2:	f000 fe9b 	bl	800220c <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 80014d6:	2101      	movs	r1, #1
 80014d8:	200f      	movs	r0, #15
 80014da:	f000 fe97 	bl	800220c <ControlLight>

				ControlLight(YELLOW_BOTTOM, ON);
 80014de:	2101      	movs	r1, #1
 80014e0:	2007      	movs	r0, #7
 80014e2:	f000 fe93 	bl	800220c <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 80014e6:	2101      	movs	r1, #1
 80014e8:	2004      	movs	r0, #4
 80014ea:	f000 fe8f 	bl	800220c <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 80014ee:	2101      	movs	r1, #1
 80014f0:	200d      	movs	r0, #13
 80014f2:	f000 fe8b 	bl	800220c <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 80014f6:	2101      	movs	r1, #1
 80014f8:	2001      	movs	r0, #1
 80014fa:	f000 fe87 	bl	800220c <ControlLight>
				lightsActivated = true;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <TwoLanePed+0x7e8>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
			}
			if(button.LeftPed){
 8001504:	793b      	ldrb	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <TwoLanePed+0x784>
				action.LeftPedWaiting = true;
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <TwoLanePed+0x7ec>)
 800150c:	2201      	movs	r2, #1
 800150e:	705a      	strb	r2, [r3, #1]
			}
			if(button.TopPed){
 8001510:	797b      	ldrb	r3, [r7, #5]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <TwoLanePed+0x790>
				action.TopPedWaiting = true;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <TwoLanePed+0x7ec>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
			}

			if(action.LeftPedWaiting){
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <TwoLanePed+0x7ec>)
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <TwoLanePed+0x7a0>
				nextState = V_P_Active;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <TwoLanePed+0x7f0>)
 8001526:	2203      	movs	r2, #3
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e002      	b.n	8001532 <TwoLanePed+0x7a6>
			}else{
				nextState = V_Active;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <TwoLanePed+0x7f0>)
 800152e:	2202      	movs	r2, #2
 8001530:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <TwoLanePed+0x7f4>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	f083 0301 	eor.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d014      	beq.n	800156a <TwoLanePed+0x7de>
				action.KeepStateFor = YELLOW_DELAY;
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <TwoLanePed+0x7ec>)
 8001542:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001546:	80da      	strh	r2, [r3, #6]
				action.StartTimerForNextState = true;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <TwoLanePed+0x7ec>)
 800154a:	2201      	movs	r2, #1
 800154c:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <TwoLanePed+0x7f4>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001554:	e009      	b.n	800156a <TwoLanePed+0x7de>
			break;
 8001556:	bf00      	nop
 8001558:	e008      	b.n	800156c <TwoLanePed+0x7e0>
			break;
 800155a:	bf00      	nop
 800155c:	e006      	b.n	800156c <TwoLanePed+0x7e0>
			break;
 800155e:	bf00      	nop
 8001560:	e004      	b.n	800156c <TwoLanePed+0x7e0>
			break;
 8001562:	bf00      	nop
 8001564:	e002      	b.n	800156c <TwoLanePed+0x7e0>
			break;
 8001566:	bf00      	nop
 8001568:	e000      	b.n	800156c <TwoLanePed+0x7e0>
			break;
 800156a:	bf00      	nop
	}
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000091 	.word	0x20000091
 8001578:	20000094 	.word	0x20000094
 800157c:	20000090 	.word	0x20000090
 8001580:	20000092 	.word	0x20000092

08001584 <NoCarV>:

bool NoCarV(ButtonStates button){
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	463b      	mov	r3, r7
 800158c:	e883 0003 	stmia.w	r3, {r0, r1}
	return !(button.TopCar | button.BottomCar);
 8001590:	78fa      	ldrb	r2, [r7, #3]
 8001592:	787b      	ldrb	r3, [r7, #1]
 8001594:	4313      	orrs	r3, r2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f083 0301 	eor.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <NoCarH>:

bool NoCarH(ButtonStates button){
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	463b      	mov	r3, r7
 80015c2:	e883 0003 	stmia.w	r3, {r0, r1}
	return !(button.LeftCar | button.RightCar);
 80015c6:	783a      	ldrb	r2, [r7, #0]
 80015c8:	78bb      	ldrb	r3, [r7, #2]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bf14      	ite	ne
 80015d2:	2301      	movne	r3, #1
 80015d4:	2300      	moveq	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f083 0301 	eor.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_DMA_Init+0x38>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <MX_DMA_Init+0x38>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6493      	str	r3, [r2, #72]	; 0x48
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_DMA_Init+0x38>)
 8001604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2105      	movs	r1, #5
 8001612:	2039      	movs	r0, #57	; 0x39
 8001614:	f001 f814 	bl	8002640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001618:	2039      	movs	r0, #57	; 0x39
 800161a:	f001 f82d 	bl	8002678 <HAL_NVIC_EnableIRQ>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore */
  SemaphoreHandle = osSemaphoreNew(1, 1, &Semaphore_attributes);
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <MX_FREERTOS_Init+0x7c>)
 8001632:	2101      	movs	r1, #1
 8001634:	2001      	movs	r0, #1
 8001636:	f004 fd9a 	bl	800616e <osSemaphoreNew>
 800163a:	4603      	mov	r3, r0
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <MX_FREERTOS_Init+0x80>)
 800163e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Delay */
  DelayHandle = osTimerNew(DelayCallback, osTimerOnce, NULL, &Delay_attributes);
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_FREERTOS_Init+0x84>)
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	481b      	ldr	r0, [pc, #108]	; (80016b4 <MX_FREERTOS_Init+0x88>)
 8001648:	f004 fcb0 	bl	8005fac <osTimerNew>
 800164c:	4603      	mov	r3, r0
 800164e:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <MX_FREERTOS_Init+0x8c>)
 8001650:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001652:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <MX_FREERTOS_Init+0x90>)
 8001654:	2100      	movs	r1, #0
 8001656:	481a      	ldr	r0, [pc, #104]	; (80016c0 <MX_FREERTOS_Init+0x94>)
 8001658:	f004 fbe6 	bl	8005e28 <osThreadNew>
 800165c:	4603      	mov	r3, r0
 800165e:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <MX_FREERTOS_Init+0x98>)
 8001660:	6013      	str	r3, [r2, #0]

  /* creation of toggleBlueLight */
  toggleBlueLightHandle = osThreadNew(BlueLight, NULL, &toggleBlueLight_attributes);
 8001662:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <MX_FREERTOS_Init+0x9c>)
 8001664:	2100      	movs	r1, #0
 8001666:	4819      	ldr	r0, [pc, #100]	; (80016cc <MX_FREERTOS_Init+0xa0>)
 8001668:	f004 fbde 	bl	8005e28 <osThreadNew>
 800166c:	4603      	mov	r3, r0
 800166e:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <MX_FREERTOS_Init+0xa4>)
 8001670:	6013      	str	r3, [r2, #0]

  /* creation of UpdateInputOutp */
  UpdateInputOutpHandle = osThreadNew(inputOutput, NULL, &UpdateInputOutp_attributes);
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <MX_FREERTOS_Init+0xa8>)
 8001674:	2100      	movs	r1, #0
 8001676:	4818      	ldr	r0, [pc, #96]	; (80016d8 <MX_FREERTOS_Init+0xac>)
 8001678:	f004 fbd6 	bl	8005e28 <osThreadNew>
 800167c:	4603      	mov	r3, r0
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <MX_FREERTOS_Init+0xb0>)
 8001680:	6013      	str	r3, [r2, #0]

  /* creation of updateStateTask */
  updateStateTaskHandle = osThreadNew(updateState, NULL, &updateStateTask_attributes);
 8001682:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <MX_FREERTOS_Init+0xb4>)
 8001684:	2100      	movs	r1, #0
 8001686:	4817      	ldr	r0, [pc, #92]	; (80016e4 <MX_FREERTOS_Init+0xb8>)
 8001688:	f004 fbce 	bl	8005e28 <osThreadNew>
 800168c:	4603      	mov	r3, r0
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <MX_FREERTOS_Init+0xbc>)
 8001690:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  initTrafficLogic(PedOneLane);
 8001692:	2000      	movs	r0, #0
 8001694:	f7fe ffda 	bl	800064c <initTrafficLogic>
  //initTrafficLogic(NoPedTwoLane);
  //initTrafficLogic(PedTwoLane);
  TrafficAction = getTrafficAction();
 8001698:	f7ff f832 	bl	8000700 <getTrafficAction>
 800169c:	4603      	mov	r3, r0
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_FREERTOS_Init+0xc0>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	0800a710 	.word	0x0800a710
 80016ac:	200000d8 	.word	0x200000d8
 80016b0:	0800a700 	.word	0x0800a700
 80016b4:	08001931 	.word	0x08001931
 80016b8:	200000d4 	.word	0x200000d4
 80016bc:	0800a670 	.word	0x0800a670
 80016c0:	080016f1 	.word	0x080016f1
 80016c4:	200000c4 	.word	0x200000c4
 80016c8:	0800a694 	.word	0x0800a694
 80016cc:	08001701 	.word	0x08001701
 80016d0:	200000c8 	.word	0x200000c8
 80016d4:	0800a6b8 	.word	0x0800a6b8
 80016d8:	08001769 	.word	0x08001769
 80016dc:	200000cc 	.word	0x200000cc
 80016e0:	0800a6dc 	.word	0x0800a6dc
 80016e4:	08001835 	.word	0x08001835
 80016e8:	200000d0 	.word	0x200000d0
 80016ec:	200000b0 	.word	0x200000b0

080016f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f004 fc27 	bl	8005f4c <osDelay>
 80016fe:	e7fb      	b.n	80016f8 <StartDefaultTask+0x8>

08001700 <BlueLight>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlueLight */
void BlueLight(void *argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueLight */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(TOGGLE_FREQ) ; // ms to ticks
 8001708:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800170c:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800170e:	f006 faa9 	bl	8007c64 <xTaskGetTickCount>
 8001712:	4603      	mov	r3, r0
 8001714:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  blue_blink = 1;
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <BlueLight+0x60>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
	  if(TrafficAction->LeftPedWaiting){
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <BlueLight+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	785b      	ldrb	r3, [r3, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <BlueLight+0x2c>
		  toggleBlueLeft();
 8001726:	f000 fd99 	bl	800225c <toggleBlueLeft>
 800172a:	e003      	b.n	8001734 <BlueLight+0x34>
	  } else {
		  ControlLight(BLUE_PED_LEFT, OFF);
 800172c:	2100      	movs	r1, #0
 800172e:	2011      	movs	r0, #17
 8001730:	f000 fd6c 	bl	800220c <ControlLight>
	  }
	  if(TrafficAction->TopPedWaiting){
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <BlueLight+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <BlueLight+0x44>
		  toggleBlueTop();
 800173e:	f000 fda3 	bl	8002288 <toggleBlueTop>
 8001742:	e003      	b.n	800174c <BlueLight+0x4c>
	  } else {
		  ControlLight(BLUE_PED_TOP, OFF);
 8001744:	2100      	movs	r1, #0
 8001746:	200b      	movs	r0, #11
 8001748:	f000 fd60 	bl	800220c <ControlLight>
	  }
	  blue_blink = 0;
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <BlueLight+0x60>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	68f9      	ldr	r1, [r7, #12]
 8001758:	4618      	mov	r0, r3
 800175a:	f006 f8bf 	bl	80078dc <vTaskDelayUntil>
	  blue_blink = 1;
 800175e:	e7da      	b.n	8001716 <BlueLight+0x16>
 8001760:	200000b4 	.word	0x200000b4
 8001764:	200000b0 	.word	0x200000b0

08001768 <inputOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_inputOutput */
void inputOutput(void *argument)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN inputOutput */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20) ; // ms to ticks
 8001770:	2314      	movs	r3, #20
 8001772:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 8001774:	f006 fa76 	bl	8007c64 <xTaskGetTickCount>
 8001778:	4603      	mov	r3, r0
 800177a:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	  input_output = 1;
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <inputOutput+0xbc>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]
	  if(osSemaphoreAcquire(SemaphoreHandle, 0)){
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <inputOutput+0xc0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f004 fd79 	bl	8006280 <osSemaphoreAcquire>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d039      	beq.n	8001808 <inputOutput+0xa0>
		  tempInputState = getInputState();
 8001794:	4c25      	ldr	r4, [pc, #148]	; (800182c <inputOutput+0xc4>)
 8001796:	463b      	mov	r3, r7
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe ff45 	bl	8000628 <getInputState>
 800179e:	4622      	mov	r2, r4
 80017a0:	463b      	mov	r3, r7
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	6010      	str	r0, [r2, #0]
 80017a6:	889b      	ldrh	r3, [r3, #4]
 80017a8:	8093      	strh	r3, [r2, #4]
		  if(tempInputState.BottomCar){
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <inputOutput+0xc4>)
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <inputOutput+0x50>
			  inputState.BottomCar = true;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <inputOutput+0xc8>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	705a      	strb	r2, [r3, #1]
		  }
		  if(tempInputState.LeftCar){
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <inputOutput+0xc4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <inputOutput+0x5e>
			  inputState.LeftCar = true;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <inputOutput+0xc8>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
		  }
		  if(tempInputState.LeftPed){
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <inputOutput+0xc4>)
 80017c8:	791b      	ldrb	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <inputOutput+0x6c>
			  inputState.LeftPed = true;
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <inputOutput+0xc8>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	711a      	strb	r2, [r3, #4]
		  }
		  if(tempInputState.RightCar){
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <inputOutput+0xc4>)
 80017d6:	789b      	ldrb	r3, [r3, #2]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <inputOutput+0x7a>
			  inputState.RightCar = true;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <inputOutput+0xc8>)
 80017de:	2201      	movs	r2, #1
 80017e0:	709a      	strb	r2, [r3, #2]
		  }
		  if(tempInputState.TopCar){
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <inputOutput+0xc4>)
 80017e4:	78db      	ldrb	r3, [r3, #3]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <inputOutput+0x88>
			  inputState.TopCar = true;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <inputOutput+0xc8>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	70da      	strb	r2, [r3, #3]
		  }
		  if(tempInputState.TopPed){
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <inputOutput+0xc4>)
 80017f2:	795b      	ldrb	r3, [r3, #5]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <inputOutput+0x96>
			  inputState.TopPed = true;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <inputOutput+0xc8>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	715a      	strb	r2, [r3, #5]
		  }

		  osSemaphoreRelease(SemaphoreHandle);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <inputOutput+0xc0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fd8e 	bl	8006324 <osSemaphoreRelease>
	  }
	  trafficInputs_Update();
 8001808:	f7fe feb6 	bl	8000578 <trafficInputs_Update>
	  updateLights();
 800180c:	f000 fd14 	bl	8002238 <updateLights>
	  input_output = 0;
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <inputOutput+0xbc>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	6979      	ldr	r1, [r7, #20]
 800181c:	4618      	mov	r0, r3
 800181e:	f006 f85d 	bl	80078dc <vTaskDelayUntil>
	  input_output = 1;
 8001822:	e7ab      	b.n	800177c <inputOutput+0x14>
 8001824:	200000b8 	.word	0x200000b8
 8001828:	200000d8 	.word	0x200000d8
 800182c:	200000a8 	.word	0x200000a8
 8001830:	200000a0 	.word	0x200000a0

08001834 <updateState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateState */
void updateState(void *argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateState */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(50) ; // ms to ticks
 800183c:	2332      	movs	r3, #50	; 0x32
 800183e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8001840:	f006 fa10 	bl	8007c64 <xTaskGetTickCount>
 8001844:	4603      	mov	r3, r0
 8001846:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  update_state = 1;
 8001848:	4b33      	ldr	r3, [pc, #204]	; (8001918 <updateState+0xe4>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
	  TrafficCrossing(inputState);
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <updateState+0xe8>)
 8001850:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001854:	f7fe ff2a 	bl	80006ac <TrafficCrossing>
	  if(TrafficAction->SwitchImidiate){
 8001858:	4b31      	ldr	r3, [pc, #196]	; (8001920 <updateState+0xec>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	78db      	ldrb	r3, [r3, #3]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <updateState+0x3e>
		  osTimerStop(DelayHandle);
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <updateState+0xf0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fc4a 	bl	8006100 <osTimerStop>
		  ActivateNextState();
 800186c:	f7fe ff52 	bl	8000714 <ActivateNextState>
 8001870:	e01a      	b.n	80018a8 <updateState+0x74>
		  //printf("Switching state directly!\r\n");
	  }else if(TrafficAction->StartTimerForNextState){
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <updateState+0xec>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	789b      	ldrb	r3, [r3, #2]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d015      	beq.n	80018a8 <updateState+0x74>
		  //printf("Starting timer for %d ms\r\n", TrafficAction->KeepStateFor);
		  osTimerStart(DelayHandle, pdMS_TO_TICKS(TrafficAction->KeepStateFor));
 800187c:	4b29      	ldr	r3, [pc, #164]	; (8001924 <updateState+0xf0>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <updateState+0xec>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	88db      	ldrh	r3, [r3, #6]
 8001886:	4619      	mov	r1, r3
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4925      	ldr	r1, [pc, #148]	; (8001928 <updateState+0xf4>)
 8001892:	fba1 1303 	umull	r1, r3, r1, r3
 8001896:	099b      	lsrs	r3, r3, #6
 8001898:	4619      	mov	r1, r3
 800189a:	4610      	mov	r0, r2
 800189c:	f004 fc02 	bl	80060a4 <osTimerStart>
		  TrafficAction->StartTimerForNextState = false;
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <updateState+0xec>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2200      	movs	r2, #0
 80018a6:	709a      	strb	r2, [r3, #2]
	  }
	  if(TrafficAction->AbortTimer){
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <updateState+0xec>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <updateState+0x90>
		  osTimerStop(DelayHandle);
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <updateState+0xf0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f004 fc22 	bl	8006100 <osTimerStop>
		  TrafficAction->AbortTimer = false;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <updateState+0xec>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	711a      	strb	r2, [r3, #4]
	  }
	  if(osSemaphoreAcquire(SemaphoreHandle, 0)){
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <updateState+0xf8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 fcd8 	bl	8006280 <osSemaphoreAcquire>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d016      	beq.n	8001904 <updateState+0xd0>
		  inputState.BottomCar = false;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <updateState+0xe8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	705a      	strb	r2, [r3, #1]
		  inputState.LeftCar = false;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <updateState+0xe8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
		  inputState.LeftPed = false;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <updateState+0xe8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	711a      	strb	r2, [r3, #4]
		  inputState.RightCar = false;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <updateState+0xe8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	709a      	strb	r2, [r3, #2]
		  inputState.TopCar = false;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <updateState+0xe8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	70da      	strb	r2, [r3, #3]
		  inputState.TopPed = false;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <updateState+0xe8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	715a      	strb	r2, [r3, #5]

		  osSemaphoreRelease(SemaphoreHandle);
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <updateState+0xf8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 fd10 	bl	8006324 <osSemaphoreRelease>
	  }



	  update_state=0;
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <updateState+0xe4>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f005 ffe3 	bl	80078dc <vTaskDelayUntil>
	  update_state = 1;
 8001916:	e797      	b.n	8001848 <updateState+0x14>
 8001918:	200000bc 	.word	0x200000bc
 800191c:	200000a0 	.word	0x200000a0
 8001920:	200000b0 	.word	0x200000b0
 8001924:	200000d4 	.word	0x200000d4
 8001928:	10624dd3 	.word	0x10624dd3
 800192c:	200000d8 	.word	0x200000d8

08001930 <DelayCallback>:
  /* USER CODE END updateState */
}

/* DelayCallback function */
void DelayCallback(void *argument)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DelayCallback */
	timer_callback = 1;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <DelayCallback+0x20>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
	ActivateNextState();
 800193e:	f7fe fee9 	bl	8000714 <ActivateNextState>
	timer_callback = 0;
 8001942:	4b03      	ldr	r3, [pc, #12]	; (8001950 <DelayCallback+0x20>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
  /* USER CODE END DelayCallback */
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200000c0 	.word	0x200000c0

08001954 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <MX_GPIO_Init+0x168>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a53      	ldr	r2, [pc, #332]	; (8001abc <MX_GPIO_Init+0x168>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <MX_GPIO_Init+0x168>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <MX_GPIO_Init+0x168>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a4d      	ldr	r2, [pc, #308]	; (8001abc <MX_GPIO_Init+0x168>)
 8001988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <MX_GPIO_Init+0x168>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <MX_GPIO_Init+0x168>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a47      	ldr	r2, [pc, #284]	; (8001abc <MX_GPIO_Init+0x168>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <MX_GPIO_Init+0x168>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <MX_GPIO_Init+0x168>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a41      	ldr	r2, [pc, #260]	; (8001abc <MX_GPIO_Init+0x168>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <MX_GPIO_Init+0x168>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Reset_595_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 7108 	mov.w	r1, #544	; 0x220
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d4:	f001 fa18 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019de:	4838      	ldr	r0, [pc, #224]	; (8001ac0 <MX_GPIO_Init+0x16c>)
 80019e0:	f001 fa12 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2180      	movs	r1, #128	; 0x80
 80019e8:	4836      	ldr	r0, [pc, #216]	; (8001ac4 <MX_GPIO_Init+0x170>)
 80019ea:	f001 fa0d 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	482f      	ldr	r0, [pc, #188]	; (8001ac4 <MX_GPIO_Init+0x170>)
 8001a06:	f001 f83d 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Reset_595_Pin;
 8001a0a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f001 f82d 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_CAR_Pin;
 8001a2a:	2310      	movs	r3, #16
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_CAR_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4821      	ldr	r0, [pc, #132]	; (8001ac4 <MX_GPIO_Init+0x170>)
 8001a3e:	f001 f821 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STCP_595_Pin;
 8001a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STCP_595_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4819      	ldr	r0, [pc, #100]	; (8001ac0 <MX_GPIO_Init+0x16c>)
 8001a5c:	f001 f812 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_CAR_Pin|TL3_CAR_Pin|PL2_Switch_Pin;
 8001a60:	f44f 43c1 	mov.w	r3, #24704	; 0x6080
 8001a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4812      	ldr	r0, [pc, #72]	; (8001ac0 <MX_GPIO_Init+0x16c>)
 8001a76:	f001 f805 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_595_Pin;
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_595_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <MX_GPIO_Init+0x170>)
 8001a92:	f000 fff7 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TL4_CAR_Pin|PL1_Switch_Pin;
 8001a96:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f000 ffe9 	bl	8002a84 <HAL_GPIO_Init>

}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800

08001ac8 <hc595_init>:

#include "hc595.h"

static SPI_HandleTypeDef *SPI_Handle;

void hc595_init(SPI_HandleTypeDef *_hspi3){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	SPI_Handle = _hspi3;
 8001ad0:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <hc595_init+0x30>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(Reset_595_GPIO_Port, Reset_595_Pin, GPIO_PIN_SET);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae0:	f001 f992 	bl	8002e08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <hc595_init+0x34>)
 8001aea:	f001 f98d 	bl	8002e08 <HAL_GPIO_WritePin>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200000dc 	.word	0x200000dc
 8001afc:	48000800 	.word	0x48000800

08001b00 <hc595_update>:
 *	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);
 * 	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 * }
*/

void hc595_update(uint8_t* dataToSend){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    HAL_SPI_Transmit_DMA(SPI_Handle, dataToSend, 3);
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <hc595_update+0x20>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 fdb7 	bl	8004684 <HAL_SPI_Transmit_DMA>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200000dc 	.word	0x200000dc

08001b24 <HAL_SPI_TxCpltCallback>:

// DMA Transfer Complete callback
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    if (hspi == SPI_Handle) {
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_SPI_TxCpltCallback+0x34>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d10b      	bne.n	8001b4e <HAL_SPI_TxCpltCallback+0x2a>
        HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3c:	4807      	ldr	r0, [pc, #28]	; (8001b5c <HAL_SPI_TxCpltCallback+0x38>)
 8001b3e:	f001 f963 	bl	8002e08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <HAL_SPI_TxCpltCallback+0x38>)
 8001b4a:	f001 f95d 	bl	8002e08 <HAL_GPIO_WritePin>
    }
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200000dc 	.word	0x200000dc
 8001b5c:	48000400 	.word	0x48000400

08001b60 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001b68:	1d39      	adds	r1, r7, #4
 8001b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <__io_putchar+0x20>)
 8001b72:	f003 fb73 	bl	800525c <HAL_UART_Transmit>

  return ch;
 8001b76:	687b      	ldr	r3, [r7, #4]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200001e0 	.word	0x200001e0

08001b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b88:	f000 fc62 	bl	8002450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8c:	f000 f81e 	bl	8001bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b90:	f7ff fee0 	bl	8001954 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b94:	f7ff fd2c 	bl	80015f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b98:	f000 fba4 	bl	80022e4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001b9c:	f000 f884 	bl	8001ca8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  initTrafficLights(&hspi3);
 8001ba0:	4808      	ldr	r0, [pc, #32]	; (8001bc4 <main+0x40>)
 8001ba2:	f000 fac5 	bl	8002130 <initTrafficLights>
  init_TrafficInputs();
 8001ba6:	f7fe fce1 	bl	800056c <init_TrafficInputs>
  printf("\n\rInit done\n\r");
 8001baa:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <main+0x44>)
 8001bac:	f007 fe98 	bl	80098e0 <iprintf>

  HAL_PWREx_EnableLowPowerRunMode();
 8001bb0:	f001 f9b6 	bl	8002f20 <HAL_PWREx_EnableLowPowerRunMode>
  //Test_Program();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001bb4:	f004 f8ee 	bl	8005d94 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001bb8:	f7ff fd38 	bl	800162c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bbc:	f004 f90e 	bl	8005ddc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <main+0x3c>
 8001bc2:	bf00      	nop
 8001bc4:	200000e0 	.word	0x200000e0
 8001bc8:	0800a648 	.word	0x0800a648

08001bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b096      	sub	sp, #88	; 0x58
 8001bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	2244      	movs	r2, #68	; 0x44
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f007 fe92 	bl	8009904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bf2:	f001 f93f 	bl	8002e74 <HAL_PWREx_ControlVoltageScaling>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bfc:	f000 f84e 	bl	8001c9c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c00:	f001 f91a 	bl	8002e38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <SystemClock_Config+0xa8>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <SystemClock_Config+0xa8>)
 8001c0c:	f023 0318 	bic.w	r3, r3, #24
 8001c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001c14:	2314      	movs	r3, #20
 8001c16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001c24:	2350      	movs	r3, #80	; 0x50
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 f985 	bl	8002f40 <HAL_RCC_OscConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c3c:	f000 f82e 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c40:	230f      	movs	r3, #15
 8001c42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c54:	463b      	mov	r3, r7
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 fd4d 	bl	80036f8 <HAL_RCC_ClockConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c64:	f000 f81a 	bl	8001c9c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c68:	f002 fa86 	bl	8004178 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c6c:	bf00      	nop
 8001c6e:	3758      	adds	r7, #88	; 0x58
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c8a:	f000 fc01 	bl	8002490 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <Error_Handler+0x8>
	...

08001ca8 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <MX_SPI3_Init+0x78>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cc6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cde:	2210      	movs	r2, #16
 8001ce0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001d02:	2208      	movs	r2, #8
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_SPI3_Init+0x74>)
 8001d08:	f002 fc18 	bl	800453c <HAL_SPI_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001d12:	f7ff ffc3 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200000e0 	.word	0x200000e0
 8001d20:	40003c00 	.word	0x40003c00

08001d24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a3a      	ldr	r2, [pc, #232]	; (8001e2c <HAL_SPI_MspInit+0x108>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d16d      	bne.n	8001e22 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d46:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <HAL_SPI_MspInit+0x10c>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a39      	ldr	r2, [pc, #228]	; (8001e30 <HAL_SPI_MspInit+0x10c>)
 8001d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <HAL_SPI_MspInit+0x10c>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_SPI_MspInit+0x10c>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <HAL_SPI_MspInit+0x10c>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <HAL_SPI_MspInit+0x10c>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_SPI_MspInit+0x10c>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <HAL_SPI_MspInit+0x10c>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_SPI_MspInit+0x10c>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001da0:	2306      	movs	r3, #6
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4822      	ldr	r0, [pc, #136]	; (8001e34 <HAL_SPI_MspInit+0x110>)
 8001dac:	f000 fe6a 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001db0:	2320      	movs	r3, #32
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dc0:	2306      	movs	r3, #6
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	481b      	ldr	r0, [pc, #108]	; (8001e38 <HAL_SPI_MspInit+0x114>)
 8001dcc:	f000 fe5a 	bl	8002a84 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001dd2:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_SPI_MspInit+0x11c>)
 8001dd4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001dd8:	2203      	movs	r2, #3
 8001dda:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001dde:	2210      	movs	r2, #16
 8001de0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001e06:	480d      	ldr	r0, [pc, #52]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001e08:	f000 fc44 	bl	8002694 <HAL_DMA_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001e12:	f7ff ff43 	bl	8001c9c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001e1a:	655a      	str	r2, [r3, #84]	; 0x54
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_SPI_MspInit+0x118>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	; 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40003c00 	.word	0x40003c00
 8001e30:	40021000 	.word	0x40021000
 8001e34:	48000800 	.word	0x48000800
 8001e38:	48000400 	.word	0x48000400
 8001e3c:	20000144 	.word	0x20000144
 8001e40:	4002041c 	.word	0x4002041c

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6613      	str	r3, [r2, #96]	; 0x60
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	f06f 0001 	mvn.w	r0, #1
 8001e82:	f000 fbdd 	bl	8002640 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000

08001e94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_InitTick+0xc8>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea6:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <HAL_InitTick+0xc8>)
 8001ea8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eac:	6613      	str	r3, [r2, #96]	; 0x60
 8001eae:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_InitTick+0xc8>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eba:	f107 020c 	add.w	r2, r7, #12
 8001ebe:	f107 0310 	add.w	r3, r7, #16
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f001 fddb 	bl	8003a80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001eca:	f001 fdc3 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8001ece:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_InitTick+0xcc>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	0c9b      	lsrs	r3, r3, #18
 8001eda:	3b01      	subs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_InitTick+0xd0>)
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <HAL_InitTick+0xd4>)
 8001ee2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <HAL_InitTick+0xd0>)
 8001ee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001eec:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <HAL_InitTick+0xd0>)
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_InitTick+0xd0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_InitTick+0xd0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_InitTick+0xd0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f04:	4817      	ldr	r0, [pc, #92]	; (8001f64 <HAL_InitTick+0xd0>)
 8001f06:	f002 fea7 	bl	8004c58 <HAL_TIM_Base_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d11b      	bne.n	8001f50 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f18:	4812      	ldr	r0, [pc, #72]	; (8001f64 <HAL_InitTick+0xd0>)
 8001f1a:	f002 feff 	bl	8004d1c <HAL_TIM_Base_Start_IT>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d111      	bne.n	8001f50 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f2c:	2019      	movs	r0, #25
 8001f2e:	f000 fba3 	bl	8002678 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d808      	bhi.n	8001f4a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	2019      	movs	r0, #25
 8001f3e:	f000 fb7f 	bl	8002640 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_InitTick+0xd8>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e002      	b.n	8001f50 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3730      	adds	r7, #48	; 0x30
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	2000018c 	.word	0x2000018c
 8001f68:	40012c00 	.word	0x40012c00
 8001f6c:	20000004 	.word	0x20000004

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <NMI_Handler+0x4>

08001f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <HardFault_Handler+0x4>

08001f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <MemManage_Handler+0x4>

08001f82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001fa2:	f002 ff2b 	bl	8004dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000018c 	.word	0x2000018c

08001fb0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA2_Channel2_IRQHandler+0x10>)
 8001fb6:	f000 fc85 	bl	80028c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000144 	.word	0x20000144

08001fc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e00a      	b.n	8001fec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd6:	f3af 8000 	nop.w
 8001fda:	4601      	mov	r1, r0
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	b2ca      	uxtb	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbf0      	blt.n	8001fd6 <_read+0x12>
  }

  return len;
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e009      	b.n	8002024 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fda1 	bl	8001b60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	dbf1      	blt.n	8002010 <_write+0x12>
  }
  return len;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_close>:

int _close(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205e:	605a      	str	r2, [r3, #4]
  return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_isatty>:

int _isatty(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f007 fc20 	bl	8009914 <__errno>
 80020d4:	4603      	mov	r3, r0
 80020d6:	220c      	movs	r2, #12
 80020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20018000 	.word	0x20018000
 8002100:	00000400 	.word	0x00000400
 8002104:	200001d8 	.word	0x200001d8
 8002108:	20001cc0 	.word	0x20001cc0

0800210c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <SystemInit+0x20>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <SystemInit+0x20>)
 8002118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800211c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <initTrafficLights>:
};

static uint8_t buffer[3] = {0, 0, 0};
static bool lightsChanged;

void initTrafficLights(SPI_HandleTypeDef *_hspi3){
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	lightsChanged = false;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <initTrafficLights+0x3c>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
	hc595_init(_hspi3);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fcc2 	bl	8001ac8 <hc595_init>
	for(int i = 0; i < 3; i++){
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e007      	b.n	800215a <initTrafficLights+0x2a>
		buffer[i] = 0;
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <initTrafficLights+0x40>)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b02      	cmp	r3, #2
 800215e:	ddf4      	ble.n	800214a <initTrafficLights+0x1a>
	}
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200001df 	.word	0x200001df
 8002170:	200001dc 	.word	0x200001dc

08002174 <setLight>:

void setLight(LightConfig config, LightState state) {
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	e883 0003 	stmia.w	r3, {r0, r1}
 8002182:	4613      	mov	r3, r2
 8002184:	71fb      	strb	r3, [r7, #7]
    uint8_t currentMask = (1 << config.bitPosition);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	75fb      	strb	r3, [r7, #23]
    bool isLightCurrentlyOn = (buffer[config.bufferIndex] & currentMask) != 0;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <setLight+0x90>)
 8002194:	5cd2      	ldrb	r2, [r2, r3]
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	4013      	ands	r3, r2
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	75bb      	strb	r3, [r7, #22]
    bool isLightBeingTurnedOn = (state == ON);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	757b      	strb	r3, [r7, #21]

    if (isLightCurrentlyOn != isLightBeingTurnedOn) {
 80021b2:	7dba      	ldrb	r2, [r7, #22]
 80021b4:	7d7b      	ldrb	r3, [r7, #21]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d01d      	beq.n	80021f6 <setLight+0x82>
        lightsChanged = true;
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <setLight+0x94>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]

        if (isLightBeingTurnedOn) {
 80021c0:	7d7b      	ldrb	r3, [r7, #21]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <setLight+0x66>
            buffer[config.bufferIndex] |= currentMask;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <setLight+0x90>)
 80021ca:	5cd1      	ldrb	r1, [r2, r3]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	7dfa      	ldrb	r2, [r7, #23]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	b2d1      	uxtb	r1, r2
 80021d4:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <setLight+0x90>)
 80021d6:	54d1      	strb	r1, [r2, r3]
        } else {
            buffer[config.bufferIndex] &= ~currentMask;
        }
    }
}
 80021d8:	e00d      	b.n	80021f6 <setLight+0x82>
            buffer[config.bufferIndex] &= ~currentMask;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4a09      	ldr	r2, [pc, #36]	; (8002204 <setLight+0x90>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	b25a      	sxtb	r2, r3
 80021e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	4013      	ands	r3, r2
 80021ec:	b25a      	sxtb	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	b2d1      	uxtb	r1, r2
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <setLight+0x90>)
 80021f4:	54d1      	strb	r1, [r2, r3]
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	200001dc 	.word	0x200001dc
 8002208:	200001df 	.word	0x200001df

0800220c <ControlLight>:


void ControlLight(int lightId, LightState state) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
    setLight(lightConfigs[lightId], state);
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	4906      	ldr	r1, [pc, #24]	; (8002234 <ControlLight+0x28>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002226:	f7ff ffa5 	bl	8002174 <setLight>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	0800a768 	.word	0x0800a768

08002238 <updateLights>:

void updateLights(){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	if(lightsChanged){
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <updateLights+0x1c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <updateLights+0x18>
		hc595_update(buffer);
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <updateLights+0x20>)
 8002246:	f7ff fc5b 	bl	8001b00 <hc595_update>
		lightsChanged = false;
 800224a:	4b02      	ldr	r3, [pc, #8]	; (8002254 <updateLights+0x1c>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
	}
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200001df 	.word	0x200001df
 8002258:	200001dc 	.word	0x200001dc

0800225c <toggleBlueLeft>:

void toggleBlueLeft() {
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
	buffer[2] ^= 0b00100000;
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <toggleBlueLeft+0x24>)
 8002262:	789b      	ldrb	r3, [r3, #2]
 8002264:	f083 0320 	eor.w	r3, r3, #32
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <toggleBlueLeft+0x24>)
 800226c:	709a      	strb	r2, [r3, #2]
	lightsChanged = true;
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <toggleBlueLeft+0x28>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	200001dc 	.word	0x200001dc
 8002284:	200001df 	.word	0x200001df

08002288 <toggleBlueTop>:

void toggleBlueTop() {
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
	buffer[1] ^= 0b00100000;
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <toggleBlueTop+0x24>)
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	f083 0320 	eor.w	r3, r3, #32
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <toggleBlueTop+0x24>)
 8002298:	705a      	strb	r2, [r3, #1]
	lightsChanged = true;
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <toggleBlueTop+0x28>)
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200001dc 	.word	0x200001dc
 80022b0:	200001df 	.word	0x200001df

080022b4 <turnOffAllLights>:

void turnOffAllLights() {
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
	buffer[0] = 0;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <turnOffAllLights+0x28>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <turnOffAllLights+0x28>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <turnOffAllLights+0x28>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	709a      	strb	r2, [r3, #2]
	lightsChanged = true;
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <turnOffAllLights+0x2c>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	200001dc 	.word	0x200001dc
 80022e0:	200001df 	.word	0x200001df

080022e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <MX_USART2_UART_Init+0x5c>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_USART2_UART_Init+0x58>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_USART2_UART_Init+0x58>)
 8002328:	f002 ff4a 	bl	80051c0 <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002332:	f7ff fcb3 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200001e0 	.word	0x200001e0
 8002340:	40004400 	.word	0x40004400

08002344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b0ac      	sub	sp, #176	; 0xb0
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2288      	movs	r2, #136	; 0x88
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f007 facd 	bl	8009904 <memset>
  if(uartHandle->Instance==USART2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <HAL_UART_MspInit+0xb0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d13b      	bne.n	80023ec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002374:	2302      	movs	r3, #2
 8002376:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002378:	2300      	movs	r3, #0
 800237a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4618      	mov	r0, r3
 8002382:	f001 fc0f 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800238c:	f7ff fc86 	bl	8001c9c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_UART_MspInit+0xb4>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_UART_MspInit+0xb4>)
 8002396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239a:	6593      	str	r3, [r2, #88]	; 0x58
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_UART_MspInit+0xb4>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_UART_MspInit+0xb4>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_UART_MspInit+0xb4>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_UART_MspInit+0xb4>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023c0:	230c      	movs	r3, #12
 80023c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d8:	2307      	movs	r3, #7
 80023da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023e2:	4619      	mov	r1, r3
 80023e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e8:	f000 fb4c 	bl	8002a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023ec:	bf00      	nop
 80023ee:	37b0      	adds	r7, #176	; 0xb0
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40004400 	.word	0x40004400
 80023f8:	40021000 	.word	0x40021000

080023fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002400:	f7ff fe84 	bl	800210c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <LoopForever+0x6>)
  ldr r1, =_edata
 8002406:	490d      	ldr	r1, [pc, #52]	; (800243c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <LoopForever+0xe>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800240c:	e002      	b.n	8002414 <LoopCopyDataInit>

0800240e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002412:	3304      	adds	r3, #4

08002414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002418:	d3f9      	bcc.n	800240e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800241c:	4c0a      	ldr	r4, [pc, #40]	; (8002448 <LoopForever+0x16>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002420:	e001      	b.n	8002426 <LoopFillZerobss>

08002422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002424:	3204      	adds	r2, #4

08002426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002428:	d3fb      	bcc.n	8002422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800242a:	f007 fa79 	bl	8009920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800242e:	f7ff fba9 	bl	8001b84 <main>

08002432 <LoopForever>:

LoopForever:
    b LoopForever
 8002432:	e7fe      	b.n	8002432 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002434:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800243c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002440:	0800a83c 	.word	0x0800a83c
  ldr r2, =_sbss
 8002444:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002448:	20001cc0 	.word	0x20001cc0

0800244c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC1_2_IRQHandler>
	...

08002450 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_Init+0x3c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_Init+0x3c>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002466:	2003      	movs	r0, #3
 8002468:	f000 f8df 	bl	800262a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800246c:	200f      	movs	r0, #15
 800246e:	f7ff fd11 	bl	8001e94 <HAL_InitTick>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	e001      	b.n	8002482 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800247e:	f7ff fce1 	bl	8001e44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002482:	79fb      	ldrb	r3, [r7, #7]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40022000 	.word	0x40022000

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000008 	.word	0x20000008
 80024b4:	20000268 	.word	0x20000268

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000268 	.word	0x20000268

080024d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002502:	4a04      	ldr	r2, [pc, #16]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60d3      	str	r3, [r2, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0b      	blt.n	800255e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4907      	ldr	r1, [pc, #28]	; (800256c <__NVIC_EnableIRQ+0x38>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100

08002570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db0a      	blt.n	800259a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	490c      	ldr	r1, [pc, #48]	; (80025bc <__NVIC_SetPriority+0x4c>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	440b      	add	r3, r1
 8002594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002598:	e00a      	b.n	80025b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4908      	ldr	r1, [pc, #32]	; (80025c0 <__NVIC_SetPriority+0x50>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3b04      	subs	r3, #4
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	761a      	strb	r2, [r3, #24]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf28      	it	cs
 80025e2:	2304      	movcs	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d902      	bls.n	80025f4 <NVIC_EncodePriority+0x30>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3b03      	subs	r3, #3
 80025f2:	e000      	b.n	80025f6 <NVIC_EncodePriority+0x32>
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800260c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43d9      	mvns	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	4313      	orrs	r3, r2
         );
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	; 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff4c 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002652:	f7ff ff61 	bl	8002518 <__NVIC_GetPriorityGrouping>
 8002656:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	6978      	ldr	r0, [r7, #20]
 800265e:	f7ff ffb1 	bl	80025c4 <NVIC_EncodePriority>
 8002662:	4602      	mov	r2, r0
 8002664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff80 	bl	8002570 <__NVIC_SetPriority>
}
 8002670:	bf00      	nop
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff54 	bl	8002534 <__NVIC_EnableIRQ>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e098      	b.n	80027d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <HAL_DMA_Init+0x150>)
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d80f      	bhi.n	80026d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <HAL_DMA_Init+0x154>)
 80026ba:	4413      	add	r3, r2
 80026bc:	4a4b      	ldr	r2, [pc, #300]	; (80027ec <HAL_DMA_Init+0x158>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	009a      	lsls	r2, r3, #2
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a48      	ldr	r2, [pc, #288]	; (80027f0 <HAL_DMA_Init+0x15c>)
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
 80026d0:	e00e      	b.n	80026f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <HAL_DMA_Init+0x160>)
 80026da:	4413      	add	r3, r2
 80026dc:	4a43      	ldr	r2, [pc, #268]	; (80027ec <HAL_DMA_Init+0x158>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	009a      	lsls	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <HAL_DMA_Init+0x164>)
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800274a:	d039      	beq.n	80027c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_DMA_Init+0x15c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d11a      	bne.n	800278c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <HAL_DMA_Init+0x168>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f003 031c 	and.w	r3, r3, #28
 8002762:	210f      	movs	r1, #15
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	4924      	ldr	r1, [pc, #144]	; (80027fc <HAL_DMA_Init+0x168>)
 800276c:	4013      	ands	r3, r2
 800276e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_DMA_Init+0x168>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f003 031c 	and.w	r3, r3, #28
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	491d      	ldr	r1, [pc, #116]	; (80027fc <HAL_DMA_Init+0x168>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
 800278a:	e019      	b.n	80027c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_DMA_Init+0x16c>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f003 031c 	and.w	r3, r3, #28
 8002798:	210f      	movs	r1, #15
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	4917      	ldr	r1, [pc, #92]	; (8002800 <HAL_DMA_Init+0x16c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_DMA_Init+0x16c>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f003 031c 	and.w	r3, r3, #28
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	4911      	ldr	r1, [pc, #68]	; (8002800 <HAL_DMA_Init+0x16c>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40020407 	.word	0x40020407
 80027e8:	bffdfff8 	.word	0xbffdfff8
 80027ec:	cccccccd 	.word	0xcccccccd
 80027f0:	40020000 	.word	0x40020000
 80027f4:	bffdfbf8 	.word	0xbffdfbf8
 80027f8:	40020400 	.word	0x40020400
 80027fc:	400200a8 	.word	0x400200a8
 8002800:	400204a8 	.word	0x400204a8

08002804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_DMA_Start_IT+0x20>
 8002820:	2302      	movs	r3, #2
 8002822:	e04b      	b.n	80028bc <HAL_DMA_Start_IT+0xb8>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d13a      	bne.n	80028ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f8e0 	bl	8002a22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 020e 	orr.w	r2, r2, #14
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e00f      	b.n	800289c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0204 	bic.w	r2, r2, #4
 800288a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 020a 	orr.w	r2, r2, #10
 800289a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e005      	b.n	80028ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	f003 031c 	and.w	r3, r3, #28
 80028e4:	2204      	movs	r2, #4
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d026      	beq.n	800293e <HAL_DMA_IRQHandler+0x7a>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d021      	beq.n	800293e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	f003 021c 	and.w	r2, r3, #28
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	2104      	movs	r1, #4
 8002926:	fa01 f202 	lsl.w	r2, r1, r2
 800292a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	2b00      	cmp	r3, #0
 8002932:	d071      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800293c:	e06c      	b.n	8002a18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f003 031c 	and.w	r3, r3, #28
 8002946:	2202      	movs	r2, #2
 8002948:	409a      	lsls	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d02e      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xec>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d029      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 020a 	bic.w	r2, r2, #10
 8002978:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f003 021c 	and.w	r2, r3, #28
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2102      	movs	r1, #2
 8002990:	fa01 f202 	lsl.w	r2, r1, r2
 8002994:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d038      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80029ae:	e033      	b.n	8002a18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f003 031c 	and.w	r3, r3, #28
 80029b8:	2208      	movs	r2, #8
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02a      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x156>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d025      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 020e 	bic.w	r2, r2, #14
 80029dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 021c 	and.w	r2, r3, #28
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
}
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f003 021c 	and.w	r2, r3, #28
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d108      	bne.n	8002a66 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a64:	e007      	b.n	8002a76 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	60da      	str	r2, [r3, #12]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	e17f      	b.n	8002d94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8171 	beq.w	8002d8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d005      	beq.n	8002ac4 <HAL_GPIO_Init+0x40>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d130      	bne.n	8002b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002afa:	2201      	movs	r2, #1
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 0201 	and.w	r2, r3, #1
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d118      	bne.n	8002b64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b38:	2201      	movs	r2, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	f003 0201 	and.w	r2, r3, #1
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d017      	beq.n	8002ba0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d123      	bne.n	8002bf4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	08da      	lsrs	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3208      	adds	r2, #8
 8002bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	08da      	lsrs	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3208      	adds	r2, #8
 8002bee:	6939      	ldr	r1, [r7, #16]
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0203 	and.w	r2, r3, #3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80ac 	beq.w	8002d8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3a:	4a5e      	ldr	r2, [pc, #376]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6613      	str	r3, [r2, #96]	; 0x60
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c4e:	4a5a      	ldr	r2, [pc, #360]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c78:	d025      	beq.n	8002cc6 <HAL_GPIO_Init+0x242>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4f      	ldr	r2, [pc, #316]	; (8002dbc <HAL_GPIO_Init+0x338>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01f      	beq.n	8002cc2 <HAL_GPIO_Init+0x23e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4e      	ldr	r2, [pc, #312]	; (8002dc0 <HAL_GPIO_Init+0x33c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d019      	beq.n	8002cbe <HAL_GPIO_Init+0x23a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4d      	ldr	r2, [pc, #308]	; (8002dc4 <HAL_GPIO_Init+0x340>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_GPIO_Init+0x236>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <HAL_GPIO_Init+0x344>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00d      	beq.n	8002cb6 <HAL_GPIO_Init+0x232>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4b      	ldr	r2, [pc, #300]	; (8002dcc <HAL_GPIO_Init+0x348>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <HAL_GPIO_Init+0x22e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4a      	ldr	r2, [pc, #296]	; (8002dd0 <HAL_GPIO_Init+0x34c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_GPIO_Init+0x22a>
 8002caa:	2306      	movs	r3, #6
 8002cac:	e00c      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cae:	2307      	movs	r3, #7
 8002cb0:	e00a      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	e008      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e004      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	f002 0203 	and.w	r2, r2, #3
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cd8:	4937      	ldr	r1, [pc, #220]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d0a:	4a32      	ldr	r2, [pc, #200]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d10:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d34:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d5e:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d88:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f47f ae78 	bne.w	8002a94 <HAL_GPIO_Init+0x10>
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	48000400 	.word	0x48000400
 8002dc0:	48000800 	.word	0x48000800
 8002dc4:	48000c00 	.word	0x48000c00
 8002dc8:	48001000 	.word	0x48001000
 8002dcc:	48001400 	.word	0x48001400
 8002dd0:	48001800 	.word	0x48001800
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e001      	b.n	8002dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e24:	e002      	b.n	8002e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40007000 	.word	0x40007000

08002e58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40007000 	.word	0x40007000

08002e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e82:	d130      	bne.n	8002ee6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e84:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e90:	d038      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2232      	movs	r2, #50	; 0x32
 8002ea8:	fb02 f303 	mul.w	r3, r2, r3
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb8:	e002      	b.n	8002ec0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ecc:	d102      	bne.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f2      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee0:	d110      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e00f      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef2:	d007      	beq.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002efc:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	431bde83 	.word	0x431bde83

08002f20 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40007000 	.word	0x40007000

08002f40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e3ca      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f52:	4b97      	ldr	r3, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f5c:	4b94      	ldr	r3, [pc, #592]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80e4 	beq.w	800313c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4a>
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	f040 808b 	bne.w	8003098 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 8087 	bne.w	8003098 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8a:	4b89      	ldr	r3, [pc, #548]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e3a2      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_RCC_OscConfig+0x7c>
 8002fb2:	4b7f      	ldr	r3, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_OscConfig+0x88>
 8002fbc:	4b7c      	ldr	r3, [pc, #496]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d223      	bcs.n	8003014 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fd87 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e383      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f043 0308 	orr.w	r3, r3, #8
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	496d      	ldr	r1, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	4968      	ldr	r1, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
 8003012:	e025      	b.n	8003060 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003014:	4b66      	ldr	r3, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a65      	ldr	r2, [pc, #404]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4960      	ldr	r1, [pc, #384]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	495b      	ldr	r1, [pc, #364]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fd47 	bl	8003ae4 <RCC_SetFlashLatencyFromMSIRange>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e343      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003060:	f000 fc4a 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	4950      	ldr	r1, [pc, #320]	; (80031b4 <HAL_RCC_OscConfig+0x274>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <HAL_RCC_OscConfig+0x278>)
 800307e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003080:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCC_OscConfig+0x27c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe ff05 	bl	8001e94 <HAL_InitTick>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d052      	beq.n	800313a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	e327      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d032      	beq.n	8003106 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a42      	ldr	r2, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ac:	f7ff fa04 	bl	80024b8 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b4:	f7ff fa00 	bl	80024b8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e310      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c6:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d2:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a36      	ldr	r2, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4931      	ldr	r1, [pc, #196]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f0:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	492c      	ldr	r1, [pc, #176]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	e01a      	b.n	800313c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003112:	f7ff f9d1 	bl	80024b8 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800311a:	f7ff f9cd 	bl	80024b8 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e2dd      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x1da>
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800313a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d074      	beq.n	8003232 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x21a>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d10e      	bne.n	8003172 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d10b      	bne.n	8003172 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d064      	beq.n	8003230 <HAL_RCC_OscConfig+0x2f0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d160      	bne.n	8003230 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e2ba      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x24a>
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	e026      	b.n	80031d8 <HAL_RCC_OscConfig+0x298>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003192:	d115      	bne.n	80031c0 <HAL_RCC_OscConfig+0x280>
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800319a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a02      	ldr	r2, [pc, #8]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x298>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	0800a720 	.word	0x0800a720
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000004 	.word	0x20000004
 80031c0:	4ba0      	ldr	r3, [pc, #640]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a9f      	ldr	r2, [pc, #636]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b9d      	ldr	r3, [pc, #628]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a9c      	ldr	r2, [pc, #624]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7ff f96a 	bl	80024b8 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7ff f966 	bl	80024b8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e276      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fa:	4b92      	ldr	r3, [pc, #584]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x2a8>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7ff f956 	bl	80024b8 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7ff f952 	bl	80024b8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e262      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x2d0>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d060      	beq.n	8003300 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x310>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d119      	bne.n	800327e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d116      	bne.n	800327e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	4b7c      	ldr	r3, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_OscConfig+0x328>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e23f      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	4973      	ldr	r1, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327c:	e040      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d023      	beq.n	80032ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003286:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6e      	ldr	r2, [pc, #440]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7ff f911 	bl	80024b8 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329a:	f7ff f90d 	bl	80024b8 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e21d      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	495f      	ldr	r1, [pc, #380]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
 80032cc:	e018      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b5d      	ldr	r3, [pc, #372]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5c      	ldr	r2, [pc, #368]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7ff f8ed 	bl	80024b8 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7ff f8e9 	bl	80024b8 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1f9      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d03c      	beq.n	8003386 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01c      	beq.n	800334e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003314:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331a:	4a4a      	ldr	r2, [pc, #296]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7ff f8c8 	bl	80024b8 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7ff f8c4 	bl	80024b8 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1d4      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ef      	beq.n	800332c <HAL_RCC_OscConfig+0x3ec>
 800334c:	e01b      	b.n	8003386 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003354:	4a3b      	ldr	r2, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7ff f8ab 	bl	80024b8 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003366:	f7ff f8a7 	bl	80024b8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1b7      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003378:	4b32      	ldr	r3, [pc, #200]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ef      	bne.n	8003366 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80a6 	beq.w	80034e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003398:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	; 0x58
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d118      	bne.n	80033fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d8:	f7ff f86e 	bl	80024b8 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e0:	f7ff f86a 	bl	80024b8 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e17a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d108      	bne.n	8003418 <HAL_RCC_OscConfig+0x4d8>
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003416:	e029      	b.n	800346c <HAL_RCC_OscConfig+0x52c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d115      	bne.n	800344c <HAL_RCC_OscConfig+0x50c>
 8003420:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	4a03      	ldr	r2, [pc, #12]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003440:	e014      	b.n	800346c <HAL_RCC_OscConfig+0x52c>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
 800344c:	4b9c      	ldr	r3, [pc, #624]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a9b      	ldr	r2, [pc, #620]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800345c:	4b98      	ldr	r3, [pc, #608]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a97      	ldr	r2, [pc, #604]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7ff f820 	bl	80024b8 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7ff f81c 	bl	80024b8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e12a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	4b8b      	ldr	r3, [pc, #556]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ed      	beq.n	800347c <HAL_RCC_OscConfig+0x53c>
 80034a0:	e015      	b.n	80034ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7ff f809 	bl	80024b8 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7ff f805 	bl	80024b8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e113      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c0:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ed      	bne.n	80034aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ce:	7ffb      	ldrb	r3, [r7, #31]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	4a79      	ldr	r2, [pc, #484]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80fe 	beq.w	80036e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	f040 80d0 	bne.w	8003694 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034f4:	4b72      	ldr	r3, [pc, #456]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	429a      	cmp	r2, r3
 8003506:	d130      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	3b01      	subs	r3, #1
 8003514:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d127      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d11f      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003534:	2a07      	cmp	r2, #7
 8003536:	bf14      	ite	ne
 8003538:	2201      	movne	r2, #1
 800353a:	2200      	moveq	r2, #0
 800353c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353e:	4293      	cmp	r3, r2
 8003540:	d113      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d109      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d06e      	beq.n	8003648 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	d069      	beq.n	8003644 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800357c:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0ad      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a4b      	ldr	r2, [pc, #300]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003596:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003598:	f7fe ff8e 	bl	80024b8 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe ff8a 	bl	80024b8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e09a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <HAL_RCC_OscConfig+0x784>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ce:	3a01      	subs	r2, #1
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d8:	0212      	lsls	r2, r2, #8
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035e0:	0852      	lsrs	r2, r2, #1
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0552      	lsls	r2, r2, #21
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035ec:	0852      	lsrs	r2, r2, #1
 80035ee:	3a01      	subs	r2, #1
 80035f0:	0652      	lsls	r2, r2, #25
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f8:	0912      	lsrs	r2, r2, #4
 80035fa:	0452      	lsls	r2, r2, #17
 80035fc:	430a      	orrs	r2, r1
 80035fe:	4930      	ldr	r1, [pc, #192]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003600:	4313      	orrs	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2d      	ldr	r2, [pc, #180]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800361c:	f7fe ff4c 	bl	80024b8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe ff48 	bl	80024b8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e058      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003642:	e050      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04f      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d148      	bne.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800366c:	f7fe ff24 	bl	80024b8 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe ff20 	bl	80024b8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e030      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x734>
 8003692:	e028      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d023      	beq.n	80036e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80036a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe ff07 	bl	80024b8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	e00c      	b.n	80036c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fe ff03 	bl	80024b8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d905      	bls.n	80036c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e013      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ec      	bne.n	80036ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4905      	ldr	r1, [pc, #20]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCC_OscConfig+0x7b4>)
 80036dc:	4013      	ands	r3, r2
 80036de:	60cb      	str	r3, [r1, #12]
 80036e0:	e001      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	feeefffc 	.word	0xfeeefffc

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0e7      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b75      	ldr	r3, [pc, #468]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b72      	ldr	r3, [pc, #456]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 0207 	bic.w	r2, r3, #7
 8003722:	4970      	ldr	r1, [pc, #448]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b6e      	ldr	r3, [pc, #440]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0cf      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003754:	429a      	cmp	r2, r3
 8003756:	d908      	bls.n	800376a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003758:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4960      	ldr	r1, [pc, #384]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04c      	beq.n	8003810 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377e:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0a6      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	4b54      	ldr	r3, [pc, #336]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d115      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e09a      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ae:	4b4e      	ldr	r3, [pc, #312]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e08e      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e086      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4943      	ldr	r1, [pc, #268]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e0:	f7fe fe6a 	bl	80024b8 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fe fe66 	bl	80024b8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e06e      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003828:	429a      	cmp	r2, r3
 800382a:	d208      	bcs.n	800383e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	492b      	ldr	r1, [pc, #172]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d210      	bcs.n	800386e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 0207 	bic.w	r2, r3, #7
 8003854:	4923      	ldr	r1, [pc, #140]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e036      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4918      	ldr	r1, [pc, #96]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4910      	ldr	r1, [pc, #64]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ac:	f000 f824 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	490b      	ldr	r1, [pc, #44]	; (80038ec <HAL_RCC_ClockConfig+0x1f4>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1f8>)
 80038ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1fc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fadf 	bl	8001e94 <HAL_InitTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038da:	7afb      	ldrb	r3, [r7, #11]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40021000 	.word	0x40021000
 80038ec:	0800a720 	.word	0x0800a720
 80038f0:	20000000 	.word	0x20000000
 80038f4:	20000004 	.word	0x20000004

080038f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003906:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003910:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x34>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d121      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d11e      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800392c:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e005      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10d      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d102      	bne.n	8003976 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003970:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e004      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d101      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x114>)
 800397e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d134      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003986:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xa6>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d003      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0xac>
 800399c:	e005      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x114>)
 80039a6:	617b      	str	r3, [r7, #20]
      break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	617b      	str	r3, [r7, #20]
      break;
 80039ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b0:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	fb03 f202 	mul.w	r2, r3, r2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	0e5b      	lsrs	r3, r3, #25
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	3301      	adds	r3, #1
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039f0:	69bb      	ldr	r3, [r7, #24]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	0800a738 	.word	0x0800a738
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4904      	ldr	r1, [pc, #16]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	0800a730 	.word	0x0800a730

08003a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a58:	f7ff ffda 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0adb      	lsrs	r3, r3, #11
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4904      	ldr	r1, [pc, #16]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	0800a730 	.word	0x0800a730

08003a80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	220f      	movs	r2, #15
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0203 	and.w	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_RCC_GetClockConfig+0x5c>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_GetClockConfig+0x5c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	08db      	lsrs	r3, r3, #3
 8003aba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <HAL_RCC_GetClockConfig+0x60>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0207 	and.w	r2, r3, #7
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40022000 	.word	0x40022000

08003ae4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003afc:	f7ff f9ac 	bl	8002e58 <HAL_PWREx_GetVoltageRange>
 8003b00:	6178      	str	r0, [r7, #20]
 8003b02:	e014      	b.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b10:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b1c:	f7ff f99c 	bl	8002e58 <HAL_PWREx_GetVoltageRange>
 8003b20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d10b      	bne.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b80      	cmp	r3, #128	; 0x80
 8003b3a:	d919      	bls.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b40:	d902      	bls.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b42:	2302      	movs	r3, #2
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e013      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b48:	2301      	movs	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e010      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d902      	bls.n	8003b5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b54:	2303      	movs	r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e00a      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d102      	bne.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b60:	2302      	movs	r3, #2
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	e004      	b.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b70      	cmp	r3, #112	; 0x70
 8003b6a:	d101      	bne.n	8003b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0207 	bic.w	r2, r3, #7
 8003b78:	4909      	ldr	r1, [pc, #36]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40022000 	.word	0x40022000

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bac:	2300      	movs	r3, #0
 8003bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d041      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bc8:	d02a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bce:	d824      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bda:	d81e      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be4:	d010      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003be6:	e018      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be8:	4b86      	ldr	r3, [pc, #536]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a85      	ldr	r2, [pc, #532]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf4:	e015      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 facb 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c06:	e00c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3320      	adds	r3, #32
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fbb6 	bl	8004380 <RCCEx_PLLSAI2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c18:	e003      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c28:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c36:	4973      	ldr	r1, [pc, #460]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c3e:	e001      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d041      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c58:	d02a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c5e:	d824      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c64:	d008      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c6a:	d81e      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c74:	d010      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c76:	e018      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c78:	4b62      	ldr	r3, [pc, #392]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a61      	ldr	r2, [pc, #388]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c84:	e015      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa83 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c96:	e00c      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3320      	adds	r3, #32
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fb6e 	bl	8004380 <RCCEx_PLLSAI2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	74fb      	strb	r3, [r7, #19]
      break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb8:	4b52      	ldr	r3, [pc, #328]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc6:	494f      	ldr	r1, [pc, #316]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cce:	e001      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a0 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ce6:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00d      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfc:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	4a40      	ldr	r2, [pc, #256]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6593      	str	r3, [r2, #88]	; 0x58
 8003d08:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d14:	2301      	movs	r3, #1
 8003d16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d18:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3a      	ldr	r2, [pc, #232]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d24:	f7fe fbc8 	bl	80024b8 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d2a:	e009      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fe fbc4 	bl	80024b8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d902      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d3e:	e005      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ef      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d15c      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d52:	4b2c      	ldr	r3, [pc, #176]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01f      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d019      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d70:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d7c:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fe fb83 	bl	80024b8 <HAL_GetTick>
 8003db2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db4:	e00b      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fe fb7f 	bl	80024b8 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d902      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	74fb      	strb	r3, [r7, #19]
            break;
 8003dcc:	e006      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ec      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df2:	4904      	ldr	r1, [pc, #16]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dfa:	e009      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	74bb      	strb	r3, [r7, #18]
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e10:	7c7b      	ldrb	r3, [r7, #17]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b9e      	ldr	r3, [pc, #632]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	4a9d      	ldr	r2, [pc, #628]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2e:	4b98      	ldr	r3, [pc, #608]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f023 0203 	bic.w	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	4994      	ldr	r1, [pc, #592]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e50:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f023 020c 	bic.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	498c      	ldr	r1, [pc, #560]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e72:	4b87      	ldr	r3, [pc, #540]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4983      	ldr	r1, [pc, #524]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e94:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	497b      	ldr	r1, [pc, #492]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eb6:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec4:	4972      	ldr	r1, [pc, #456]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed8:	4b6d      	ldr	r3, [pc, #436]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee6:	496a      	ldr	r1, [pc, #424]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	4961      	ldr	r1, [pc, #388]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f1c:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	4959      	ldr	r1, [pc, #356]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3e:	4b54      	ldr	r3, [pc, #336]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4c:	4950      	ldr	r1, [pc, #320]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	4948      	ldr	r1, [pc, #288]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f82:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	493f      	ldr	r1, [pc, #252]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d028      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa4:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb2:	4937      	ldr	r1, [pc, #220]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc4:	4b32      	ldr	r3, [pc, #200]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fce:	60d3      	str	r3, [r2, #12]
 8003fd0:	e011      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fda:	d10c      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f8d8 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d028      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	491f      	ldr	r1, [pc, #124]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004020:	d106      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800402c:	60d3      	str	r3, [r2, #12]
 800402e:	e011      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f8a9 	bl	8004198 <RCCEx_PLLSAI1_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02b      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406e:	4908      	ldr	r1, [pc, #32]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407e:	d109      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a02      	ldr	r2, [pc, #8]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408a:	60d3      	str	r3, [r2, #12]
 800408c:	e014      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3304      	adds	r3, #4
 80040a2:	2101      	movs	r1, #1
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f877 	bl	8004198 <RCCEx_PLLSAI1_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02f      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d2:	4928      	ldr	r1, [pc, #160]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e2:	d10d      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f854 	bl	8004198 <RCCEx_PLLSAI1_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d014      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	74bb      	strb	r3, [r7, #18]
 80040fe:	e011      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004108:	d10c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3320      	adds	r3, #32
 800410e:	2102      	movs	r1, #2
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f935 	bl	8004380 <RCCEx_PLLSAI2_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413e:	490d      	ldr	r1, [pc, #52]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004162:	4904      	ldr	r1, [pc, #16]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800416a:	7cbb      	ldrb	r3, [r7, #18]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000

08004178 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000

08004198 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041a6:	4b75      	ldr	r3, [pc, #468]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d018      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041b2:	4b72      	ldr	r3, [pc, #456]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0203 	and.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10d      	bne.n	80041de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
       ||
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ca:	4b6c      	ldr	r3, [pc, #432]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
       ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d047      	beq.n	800426e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e044      	b.n	800426e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d018      	beq.n	800421e <RCCEx_PLLSAI1_Config+0x86>
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d825      	bhi.n	800423c <RCCEx_PLLSAI1_Config+0xa4>
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d002      	beq.n	80041fa <RCCEx_PLLSAI1_Config+0x62>
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d009      	beq.n	800420c <RCCEx_PLLSAI1_Config+0x74>
 80041f8:	e020      	b.n	800423c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041fa:	4b60      	ldr	r3, [pc, #384]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11d      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420a:	e01a      	b.n	8004242 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800420c:	4b5b      	ldr	r3, [pc, #364]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004214:	2b00      	cmp	r3, #0
 8004216:	d116      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800421c:	e013      	b.n	8004246 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800421e:	4b57      	ldr	r3, [pc, #348]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10f      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800422a:	4b54      	ldr	r3, [pc, #336]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800423a:	e006      	b.n	800424a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      break;
 8004240:	e004      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004242:	bf00      	nop
 8004244:	e002      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800424a:	bf00      	nop
    }

    if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	430b      	orrs	r3, r1
 8004268:	4944      	ldr	r1, [pc, #272]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d17d      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004274:	4b41      	ldr	r3, [pc, #260]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a40      	ldr	r2, [pc, #256]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800427e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004280:	f7fe f91a 	bl	80024b8 <HAL_GetTick>
 8004284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004286:	e009      	b.n	800429c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004288:	f7fe f916 	bl	80024b8 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d902      	bls.n	800429c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	73fb      	strb	r3, [r7, #15]
        break;
 800429a:	e005      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800429c:	4b37      	ldr	r3, [pc, #220]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ef      	bne.n	8004288 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d160      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d111      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6892      	ldr	r2, [r2, #8]
 80042c4:	0211      	lsls	r1, r2, #8
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68d2      	ldr	r2, [r2, #12]
 80042ca:	0912      	lsrs	r2, r2, #4
 80042cc:	0452      	lsls	r2, r2, #17
 80042ce:	430a      	orrs	r2, r1
 80042d0:	492a      	ldr	r1, [pc, #168]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]
 80042d6:	e027      	b.n	8004328 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d112      	bne.n	8004304 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042de:	4b27      	ldr	r3, [pc, #156]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6892      	ldr	r2, [r2, #8]
 80042ee:	0211      	lsls	r1, r2, #8
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6912      	ldr	r2, [r2, #16]
 80042f4:	0852      	lsrs	r2, r2, #1
 80042f6:	3a01      	subs	r2, #1
 80042f8:	0552      	lsls	r2, r2, #21
 80042fa:	430a      	orrs	r2, r1
 80042fc:	491f      	ldr	r1, [pc, #124]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]
 8004302:	e011      	b.n	8004328 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004304:	4b1d      	ldr	r3, [pc, #116]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800430c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	0211      	lsls	r1, r2, #8
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6952      	ldr	r2, [r2, #20]
 800431a:	0852      	lsrs	r2, r2, #1
 800431c:	3a01      	subs	r2, #1
 800431e:	0652      	lsls	r2, r2, #25
 8004320:	430a      	orrs	r2, r1
 8004322:	4916      	ldr	r1, [pc, #88]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004328:	4b14      	ldr	r3, [pc, #80]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fe f8c0 	bl	80024b8 <HAL_GetTick>
 8004338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800433a:	e009      	b.n	8004350 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800433c:	f7fe f8bc 	bl	80024b8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d902      	bls.n	8004350 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	73fb      	strb	r3, [r7, #15]
          break;
 800434e:	e005      	b.n	800435c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ef      	beq.n	800433c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	4904      	ldr	r1, [pc, #16]	; (800437c <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000

08004380 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800438e:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800439a:	4b67      	ldr	r3, [pc, #412]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0203 	and.w	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d10d      	bne.n	80043c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
       ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043b2:	4b61      	ldr	r3, [pc, #388]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
       ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d047      	beq.n	8004456 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
 80043ca:	e044      	b.n	8004456 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d018      	beq.n	8004406 <RCCEx_PLLSAI2_Config+0x86>
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d825      	bhi.n	8004424 <RCCEx_PLLSAI2_Config+0xa4>
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d002      	beq.n	80043e2 <RCCEx_PLLSAI2_Config+0x62>
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d009      	beq.n	80043f4 <RCCEx_PLLSAI2_Config+0x74>
 80043e0:	e020      	b.n	8004424 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043e2:	4b55      	ldr	r3, [pc, #340]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11d      	bne.n	800442a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f2:	e01a      	b.n	800442a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043f4:	4b50      	ldr	r3, [pc, #320]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d116      	bne.n	800442e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004404:	e013      	b.n	800442e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004406:	4b4c      	ldr	r3, [pc, #304]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004412:	4b49      	ldr	r3, [pc, #292]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004422:	e006      	b.n	8004432 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      break;
 8004428:	e004      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442a:	bf00      	nop
 800442c:	e002      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442e:	bf00      	nop
 8004430:	e000      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004432:	bf00      	nop
    }

    if(status == HAL_OK)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10d      	bne.n	8004456 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800443a:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	430b      	orrs	r3, r1
 8004450:	4939      	ldr	r1, [pc, #228]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d167      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800445c:	4b36      	ldr	r3, [pc, #216]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a35      	ldr	r2, [pc, #212]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004468:	f7fe f826 	bl	80024b8 <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800446e:	e009      	b.n	8004484 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004470:	f7fe f822 	bl	80024b8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d902      	bls.n	8004484 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	73fb      	strb	r3, [r7, #15]
        break;
 8004482:	e005      	b.n	8004490 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004484:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ef      	bne.n	8004470 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d14a      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d111      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800449c:	4b26      	ldr	r3, [pc, #152]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6892      	ldr	r2, [r2, #8]
 80044ac:	0211      	lsls	r1, r2, #8
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68d2      	ldr	r2, [r2, #12]
 80044b2:	0912      	lsrs	r2, r2, #4
 80044b4:	0452      	lsls	r2, r2, #17
 80044b6:	430a      	orrs	r2, r1
 80044b8:	491f      	ldr	r1, [pc, #124]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	614b      	str	r3, [r1, #20]
 80044be:	e011      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6892      	ldr	r2, [r2, #8]
 80044d0:	0211      	lsls	r1, r2, #8
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6912      	ldr	r2, [r2, #16]
 80044d6:	0852      	lsrs	r2, r2, #1
 80044d8:	3a01      	subs	r2, #1
 80044da:	0652      	lsls	r2, r2, #25
 80044dc:	430a      	orrs	r2, r1
 80044de:	4916      	ldr	r1, [pc, #88]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044e4:	4b14      	ldr	r3, [pc, #80]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a13      	ldr	r2, [pc, #76]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd ffe2 	bl	80024b8 <HAL_GetTick>
 80044f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044f6:	e009      	b.n	800450c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044f8:	f7fd ffde 	bl	80024b8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d902      	bls.n	800450c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	73fb      	strb	r3, [r7, #15]
          break;
 800450a:	e005      	b.n	8004518 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ef      	beq.n	80044f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4904      	ldr	r1, [pc, #16]	; (8004538 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000

0800453c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e095      	b.n	800467a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455e:	d009      	beq.n	8004574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e005      	b.n	8004574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fbc8 	bl	8001d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b4:	d902      	bls.n	80045bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e002      	b.n	80045c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045ca:	d007      	beq.n	80045dc <HAL_SPI_Init+0xa0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045d4:	d002      	beq.n	80045dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	ea42 0103 	orr.w	r1, r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	f003 0204 	and.w	r2, r3, #4
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004658:	ea42 0103 	orr.w	r1, r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_SPI_Transmit_DMA+0x20>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0d4      	b.n	800484e <HAL_SPI_Transmit_DMA+0x1ca>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d002      	beq.n	80046be <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
 80046ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046bc:	e0c2      	b.n	8004844 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_SPI_Transmit_DMA+0x46>
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046ce:	e0b9      	b.n	8004844 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2203      	movs	r2, #3
 80046d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	88fa      	ldrh	r2, [r7, #6]
 80046ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471a:	d10f      	bne.n	800473c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800473a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	4a45      	ldr	r2, [pc, #276]	; (8004858 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004742:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004748:	4a44      	ldr	r2, [pc, #272]	; (800485c <HAL_SPI_Transmit_DMA+0x1d8>)
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	4a43      	ldr	r2, [pc, #268]	; (8004860 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	2200      	movs	r2, #0
 800475a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800476a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004774:	d82d      	bhi.n	80047d2 <HAL_SPI_Transmit_DMA+0x14e>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004780:	d127      	bne.n	80047d2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10f      	bne.n	80047b0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800479e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047ae:	e010      	b.n	80047d2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047be:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	4619      	mov	r1, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047ea:	f7fe f80b 	bl	8002804 <HAL_DMA_Start_IT>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f8:	f043 0210 	orr.w	r2, r3, #16
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004804:	e01e      	b.n	8004844 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d007      	beq.n	8004824 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004822:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0220 	orr.w	r2, r2, #32
 8004832:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0202 	orr.w	r2, r2, #2
 8004842:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	08004933 	.word	0x08004933
 800485c:	0800488d 	.word	0x0800488d
 8004860:	0800494f 	.word	0x0800494f

08004864 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800489a:	f7fd fe0d 	bl	80024b8 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d03b      	beq.n	8004926 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0220 	bic.w	r2, r2, #32
 80048bc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0202 	bic.w	r2, r2, #2
 80048cc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	2164      	movs	r1, #100	; 0x64
 80048d2:	6978      	ldr	r0, [r7, #20]
 80048d4:	f000 f97a 	bl	8004bcc <SPI_EndRxTxTransaction>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e2:	f043 0220 	orr.w	r2, r3, #32
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2200      	movs	r2, #0
 800490c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800491e:	6978      	ldr	r0, [r7, #20]
 8004920:	f7ff ffaa 	bl	8004878 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004924:	e002      	b.n	800492c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004926:	6978      	ldr	r0, [r7, #20]
 8004928:	f7fd f8fc 	bl	8001b24 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f7ff ff8f 	bl	8004864 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0203 	bic.w	r2, r2, #3
 800496a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004970:	f043 0210 	orr.w	r2, r3, #16
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff ff79 	bl	8004878 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049a0:	f7fd fd8a 	bl	80024b8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	4413      	add	r3, r2
 80049ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049b0:	f7fd fd82 	bl	80024b8 <HAL_GetTick>
 80049b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049b6:	4b39      	ldr	r3, [pc, #228]	; (8004a9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	015b      	lsls	r3, r3, #5
 80049bc:	0d1b      	lsrs	r3, r3, #20
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049c6:	e054      	b.n	8004a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ce:	d050      	beq.n	8004a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049d0:	f7fd fd72 	bl	80024b8 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d902      	bls.n	80049e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d13d      	bne.n	8004a62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fe:	d111      	bne.n	8004a24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a08:	d004      	beq.n	8004a14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a12:	d107      	bne.n	8004a24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2c:	d10f      	bne.n	8004a4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e017      	b.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	bf0c      	ite	eq
 8004a82:	2301      	moveq	r3, #1
 8004a84:	2300      	movne	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d19b      	bne.n	80049c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000000 	.word	0x20000000

08004aa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ab2:	f7fd fd01 	bl	80024b8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	4413      	add	r3, r2
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004ac2:	f7fd fcf9 	bl	80024b8 <HAL_GetTick>
 8004ac6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ad0:	4b3d      	ldr	r3, [pc, #244]	; (8004bc8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	00da      	lsls	r2, r3, #3
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	0d1b      	lsrs	r3, r3, #20
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ae8:	e060      	b.n	8004bac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004af0:	d107      	bne.n	8004b02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b08:	d050      	beq.n	8004bac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b0a:	f7fd fcd5 	bl	80024b8 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d902      	bls.n	8004b20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d13d      	bne.n	8004b9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b38:	d111      	bne.n	8004b5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b42:	d004      	beq.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4c:	d107      	bne.n	8004b5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b66:	d10f      	bne.n	8004b88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e010      	b.n	8004bbe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d196      	bne.n	8004aea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3728      	adds	r7, #40	; 0x28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000000 	.word	0x20000000

08004bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff ff5b 	bl	8004aa0 <SPI_WaitFifoStateUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e027      	b.n	8004c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2200      	movs	r2, #0
 8004c08:	2180      	movs	r1, #128	; 0x80
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fec0 	bl	8004990 <SPI_WaitFlagStateUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e014      	b.n	8004c50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff ff34 	bl	8004aa0 <SPI_WaitFifoStateUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c42:	f043 0220 	orr.w	r2, r3, #32
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e000      	b.n	8004c50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e049      	b.n	8004cfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f841 	bl	8004d06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f000 f9da 	bl	8005050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d001      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e04f      	b.n	8004dd4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a23      	ldr	r2, [pc, #140]	; (8004de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01d      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0x76>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5e:	d018      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0x76>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0x76>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00e      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0x76>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <HAL_TIM_Base_Start_IT+0xd0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d009      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0x76>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d004      	beq.n	8004d92 <HAL_TIM_Base_Start_IT+0x76>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d115      	bne.n	8004dbe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b06      	cmp	r3, #6
 8004da2:	d015      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0xb4>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004daa:	d011      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	e008      	b.n	8004dd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e000      	b.n	8004dd2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40013400 	.word	0x40013400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	00010007 	.word	0x00010007

08004dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d020      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0202 	mvn.w	r2, #2
 8004e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f8e4 	bl	8005014 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8d6 	bl	8005000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f8e7 	bl	8005028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d020      	beq.n	8004eac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01b      	beq.n	8004eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0204 	mvn.w	r2, #4
 8004e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f8be 	bl	8005014 <HAL_TIM_IC_CaptureCallback>
 8004e98:	e005      	b.n	8004ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f8b0 	bl	8005000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8c1 	bl	8005028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d020      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01b      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0208 	mvn.w	r2, #8
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f898 	bl	8005014 <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f88a 	bl	8005000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f89b 	bl	8005028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d020      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01b      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0210 	mvn.w	r2, #16
 8004f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f872 	bl	8005014 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f864 	bl	8005000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f875 	bl	8005028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0201 	mvn.w	r2, #1
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fc fe88 	bl	8001c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f906 	bl	8005198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00c      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8fe 	bl	80051ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00c      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f834 	bl	800503c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0220 	mvn.w	r2, #32
 8004ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f8c6 	bl	8005184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a40      	ldr	r2, [pc, #256]	; (8005164 <TIM_Base_SetConfig+0x114>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d013      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506e:	d00f      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a3d      	ldr	r2, [pc, #244]	; (8005168 <TIM_Base_SetConfig+0x118>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00b      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a3c      	ldr	r2, [pc, #240]	; (800516c <TIM_Base_SetConfig+0x11c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d007      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a3b      	ldr	r2, [pc, #236]	; (8005170 <TIM_Base_SetConfig+0x120>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a3a      	ldr	r2, [pc, #232]	; (8005174 <TIM_Base_SetConfig+0x124>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d108      	bne.n	80050a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a2f      	ldr	r2, [pc, #188]	; (8005164 <TIM_Base_SetConfig+0x114>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d01f      	beq.n	80050ea <TIM_Base_SetConfig+0x9a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b0:	d01b      	beq.n	80050ea <TIM_Base_SetConfig+0x9a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <TIM_Base_SetConfig+0x118>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d017      	beq.n	80050ea <TIM_Base_SetConfig+0x9a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a2b      	ldr	r2, [pc, #172]	; (800516c <TIM_Base_SetConfig+0x11c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <TIM_Base_SetConfig+0x9a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <TIM_Base_SetConfig+0x120>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00f      	beq.n	80050ea <TIM_Base_SetConfig+0x9a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a29      	ldr	r2, [pc, #164]	; (8005174 <TIM_Base_SetConfig+0x124>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00b      	beq.n	80050ea <TIM_Base_SetConfig+0x9a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a28      	ldr	r2, [pc, #160]	; (8005178 <TIM_Base_SetConfig+0x128>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d007      	beq.n	80050ea <TIM_Base_SetConfig+0x9a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a27      	ldr	r2, [pc, #156]	; (800517c <TIM_Base_SetConfig+0x12c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_Base_SetConfig+0x9a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a26      	ldr	r2, [pc, #152]	; (8005180 <TIM_Base_SetConfig+0x130>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d108      	bne.n	80050fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a10      	ldr	r2, [pc, #64]	; (8005164 <TIM_Base_SetConfig+0x114>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00f      	beq.n	8005148 <TIM_Base_SetConfig+0xf8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <TIM_Base_SetConfig+0x124>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0xf8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a11      	ldr	r2, [pc, #68]	; (8005178 <TIM_Base_SetConfig+0x128>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0xf8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a10      	ldr	r2, [pc, #64]	; (800517c <TIM_Base_SetConfig+0x12c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0xf8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0f      	ldr	r2, [pc, #60]	; (8005180 <TIM_Base_SetConfig+0x130>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d103      	bne.n	8005150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	615a      	str	r2, [r3, #20]
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40013400 	.word	0x40013400
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800

08005184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e040      	b.n	8005254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fd f8ae 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2224      	movs	r2, #36	; 0x24
 80051ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fb6a 	bl	80058e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8af 	bl	8005370 <UART_SetConfig>
 8005212:	4603      	mov	r3, r0
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e01b      	b.n	8005254 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800522a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800523a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fbe9 	bl	8005a24 <UART_CheckIdleState>
 8005252:	4603      	mov	r3, r0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	; 0x28
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005270:	2b20      	cmp	r3, #32
 8005272:	d178      	bne.n	8005366 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_UART_Transmit+0x24>
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e071      	b.n	8005368 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2221      	movs	r2, #33	; 0x21
 8005290:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005292:	f7fd f911 	bl	80024b8 <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b0:	d108      	bne.n	80052c4 <HAL_UART_Transmit+0x68>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e003      	b.n	80052cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052cc:	e030      	b.n	8005330 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	2180      	movs	r1, #128	; 0x80
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fc4b 	bl	8005b74 <UART_WaitOnFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e03c      	b.n	8005368 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	881a      	ldrh	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005300:	b292      	uxth	r2, r2
 8005302:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	3302      	adds	r3, #2
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	e008      	b.n	800531e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	781a      	ldrb	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b292      	uxth	r2, r2
 8005316:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	3301      	adds	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1c8      	bne.n	80052ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2200      	movs	r2, #0
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fc14 	bl	8005b74 <UART_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e005      	b.n	8005368 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	e000      	b.n	8005368 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005366:	2302      	movs	r3, #2
  }
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005374:	b08a      	sub	sp, #40	; 0x28
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	431a      	orrs	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	4313      	orrs	r3, r2
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4ba4      	ldr	r3, [pc, #656]	; (8005630 <UART_SetConfig+0x2c0>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a99      	ldr	r2, [pc, #612]	; (8005634 <UART_SetConfig+0x2c4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	4313      	orrs	r3, r2
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a90      	ldr	r2, [pc, #576]	; (8005638 <UART_SetConfig+0x2c8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d126      	bne.n	8005448 <UART_SetConfig+0xd8>
 80053fa:	4b90      	ldr	r3, [pc, #576]	; (800563c <UART_SetConfig+0x2cc>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b03      	cmp	r3, #3
 8005406:	d81b      	bhi.n	8005440 <UART_SetConfig+0xd0>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <UART_SetConfig+0xa0>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005421 	.word	0x08005421
 8005414:	08005431 	.word	0x08005431
 8005418:	08005429 	.word	0x08005429
 800541c:	08005439 	.word	0x08005439
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005426:	e116      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005428:	2302      	movs	r3, #2
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542e:	e112      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005430:	2304      	movs	r3, #4
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005436:	e10e      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005438:	2308      	movs	r3, #8
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543e:	e10a      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005440:	2310      	movs	r3, #16
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005446:	e106      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a7c      	ldr	r2, [pc, #496]	; (8005640 <UART_SetConfig+0x2d0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d138      	bne.n	80054c4 <UART_SetConfig+0x154>
 8005452:	4b7a      	ldr	r3, [pc, #488]	; (800563c <UART_SetConfig+0x2cc>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f003 030c 	and.w	r3, r3, #12
 800545c:	2b0c      	cmp	r3, #12
 800545e:	d82d      	bhi.n	80054bc <UART_SetConfig+0x14c>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0xf8>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	0800549d 	.word	0x0800549d
 800546c:	080054bd 	.word	0x080054bd
 8005470:	080054bd 	.word	0x080054bd
 8005474:	080054bd 	.word	0x080054bd
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054bd 	.word	0x080054bd
 8005480:	080054bd 	.word	0x080054bd
 8005484:	080054bd 	.word	0x080054bd
 8005488:	080054a5 	.word	0x080054a5
 800548c:	080054bd 	.word	0x080054bd
 8005490:	080054bd 	.word	0x080054bd
 8005494:	080054bd 	.word	0x080054bd
 8005498:	080054b5 	.word	0x080054b5
 800549c:	2300      	movs	r3, #0
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e0d8      	b.n	8005656 <UART_SetConfig+0x2e6>
 80054a4:	2302      	movs	r3, #2
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e0d4      	b.n	8005656 <UART_SetConfig+0x2e6>
 80054ac:	2304      	movs	r3, #4
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b2:	e0d0      	b.n	8005656 <UART_SetConfig+0x2e6>
 80054b4:	2308      	movs	r3, #8
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ba:	e0cc      	b.n	8005656 <UART_SetConfig+0x2e6>
 80054bc:	2310      	movs	r3, #16
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e0c8      	b.n	8005656 <UART_SetConfig+0x2e6>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5e      	ldr	r2, [pc, #376]	; (8005644 <UART_SetConfig+0x2d4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d125      	bne.n	800551a <UART_SetConfig+0x1aa>
 80054ce:	4b5b      	ldr	r3, [pc, #364]	; (800563c <UART_SetConfig+0x2cc>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054d8:	2b30      	cmp	r3, #48	; 0x30
 80054da:	d016      	beq.n	800550a <UART_SetConfig+0x19a>
 80054dc:	2b30      	cmp	r3, #48	; 0x30
 80054de:	d818      	bhi.n	8005512 <UART_SetConfig+0x1a2>
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d00a      	beq.n	80054fa <UART_SetConfig+0x18a>
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d814      	bhi.n	8005512 <UART_SetConfig+0x1a2>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <UART_SetConfig+0x182>
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d008      	beq.n	8005502 <UART_SetConfig+0x192>
 80054f0:	e00f      	b.n	8005512 <UART_SetConfig+0x1a2>
 80054f2:	2300      	movs	r3, #0
 80054f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f8:	e0ad      	b.n	8005656 <UART_SetConfig+0x2e6>
 80054fa:	2302      	movs	r3, #2
 80054fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005500:	e0a9      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005502:	2304      	movs	r3, #4
 8005504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005508:	e0a5      	b.n	8005656 <UART_SetConfig+0x2e6>
 800550a:	2308      	movs	r3, #8
 800550c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005510:	e0a1      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005512:	2310      	movs	r3, #16
 8005514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005518:	e09d      	b.n	8005656 <UART_SetConfig+0x2e6>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a4a      	ldr	r2, [pc, #296]	; (8005648 <UART_SetConfig+0x2d8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d125      	bne.n	8005570 <UART_SetConfig+0x200>
 8005524:	4b45      	ldr	r3, [pc, #276]	; (800563c <UART_SetConfig+0x2cc>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800552e:	2bc0      	cmp	r3, #192	; 0xc0
 8005530:	d016      	beq.n	8005560 <UART_SetConfig+0x1f0>
 8005532:	2bc0      	cmp	r3, #192	; 0xc0
 8005534:	d818      	bhi.n	8005568 <UART_SetConfig+0x1f8>
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d00a      	beq.n	8005550 <UART_SetConfig+0x1e0>
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d814      	bhi.n	8005568 <UART_SetConfig+0x1f8>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <UART_SetConfig+0x1d8>
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d008      	beq.n	8005558 <UART_SetConfig+0x1e8>
 8005546:	e00f      	b.n	8005568 <UART_SetConfig+0x1f8>
 8005548:	2300      	movs	r3, #0
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554e:	e082      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005550:	2302      	movs	r3, #2
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005556:	e07e      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005558:	2304      	movs	r3, #4
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555e:	e07a      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005560:	2308      	movs	r3, #8
 8005562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005566:	e076      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005568:	2310      	movs	r3, #16
 800556a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556e:	e072      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a35      	ldr	r2, [pc, #212]	; (800564c <UART_SetConfig+0x2dc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d12a      	bne.n	80055d0 <UART_SetConfig+0x260>
 800557a:	4b30      	ldr	r3, [pc, #192]	; (800563c <UART_SetConfig+0x2cc>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005588:	d01a      	beq.n	80055c0 <UART_SetConfig+0x250>
 800558a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558e:	d81b      	bhi.n	80055c8 <UART_SetConfig+0x258>
 8005590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005594:	d00c      	beq.n	80055b0 <UART_SetConfig+0x240>
 8005596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559a:	d815      	bhi.n	80055c8 <UART_SetConfig+0x258>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <UART_SetConfig+0x238>
 80055a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a4:	d008      	beq.n	80055b8 <UART_SetConfig+0x248>
 80055a6:	e00f      	b.n	80055c8 <UART_SetConfig+0x258>
 80055a8:	2300      	movs	r3, #0
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ae:	e052      	b.n	8005656 <UART_SetConfig+0x2e6>
 80055b0:	2302      	movs	r3, #2
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e04e      	b.n	8005656 <UART_SetConfig+0x2e6>
 80055b8:	2304      	movs	r3, #4
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e04a      	b.n	8005656 <UART_SetConfig+0x2e6>
 80055c0:	2308      	movs	r3, #8
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e046      	b.n	8005656 <UART_SetConfig+0x2e6>
 80055c8:	2310      	movs	r3, #16
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ce:	e042      	b.n	8005656 <UART_SetConfig+0x2e6>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a17      	ldr	r2, [pc, #92]	; (8005634 <UART_SetConfig+0x2c4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d13a      	bne.n	8005650 <UART_SetConfig+0x2e0>
 80055da:	4b18      	ldr	r3, [pc, #96]	; (800563c <UART_SetConfig+0x2cc>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055e8:	d01a      	beq.n	8005620 <UART_SetConfig+0x2b0>
 80055ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ee:	d81b      	bhi.n	8005628 <UART_SetConfig+0x2b8>
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f4:	d00c      	beq.n	8005610 <UART_SetConfig+0x2a0>
 80055f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fa:	d815      	bhi.n	8005628 <UART_SetConfig+0x2b8>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <UART_SetConfig+0x298>
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005604:	d008      	beq.n	8005618 <UART_SetConfig+0x2a8>
 8005606:	e00f      	b.n	8005628 <UART_SetConfig+0x2b8>
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560e:	e022      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005610:	2302      	movs	r3, #2
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005616:	e01e      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005618:	2304      	movs	r3, #4
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561e:	e01a      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005620:	2308      	movs	r3, #8
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005626:	e016      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005628:	2310      	movs	r3, #16
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562e:	e012      	b.n	8005656 <UART_SetConfig+0x2e6>
 8005630:	efff69f3 	.word	0xefff69f3
 8005634:	40008000 	.word	0x40008000
 8005638:	40013800 	.word	0x40013800
 800563c:	40021000 	.word	0x40021000
 8005640:	40004400 	.word	0x40004400
 8005644:	40004800 	.word	0x40004800
 8005648:	40004c00 	.word	0x40004c00
 800564c:	40005000 	.word	0x40005000
 8005650:	2310      	movs	r3, #16
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a9f      	ldr	r2, [pc, #636]	; (80058d8 <UART_SetConfig+0x568>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d17a      	bne.n	8005756 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005660:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005664:	2b08      	cmp	r3, #8
 8005666:	d824      	bhi.n	80056b2 <UART_SetConfig+0x342>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x300>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005695 	.word	0x08005695
 8005674:	080056b3 	.word	0x080056b3
 8005678:	0800569d 	.word	0x0800569d
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056a3 	.word	0x080056a3
 8005684:	080056b3 	.word	0x080056b3
 8005688:	080056b3 	.word	0x080056b3
 800568c:	080056b3 	.word	0x080056b3
 8005690:	080056ab 	.word	0x080056ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005694:	f7fe f9c8 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8005698:	61f8      	str	r0, [r7, #28]
        break;
 800569a:	e010      	b.n	80056be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800569c:	4b8f      	ldr	r3, [pc, #572]	; (80058dc <UART_SetConfig+0x56c>)
 800569e:	61fb      	str	r3, [r7, #28]
        break;
 80056a0:	e00d      	b.n	80056be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a2:	f7fe f929 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80056a6:	61f8      	str	r0, [r7, #28]
        break;
 80056a8:	e009      	b.n	80056be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ae:	61fb      	str	r3, [r7, #28]
        break;
 80056b0:	e005      	b.n	80056be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80fb 	beq.w	80058bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	4413      	add	r3, r2
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d305      	bcc.n	80056e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d903      	bls.n	80056ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056e8:	e0e8      	b.n	80058bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2200      	movs	r2, #0
 80056ee:	461c      	mov	r4, r3
 80056f0:	4615      	mov	r5, r2
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	022b      	lsls	r3, r5, #8
 80056fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005700:	0222      	lsls	r2, r4, #8
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	6849      	ldr	r1, [r1, #4]
 8005706:	0849      	lsrs	r1, r1, #1
 8005708:	2000      	movs	r0, #0
 800570a:	4688      	mov	r8, r1
 800570c:	4681      	mov	r9, r0
 800570e:	eb12 0a08 	adds.w	sl, r2, r8
 8005712:	eb43 0b09 	adc.w	fp, r3, r9
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005724:	4650      	mov	r0, sl
 8005726:	4659      	mov	r1, fp
 8005728:	f7fa fda2 	bl	8000270 <__aeabi_uldivmod>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4613      	mov	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800573a:	d308      	bcc.n	800574e <UART_SetConfig+0x3de>
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005742:	d204      	bcs.n	800574e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	60da      	str	r2, [r3, #12]
 800574c:	e0b6      	b.n	80058bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005754:	e0b2      	b.n	80058bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575e:	d15e      	bne.n	800581e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005764:	2b08      	cmp	r3, #8
 8005766:	d828      	bhi.n	80057ba <UART_SetConfig+0x44a>
 8005768:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <UART_SetConfig+0x400>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005795 	.word	0x08005795
 8005774:	0800579d 	.word	0x0800579d
 8005778:	080057a5 	.word	0x080057a5
 800577c:	080057bb 	.word	0x080057bb
 8005780:	080057ab 	.word	0x080057ab
 8005784:	080057bb 	.word	0x080057bb
 8005788:	080057bb 	.word	0x080057bb
 800578c:	080057bb 	.word	0x080057bb
 8005790:	080057b3 	.word	0x080057b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005794:	f7fe f948 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8005798:	61f8      	str	r0, [r7, #28]
        break;
 800579a:	e014      	b.n	80057c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800579c:	f7fe f95a 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 80057a0:	61f8      	str	r0, [r7, #28]
        break;
 80057a2:	e010      	b.n	80057c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a4:	4b4d      	ldr	r3, [pc, #308]	; (80058dc <UART_SetConfig+0x56c>)
 80057a6:	61fb      	str	r3, [r7, #28]
        break;
 80057a8:	e00d      	b.n	80057c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057aa:	f7fe f8a5 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80057ae:	61f8      	str	r0, [r7, #28]
        break;
 80057b0:	e009      	b.n	80057c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b6:	61fb      	str	r3, [r7, #28]
        break;
 80057b8:	e005      	b.n	80057c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d077      	beq.n	80058bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	005a      	lsls	r2, r3, #1
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	441a      	add	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b0f      	cmp	r3, #15
 80057e6:	d916      	bls.n	8005816 <UART_SetConfig+0x4a6>
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ee:	d212      	bcs.n	8005816 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f023 030f 	bic.w	r3, r3, #15
 80057f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	b29a      	uxth	r2, r3
 8005806:	8afb      	ldrh	r3, [r7, #22]
 8005808:	4313      	orrs	r3, r2
 800580a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	8afa      	ldrh	r2, [r7, #22]
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	e052      	b.n	80058bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800581c:	e04e      	b.n	80058bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800581e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005822:	2b08      	cmp	r3, #8
 8005824:	d827      	bhi.n	8005876 <UART_SetConfig+0x506>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0x4bc>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	08005877 	.word	0x08005877
 800583c:	08005867 	.word	0x08005867
 8005840:	08005877 	.word	0x08005877
 8005844:	08005877 	.word	0x08005877
 8005848:	08005877 	.word	0x08005877
 800584c:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fe f8ea 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8005854:	61f8      	str	r0, [r7, #28]
        break;
 8005856:	e014      	b.n	8005882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fe f8fc 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 800585c:	61f8      	str	r0, [r7, #28]
        break;
 800585e:	e010      	b.n	8005882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <UART_SetConfig+0x56c>)
 8005862:	61fb      	str	r3, [r7, #28]
        break;
 8005864:	e00d      	b.n	8005882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fe f847 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 800586a:	61f8      	str	r0, [r7, #28]
        break;
 800586c:	e009      	b.n	8005882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	61fb      	str	r3, [r7, #28]
        break;
 8005874:	e005      	b.n	8005882 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005880:	bf00      	nop
    }

    if (pclk != 0U)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	085a      	lsrs	r2, r3, #1
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	441a      	add	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	d909      	bls.n	80058b6 <UART_SetConfig+0x546>
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a8:	d205      	bcs.n	80058b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60da      	str	r2, [r3, #12]
 80058b4:	e002      	b.n	80058bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3728      	adds	r7, #40	; 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d6:	bf00      	nop
 80058d8:	40008000 	.word	0x40008000
 80058dc:	00f42400 	.word	0x00f42400

080058e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01a      	beq.n	80059f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059de:	d10a      	bne.n	80059f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b098      	sub	sp, #96	; 0x60
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a34:	f7fc fd40 	bl	80024b8 <HAL_GetTick>
 8005a38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d12e      	bne.n	8005aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a50:	2200      	movs	r2, #0
 8005a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f88c 	bl	8005b74 <UART_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d021      	beq.n	8005aa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a76:	653b      	str	r3, [r7, #80]	; 0x50
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a80:	647b      	str	r3, [r7, #68]	; 0x44
 8005a82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e6      	bne.n	8005a62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e062      	b.n	8005b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d149      	bne.n	8005b48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f856 	bl	8005b74 <UART_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d03c      	beq.n	8005b48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	623b      	str	r3, [r7, #32]
   return(result);
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aec:	633b      	str	r3, [r7, #48]	; 0x30
 8005aee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e6      	bne.n	8005ace <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3308      	adds	r3, #8
 8005b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b20:	61fa      	str	r2, [r7, #28]
 8005b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	69b9      	ldr	r1, [r7, #24]
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e5      	bne.n	8005b00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e011      	b.n	8005b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3758      	adds	r7, #88	; 0x58
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b84:	e049      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b8c:	d045      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8e:	f7fc fc93 	bl	80024b8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d302      	bcc.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e048      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d031      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d110      	bne.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f838 	bl	8005c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e029      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf4:	d111      	bne.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f81e 	bl	8005c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e00f      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d0a6      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b095      	sub	sp, #84	; 0x54
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	643b      	str	r3, [r7, #64]	; 0x40
 8005c6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e6      	bne.n	8005c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f023 0301 	bic.w	r3, r3, #1
 8005c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d118      	bne.n	8005cea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f023 0310 	bic.w	r3, r3, #16
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	6979      	ldr	r1, [r7, #20]
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e6      	bne.n	8005cb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cfe:	bf00      	nop
 8005d00:	3754      	adds	r7, #84	; 0x54
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <__NVIC_SetPriority>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	6039      	str	r1, [r7, #0]
 8005d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	db0a      	blt.n	8005d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	490c      	ldr	r1, [pc, #48]	; (8005d58 <__NVIC_SetPriority+0x4c>)
 8005d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2a:	0112      	lsls	r2, r2, #4
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	440b      	add	r3, r1
 8005d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d34:	e00a      	b.n	8005d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	4908      	ldr	r1, [pc, #32]	; (8005d5c <__NVIC_SetPriority+0x50>)
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	3b04      	subs	r3, #4
 8005d44:	0112      	lsls	r2, r2, #4
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	440b      	add	r3, r1
 8005d4a:	761a      	strb	r2, [r3, #24]
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	e000e100 	.word	0xe000e100
 8005d5c:	e000ed00 	.word	0xe000ed00

08005d60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d64:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <SysTick_Handler+0x1c>)
 8005d66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d68:	f002 fab2 	bl	80082d0 <xTaskGetSchedulerState>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d001      	beq.n	8005d76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d72:	f003 fa79 	bl	8009268 <xPortSysTickHandler>
  }
}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	e000e010 	.word	0xe000e010

08005d80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d84:	2100      	movs	r1, #0
 8005d86:	f06f 0004 	mvn.w	r0, #4
 8005d8a:	f7ff ffbf 	bl	8005d0c <__NVIC_SetPriority>
#endif
}
 8005d8e:	bf00      	nop
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9a:	f3ef 8305 	mrs	r3, IPSR
 8005d9e:	603b      	str	r3, [r7, #0]
  return(result);
 8005da0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005da6:	f06f 0305 	mvn.w	r3, #5
 8005daa:	607b      	str	r3, [r7, #4]
 8005dac:	e00c      	b.n	8005dc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <osKernelInitialize+0x44>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005db6:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <osKernelInitialize+0x44>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	607b      	str	r3, [r7, #4]
 8005dc0:	e002      	b.n	8005dc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dc8:	687b      	ldr	r3, [r7, #4]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	2000026c 	.word	0x2000026c

08005ddc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de2:	f3ef 8305 	mrs	r3, IPSR
 8005de6:	603b      	str	r3, [r7, #0]
  return(result);
 8005de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dee:	f06f 0305 	mvn.w	r3, #5
 8005df2:	607b      	str	r3, [r7, #4]
 8005df4:	e010      	b.n	8005e18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <osKernelStart+0x48>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d109      	bne.n	8005e12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dfe:	f7ff ffbf 	bl	8005d80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <osKernelStart+0x48>)
 8005e04:	2202      	movs	r2, #2
 8005e06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e08:	f001 fe1a 	bl	8007a40 <vTaskStartScheduler>
      stat = osOK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	e002      	b.n	8005e18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e18:	687b      	ldr	r3, [r7, #4]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	2000026c 	.word	0x2000026c

08005e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08e      	sub	sp, #56	; 0x38
 8005e2c:	af04      	add	r7, sp, #16
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e38:	f3ef 8305 	mrs	r3, IPSR
 8005e3c:	617b      	str	r3, [r7, #20]
  return(result);
 8005e3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d17e      	bne.n	8005f42 <osThreadNew+0x11a>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d07b      	beq.n	8005f42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e4e:	2318      	movs	r3, #24
 8005e50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d045      	beq.n	8005eee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <osThreadNew+0x48>
        name = attr->name;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <osThreadNew+0x6e>
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	2b38      	cmp	r3, #56	; 0x38
 8005e88:	d805      	bhi.n	8005e96 <osThreadNew+0x6e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <osThreadNew+0x72>
        return (NULL);
 8005e96:	2300      	movs	r3, #0
 8005e98:	e054      	b.n	8005f44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	089b      	lsrs	r3, r3, #2
 8005ea8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00e      	beq.n	8005ed0 <osThreadNew+0xa8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2b5b      	cmp	r3, #91	; 0x5b
 8005eb8:	d90a      	bls.n	8005ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d006      	beq.n	8005ed0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <osThreadNew+0xa8>
        mem = 1;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	e010      	b.n	8005ef2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10c      	bne.n	8005ef2 <osThreadNew+0xca>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d108      	bne.n	8005ef2 <osThreadNew+0xca>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <osThreadNew+0xca>
          mem = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	e001      	b.n	8005ef2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d110      	bne.n	8005f1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f00:	9202      	str	r2, [sp, #8]
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6a3a      	ldr	r2, [r7, #32]
 8005f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 fb42 	bl	8007598 <xTaskCreateStatic>
 8005f14:	4603      	mov	r3, r0
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	e013      	b.n	8005f42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d110      	bne.n	8005f42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	f107 0310 	add.w	r3, r7, #16
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f001 fb8d 	bl	8007652 <xTaskCreate>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d001      	beq.n	8005f42 <osThreadNew+0x11a>
            hTask = NULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f42:	693b      	ldr	r3, [r7, #16]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3728      	adds	r7, #40	; 0x28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f54:	f3ef 8305 	mrs	r3, IPSR
 8005f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <osDelay+0x1c>
    stat = osErrorISR;
 8005f60:	f06f 0305 	mvn.w	r3, #5
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e007      	b.n	8005f78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 fd30 	bl	80079d8 <vTaskDelay>
    }
  }

  return (stat);
 8005f78:	68fb      	ldr	r3, [r7, #12]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f002 ff8f 	bl	8008eae <pvTimerGetTimerID>
 8005f90:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	6852      	ldr	r2, [r2, #4]
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4798      	blx	r3
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fc0:	f3ef 8305 	mrs	r3, IPSR
 8005fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8005fc6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d163      	bne.n	8006094 <osTimerNew+0xe8>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d060      	beq.n	8006094 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005fd2:	2008      	movs	r0, #8
 8005fd4:	f003 f9d8 	bl	8009388 <pvPortMalloc>
 8005fd8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d059      	beq.n	8006094 <osTimerNew+0xe8>
      callb->func = func;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d102      	bne.n	8005ff8 <osTimerNew+0x4c>
        reload = pdFALSE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	e001      	b.n	8005ffc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006000:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006002:	2300      	movs	r3, #0
 8006004:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01c      	beq.n	8006046 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <osTimerNew+0x6e>
          name = attr->name;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d006      	beq.n	8006030 <osTimerNew+0x84>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	2b2b      	cmp	r3, #43	; 0x2b
 8006028:	d902      	bls.n	8006030 <osTimerNew+0x84>
          mem = 1;
 800602a:	2301      	movs	r3, #1
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	e00c      	b.n	800604a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d108      	bne.n	800604a <osTimerNew+0x9e>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <osTimerNew+0x9e>
            mem = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	e001      	b.n	800604a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10c      	bne.n	800606a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <osTimerNew+0xf4>)
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	2101      	movs	r1, #1
 8006060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006062:	f002 fb7c 	bl	800875e <xTimerCreateStatic>
 8006066:	6238      	str	r0, [r7, #32]
 8006068:	e00b      	b.n	8006082 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d108      	bne.n	8006082 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <osTimerNew+0xf4>)
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	2101      	movs	r1, #1
 800607a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800607c:	f002 fb4e 	bl	800871c <xTimerCreate>
 8006080:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <osTimerNew+0xe8>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <osTimerNew+0xe8>
        vPortFree (callb);
 800608e:	6978      	ldr	r0, [r7, #20]
 8006090:	f003 fa46 	bl	8009520 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006094:	6a3b      	ldr	r3, [r7, #32]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3728      	adds	r7, #40	; 0x28
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	08005f83 	.word	0x08005f83

080060a4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b2:	f3ef 8305 	mrs	r3, IPSR
 80060b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80060b8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <osTimerStart+0x22>
    stat = osErrorISR;
 80060be:	f06f 0305 	mvn.w	r3, #5
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e017      	b.n	80060f6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d103      	bne.n	80060d4 <osTimerStart+0x30>
    stat = osErrorParameter;
 80060cc:	f06f 0303 	mvn.w	r3, #3
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e010      	b.n	80060f6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80060d4:	2300      	movs	r3, #0
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	2104      	movs	r1, #4
 80060de:	6938      	ldr	r0, [r7, #16]
 80060e0:	f002 fbb6 	bl	8008850 <xTimerGenericCommand>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d102      	bne.n	80060f0 <osTimerStart+0x4c>
      stat = osOK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e002      	b.n	80060f6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80060f0:	f06f 0302 	mvn.w	r3, #2
 80060f4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80060f6:	697b      	ldr	r3, [r7, #20]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af02      	add	r7, sp, #8
 8006106:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610c:	f3ef 8305 	mrs	r3, IPSR
 8006110:	60fb      	str	r3, [r7, #12]
  return(result);
 8006112:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <osTimerStop+0x20>
    stat = osErrorISR;
 8006118:	f06f 0305 	mvn.w	r3, #5
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	e021      	b.n	8006164 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d103      	bne.n	800612e <osTimerStop+0x2e>
    stat = osErrorParameter;
 8006126:	f06f 0303 	mvn.w	r3, #3
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	e01a      	b.n	8006164 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800612e:	6938      	ldr	r0, [r7, #16]
 8006130:	f002 fe94 	bl	8008e5c <xTimerIsTimerActive>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d103      	bne.n	8006142 <osTimerStop+0x42>
      stat = osErrorResource;
 800613a:	f06f 0302 	mvn.w	r3, #2
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	e010      	b.n	8006164 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8006142:	2300      	movs	r3, #0
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	2300      	movs	r3, #0
 8006148:	2200      	movs	r2, #0
 800614a:	2103      	movs	r1, #3
 800614c:	6938      	ldr	r0, [r7, #16]
 800614e:	f002 fb7f 	bl	8008850 <xTimerGenericCommand>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d102      	bne.n	800615e <osTimerStop+0x5e>
        stat = osOK;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	e002      	b.n	8006164 <osTimerStop+0x64>
      } else {
        stat = osError;
 800615e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006162:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006164:	697b      	ldr	r3, [r7, #20]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800616e:	b580      	push	{r7, lr}
 8006170:	b08a      	sub	sp, #40	; 0x28
 8006172:	af02      	add	r7, sp, #8
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800617e:	f3ef 8305 	mrs	r3, IPSR
 8006182:	613b      	str	r3, [r7, #16]
  return(result);
 8006184:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006186:	2b00      	cmp	r3, #0
 8006188:	d175      	bne.n	8006276 <osSemaphoreNew+0x108>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d072      	beq.n	8006276 <osSemaphoreNew+0x108>
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d86e      	bhi.n	8006276 <osSemaphoreNew+0x108>
    mem = -1;
 8006198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800619c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d015      	beq.n	80061d0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d006      	beq.n	80061ba <osSemaphoreNew+0x4c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	2b4f      	cmp	r3, #79	; 0x4f
 80061b2:	d902      	bls.n	80061ba <osSemaphoreNew+0x4c>
        mem = 1;
 80061b4:	2301      	movs	r3, #1
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e00c      	b.n	80061d4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d108      	bne.n	80061d4 <osSemaphoreNew+0x66>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <osSemaphoreNew+0x66>
          mem = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	e001      	b.n	80061d4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061da:	d04c      	beq.n	8006276 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d128      	bne.n	8006234 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d10a      	bne.n	80061fe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2203      	movs	r2, #3
 80061ee:	9200      	str	r2, [sp, #0]
 80061f0:	2200      	movs	r2, #0
 80061f2:	2100      	movs	r1, #0
 80061f4:	2001      	movs	r0, #1
 80061f6:	f000 fa29 	bl	800664c <xQueueGenericCreateStatic>
 80061fa:	61f8      	str	r0, [r7, #28]
 80061fc:	e005      	b.n	800620a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80061fe:	2203      	movs	r2, #3
 8006200:	2100      	movs	r1, #0
 8006202:	2001      	movs	r0, #1
 8006204:	f000 fa9a 	bl	800673c <xQueueGenericCreate>
 8006208:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d022      	beq.n	8006256 <osSemaphoreNew+0xe8>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01f      	beq.n	8006256 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006216:	2300      	movs	r3, #0
 8006218:	2200      	movs	r2, #0
 800621a:	2100      	movs	r1, #0
 800621c:	69f8      	ldr	r0, [r7, #28]
 800621e:	f000 fb55 	bl	80068cc <xQueueGenericSend>
 8006222:	4603      	mov	r3, r0
 8006224:	2b01      	cmp	r3, #1
 8006226:	d016      	beq.n	8006256 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006228:	69f8      	ldr	r0, [r7, #28]
 800622a:	f000 ffe1 	bl	80071f0 <vQueueDelete>
            hSemaphore = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e010      	b.n	8006256 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d108      	bne.n	800624c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	461a      	mov	r2, r3
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 fad7 	bl	80067f6 <xQueueCreateCountingSemaphoreStatic>
 8006248:	61f8      	str	r0, [r7, #28]
 800624a:	e004      	b.n	8006256 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800624c:	68b9      	ldr	r1, [r7, #8]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fb08 	bl	8006864 <xQueueCreateCountingSemaphore>
 8006254:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <osSemaphoreNew+0xfc>
          name = attr->name;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e001      	b.n	800626e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800626e:	6979      	ldr	r1, [r7, #20]
 8006270:	69f8      	ldr	r0, [r7, #28]
 8006272:	f001 f909 	bl	8007488 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006276:	69fb      	ldr	r3, [r7, #28]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006298:	f06f 0303 	mvn.w	r3, #3
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	e039      	b.n	8006314 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062a0:	f3ef 8305 	mrs	r3, IPSR
 80062a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80062a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d022      	beq.n	80062f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80062b2:	f06f 0303 	mvn.w	r3, #3
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	e02c      	b.n	8006314 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80062be:	f107 0308 	add.w	r3, r7, #8
 80062c2:	461a      	mov	r2, r3
 80062c4:	2100      	movs	r1, #0
 80062c6:	6938      	ldr	r0, [r7, #16]
 80062c8:	f000 ff12 	bl	80070f0 <xQueueReceiveFromISR>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d003      	beq.n	80062da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80062d2:	f06f 0302 	mvn.w	r3, #2
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e01c      	b.n	8006314 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d019      	beq.n	8006314 <osSemaphoreAcquire+0x94>
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <osSemaphoreAcquire+0xa0>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	e010      	b.n	8006314 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6938      	ldr	r0, [r7, #16]
 80062f6:	f000 fdef 	bl	8006ed8 <xQueueSemaphoreTake>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d009      	beq.n	8006314 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006306:	f06f 0301 	mvn.w	r3, #1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e002      	b.n	8006314 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800630e:	f06f 0302 	mvn.w	r3, #2
 8006312:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006314:	697b      	ldr	r3, [r7, #20]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006330:	2300      	movs	r3, #0
 8006332:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800633a:	f06f 0303 	mvn.w	r3, #3
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e02c      	b.n	800639c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006342:	f3ef 8305 	mrs	r3, IPSR
 8006346:	60fb      	str	r3, [r7, #12]
  return(result);
 8006348:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01a      	beq.n	8006384 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006352:	f107 0308 	add.w	r3, r7, #8
 8006356:	4619      	mov	r1, r3
 8006358:	6938      	ldr	r0, [r7, #16]
 800635a:	f000 fc50 	bl	8006bfe <xQueueGiveFromISR>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d003      	beq.n	800636c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006364:	f06f 0302 	mvn.w	r3, #2
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	e017      	b.n	800639c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d014      	beq.n	800639c <osSemaphoreRelease+0x78>
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <osSemaphoreRelease+0x84>)
 8006374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	e00b      	b.n	800639c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006384:	2300      	movs	r3, #0
 8006386:	2200      	movs	r2, #0
 8006388:	2100      	movs	r1, #0
 800638a:	6938      	ldr	r0, [r7, #16]
 800638c:	f000 fa9e 	bl	80068cc <xQueueGenericSend>
 8006390:	4603      	mov	r3, r0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d002      	beq.n	800639c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006396:	f06f 0302 	mvn.w	r3, #2
 800639a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800639c:	697b      	ldr	r3, [r7, #20]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a07      	ldr	r2, [pc, #28]	; (80063d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80063bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4a06      	ldr	r2, [pc, #24]	; (80063dc <vApplicationGetIdleTaskMemory+0x30>)
 80063c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	601a      	str	r2, [r3, #0]
}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20000270 	.word	0x20000270
 80063dc:	200002cc 	.word	0x200002cc

080063e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a07      	ldr	r2, [pc, #28]	; (800640c <vApplicationGetTimerTaskMemory+0x2c>)
 80063f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4a06      	ldr	r2, [pc, #24]	; (8006410 <vApplicationGetTimerTaskMemory+0x30>)
 80063f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063fe:	601a      	str	r2, [r3, #0]
}
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	200004cc 	.word	0x200004cc
 8006410:	20000528 	.word	0x20000528

08006414 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f103 0208 	add.w	r2, r3, #8
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800642c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f103 0208 	add.w	r2, r3, #8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f103 0208 	add.w	r2, r3, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	601a      	str	r2, [r3, #0]
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064cc:	d103      	bne.n	80064d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e00c      	b.n	80064f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3308      	adds	r3, #8
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e002      	b.n	80064e4 <vListInsert+0x2e>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d2f6      	bcs.n	80064de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
}
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6892      	ldr	r2, [r2, #8]
 800653e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6852      	ldr	r2, [r2, #4]
 8006548:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d103      	bne.n	800655c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	1e5a      	subs	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065a6:	f002 fdcd 	bl	8009144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	441a      	add	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	3b01      	subs	r3, #1
 80065d8:	68f9      	ldr	r1, [r7, #12]
 80065da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	441a      	add	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	22ff      	movs	r2, #255	; 0xff
 80065ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	22ff      	movs	r2, #255	; 0xff
 80065f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d114      	bne.n	8006626 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01a      	beq.n	800663a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3310      	adds	r3, #16
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fca3 	bl	8007f54 <xTaskRemoveFromEventList>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d012      	beq.n	800663a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <xQueueGenericReset+0xcc>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	e009      	b.n	800663a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3310      	adds	r3, #16
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fef2 	bl	8006414 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3324      	adds	r3, #36	; 0x24
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff feed 	bl	8006414 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800663a:	f002 fdb3 	bl	80091a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800663e:	2301      	movs	r3, #1
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08e      	sub	sp, #56	; 0x38
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <xQueueGenericCreateStatic+0x52>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <xQueueGenericCreateStatic+0x56>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <xQueueGenericCreateStatic+0x58>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	623b      	str	r3, [r7, #32]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <xQueueGenericCreateStatic+0x7e>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <xQueueGenericCreateStatic+0x82>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <xQueueGenericCreateStatic+0x84>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	61fb      	str	r3, [r7, #28]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066ea:	2350      	movs	r3, #80	; 0x50
 80066ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b50      	cmp	r3, #80	; 0x50
 80066f2:	d00a      	beq.n	800670a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	61bb      	str	r3, [r7, #24]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800670a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800671e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f83f 	bl	80067b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006734:	4618      	mov	r0, r3
 8006736:	3730      	adds	r7, #48	; 0x30
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	613b      	str	r3, [r7, #16]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3350      	adds	r3, #80	; 0x50
 8006774:	4618      	mov	r0, r3
 8006776:	f002 fe07 	bl	8009388 <pvPortMalloc>
 800677a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	3350      	adds	r3, #80	; 0x50
 800678a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006794:	79fa      	ldrb	r2, [r7, #7]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f805 	bl	80067b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067a6:	69bb      	ldr	r3, [r7, #24]
	}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d103      	bne.n	80067cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e002      	b.n	80067d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067de:	2101      	movs	r1, #1
 80067e0:	69b8      	ldr	r0, [r7, #24]
 80067e2:	f7ff fecb 	bl	800657c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b08a      	sub	sp, #40	; 0x28
 80067fa:	af02      	add	r7, sp, #8
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	61bb      	str	r3, [r7, #24]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	429a      	cmp	r2, r3
 8006824:	d90a      	bls.n	800683c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	617b      	str	r3, [r7, #20]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800683c:	2302      	movs	r3, #2
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	2100      	movs	r1, #0
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff ff00 	bl	800664c <xQueueGenericCreateStatic>
 800684c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800685a:	69fb      	ldr	r3, [r7, #28]
	}
 800685c:	4618      	mov	r0, r3
 800685e:	3720      	adds	r7, #32
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	613b      	str	r3, [r7, #16]
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	429a      	cmp	r2, r3
 8006890:	d90a      	bls.n	80068a8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	60fb      	str	r3, [r7, #12]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80068a8:	2202      	movs	r2, #2
 80068aa:	2100      	movs	r1, #0
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff ff45 	bl	800673c <xQueueGenericCreate>
 80068b2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068c0:	697b      	ldr	r3, [r7, #20]
	}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08e      	sub	sp, #56	; 0x38
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068da:	2300      	movs	r3, #0
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xQueueGenericSend+0x32>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d103      	bne.n	800690c <xQueueGenericSend+0x40>
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <xQueueGenericSend+0x44>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <xQueueGenericSend+0x46>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <xQueueGenericSend+0x60>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d103      	bne.n	800693a <xQueueGenericSend+0x6e>
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <xQueueGenericSend+0x72>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <xQueueGenericSend+0x74>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <xQueueGenericSend+0x8e>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	623b      	str	r3, [r7, #32]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800695a:	f001 fcb9 	bl	80082d0 <xTaskGetSchedulerState>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <xQueueGenericSend+0x9e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <xQueueGenericSend+0xa2>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <xQueueGenericSend+0xa4>
 800696e:	2300      	movs	r3, #0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <xQueueGenericSend+0xbe>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	61fb      	str	r3, [r7, #28]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800698a:	f002 fbdb 	bl	8009144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	429a      	cmp	r2, r3
 8006998:	d302      	bcc.n	80069a0 <xQueueGenericSend+0xd4>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d129      	bne.n	80069f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069a6:	f000 fc5e 	bl	8007266 <prvCopyDataToQueue>
 80069aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d010      	beq.n	80069d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	3324      	adds	r3, #36	; 0x24
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 facb 	bl	8007f54 <xTaskRemoveFromEventList>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d013      	beq.n	80069ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069c4:	4b3f      	ldr	r3, [pc, #252]	; (8006ac4 <xQueueGenericSend+0x1f8>)
 80069c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	e00a      	b.n	80069ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069dc:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <xQueueGenericSend+0x1f8>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069ec:	f002 fbda 	bl	80091a4 <vPortExitCritical>
				return pdPASS;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e063      	b.n	8006abc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069fa:	f002 fbd3 	bl	80091a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e05c      	b.n	8006abc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 fb05 	bl	800801c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a16:	f002 fbc5 	bl	80091a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a1a:	f001 f877 	bl	8007b0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a1e:	f002 fb91 	bl	8009144 <vPortEnterCritical>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a28:	b25b      	sxtb	r3, r3
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a2e:	d103      	bne.n	8006a38 <xQueueGenericSend+0x16c>
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a3e:	b25b      	sxtb	r3, r3
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a44:	d103      	bne.n	8006a4e <xQueueGenericSend+0x182>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a4e:	f002 fba9 	bl	80091a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a52:	1d3a      	adds	r2, r7, #4
 8006a54:	f107 0314 	add.w	r3, r7, #20
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 faf4 	bl	8008048 <xTaskCheckForTimeOut>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d124      	bne.n	8006ab0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a68:	f000 fcf5 	bl	8007456 <prvIsQueueFull>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d018      	beq.n	8006aa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	3310      	adds	r3, #16
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	4611      	mov	r1, r2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f001 fa1a 	bl	8007eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a82:	f000 fc80 	bl	8007386 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a86:	f001 f84f 	bl	8007b28 <xTaskResumeAll>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f47f af7c 	bne.w	800698a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a92:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <xQueueGenericSend+0x1f8>)
 8006a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	e772      	b.n	800698a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa6:	f000 fc6e 	bl	8007386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aaa:	f001 f83d 	bl	8007b28 <xTaskResumeAll>
 8006aae:	e76c      	b.n	800698a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ab2:	f000 fc68 	bl	8007386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ab6:	f001 f837 	bl	8007b28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006aba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3738      	adds	r7, #56	; 0x38
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	e000ed04 	.word	0xe000ed04

08006ac8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b090      	sub	sp, #64	; 0x40
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10a      	bne.n	8006af6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <xQueueGenericSendFromISR+0x3c>
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <xQueueGenericSendFromISR+0x40>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <xQueueGenericSendFromISR+0x42>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSendFromISR+0x6a>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <xQueueGenericSendFromISR+0x6e>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericSendFromISR+0x70>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b52:	f002 fbd9 	bl	8009308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b56:	f3ef 8211 	mrs	r2, BASEPRI
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	61fa      	str	r2, [r7, #28]
 8006b6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <xQueueGenericSendFromISR+0xbc>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d12f      	bne.n	8006be4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b9a:	f000 fb64 	bl	8007266 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba6:	d112      	bne.n	8006bce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d016      	beq.n	8006bde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	3324      	adds	r3, #36	; 0x24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 f9cd 	bl	8007f54 <xTaskRemoveFromEventList>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	e007      	b.n	8006bde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	b25a      	sxtb	r2, r3
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bde:	2301      	movs	r3, #1
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006be2:	e001      	b.n	8006be8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bf2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3740      	adds	r7, #64	; 0x40
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b08e      	sub	sp, #56	; 0x38
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	623b      	str	r3, [r7, #32]
}
 8006c24:	bf00      	nop
 8006c26:	e7fe      	b.n	8006c26 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	61fb      	str	r3, [r7, #28]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <xQueueGiveFromISR+0x58>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <xQueueGiveFromISR+0x5c>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <xQueueGiveFromISR+0x5e>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	61bb      	str	r3, [r7, #24]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c76:	f002 fb47 	bl	8009308 <vPortValidateInterruptPriority>
	__asm volatile
 8006c7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	617a      	str	r2, [r7, #20]
 8006c90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d22b      	bcs.n	8006cfe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc0:	d112      	bne.n	8006ce8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d016      	beq.n	8006cf8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	3324      	adds	r3, #36	; 0x24
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 f940 	bl	8007f54 <xTaskRemoveFromEventList>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	e007      	b.n	8006cf8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cec:	3301      	adds	r3, #1
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	b25a      	sxtb	r2, r3
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8006cfc:	e001      	b.n	8006d02 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
 8006d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d04:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f383 8811 	msr	BASEPRI, r3
}
 8006d0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3738      	adds	r7, #56	; 0x38
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08c      	sub	sp, #48	; 0x30
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d24:	2300      	movs	r3, #0
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <xQueueReceive+0x30>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	623b      	str	r3, [r7, #32]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <xQueueReceive+0x3e>
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <xQueueReceive+0x42>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <xQueueReceive+0x44>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <xQueueReceive+0x5e>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	61fb      	str	r3, [r7, #28]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d76:	f001 faab 	bl	80082d0 <xTaskGetSchedulerState>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <xQueueReceive+0x6e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <xQueueReceive+0x72>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueReceive+0x74>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xQueueReceive+0x8e>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	61bb      	str	r3, [r7, #24]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006da6:	f002 f9cd 	bl	8009144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d01f      	beq.n	8006df6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dba:	f000 fabe 	bl	800733a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	1e5a      	subs	r2, r3, #1
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00f      	beq.n	8006dee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	3310      	adds	r3, #16
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 f8be 	bl	8007f54 <xTaskRemoveFromEventList>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dde:	4b3d      	ldr	r3, [pc, #244]	; (8006ed4 <xQueueReceive+0x1bc>)
 8006de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dee:	f002 f9d9 	bl	80091a4 <vPortExitCritical>
				return pdPASS;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e069      	b.n	8006eca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dfc:	f002 f9d2 	bl	80091a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e00:	2300      	movs	r3, #0
 8006e02:	e062      	b.n	8006eca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e0a:	f107 0310 	add.w	r3, r7, #16
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 f904 	bl	800801c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e18:	f002 f9c4 	bl	80091a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e1c:	f000 fe76 	bl	8007b0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e20:	f002 f990 	bl	8009144 <vPortEnterCritical>
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e2a:	b25b      	sxtb	r3, r3
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e30:	d103      	bne.n	8006e3a <xQueueReceive+0x122>
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e40:	b25b      	sxtb	r3, r3
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e46:	d103      	bne.n	8006e50 <xQueueReceive+0x138>
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e50:	f002 f9a8 	bl	80091a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e54:	1d3a      	adds	r2, r7, #4
 8006e56:	f107 0310 	add.w	r3, r7, #16
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 f8f3 	bl	8008048 <xTaskCheckForTimeOut>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d123      	bne.n	8006eb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6a:	f000 fade 	bl	800742a <prvIsQueueEmpty>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d017      	beq.n	8006ea4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	3324      	adds	r3, #36	; 0x24
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 f819 	bl	8007eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e84:	f000 fa7f 	bl	8007386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e88:	f000 fe4e 	bl	8007b28 <xTaskResumeAll>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d189      	bne.n	8006da6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <xQueueReceive+0x1bc>)
 8006e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	e780      	b.n	8006da6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea6:	f000 fa6e 	bl	8007386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eaa:	f000 fe3d 	bl	8007b28 <xTaskResumeAll>
 8006eae:	e77a      	b.n	8006da6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb2:	f000 fa68 	bl	8007386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eb6:	f000 fe37 	bl	8007b28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ebc:	f000 fab5 	bl	800742a <prvIsQueueEmpty>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f43f af6f 	beq.w	8006da6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ec8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3730      	adds	r7, #48	; 0x30
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08e      	sub	sp, #56	; 0x38
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006eea:	2300      	movs	r3, #0
 8006eec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	623b      	str	r3, [r7, #32]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	61fb      	str	r3, [r7, #28]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f28:	f001 f9d2 	bl	80082d0 <xTaskGetSchedulerState>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d102      	bne.n	8006f38 <xQueueSemaphoreTake+0x60>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <xQueueSemaphoreTake+0x64>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <xQueueSemaphoreTake+0x66>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	61bb      	str	r3, [r7, #24]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f58:	f002 f8f4 	bl	8009144 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d024      	beq.n	8006fb2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	1e5a      	subs	r2, r3, #1
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f78:	f001 fb20 	bl	80085bc <pvTaskIncrementMutexHeldCount>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00f      	beq.n	8006faa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	3310      	adds	r3, #16
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 ffe0 	bl	8007f54 <xTaskRemoveFromEventList>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f9a:	4b54      	ldr	r3, [pc, #336]	; (80070ec <xQueueSemaphoreTake+0x214>)
 8006f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006faa:	f002 f8fb 	bl	80091a4 <vPortExitCritical>
				return pdPASS;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e097      	b.n	80070e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d111      	bne.n	8006fdc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	617b      	str	r3, [r7, #20]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fd4:	f002 f8e6 	bl	80091a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e082      	b.n	80070e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fe2:	f107 030c 	add.w	r3, r7, #12
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 f818 	bl	800801c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fec:	2301      	movs	r3, #1
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ff0:	f002 f8d8 	bl	80091a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ff4:	f000 fd8a 	bl	8007b0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ff8:	f002 f8a4 	bl	8009144 <vPortEnterCritical>
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007002:	b25b      	sxtb	r3, r3
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007008:	d103      	bne.n	8007012 <xQueueSemaphoreTake+0x13a>
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007018:	b25b      	sxtb	r3, r3
 800701a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800701e:	d103      	bne.n	8007028 <xQueueSemaphoreTake+0x150>
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007028:	f002 f8bc 	bl	80091a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800702c:	463a      	mov	r2, r7
 800702e:	f107 030c 	add.w	r3, r7, #12
 8007032:	4611      	mov	r1, r2
 8007034:	4618      	mov	r0, r3
 8007036:	f001 f807 	bl	8008048 <xTaskCheckForTimeOut>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d132      	bne.n	80070a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007042:	f000 f9f2 	bl	800742a <prvIsQueueEmpty>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d026      	beq.n	800709a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d109      	bne.n	8007068 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007054:	f002 f876 	bl	8009144 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4618      	mov	r0, r3
 800705e:	f001 f955 	bl	800830c <xTaskPriorityInherit>
 8007062:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007064:	f002 f89e 	bl	80091a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	3324      	adds	r3, #36	; 0x24
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	4611      	mov	r1, r2
 8007070:	4618      	mov	r0, r3
 8007072:	f000 ff1f 	bl	8007eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007078:	f000 f985 	bl	8007386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800707c:	f000 fd54 	bl	8007b28 <xTaskResumeAll>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	f47f af68 	bne.w	8006f58 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007088:	4b18      	ldr	r3, [pc, #96]	; (80070ec <xQueueSemaphoreTake+0x214>)
 800708a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	e75e      	b.n	8006f58 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800709a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800709c:	f000 f973 	bl	8007386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070a0:	f000 fd42 	bl	8007b28 <xTaskResumeAll>
 80070a4:	e758      	b.n	8006f58 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a8:	f000 f96d 	bl	8007386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070ac:	f000 fd3c 	bl	8007b28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070b2:	f000 f9ba 	bl	800742a <prvIsQueueEmpty>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f43f af4d 	beq.w	8006f58 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00d      	beq.n	80070e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80070c4:	f002 f83e 	bl	8009144 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ca:	f000 f8b4 	bl	8007236 <prvGetDisinheritPriorityAfterTimeout>
 80070ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 f9ee 	bl	80084b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070dc:	f002 f862 	bl	80091a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3738      	adds	r7, #56	; 0x38
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08e      	sub	sp, #56	; 0x38
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	623b      	str	r3, [r7, #32]
}
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <xQueueReceiveFromISR+0x3a>
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <xQueueReceiveFromISR+0x3e>
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <xQueueReceiveFromISR+0x40>
 800712e:	2300      	movs	r3, #0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10a      	bne.n	800714a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	61fb      	str	r3, [r7, #28]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800714a:	f002 f8dd 	bl	8009308 <vPortValidateInterruptPriority>
	__asm volatile
 800714e:	f3ef 8211 	mrs	r2, BASEPRI
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	61ba      	str	r2, [r7, #24]
 8007164:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007166:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007168:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	2b00      	cmp	r3, #0
 8007174:	d02f      	beq.n	80071d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800717c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007184:	f000 f8d9 	bl	800733a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	1e5a      	subs	r2, r3, #1
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007190:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007198:	d112      	bne.n	80071c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d016      	beq.n	80071d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	3310      	adds	r3, #16
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fed4 	bl	8007f54 <xTaskRemoveFromEventList>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00e      	beq.n	80071d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e007      	b.n	80071d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c4:	3301      	adds	r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	b25a      	sxtb	r2, r3
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80071d0:	2301      	movs	r3, #1
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
 80071d4:	e001      	b.n	80071da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	637b      	str	r3, [r7, #52]	; 0x34
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f383 8811 	msr	BASEPRI, r3
}
 80071e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3738      	adds	r7, #56	; 0x38
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <vQueueDelete+0x28>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	60bb      	str	r3, [r7, #8]
}
 8007214:	bf00      	nop
 8007216:	e7fe      	b.n	8007216 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f95f 	bl	80074dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f002 f979 	bl	8009520 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800722e:	bf00      	nop
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d006      	beq.n	8007254 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e001      	b.n	8007258 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007258:	68fb      	ldr	r3, [r7, #12]
	}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b086      	sub	sp, #24
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10d      	bne.n	80072a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d14d      	bne.n	8007328 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	4618      	mov	r0, r3
 8007292:	f001 f8a3 	bl	80083dc <xTaskPriorityDisinherit>
 8007296:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	609a      	str	r2, [r3, #8]
 800729e:	e043      	b.n	8007328 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d119      	bne.n	80072da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6858      	ldr	r0, [r3, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	461a      	mov	r2, r3
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	f002 fb5c 	bl	800996e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	441a      	add	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d32b      	bcc.n	8007328 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	605a      	str	r2, [r3, #4]
 80072d8:	e026      	b.n	8007328 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	68d8      	ldr	r0, [r3, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	461a      	mov	r2, r3
 80072e4:	68b9      	ldr	r1, [r7, #8]
 80072e6:	f002 fb42 	bl	800996e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	425b      	negs	r3, r3
 80072f4:	441a      	add	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d207      	bcs.n	8007316 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	425b      	negs	r3, r3
 8007310:	441a      	add	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d105      	bne.n	8007328 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3b01      	subs	r3, #1
 8007326:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007330:	697b      	ldr	r3, [r7, #20]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d018      	beq.n	800737e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	441a      	add	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	429a      	cmp	r2, r3
 8007364:	d303      	bcc.n	800736e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68d9      	ldr	r1, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	461a      	mov	r2, r3
 8007378:	6838      	ldr	r0, [r7, #0]
 800737a:	f002 faf8 	bl	800996e <memcpy>
	}
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800738e:	f001 fed9 	bl	8009144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007398:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800739a:	e011      	b.n	80073c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d012      	beq.n	80073ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3324      	adds	r3, #36	; 0x24
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fdd3 	bl	8007f54 <xTaskRemoveFromEventList>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073b4:	f000 feaa 	bl	800810c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	dce9      	bgt.n	800739c <prvUnlockQueue+0x16>
 80073c8:	e000      	b.n	80073cc <prvUnlockQueue+0x46>
					break;
 80073ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	22ff      	movs	r2, #255	; 0xff
 80073d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073d4:	f001 fee6 	bl	80091a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073d8:	f001 feb4 	bl	8009144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073e4:	e011      	b.n	800740a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d012      	beq.n	8007414 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3310      	adds	r3, #16
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fdae 	bl	8007f54 <xTaskRemoveFromEventList>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073fe:	f000 fe85 	bl	800810c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007402:	7bbb      	ldrb	r3, [r7, #14]
 8007404:	3b01      	subs	r3, #1
 8007406:	b2db      	uxtb	r3, r3
 8007408:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800740a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800740e:	2b00      	cmp	r3, #0
 8007410:	dce9      	bgt.n	80073e6 <prvUnlockQueue+0x60>
 8007412:	e000      	b.n	8007416 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007414:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	22ff      	movs	r2, #255	; 0xff
 800741a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800741e:	f001 fec1 	bl	80091a4 <vPortExitCritical>
}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007432:	f001 fe87 	bl	8009144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800743e:	2301      	movs	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e001      	b.n	8007448 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007448:	f001 feac 	bl	80091a4 <vPortExitCritical>

	return xReturn;
 800744c:	68fb      	ldr	r3, [r7, #12]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800745e:	f001 fe71 	bl	8009144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	429a      	cmp	r2, r3
 800746c:	d102      	bne.n	8007474 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	e001      	b.n	8007478 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007478:	f001 fe94 	bl	80091a4 <vPortExitCritical>

	return xReturn;
 800747c:	68fb      	ldr	r3, [r7, #12]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e014      	b.n	80074c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007498:	4a0f      	ldr	r2, [pc, #60]	; (80074d8 <vQueueAddToRegistry+0x50>)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10b      	bne.n	80074bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074a4:	490c      	ldr	r1, [pc, #48]	; (80074d8 <vQueueAddToRegistry+0x50>)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074ae:	4a0a      	ldr	r2, [pc, #40]	; (80074d8 <vQueueAddToRegistry+0x50>)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4413      	add	r3, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074ba:	e006      	b.n	80074ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b07      	cmp	r3, #7
 80074c6:	d9e7      	bls.n	8007498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	20000928 	.word	0x20000928

080074dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	e016      	b.n	8007518 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80074ea:	4a10      	ldr	r2, [pc, #64]	; (800752c <vQueueUnregisterQueue+0x50>)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	4413      	add	r3, r2
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d10b      	bne.n	8007512 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80074fa:	4a0c      	ldr	r2, [pc, #48]	; (800752c <vQueueUnregisterQueue+0x50>)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2100      	movs	r1, #0
 8007500:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007504:	4a09      	ldr	r2, [pc, #36]	; (800752c <vQueueUnregisterQueue+0x50>)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	4413      	add	r3, r2
 800750c:	2200      	movs	r2, #0
 800750e:	605a      	str	r2, [r3, #4]
				break;
 8007510:	e006      	b.n	8007520 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b07      	cmp	r3, #7
 800751c:	d9e5      	bls.n	80074ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	20000928 	.word	0x20000928

08007530 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007540:	f001 fe00 	bl	8009144 <vPortEnterCritical>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800754a:	b25b      	sxtb	r3, r3
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007550:	d103      	bne.n	800755a <vQueueWaitForMessageRestricted+0x2a>
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007560:	b25b      	sxtb	r3, r3
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007566:	d103      	bne.n	8007570 <vQueueWaitForMessageRestricted+0x40>
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007570:	f001 fe18 	bl	80091a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	3324      	adds	r3, #36	; 0x24
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fcb9 	bl	8007efc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800758a:	6978      	ldr	r0, [r7, #20]
 800758c:	f7ff fefb 	bl	8007386 <prvUnlockQueue>
	}
 8007590:	bf00      	nop
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08e      	sub	sp, #56	; 0x38
 800759c:	af04      	add	r7, sp, #16
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	623b      	str	r3, [r7, #32]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xTaskCreateStatic+0x46>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	61fb      	str	r3, [r7, #28]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075de:	235c      	movs	r3, #92	; 0x5c
 80075e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b5c      	cmp	r3, #92	; 0x5c
 80075e6:	d00a      	beq.n	80075fe <xTaskCreateStatic+0x66>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	61bb      	str	r3, [r7, #24]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	2b00      	cmp	r3, #0
 8007604:	d01e      	beq.n	8007644 <xTaskCreateStatic+0xac>
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01b      	beq.n	8007644 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007614:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	2202      	movs	r2, #2
 800761a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800761e:	2300      	movs	r3, #0
 8007620:	9303      	str	r3, [sp, #12]
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	9302      	str	r3, [sp, #8]
 8007626:	f107 0314 	add.w	r3, r7, #20
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f850 	bl	80076dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800763c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800763e:	f000 f8dd 	bl	80077fc <prvAddNewTaskToReadyList>
 8007642:	e001      	b.n	8007648 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007648:	697b      	ldr	r3, [r7, #20]
	}
 800764a:	4618      	mov	r0, r3
 800764c:	3728      	adds	r7, #40	; 0x28
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007652:	b580      	push	{r7, lr}
 8007654:	b08c      	sub	sp, #48	; 0x30
 8007656:	af04      	add	r7, sp, #16
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	603b      	str	r3, [r7, #0]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4618      	mov	r0, r3
 8007668:	f001 fe8e 	bl	8009388 <pvPortMalloc>
 800766c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00e      	beq.n	8007692 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007674:	205c      	movs	r0, #92	; 0x5c
 8007676:	f001 fe87 	bl	8009388 <pvPortMalloc>
 800767a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
 8007688:	e005      	b.n	8007696 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800768a:	6978      	ldr	r0, [r7, #20]
 800768c:	f001 ff48 	bl	8009520 <vPortFree>
 8007690:	e001      	b.n	8007696 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d017      	beq.n	80076cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	2300      	movs	r3, #0
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	9302      	str	r3, [sp, #8]
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 f80e 	bl	80076dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076c0:	69f8      	ldr	r0, [r7, #28]
 80076c2:	f000 f89b 	bl	80077fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076c6:	2301      	movs	r3, #1
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	e002      	b.n	80076d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076d2:	69bb      	ldr	r3, [r7, #24]
	}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3720      	adds	r7, #32
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	461a      	mov	r2, r3
 80076f4:	21a5      	movs	r1, #165	; 0xa5
 80076f6:	f002 f905 	bl	8009904 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007704:	3b01      	subs	r3, #1
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f023 0307 	bic.w	r3, r3, #7
 8007712:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <prvInitialiseNewTask+0x58>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	617b      	str	r3, [r7, #20]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d01f      	beq.n	800777a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	e012      	b.n	8007766 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	7819      	ldrb	r1, [r3, #0]
 8007748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	4413      	add	r3, r2
 800774e:	3334      	adds	r3, #52	; 0x34
 8007750:	460a      	mov	r2, r1
 8007752:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4413      	add	r3, r2
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d006      	beq.n	800776e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	3301      	adds	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	2b0f      	cmp	r3, #15
 800776a:	d9e9      	bls.n	8007740 <prvInitialiseNewTask+0x64>
 800776c:	e000      	b.n	8007770 <prvInitialiseNewTask+0x94>
			{
				break;
 800776e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007778:	e003      	b.n	8007782 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	2b37      	cmp	r3, #55	; 0x37
 8007786:	d901      	bls.n	800778c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007788:	2337      	movs	r3, #55	; 0x37
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007790:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007796:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	2200      	movs	r2, #0
 800779c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	3304      	adds	r3, #4
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fe56 	bl	8006454 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	3318      	adds	r3, #24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe fe51 	bl	8006454 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	2200      	movs	r2, #0
 80077cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	68f9      	ldr	r1, [r7, #12]
 80077da:	69b8      	ldr	r0, [r7, #24]
 80077dc:	f001 fb88 	bl	8008ef0 <pxPortInitialiseStack>
 80077e0:	4602      	mov	r2, r0
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077f2:	bf00      	nop
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007804:	f001 fc9e 	bl	8009144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007808:	4b2d      	ldr	r3, [pc, #180]	; (80078c0 <prvAddNewTaskToReadyList+0xc4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3301      	adds	r3, #1
 800780e:	4a2c      	ldr	r2, [pc, #176]	; (80078c0 <prvAddNewTaskToReadyList+0xc4>)
 8007810:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007812:	4b2c      	ldr	r3, [pc, #176]	; (80078c4 <prvAddNewTaskToReadyList+0xc8>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800781a:	4a2a      	ldr	r2, [pc, #168]	; (80078c4 <prvAddNewTaskToReadyList+0xc8>)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007820:	4b27      	ldr	r3, [pc, #156]	; (80078c0 <prvAddNewTaskToReadyList+0xc4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d110      	bne.n	800784a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007828:	f000 fc94 	bl	8008154 <prvInitialiseTaskLists>
 800782c:	e00d      	b.n	800784a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800782e:	4b26      	ldr	r3, [pc, #152]	; (80078c8 <prvAddNewTaskToReadyList+0xcc>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007836:	4b23      	ldr	r3, [pc, #140]	; (80078c4 <prvAddNewTaskToReadyList+0xc8>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	429a      	cmp	r2, r3
 8007842:	d802      	bhi.n	800784a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007844:	4a1f      	ldr	r2, [pc, #124]	; (80078c4 <prvAddNewTaskToReadyList+0xc8>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800784a:	4b20      	ldr	r3, [pc, #128]	; (80078cc <prvAddNewTaskToReadyList+0xd0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3301      	adds	r3, #1
 8007850:	4a1e      	ldr	r2, [pc, #120]	; (80078cc <prvAddNewTaskToReadyList+0xd0>)
 8007852:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007854:	4b1d      	ldr	r3, [pc, #116]	; (80078cc <prvAddNewTaskToReadyList+0xd0>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007860:	4b1b      	ldr	r3, [pc, #108]	; (80078d0 <prvAddNewTaskToReadyList+0xd4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d903      	bls.n	8007870 <prvAddNewTaskToReadyList+0x74>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	4a18      	ldr	r2, [pc, #96]	; (80078d0 <prvAddNewTaskToReadyList+0xd4>)
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007874:	4613      	mov	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <prvAddNewTaskToReadyList+0xd8>)
 800787e:	441a      	add	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f7fe fdf1 	bl	800646e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800788c:	f001 fc8a 	bl	80091a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007890:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <prvAddNewTaskToReadyList+0xcc>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00e      	beq.n	80078b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <prvAddNewTaskToReadyList+0xc8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d207      	bcs.n	80078b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078a6:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <prvAddNewTaskToReadyList+0xdc>)
 80078a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000e3c 	.word	0x20000e3c
 80078c4:	20000968 	.word	0x20000968
 80078c8:	20000e48 	.word	0x20000e48
 80078cc:	20000e58 	.word	0x20000e58
 80078d0:	20000e44 	.word	0x20000e44
 80078d4:	2000096c 	.word	0x2000096c
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08a      	sub	sp, #40	; 0x28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <vTaskDelayUntil+0x2a>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	617b      	str	r3, [r7, #20]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10a      	bne.n	8007922 <vTaskDelayUntil+0x46>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	613b      	str	r3, [r7, #16]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007922:	4b2a      	ldr	r3, [pc, #168]	; (80079cc <vTaskDelayUntil+0xf0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <vTaskDelayUntil+0x64>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	60fb      	str	r3, [r7, #12]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007940:	f000 f8e4 	bl	8007b0c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007944:	4b22      	ldr	r3, [pc, #136]	; (80079d0 <vTaskDelayUntil+0xf4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4413      	add	r3, r2
 8007952:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a3a      	ldr	r2, [r7, #32]
 800795a:	429a      	cmp	r2, r3
 800795c:	d20b      	bcs.n	8007976 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69fa      	ldr	r2, [r7, #28]
 8007964:	429a      	cmp	r2, r3
 8007966:	d211      	bcs.n	800798c <vTaskDelayUntil+0xb0>
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	429a      	cmp	r2, r3
 800796e:	d90d      	bls.n	800798c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007970:	2301      	movs	r3, #1
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
 8007974:	e00a      	b.n	800798c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	429a      	cmp	r2, r3
 800797e:	d303      	bcc.n	8007988 <vTaskDelayUntil+0xac>
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	429a      	cmp	r2, r3
 8007986:	d901      	bls.n	800798c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007988:	2301      	movs	r3, #1
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fe1f 	bl	80085e4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80079a6:	f000 f8bf 	bl	8007b28 <xTaskResumeAll>
 80079aa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d107      	bne.n	80079c2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80079b2:	4b08      	ldr	r3, [pc, #32]	; (80079d4 <vTaskDelayUntil+0xf8>)
 80079b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079c2:	bf00      	nop
 80079c4:	3728      	adds	r7, #40	; 0x28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000e64 	.word	0x20000e64
 80079d0:	20000e40 	.word	0x20000e40
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d017      	beq.n	8007a1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079ea:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <vTaskDelay+0x60>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <vTaskDelay+0x30>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	60bb      	str	r3, [r7, #8]
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a08:	f000 f880 	bl	8007b0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fde8 	bl	80085e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a14:	f000 f888 	bl	8007b28 <xTaskResumeAll>
 8007a18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d107      	bne.n	8007a30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a20:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <vTaskDelay+0x64>)
 8007a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000e64 	.word	0x20000e64
 8007a3c:	e000ed04 	.word	0xe000ed04

08007a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08a      	sub	sp, #40	; 0x28
 8007a44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a4e:	463a      	mov	r2, r7
 8007a50:	1d39      	adds	r1, r7, #4
 8007a52:	f107 0308 	add.w	r3, r7, #8
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fca8 	bl	80063ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	9202      	str	r2, [sp, #8]
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	2300      	movs	r3, #0
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	460a      	mov	r2, r1
 8007a6e:	4921      	ldr	r1, [pc, #132]	; (8007af4 <vTaskStartScheduler+0xb4>)
 8007a70:	4821      	ldr	r0, [pc, #132]	; (8007af8 <vTaskStartScheduler+0xb8>)
 8007a72:	f7ff fd91 	bl	8007598 <xTaskCreateStatic>
 8007a76:	4603      	mov	r3, r0
 8007a78:	4a20      	ldr	r2, [pc, #128]	; (8007afc <vTaskStartScheduler+0xbc>)
 8007a7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a7c:	4b1f      	ldr	r3, [pc, #124]	; (8007afc <vTaskStartScheduler+0xbc>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a84:	2301      	movs	r3, #1
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	e001      	b.n	8007a8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d102      	bne.n	8007a9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a94:	f000 fdfa 	bl	800868c <xTimerCreateTimerTask>
 8007a98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d116      	bne.n	8007ace <vTaskStartScheduler+0x8e>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	613b      	str	r3, [r7, #16]
}
 8007ab2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ab4:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <vTaskStartScheduler+0xc0>)
 8007ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007abc:	4b11      	ldr	r3, [pc, #68]	; (8007b04 <vTaskStartScheduler+0xc4>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ac2:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <vTaskStartScheduler+0xc8>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ac8:	f001 fa9a 	bl	8009000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007acc:	e00e      	b.n	8007aec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad4:	d10a      	bne.n	8007aec <vTaskStartScheduler+0xac>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	60fb      	str	r3, [r7, #12]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <vTaskStartScheduler+0xaa>
}
 8007aec:	bf00      	nop
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	0800a658 	.word	0x0800a658
 8007af8:	08008125 	.word	0x08008125
 8007afc:	20000e60 	.word	0x20000e60
 8007b00:	20000e5c 	.word	0x20000e5c
 8007b04:	20000e48 	.word	0x20000e48
 8007b08:	20000e40 	.word	0x20000e40

08007b0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <vTaskSuspendAll+0x18>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	4a03      	ldr	r2, [pc, #12]	; (8007b24 <vTaskSuspendAll+0x18>)
 8007b18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b1a:	bf00      	nop
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	20000e64 	.word	0x20000e64

08007b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b36:	4b42      	ldr	r3, [pc, #264]	; (8007c40 <xTaskResumeAll+0x118>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	603b      	str	r3, [r7, #0]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b54:	f001 faf6 	bl	8009144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b58:	4b39      	ldr	r3, [pc, #228]	; (8007c40 <xTaskResumeAll+0x118>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	4a38      	ldr	r2, [pc, #224]	; (8007c40 <xTaskResumeAll+0x118>)
 8007b60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b62:	4b37      	ldr	r3, [pc, #220]	; (8007c40 <xTaskResumeAll+0x118>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d162      	bne.n	8007c30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b6a:	4b36      	ldr	r3, [pc, #216]	; (8007c44 <xTaskResumeAll+0x11c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d05e      	beq.n	8007c30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b72:	e02f      	b.n	8007bd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b74:	4b34      	ldr	r3, [pc, #208]	; (8007c48 <xTaskResumeAll+0x120>)
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3318      	adds	r3, #24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fcd1 	bl	8006528 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fccc 	bl	8006528 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b94:	4b2d      	ldr	r3, [pc, #180]	; (8007c4c <xTaskResumeAll+0x124>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d903      	bls.n	8007ba4 <xTaskResumeAll+0x7c>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	4a2a      	ldr	r2, [pc, #168]	; (8007c4c <xTaskResumeAll+0x124>)
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4a27      	ldr	r2, [pc, #156]	; (8007c50 <xTaskResumeAll+0x128>)
 8007bb2:	441a      	add	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7fe fc57 	bl	800646e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <xTaskResumeAll+0x12c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007bce:	4b22      	ldr	r3, [pc, #136]	; (8007c58 <xTaskResumeAll+0x130>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <xTaskResumeAll+0x120>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1cb      	bne.n	8007b74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007be2:	f000 fb55 	bl	8008290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007be6:	4b1d      	ldr	r3, [pc, #116]	; (8007c5c <xTaskResumeAll+0x134>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d010      	beq.n	8007c14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bf2:	f000 f847 	bl	8007c84 <xTaskIncrementTick>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007bfc:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <xTaskResumeAll+0x130>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f1      	bne.n	8007bf2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007c0e:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <xTaskResumeAll+0x134>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c14:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <xTaskResumeAll+0x130>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d009      	beq.n	8007c30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c20:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <xTaskResumeAll+0x138>)
 8007c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c30:	f001 fab8 	bl	80091a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007c34:	68bb      	ldr	r3, [r7, #8]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000e64 	.word	0x20000e64
 8007c44:	20000e3c 	.word	0x20000e3c
 8007c48:	20000dfc 	.word	0x20000dfc
 8007c4c:	20000e44 	.word	0x20000e44
 8007c50:	2000096c 	.word	0x2000096c
 8007c54:	20000968 	.word	0x20000968
 8007c58:	20000e50 	.word	0x20000e50
 8007c5c:	20000e4c 	.word	0x20000e4c
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c6a:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <xTaskGetTickCount+0x1c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c70:	687b      	ldr	r3, [r7, #4]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20000e40 	.word	0x20000e40

08007c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c8e:	4b4f      	ldr	r3, [pc, #316]	; (8007dcc <xTaskIncrementTick+0x148>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f040 808f 	bne.w	8007db6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c98:	4b4d      	ldr	r3, [pc, #308]	; (8007dd0 <xTaskIncrementTick+0x14c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ca0:	4a4b      	ldr	r2, [pc, #300]	; (8007dd0 <xTaskIncrementTick+0x14c>)
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d120      	bne.n	8007cee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cac:	4b49      	ldr	r3, [pc, #292]	; (8007dd4 <xTaskIncrementTick+0x150>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <xTaskIncrementTick+0x48>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	603b      	str	r3, [r7, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	e7fe      	b.n	8007cca <xTaskIncrementTick+0x46>
 8007ccc:	4b41      	ldr	r3, [pc, #260]	; (8007dd4 <xTaskIncrementTick+0x150>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	4b41      	ldr	r3, [pc, #260]	; (8007dd8 <xTaskIncrementTick+0x154>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a3f      	ldr	r2, [pc, #252]	; (8007dd4 <xTaskIncrementTick+0x150>)
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	4a3f      	ldr	r2, [pc, #252]	; (8007dd8 <xTaskIncrementTick+0x154>)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	4b3e      	ldr	r3, [pc, #248]	; (8007ddc <xTaskIncrementTick+0x158>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	4a3d      	ldr	r2, [pc, #244]	; (8007ddc <xTaskIncrementTick+0x158>)
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	f000 fad1 	bl	8008290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cee:	4b3c      	ldr	r3, [pc, #240]	; (8007de0 <xTaskIncrementTick+0x15c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d349      	bcc.n	8007d8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cf8:	4b36      	ldr	r3, [pc, #216]	; (8007dd4 <xTaskIncrementTick+0x150>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d104      	bne.n	8007d0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d02:	4b37      	ldr	r3, [pc, #220]	; (8007de0 <xTaskIncrementTick+0x15c>)
 8007d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d08:	601a      	str	r2, [r3, #0]
					break;
 8007d0a:	e03f      	b.n	8007d8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0c:	4b31      	ldr	r3, [pc, #196]	; (8007dd4 <xTaskIncrementTick+0x150>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d203      	bcs.n	8007d2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d24:	4a2e      	ldr	r2, [pc, #184]	; (8007de0 <xTaskIncrementTick+0x15c>)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d2a:	e02f      	b.n	8007d8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fbf9 	bl	8006528 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	3318      	adds	r3, #24
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fbf0 	bl	8006528 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4c:	4b25      	ldr	r3, [pc, #148]	; (8007de4 <xTaskIncrementTick+0x160>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d903      	bls.n	8007d5c <xTaskIncrementTick+0xd8>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a22      	ldr	r2, [pc, #136]	; (8007de4 <xTaskIncrementTick+0x160>)
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4a1f      	ldr	r2, [pc, #124]	; (8007de8 <xTaskIncrementTick+0x164>)
 8007d6a:	441a      	add	r2, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f7fe fb7b 	bl	800646e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	4b1b      	ldr	r3, [pc, #108]	; (8007dec <xTaskIncrementTick+0x168>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d3b8      	bcc.n	8007cf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d86:	2301      	movs	r3, #1
 8007d88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d8a:	e7b5      	b.n	8007cf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d8c:	4b17      	ldr	r3, [pc, #92]	; (8007dec <xTaskIncrementTick+0x168>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d92:	4915      	ldr	r1, [pc, #84]	; (8007de8 <xTaskIncrementTick+0x164>)
 8007d94:	4613      	mov	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d901      	bls.n	8007da8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007da8:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <xTaskIncrementTick+0x16c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007db0:	2301      	movs	r3, #1
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	e004      	b.n	8007dc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007db6:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <xTaskIncrementTick+0x170>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	4a0d      	ldr	r2, [pc, #52]	; (8007df4 <xTaskIncrementTick+0x170>)
 8007dbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007dc0:	697b      	ldr	r3, [r7, #20]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000e64 	.word	0x20000e64
 8007dd0:	20000e40 	.word	0x20000e40
 8007dd4:	20000df4 	.word	0x20000df4
 8007dd8:	20000df8 	.word	0x20000df8
 8007ddc:	20000e54 	.word	0x20000e54
 8007de0:	20000e5c 	.word	0x20000e5c
 8007de4:	20000e44 	.word	0x20000e44
 8007de8:	2000096c 	.word	0x2000096c
 8007dec:	20000968 	.word	0x20000968
 8007df0:	20000e50 	.word	0x20000e50
 8007df4:	20000e4c 	.word	0x20000e4c

08007df8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dfe:	4b28      	ldr	r3, [pc, #160]	; (8007ea0 <vTaskSwitchContext+0xa8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e06:	4b27      	ldr	r3, [pc, #156]	; (8007ea4 <vTaskSwitchContext+0xac>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e0c:	e041      	b.n	8007e92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007e0e:	4b25      	ldr	r3, [pc, #148]	; (8007ea4 <vTaskSwitchContext+0xac>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e14:	4b24      	ldr	r3, [pc, #144]	; (8007ea8 <vTaskSwitchContext+0xb0>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	e010      	b.n	8007e3e <vTaskSwitchContext+0x46>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <vTaskSwitchContext+0x40>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	607b      	str	r3, [r7, #4]
}
 8007e34:	bf00      	nop
 8007e36:	e7fe      	b.n	8007e36 <vTaskSwitchContext+0x3e>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	491b      	ldr	r1, [pc, #108]	; (8007eac <vTaskSwitchContext+0xb4>)
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0e4      	beq.n	8007e1c <vTaskSwitchContext+0x24>
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4a13      	ldr	r2, [pc, #76]	; (8007eac <vTaskSwitchContext+0xb4>)
 8007e5e:	4413      	add	r3, r2
 8007e60:	60bb      	str	r3, [r7, #8]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	605a      	str	r2, [r3, #4]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	3308      	adds	r3, #8
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d104      	bne.n	8007e82 <vTaskSwitchContext+0x8a>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	605a      	str	r2, [r3, #4]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <vTaskSwitchContext+0xb8>)
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	4a06      	ldr	r2, [pc, #24]	; (8007ea8 <vTaskSwitchContext+0xb0>)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6013      	str	r3, [r2, #0]
}
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20000e64 	.word	0x20000e64
 8007ea4:	20000e50 	.word	0x20000e50
 8007ea8:	20000e44 	.word	0x20000e44
 8007eac:	2000096c 	.word	0x2000096c
 8007eb0:	20000968 	.word	0x20000968

08007eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	60fb      	str	r3, [r7, #12]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eda:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <vTaskPlaceOnEventList+0x44>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3318      	adds	r3, #24
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fe fae7 	bl	80064b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ee8:	2101      	movs	r1, #1
 8007eea:	6838      	ldr	r0, [r7, #0]
 8007eec:	f000 fb7a 	bl	80085e4 <prvAddCurrentTaskToDelayedList>
}
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20000968 	.word	0x20000968

08007efc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	617b      	str	r3, [r7, #20]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f24:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3318      	adds	r3, #24
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7fe fa9e 	bl	800646e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	68b8      	ldr	r0, [r7, #8]
 8007f42:	f000 fb4f 	bl	80085e4 <prvAddCurrentTaskToDelayedList>
	}
 8007f46:	bf00      	nop
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000968 	.word	0x20000968

08007f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10a      	bne.n	8007f80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	60fb      	str	r3, [r7, #12]
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	3318      	adds	r3, #24
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe facf 	bl	8006528 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f8a:	4b1e      	ldr	r3, [pc, #120]	; (8008004 <xTaskRemoveFromEventList+0xb0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d11d      	bne.n	8007fce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fac6 	bl	8006528 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	4b19      	ldr	r3, [pc, #100]	; (8008008 <xTaskRemoveFromEventList+0xb4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d903      	bls.n	8007fb0 <xTaskRemoveFromEventList+0x5c>
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	4a16      	ldr	r2, [pc, #88]	; (8008008 <xTaskRemoveFromEventList+0xb4>)
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4a13      	ldr	r2, [pc, #76]	; (800800c <xTaskRemoveFromEventList+0xb8>)
 8007fbe:	441a      	add	r2, r3
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	f7fe fa51 	bl	800646e <vListInsertEnd>
 8007fcc:	e005      	b.n	8007fda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	3318      	adds	r3, #24
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	480e      	ldr	r0, [pc, #56]	; (8008010 <xTaskRemoveFromEventList+0xbc>)
 8007fd6:	f7fe fa4a 	bl	800646e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <xTaskRemoveFromEventList+0xc0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d905      	bls.n	8007ff4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <xTaskRemoveFromEventList+0xc4>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	e001      	b.n	8007ff8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ff8:	697b      	ldr	r3, [r7, #20]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000e64 	.word	0x20000e64
 8008008:	20000e44 	.word	0x20000e44
 800800c:	2000096c 	.word	0x2000096c
 8008010:	20000dfc 	.word	0x20000dfc
 8008014:	20000968 	.word	0x20000968
 8008018:	20000e50 	.word	0x20000e50

0800801c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008024:	4b06      	ldr	r3, [pc, #24]	; (8008040 <vTaskInternalSetTimeOutState+0x24>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <vTaskInternalSetTimeOutState+0x28>)
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	605a      	str	r2, [r3, #4]
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	20000e54 	.word	0x20000e54
 8008044:	20000e40 	.word	0x20000e40

08008048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	613b      	str	r3, [r7, #16]
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	60fb      	str	r3, [r7, #12]
}
 8008086:	bf00      	nop
 8008088:	e7fe      	b.n	8008088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800808a:	f001 f85b 	bl	8009144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800808e:	4b1d      	ldr	r3, [pc, #116]	; (8008104 <xTaskCheckForTimeOut+0xbc>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080a6:	d102      	bne.n	80080ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	e023      	b.n	80080f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	4b15      	ldr	r3, [pc, #84]	; (8008108 <xTaskCheckForTimeOut+0xc0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d007      	beq.n	80080ca <xTaskCheckForTimeOut+0x82>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d302      	bcc.n	80080ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	61fb      	str	r3, [r7, #28]
 80080c8:	e015      	b.n	80080f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d20b      	bcs.n	80080ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	1ad2      	subs	r2, r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff ff9b 	bl	800801c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	e004      	b.n	80080f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080f2:	2301      	movs	r3, #1
 80080f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080f6:	f001 f855 	bl	80091a4 <vPortExitCritical>

	return xReturn;
 80080fa:	69fb      	ldr	r3, [r7, #28]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3720      	adds	r7, #32
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20000e40 	.word	0x20000e40
 8008108:	20000e54 	.word	0x20000e54

0800810c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008110:	4b03      	ldr	r3, [pc, #12]	; (8008120 <vTaskMissedYield+0x14>)
 8008112:	2201      	movs	r2, #1
 8008114:	601a      	str	r2, [r3, #0]
}
 8008116:	bf00      	nop
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	20000e50 	.word	0x20000e50

08008124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800812c:	f000 f852 	bl	80081d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008130:	4b06      	ldr	r3, [pc, #24]	; (800814c <prvIdleTask+0x28>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d9f9      	bls.n	800812c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008138:	4b05      	ldr	r3, [pc, #20]	; (8008150 <prvIdleTask+0x2c>)
 800813a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008148:	e7f0      	b.n	800812c <prvIdleTask+0x8>
 800814a:	bf00      	nop
 800814c:	2000096c 	.word	0x2000096c
 8008150:	e000ed04 	.word	0xe000ed04

08008154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800815a:	2300      	movs	r3, #0
 800815c:	607b      	str	r3, [r7, #4]
 800815e:	e00c      	b.n	800817a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4a12      	ldr	r2, [pc, #72]	; (80081b4 <prvInitialiseTaskLists+0x60>)
 800816c:	4413      	add	r3, r2
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe f950 	bl	8006414 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3301      	adds	r3, #1
 8008178:	607b      	str	r3, [r7, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b37      	cmp	r3, #55	; 0x37
 800817e:	d9ef      	bls.n	8008160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008180:	480d      	ldr	r0, [pc, #52]	; (80081b8 <prvInitialiseTaskLists+0x64>)
 8008182:	f7fe f947 	bl	8006414 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008186:	480d      	ldr	r0, [pc, #52]	; (80081bc <prvInitialiseTaskLists+0x68>)
 8008188:	f7fe f944 	bl	8006414 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800818c:	480c      	ldr	r0, [pc, #48]	; (80081c0 <prvInitialiseTaskLists+0x6c>)
 800818e:	f7fe f941 	bl	8006414 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008192:	480c      	ldr	r0, [pc, #48]	; (80081c4 <prvInitialiseTaskLists+0x70>)
 8008194:	f7fe f93e 	bl	8006414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008198:	480b      	ldr	r0, [pc, #44]	; (80081c8 <prvInitialiseTaskLists+0x74>)
 800819a:	f7fe f93b 	bl	8006414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <prvInitialiseTaskLists+0x78>)
 80081a0:	4a05      	ldr	r2, [pc, #20]	; (80081b8 <prvInitialiseTaskLists+0x64>)
 80081a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <prvInitialiseTaskLists+0x7c>)
 80081a6:	4a05      	ldr	r2, [pc, #20]	; (80081bc <prvInitialiseTaskLists+0x68>)
 80081a8:	601a      	str	r2, [r3, #0]
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	2000096c 	.word	0x2000096c
 80081b8:	20000dcc 	.word	0x20000dcc
 80081bc:	20000de0 	.word	0x20000de0
 80081c0:	20000dfc 	.word	0x20000dfc
 80081c4:	20000e10 	.word	0x20000e10
 80081c8:	20000e28 	.word	0x20000e28
 80081cc:	20000df4 	.word	0x20000df4
 80081d0:	20000df8 	.word	0x20000df8

080081d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081da:	e019      	b.n	8008210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081dc:	f000 ffb2 	bl	8009144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081e0:	4b10      	ldr	r3, [pc, #64]	; (8008224 <prvCheckTasksWaitingTermination+0x50>)
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3304      	adds	r3, #4
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe f99b 	bl	8006528 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081f2:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <prvCheckTasksWaitingTermination+0x54>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	4a0b      	ldr	r2, [pc, #44]	; (8008228 <prvCheckTasksWaitingTermination+0x54>)
 80081fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081fc:	4b0b      	ldr	r3, [pc, #44]	; (800822c <prvCheckTasksWaitingTermination+0x58>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3b01      	subs	r3, #1
 8008202:	4a0a      	ldr	r2, [pc, #40]	; (800822c <prvCheckTasksWaitingTermination+0x58>)
 8008204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008206:	f000 ffcd 	bl	80091a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f810 	bl	8008230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008210:	4b06      	ldr	r3, [pc, #24]	; (800822c <prvCheckTasksWaitingTermination+0x58>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e1      	bne.n	80081dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000e10 	.word	0x20000e10
 8008228:	20000e3c 	.word	0x20000e3c
 800822c:	20000e24 	.word	0x20000e24

08008230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800823e:	2b00      	cmp	r3, #0
 8008240:	d108      	bne.n	8008254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008246:	4618      	mov	r0, r3
 8008248:	f001 f96a 	bl	8009520 <vPortFree>
				vPortFree( pxTCB );
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 f967 	bl	8009520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008252:	e018      	b.n	8008286 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800825a:	2b01      	cmp	r3, #1
 800825c:	d103      	bne.n	8008266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 f95e 	bl	8009520 <vPortFree>
	}
 8008264:	e00f      	b.n	8008286 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800826c:	2b02      	cmp	r3, #2
 800826e:	d00a      	beq.n	8008286 <prvDeleteTCB+0x56>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	60fb      	str	r3, [r7, #12]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <prvDeleteTCB+0x54>
	}
 8008286:	bf00      	nop
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008296:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <prvResetNextTaskUnblockTime+0x38>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d104      	bne.n	80082aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082a0:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <prvResetNextTaskUnblockTime+0x3c>)
 80082a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082a8:	e008      	b.n	80082bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082aa:	4b07      	ldr	r3, [pc, #28]	; (80082c8 <prvResetNextTaskUnblockTime+0x38>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4a04      	ldr	r2, [pc, #16]	; (80082cc <prvResetNextTaskUnblockTime+0x3c>)
 80082ba:	6013      	str	r3, [r2, #0]
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	20000df4 	.word	0x20000df4
 80082cc:	20000e5c 	.word	0x20000e5c

080082d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082d6:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <xTaskGetSchedulerState+0x34>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082de:	2301      	movs	r3, #1
 80082e0:	607b      	str	r3, [r7, #4]
 80082e2:	e008      	b.n	80082f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e4:	4b08      	ldr	r3, [pc, #32]	; (8008308 <xTaskGetSchedulerState+0x38>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d102      	bne.n	80082f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082ec:	2302      	movs	r3, #2
 80082ee:	607b      	str	r3, [r7, #4]
 80082f0:	e001      	b.n	80082f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082f2:	2300      	movs	r3, #0
 80082f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082f6:	687b      	ldr	r3, [r7, #4]
	}
 80082f8:	4618      	mov	r0, r3
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	20000e48 	.word	0x20000e48
 8008308:	20000e64 	.word	0x20000e64

0800830c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008318:	2300      	movs	r3, #0
 800831a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d051      	beq.n	80083c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008326:	4b2a      	ldr	r3, [pc, #168]	; (80083d0 <xTaskPriorityInherit+0xc4>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	429a      	cmp	r2, r3
 800832e:	d241      	bcs.n	80083b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	db06      	blt.n	8008346 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008338:	4b25      	ldr	r3, [pc, #148]	; (80083d0 <xTaskPriorityInherit+0xc4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6959      	ldr	r1, [r3, #20]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4a1f      	ldr	r2, [pc, #124]	; (80083d4 <xTaskPriorityInherit+0xc8>)
 8008358:	4413      	add	r3, r2
 800835a:	4299      	cmp	r1, r3
 800835c:	d122      	bne.n	80083a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	3304      	adds	r3, #4
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe f8e0 	bl	8006528 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008368:	4b19      	ldr	r3, [pc, #100]	; (80083d0 <xTaskPriorityInherit+0xc4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008376:	4b18      	ldr	r3, [pc, #96]	; (80083d8 <xTaskPriorityInherit+0xcc>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d903      	bls.n	8008386 <xTaskPriorityInherit+0x7a>
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	4a15      	ldr	r2, [pc, #84]	; (80083d8 <xTaskPriorityInherit+0xcc>)
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4a10      	ldr	r2, [pc, #64]	; (80083d4 <xTaskPriorityInherit+0xc8>)
 8008394:	441a      	add	r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	3304      	adds	r3, #4
 800839a:	4619      	mov	r1, r3
 800839c:	4610      	mov	r0, r2
 800839e:	f7fe f866 	bl	800646e <vListInsertEnd>
 80083a2:	e004      	b.n	80083ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083a4:	4b0a      	ldr	r3, [pc, #40]	; (80083d0 <xTaskPriorityInherit+0xc4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80083ae:	2301      	movs	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	e008      	b.n	80083c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083b8:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <xTaskPriorityInherit+0xc4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083be:	429a      	cmp	r2, r3
 80083c0:	d201      	bcs.n	80083c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80083c2:	2301      	movs	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083c6:	68fb      	ldr	r3, [r7, #12]
	}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20000968 	.word	0x20000968
 80083d4:	2000096c 	.word	0x2000096c
 80083d8:	20000e44 	.word	0x20000e44

080083dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d056      	beq.n	80084a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083f2:	4b2e      	ldr	r3, [pc, #184]	; (80084ac <xTaskPriorityDisinherit+0xd0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d00a      	beq.n	8008412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	60fb      	str	r3, [r7, #12]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	60bb      	str	r3, [r7, #8]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008434:	1e5a      	subs	r2, r3, #1
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008442:	429a      	cmp	r2, r3
 8008444:	d02c      	beq.n	80084a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800844a:	2b00      	cmp	r3, #0
 800844c:	d128      	bne.n	80084a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	3304      	adds	r3, #4
 8008452:	4618      	mov	r0, r3
 8008454:	f7fe f868 	bl	8006528 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008470:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <xTaskPriorityDisinherit+0xd4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	429a      	cmp	r2, r3
 8008476:	d903      	bls.n	8008480 <xTaskPriorityDisinherit+0xa4>
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	4a0c      	ldr	r2, [pc, #48]	; (80084b0 <xTaskPriorityDisinherit+0xd4>)
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	4613      	mov	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4a09      	ldr	r2, [pc, #36]	; (80084b4 <xTaskPriorityDisinherit+0xd8>)
 800848e:	441a      	add	r2, r3
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	3304      	adds	r3, #4
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	f7fd ffe9 	bl	800646e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800849c:	2301      	movs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084a0:	697b      	ldr	r3, [r7, #20]
	}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000968 	.word	0x20000968
 80084b0:	20000e44 	.word	0x20000e44
 80084b4:	2000096c 	.word	0x2000096c

080084b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80084c6:	2301      	movs	r3, #1
 80084c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d06a      	beq.n	80085a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10a      	bne.n	80084ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	60fb      	str	r3, [r7, #12]
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d902      	bls.n	80084fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	61fb      	str	r3, [r7, #28]
 80084fc:	e002      	b.n	8008504 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008502:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	429a      	cmp	r2, r3
 800850c:	d04b      	beq.n	80085a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	429a      	cmp	r2, r3
 8008516:	d146      	bne.n	80085a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008518:	4b25      	ldr	r3, [pc, #148]	; (80085b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	429a      	cmp	r2, r3
 8008520:	d10a      	bne.n	8008538 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	60bb      	str	r3, [r7, #8]
}
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	db04      	blt.n	8008556 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	6959      	ldr	r1, [r3, #20]
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4a13      	ldr	r2, [pc, #76]	; (80085b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008566:	4413      	add	r3, r2
 8008568:	4299      	cmp	r1, r3
 800856a:	d11c      	bne.n	80085a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	3304      	adds	r3, #4
 8008570:	4618      	mov	r0, r3
 8008572:	f7fd ffd9 	bl	8006528 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857a:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	429a      	cmp	r2, r3
 8008580:	d903      	bls.n	800858a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	4a0c      	ldr	r2, [pc, #48]	; (80085b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4a07      	ldr	r2, [pc, #28]	; (80085b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008598:	441a      	add	r2, r3
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f7fd ff64 	bl	800646e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085a6:	bf00      	nop
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000968 	.word	0x20000968
 80085b4:	2000096c 	.word	0x2000096c
 80085b8:	20000e44 	.word	0x20000e44

080085bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d004      	beq.n	80085d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ce:	3201      	adds	r2, #1
 80085d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80085d2:	4b03      	ldr	r3, [pc, #12]	; (80085e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80085d4:	681b      	ldr	r3, [r3, #0]
	}
 80085d6:	4618      	mov	r0, r3
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20000968 	.word	0x20000968

080085e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085ee:	4b21      	ldr	r3, [pc, #132]	; (8008674 <prvAddCurrentTaskToDelayedList+0x90>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085f4:	4b20      	ldr	r3, [pc, #128]	; (8008678 <prvAddCurrentTaskToDelayedList+0x94>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fd ff94 	bl	8006528 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008606:	d10a      	bne.n	800861e <prvAddCurrentTaskToDelayedList+0x3a>
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800860e:	4b1a      	ldr	r3, [pc, #104]	; (8008678 <prvAddCurrentTaskToDelayedList+0x94>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3304      	adds	r3, #4
 8008614:	4619      	mov	r1, r3
 8008616:	4819      	ldr	r0, [pc, #100]	; (800867c <prvAddCurrentTaskToDelayedList+0x98>)
 8008618:	f7fd ff29 	bl	800646e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800861c:	e026      	b.n	800866c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4413      	add	r3, r2
 8008624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008626:	4b14      	ldr	r3, [pc, #80]	; (8008678 <prvAddCurrentTaskToDelayedList+0x94>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	429a      	cmp	r2, r3
 8008634:	d209      	bcs.n	800864a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008636:	4b12      	ldr	r3, [pc, #72]	; (8008680 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	4b0f      	ldr	r3, [pc, #60]	; (8008678 <prvAddCurrentTaskToDelayedList+0x94>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3304      	adds	r3, #4
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f7fd ff37 	bl	80064b6 <vListInsert>
}
 8008648:	e010      	b.n	800866c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800864a:	4b0e      	ldr	r3, [pc, #56]	; (8008684 <prvAddCurrentTaskToDelayedList+0xa0>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <prvAddCurrentTaskToDelayedList+0x94>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3304      	adds	r3, #4
 8008654:	4619      	mov	r1, r3
 8008656:	4610      	mov	r0, r2
 8008658:	f7fd ff2d 	bl	80064b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800865c:	4b0a      	ldr	r3, [pc, #40]	; (8008688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	429a      	cmp	r2, r3
 8008664:	d202      	bcs.n	800866c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008666:	4a08      	ldr	r2, [pc, #32]	; (8008688 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	6013      	str	r3, [r2, #0]
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20000e40 	.word	0x20000e40
 8008678:	20000968 	.word	0x20000968
 800867c:	20000e28 	.word	0x20000e28
 8008680:	20000df8 	.word	0x20000df8
 8008684:	20000df4 	.word	0x20000df4
 8008688:	20000e5c 	.word	0x20000e5c

0800868c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08a      	sub	sp, #40	; 0x28
 8008690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008692:	2300      	movs	r3, #0
 8008694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008696:	f000 fba1 	bl	8008ddc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800869a:	4b1c      	ldr	r3, [pc, #112]	; (800870c <xTimerCreateTimerTask+0x80>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d021      	beq.n	80086e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80086aa:	1d3a      	adds	r2, r7, #4
 80086ac:	f107 0108 	add.w	r1, r7, #8
 80086b0:	f107 030c 	add.w	r3, r7, #12
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fd fe93 	bl	80063e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	9202      	str	r2, [sp, #8]
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	2302      	movs	r3, #2
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	2300      	movs	r3, #0
 80086ca:	460a      	mov	r2, r1
 80086cc:	4910      	ldr	r1, [pc, #64]	; (8008710 <xTimerCreateTimerTask+0x84>)
 80086ce:	4811      	ldr	r0, [pc, #68]	; (8008714 <xTimerCreateTimerTask+0x88>)
 80086d0:	f7fe ff62 	bl	8007598 <xTaskCreateStatic>
 80086d4:	4603      	mov	r3, r0
 80086d6:	4a10      	ldr	r2, [pc, #64]	; (8008718 <xTimerCreateTimerTask+0x8c>)
 80086d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086da:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <xTimerCreateTimerTask+0x8c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086e2:	2301      	movs	r3, #1
 80086e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	613b      	str	r3, [r7, #16]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008702:	697b      	ldr	r3, [r7, #20]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000e98 	.word	0x20000e98
 8008710:	0800a660 	.word	0x0800a660
 8008714:	08008985 	.word	0x08008985
 8008718:	20000e9c 	.word	0x20000e9c

0800871c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800872a:	202c      	movs	r0, #44	; 0x2c
 800872c:	f000 fe2c 	bl	8009388 <pvPortMalloc>
 8008730:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00d      	beq.n	8008754 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f843 	bl	80087da <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008754:	697b      	ldr	r3, [r7, #20]
	}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800875e:	b580      	push	{r7, lr}
 8008760:	b08a      	sub	sp, #40	; 0x28
 8008762:	af02      	add	r7, sp, #8
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
 800876a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800876c:	232c      	movs	r3, #44	; 0x2c
 800876e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2b2c      	cmp	r3, #44	; 0x2c
 8008774:	d00a      	beq.n	800878c <xTimerCreateStatic+0x2e>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	61bb      	str	r3, [r7, #24]
}
 8008788:	bf00      	nop
 800878a:	e7fe      	b.n	800878a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800878c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10a      	bne.n	80087aa <xTimerCreateStatic+0x4c>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	617b      	str	r3, [r7, #20]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00d      	beq.n	80087d0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 f805 	bl	80087da <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80087d0:	69fb      	ldr	r3, [r7, #28]
	}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3720      	adds	r7, #32
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	607a      	str	r2, [r7, #4]
 80087e6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	617b      	str	r3, [r7, #20]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d01e      	beq.n	8008848 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800880a:	f000 fae7 	bl	8008ddc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	6a3a      	ldr	r2, [r7, #32]
 8008824:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	3304      	adds	r3, #4
 800882a:	4618      	mov	r0, r3
 800882c:	f7fd fe12 	bl	8006454 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800883c:	f043 0304 	orr.w	r3, r3, #4
 8008840:	b2da      	uxtb	r2, r3
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008848:	bf00      	nop
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	; 0x28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800885e:	2300      	movs	r3, #0
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10a      	bne.n	800887e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	623b      	str	r3, [r7, #32]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800887e:	4b1a      	ldr	r3, [pc, #104]	; (80088e8 <xTimerGenericCommand+0x98>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d02a      	beq.n	80088dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b05      	cmp	r3, #5
 8008896:	dc18      	bgt.n	80088ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008898:	f7ff fd1a 	bl	80082d0 <xTaskGetSchedulerState>
 800889c:	4603      	mov	r3, r0
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d109      	bne.n	80088b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088a2:	4b11      	ldr	r3, [pc, #68]	; (80088e8 <xTimerGenericCommand+0x98>)
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	f107 0110 	add.w	r1, r7, #16
 80088aa:	2300      	movs	r3, #0
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	f7fe f80d 	bl	80068cc <xQueueGenericSend>
 80088b2:	6278      	str	r0, [r7, #36]	; 0x24
 80088b4:	e012      	b.n	80088dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088b6:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <xTimerGenericCommand+0x98>)
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	f107 0110 	add.w	r1, r7, #16
 80088be:	2300      	movs	r3, #0
 80088c0:	2200      	movs	r2, #0
 80088c2:	f7fe f803 	bl	80068cc <xQueueGenericSend>
 80088c6:	6278      	str	r0, [r7, #36]	; 0x24
 80088c8:	e008      	b.n	80088dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088ca:	4b07      	ldr	r3, [pc, #28]	; (80088e8 <xTimerGenericCommand+0x98>)
 80088cc:	6818      	ldr	r0, [r3, #0]
 80088ce:	f107 0110 	add.w	r1, r7, #16
 80088d2:	2300      	movs	r3, #0
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	f7fe f8f7 	bl	8006ac8 <xQueueGenericSendFromISR>
 80088da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3728      	adds	r7, #40	; 0x28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20000e98 	.word	0x20000e98

080088ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088f6:	4b22      	ldr	r3, [pc, #136]	; (8008980 <prvProcessExpiredTimer+0x94>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	3304      	adds	r3, #4
 8008904:	4618      	mov	r0, r3
 8008906:	f7fd fe0f 	bl	8006528 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d022      	beq.n	800895e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	699a      	ldr	r2, [r3, #24]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	18d1      	adds	r1, r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	6978      	ldr	r0, [r7, #20]
 8008926:	f000 f8d1 	bl	8008acc <prvInsertTimerInActiveList>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01f      	beq.n	8008970 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008930:	2300      	movs	r3, #0
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	2100      	movs	r1, #0
 800893a:	6978      	ldr	r0, [r7, #20]
 800893c:	f7ff ff88 	bl	8008850 <xTimerGenericCommand>
 8008940:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d113      	bne.n	8008970 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	60fb      	str	r3, [r7, #12]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008964:	f023 0301 	bic.w	r3, r3, #1
 8008968:	b2da      	uxtb	r2, r3
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	6978      	ldr	r0, [r7, #20]
 8008976:	4798      	blx	r3
}
 8008978:	bf00      	nop
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20000e90 	.word	0x20000e90

08008984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800898c:	f107 0308 	add.w	r3, r7, #8
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f857 	bl	8008a44 <prvGetNextExpireTime>
 8008996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4619      	mov	r1, r3
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f803 	bl	80089a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80089a2:	f000 f8d5 	bl	8008b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089a6:	e7f1      	b.n	800898c <prvTimerTask+0x8>

080089a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089b2:	f7ff f8ab 	bl	8007b0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 f866 	bl	8008a8c <prvSampleTimeNow>
 80089c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d130      	bne.n	8008a2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10a      	bne.n	80089e4 <prvProcessTimerOrBlockTask+0x3c>
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d806      	bhi.n	80089e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089d6:	f7ff f8a7 	bl	8007b28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089da:	68f9      	ldr	r1, [r7, #12]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff ff85 	bl	80088ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089e2:	e024      	b.n	8008a2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d008      	beq.n	80089fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <prvProcessTimerOrBlockTask+0x90>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <prvProcessTimerOrBlockTask+0x50>
 80089f4:	2301      	movs	r3, #1
 80089f6:	e000      	b.n	80089fa <prvProcessTimerOrBlockTask+0x52>
 80089f8:	2300      	movs	r3, #0
 80089fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089fc:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <prvProcessTimerOrBlockTask+0x94>)
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f7fe fd91 	bl	8007530 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a0e:	f7ff f88b 	bl	8007b28 <xTaskResumeAll>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10a      	bne.n	8008a2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a18:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <prvProcessTimerOrBlockTask+0x98>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
}
 8008a28:	e001      	b.n	8008a2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a2a:	f7ff f87d 	bl	8007b28 <xTaskResumeAll>
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000e94 	.word	0x20000e94
 8008a3c:	20000e98 	.word	0x20000e98
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a4c:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <prvGetNextExpireTime+0x44>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <prvGetNextExpireTime+0x16>
 8008a56:	2201      	movs	r2, #1
 8008a58:	e000      	b.n	8008a5c <prvGetNextExpireTime+0x18>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d105      	bne.n	8008a74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a68:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <prvGetNextExpireTime+0x44>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	e001      	b.n	8008a78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a78:	68fb      	ldr	r3, [r7, #12]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20000e90 	.word	0x20000e90

08008a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a94:	f7ff f8e6 	bl	8007c64 <xTaskGetTickCount>
 8008a98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <prvSampleTimeNow+0x3c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d205      	bcs.n	8008ab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008aa4:	f000 f936 	bl	8008d14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ab6:	4a04      	ldr	r2, [pc, #16]	; (8008ac8 <prvSampleTimeNow+0x3c>)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008abc:	68fb      	ldr	r3, [r7, #12]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20000ea0 	.word	0x20000ea0

08008acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d812      	bhi.n	8008b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e01b      	b.n	8008b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b06:	4b10      	ldr	r3, [pc, #64]	; (8008b48 <prvInsertTimerInActiveList+0x7c>)
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f7fd fcd0 	bl	80064b6 <vListInsert>
 8008b16:	e012      	b.n	8008b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d206      	bcs.n	8008b2e <prvInsertTimerInActiveList+0x62>
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d302      	bcc.n	8008b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e007      	b.n	8008b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b2e:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <prvInsertTimerInActiveList+0x80>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3304      	adds	r3, #4
 8008b36:	4619      	mov	r1, r3
 8008b38:	4610      	mov	r0, r2
 8008b3a:	f7fd fcbc 	bl	80064b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b3e:	697b      	ldr	r3, [r7, #20]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000e94 	.word	0x20000e94
 8008b4c:	20000e90 	.word	0x20000e90

08008b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08e      	sub	sp, #56	; 0x38
 8008b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b56:	e0ca      	b.n	8008cee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da18      	bge.n	8008b90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b5e:	1d3b      	adds	r3, r7, #4
 8008b60:	3304      	adds	r3, #4
 8008b62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10a      	bne.n	8008b80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	61fb      	str	r3, [r7, #28]
}
 8008b7c:	bf00      	nop
 8008b7e:	e7fe      	b.n	8008b7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b86:	6850      	ldr	r0, [r2, #4]
 8008b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b8a:	6892      	ldr	r2, [r2, #8]
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f2c0 80ab 	blt.w	8008cee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fd fcbd 	bl	8006528 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bae:	463b      	mov	r3, r7
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff ff6b 	bl	8008a8c <prvSampleTimeNow>
 8008bb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b09      	cmp	r3, #9
 8008bbc:	f200 8096 	bhi.w	8008cec <prvProcessReceivedCommands+0x19c>
 8008bc0:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <prvProcessReceivedCommands+0x78>)
 8008bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc6:	bf00      	nop
 8008bc8:	08008bf1 	.word	0x08008bf1
 8008bcc:	08008bf1 	.word	0x08008bf1
 8008bd0:	08008bf1 	.word	0x08008bf1
 8008bd4:	08008c65 	.word	0x08008c65
 8008bd8:	08008c79 	.word	0x08008c79
 8008bdc:	08008cc3 	.word	0x08008cc3
 8008be0:	08008bf1 	.word	0x08008bf1
 8008be4:	08008bf1 	.word	0x08008bf1
 8008be8:	08008c65 	.word	0x08008c65
 8008bec:	08008c79 	.word	0x08008c79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	18d1      	adds	r1, r2, r3
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c10:	f7ff ff5c 	bl	8008acc <prvInsertTimerInActiveList>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d069      	beq.n	8008cee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d05e      	beq.n	8008cee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	441a      	add	r2, r3
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	2100      	movs	r1, #0
 8008c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c42:	f7ff fe05 	bl	8008850 <xTimerGenericCommand>
 8008c46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d14f      	bne.n	8008cee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	61bb      	str	r3, [r7, #24]
}
 8008c60:	bf00      	nop
 8008c62:	e7fe      	b.n	8008c62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c6a:	f023 0301 	bic.w	r3, r3, #1
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c76:	e03a      	b.n	8008cee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c7e:	f043 0301 	orr.w	r3, r3, #1
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	617b      	str	r3, [r7, #20]
}
 8008caa:	bf00      	nop
 8008cac:	e7fe      	b.n	8008cac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	699a      	ldr	r2, [r3, #24]
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	18d1      	adds	r1, r2, r3
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cbc:	f7ff ff06 	bl	8008acc <prvInsertTimerInActiveList>
					break;
 8008cc0:	e015      	b.n	8008cee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cc8:	f003 0302 	and.w	r3, r3, #2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d103      	bne.n	8008cd8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cd2:	f000 fc25 	bl	8009520 <vPortFree>
 8008cd6:	e00a      	b.n	8008cee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cde:	f023 0301 	bic.w	r3, r3, #1
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008cea:	e000      	b.n	8008cee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008cec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <prvProcessReceivedCommands+0x1c0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	1d39      	adds	r1, r7, #4
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe f80e 	bl	8006d18 <xQueueReceive>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f47f af2a 	bne.w	8008b58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	3730      	adds	r7, #48	; 0x30
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000e98 	.word	0x20000e98

08008d14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d1a:	e048      	b.n	8008dae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d1c:	4b2d      	ldr	r3, [pc, #180]	; (8008dd4 <prvSwitchTimerLists+0xc0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d26:	4b2b      	ldr	r3, [pc, #172]	; (8008dd4 <prvSwitchTimerLists+0xc0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	3304      	adds	r3, #4
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fd fbf7 	bl	8006528 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d02e      	beq.n	8008dae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	4413      	add	r3, r2
 8008d58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d90e      	bls.n	8008d80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d6e:	4b19      	ldr	r3, [pc, #100]	; (8008dd4 <prvSwitchTimerLists+0xc0>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3304      	adds	r3, #4
 8008d76:	4619      	mov	r1, r3
 8008d78:	4610      	mov	r0, r2
 8008d7a:	f7fd fb9c 	bl	80064b6 <vListInsert>
 8008d7e:	e016      	b.n	8008dae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d80:	2300      	movs	r3, #0
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	2300      	movs	r3, #0
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f7ff fd60 	bl	8008850 <xTimerGenericCommand>
 8008d90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	603b      	str	r3, [r7, #0]
}
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <prvSwitchTimerLists+0xc0>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1b1      	bne.n	8008d1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008db8:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <prvSwitchTimerLists+0xc0>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008dbe:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <prvSwitchTimerLists+0xc4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a04      	ldr	r2, [pc, #16]	; (8008dd4 <prvSwitchTimerLists+0xc0>)
 8008dc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008dc6:	4a04      	ldr	r2, [pc, #16]	; (8008dd8 <prvSwitchTimerLists+0xc4>)
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	6013      	str	r3, [r2, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000e90 	.word	0x20000e90
 8008dd8:	20000e94 	.word	0x20000e94

08008ddc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008de2:	f000 f9af 	bl	8009144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008de6:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <prvCheckForValidListAndQueue+0x60>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d120      	bne.n	8008e30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008dee:	4814      	ldr	r0, [pc, #80]	; (8008e40 <prvCheckForValidListAndQueue+0x64>)
 8008df0:	f7fd fb10 	bl	8006414 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008df4:	4813      	ldr	r0, [pc, #76]	; (8008e44 <prvCheckForValidListAndQueue+0x68>)
 8008df6:	f7fd fb0d 	bl	8006414 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008dfa:	4b13      	ldr	r3, [pc, #76]	; (8008e48 <prvCheckForValidListAndQueue+0x6c>)
 8008dfc:	4a10      	ldr	r2, [pc, #64]	; (8008e40 <prvCheckForValidListAndQueue+0x64>)
 8008dfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e00:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <prvCheckForValidListAndQueue+0x70>)
 8008e02:	4a10      	ldr	r2, [pc, #64]	; (8008e44 <prvCheckForValidListAndQueue+0x68>)
 8008e04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e06:	2300      	movs	r3, #0
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <prvCheckForValidListAndQueue+0x74>)
 8008e0c:	4a11      	ldr	r2, [pc, #68]	; (8008e54 <prvCheckForValidListAndQueue+0x78>)
 8008e0e:	2110      	movs	r1, #16
 8008e10:	200a      	movs	r0, #10
 8008e12:	f7fd fc1b 	bl	800664c <xQueueGenericCreateStatic>
 8008e16:	4603      	mov	r3, r0
 8008e18:	4a08      	ldr	r2, [pc, #32]	; (8008e3c <prvCheckForValidListAndQueue+0x60>)
 8008e1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e1c:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <prvCheckForValidListAndQueue+0x60>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <prvCheckForValidListAndQueue+0x60>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	490b      	ldr	r1, [pc, #44]	; (8008e58 <prvCheckForValidListAndQueue+0x7c>)
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fb2c 	bl	8007488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e30:	f000 f9b8 	bl	80091a4 <vPortExitCritical>
}
 8008e34:	bf00      	nop
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000e98 	.word	0x20000e98
 8008e40:	20000e68 	.word	0x20000e68
 8008e44:	20000e7c 	.word	0x20000e7c
 8008e48:	20000e90 	.word	0x20000e90
 8008e4c:	20000e94 	.word	0x20000e94
 8008e50:	20000f44 	.word	0x20000f44
 8008e54:	20000ea4 	.word	0x20000ea4
 8008e58:	0800a668 	.word	0x0800a668

08008e5c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <xTimerIsTimerActive+0x28>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	60fb      	str	r3, [r7, #12]
}
 8008e80:	bf00      	nop
 8008e82:	e7fe      	b.n	8008e82 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8008e84:	f000 f95e 	bl	8009144 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d102      	bne.n	8008e9c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]
 8008e9a:	e001      	b.n	8008ea0 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008ea0:	f000 f980 	bl	80091a4 <vPortExitCritical>

	return xReturn;
 8008ea4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <pvTimerGetTimerID+0x28>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	60fb      	str	r3, [r7, #12]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008ed6:	f000 f935 	bl	8009144 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008ee0:	f000 f960 	bl	80091a4 <vPortExitCritical>

	return pvReturn;
 8008ee4:	693b      	ldr	r3, [r7, #16]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	3b04      	subs	r3, #4
 8008f00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3b04      	subs	r3, #4
 8008f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f023 0201 	bic.w	r2, r3, #1
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3b04      	subs	r3, #4
 8008f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f20:	4a0c      	ldr	r2, [pc, #48]	; (8008f54 <pxPortInitialiseStack+0x64>)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3b14      	subs	r3, #20
 8008f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3b04      	subs	r3, #4
 8008f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f06f 0202 	mvn.w	r2, #2
 8008f3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3b20      	subs	r3, #32
 8008f44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f46:	68fb      	ldr	r3, [r7, #12]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	08008f59 	.word	0x08008f59

08008f58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f62:	4b12      	ldr	r3, [pc, #72]	; (8008fac <prvTaskExitError+0x54>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f6a:	d00a      	beq.n	8008f82 <prvTaskExitError+0x2a>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	60fb      	str	r3, [r7, #12]
}
 8008f7e:	bf00      	nop
 8008f80:	e7fe      	b.n	8008f80 <prvTaskExitError+0x28>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	60bb      	str	r3, [r7, #8]
}
 8008f94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f96:	bf00      	nop
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0fc      	beq.n	8008f98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f9e:	bf00      	nop
 8008fa0:	bf00      	nop
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	2000000c 	.word	0x2000000c

08008fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fb0:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <pxCurrentTCBConst2>)
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	6808      	ldr	r0, [r1, #0]
 8008fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fba:	f380 8809 	msr	PSP, r0
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f04f 0000 	mov.w	r0, #0
 8008fc6:	f380 8811 	msr	BASEPRI, r0
 8008fca:	4770      	bx	lr
 8008fcc:	f3af 8000 	nop.w

08008fd0 <pxCurrentTCBConst2>:
 8008fd0:	20000968 	.word	0x20000968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fd8:	4808      	ldr	r0, [pc, #32]	; (8008ffc <prvPortStartFirstTask+0x24>)
 8008fda:	6800      	ldr	r0, [r0, #0]
 8008fdc:	6800      	ldr	r0, [r0, #0]
 8008fde:	f380 8808 	msr	MSP, r0
 8008fe2:	f04f 0000 	mov.w	r0, #0
 8008fe6:	f380 8814 	msr	CONTROL, r0
 8008fea:	b662      	cpsie	i
 8008fec:	b661      	cpsie	f
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	df00      	svc	0
 8008ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ffa:	bf00      	nop
 8008ffc:	e000ed08 	.word	0xe000ed08

08009000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009006:	4b46      	ldr	r3, [pc, #280]	; (8009120 <xPortStartScheduler+0x120>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a46      	ldr	r2, [pc, #280]	; (8009124 <xPortStartScheduler+0x124>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d10a      	bne.n	8009026 <xPortStartScheduler+0x26>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	613b      	str	r3, [r7, #16]
}
 8009022:	bf00      	nop
 8009024:	e7fe      	b.n	8009024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009026:	4b3e      	ldr	r3, [pc, #248]	; (8009120 <xPortStartScheduler+0x120>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a3f      	ldr	r2, [pc, #252]	; (8009128 <xPortStartScheduler+0x128>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d10a      	bne.n	8009046 <xPortStartScheduler+0x46>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60fb      	str	r3, [r7, #12]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009046:	4b39      	ldr	r3, [pc, #228]	; (800912c <xPortStartScheduler+0x12c>)
 8009048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	b2db      	uxtb	r3, r3
 8009050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	22ff      	movs	r2, #255	; 0xff
 8009056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009068:	b2da      	uxtb	r2, r3
 800906a:	4b31      	ldr	r3, [pc, #196]	; (8009130 <xPortStartScheduler+0x130>)
 800906c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800906e:	4b31      	ldr	r3, [pc, #196]	; (8009134 <xPortStartScheduler+0x134>)
 8009070:	2207      	movs	r2, #7
 8009072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009074:	e009      	b.n	800908a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009076:	4b2f      	ldr	r3, [pc, #188]	; (8009134 <xPortStartScheduler+0x134>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3b01      	subs	r3, #1
 800907c:	4a2d      	ldr	r2, [pc, #180]	; (8009134 <xPortStartScheduler+0x134>)
 800907e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	b2db      	uxtb	r3, r3
 8009088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009092:	2b80      	cmp	r3, #128	; 0x80
 8009094:	d0ef      	beq.n	8009076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009096:	4b27      	ldr	r3, [pc, #156]	; (8009134 <xPortStartScheduler+0x134>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1c3 0307 	rsb	r3, r3, #7
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d00a      	beq.n	80090b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	60bb      	str	r3, [r7, #8]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090b8:	4b1e      	ldr	r3, [pc, #120]	; (8009134 <xPortStartScheduler+0x134>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <xPortStartScheduler+0x134>)
 80090c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <xPortStartScheduler+0x134>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090ca:	4a1a      	ldr	r2, [pc, #104]	; (8009134 <xPortStartScheduler+0x134>)
 80090cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090d6:	4b18      	ldr	r3, [pc, #96]	; (8009138 <xPortStartScheduler+0x138>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a17      	ldr	r2, [pc, #92]	; (8009138 <xPortStartScheduler+0x138>)
 80090dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <xPortStartScheduler+0x138>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a14      	ldr	r2, [pc, #80]	; (8009138 <xPortStartScheduler+0x138>)
 80090e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090ee:	f000 f8dd 	bl	80092ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090f2:	4b12      	ldr	r3, [pc, #72]	; (800913c <xPortStartScheduler+0x13c>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090f8:	f000 f8fc 	bl	80092f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090fc:	4b10      	ldr	r3, [pc, #64]	; (8009140 <xPortStartScheduler+0x140>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a0f      	ldr	r2, [pc, #60]	; (8009140 <xPortStartScheduler+0x140>)
 8009102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009108:	f7ff ff66 	bl	8008fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800910c:	f7fe fe74 	bl	8007df8 <vTaskSwitchContext>
	prvTaskExitError();
 8009110:	f7ff ff22 	bl	8008f58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	e000ed00 	.word	0xe000ed00
 8009124:	410fc271 	.word	0x410fc271
 8009128:	410fc270 	.word	0x410fc270
 800912c:	e000e400 	.word	0xe000e400
 8009130:	20000f94 	.word	0x20000f94
 8009134:	20000f98 	.word	0x20000f98
 8009138:	e000ed20 	.word	0xe000ed20
 800913c:	2000000c 	.word	0x2000000c
 8009140:	e000ef34 	.word	0xe000ef34

08009144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	607b      	str	r3, [r7, #4]
}
 800915c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800915e:	4b0f      	ldr	r3, [pc, #60]	; (800919c <vPortEnterCritical+0x58>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	4a0d      	ldr	r2, [pc, #52]	; (800919c <vPortEnterCritical+0x58>)
 8009166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <vPortEnterCritical+0x58>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d10f      	bne.n	8009190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <vPortEnterCritical+0x5c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <vPortEnterCritical+0x4c>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	603b      	str	r3, [r7, #0]
}
 800918c:	bf00      	nop
 800918e:	e7fe      	b.n	800918e <vPortEnterCritical+0x4a>
	}
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	2000000c 	.word	0x2000000c
 80091a0:	e000ed04 	.word	0xe000ed04

080091a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091aa:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <vPortExitCritical+0x50>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <vPortExitCritical+0x24>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	607b      	str	r3, [r7, #4]
}
 80091c4:	bf00      	nop
 80091c6:	e7fe      	b.n	80091c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80091c8:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <vPortExitCritical+0x50>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	4a09      	ldr	r2, [pc, #36]	; (80091f4 <vPortExitCritical+0x50>)
 80091d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091d2:	4b08      	ldr	r3, [pc, #32]	; (80091f4 <vPortExitCritical+0x50>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d105      	bne.n	80091e6 <vPortExitCritical+0x42>
 80091da:	2300      	movs	r3, #0
 80091dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	f383 8811 	msr	BASEPRI, r3
}
 80091e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	2000000c 	.word	0x2000000c
	...

08009200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009200:	f3ef 8009 	mrs	r0, PSP
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	4b15      	ldr	r3, [pc, #84]	; (8009260 <pxCurrentTCBConst>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	f01e 0f10 	tst.w	lr, #16
 8009210:	bf08      	it	eq
 8009212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	6010      	str	r0, [r2, #0]
 800921c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009224:	f380 8811 	msr	BASEPRI, r0
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f7fe fde2 	bl	8007df8 <vTaskSwitchContext>
 8009234:	f04f 0000 	mov.w	r0, #0
 8009238:	f380 8811 	msr	BASEPRI, r0
 800923c:	bc09      	pop	{r0, r3}
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	6808      	ldr	r0, [r1, #0]
 8009242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009246:	f01e 0f10 	tst.w	lr, #16
 800924a:	bf08      	it	eq
 800924c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009250:	f380 8809 	msr	PSP, r0
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	f3af 8000 	nop.w

08009260 <pxCurrentTCBConst>:
 8009260:	20000968 	.word	0x20000968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop

08009268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	607b      	str	r3, [r7, #4]
}
 8009280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009282:	f7fe fcff 	bl	8007c84 <xTaskIncrementTick>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800928c:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <xPortSysTickHandler+0x40>)
 800928e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	2300      	movs	r3, #0
 8009296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f383 8811 	msr	BASEPRI, r3
}
 800929e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	e000ed04 	.word	0xe000ed04

080092ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092b0:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <vPortSetupTimerInterrupt+0x34>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092b6:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <vPortSetupTimerInterrupt+0x38>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <vPortSetupTimerInterrupt+0x3c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0a      	ldr	r2, [pc, #40]	; (80092ec <vPortSetupTimerInterrupt+0x40>)
 80092c2:	fba2 2303 	umull	r2, r3, r2, r3
 80092c6:	099b      	lsrs	r3, r3, #6
 80092c8:	4a09      	ldr	r2, [pc, #36]	; (80092f0 <vPortSetupTimerInterrupt+0x44>)
 80092ca:	3b01      	subs	r3, #1
 80092cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092ce:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <vPortSetupTimerInterrupt+0x34>)
 80092d0:	2207      	movs	r2, #7
 80092d2:	601a      	str	r2, [r3, #0]
}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	e000e010 	.word	0xe000e010
 80092e4:	e000e018 	.word	0xe000e018
 80092e8:	20000000 	.word	0x20000000
 80092ec:	10624dd3 	.word	0x10624dd3
 80092f0:	e000e014 	.word	0xe000e014

080092f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009304 <vPortEnableVFP+0x10>
 80092f8:	6801      	ldr	r1, [r0, #0]
 80092fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092fe:	6001      	str	r1, [r0, #0]
 8009300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009302:	bf00      	nop
 8009304:	e000ed88 	.word	0xe000ed88

08009308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800930e:	f3ef 8305 	mrs	r3, IPSR
 8009312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b0f      	cmp	r3, #15
 8009318:	d914      	bls.n	8009344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800931a:	4a17      	ldr	r2, [pc, #92]	; (8009378 <vPortValidateInterruptPriority+0x70>)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4413      	add	r3, r2
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009324:	4b15      	ldr	r3, [pc, #84]	; (800937c <vPortValidateInterruptPriority+0x74>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	7afa      	ldrb	r2, [r7, #11]
 800932a:	429a      	cmp	r2, r3
 800932c:	d20a      	bcs.n	8009344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	607b      	str	r3, [r7, #4]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009344:	4b0e      	ldr	r3, [pc, #56]	; (8009380 <vPortValidateInterruptPriority+0x78>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800934c:	4b0d      	ldr	r3, [pc, #52]	; (8009384 <vPortValidateInterruptPriority+0x7c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d90a      	bls.n	800936a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	603b      	str	r3, [r7, #0]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <vPortValidateInterruptPriority+0x60>
	}
 800936a:	bf00      	nop
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	e000e3f0 	.word	0xe000e3f0
 800937c:	20000f94 	.word	0x20000f94
 8009380:	e000ed0c 	.word	0xe000ed0c
 8009384:	20000f98 	.word	0x20000f98

08009388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08a      	sub	sp, #40	; 0x28
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009394:	f7fe fbba 	bl	8007b0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009398:	4b5b      	ldr	r3, [pc, #364]	; (8009508 <pvPortMalloc+0x180>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093a0:	f000 f920 	bl	80095e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093a4:	4b59      	ldr	r3, [pc, #356]	; (800950c <pvPortMalloc+0x184>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4013      	ands	r3, r2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f040 8093 	bne.w	80094d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01d      	beq.n	80093f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80093b8:	2208      	movs	r2, #8
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4413      	add	r3, r2
 80093be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f003 0307 	and.w	r3, r3, #7
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d014      	beq.n	80093f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f023 0307 	bic.w	r3, r3, #7
 80093d0:	3308      	adds	r3, #8
 80093d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <pvPortMalloc+0x6c>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	617b      	str	r3, [r7, #20]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d06e      	beq.n	80094d8 <pvPortMalloc+0x150>
 80093fa:	4b45      	ldr	r3, [pc, #276]	; (8009510 <pvPortMalloc+0x188>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	429a      	cmp	r2, r3
 8009402:	d869      	bhi.n	80094d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009404:	4b43      	ldr	r3, [pc, #268]	; (8009514 <pvPortMalloc+0x18c>)
 8009406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009408:	4b42      	ldr	r3, [pc, #264]	; (8009514 <pvPortMalloc+0x18c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800940e:	e004      	b.n	800941a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	429a      	cmp	r2, r3
 8009422:	d903      	bls.n	800942c <pvPortMalloc+0xa4>
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1f1      	bne.n	8009410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800942c:	4b36      	ldr	r3, [pc, #216]	; (8009508 <pvPortMalloc+0x180>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009432:	429a      	cmp	r2, r3
 8009434:	d050      	beq.n	80094d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2208      	movs	r2, #8
 800943c:	4413      	add	r3, r2
 800943e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	2308      	movs	r3, #8
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	429a      	cmp	r2, r3
 8009456:	d91f      	bls.n	8009498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4413      	add	r3, r2
 800945e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00a      	beq.n	8009480 <pvPortMalloc+0xf8>
	__asm volatile
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	613b      	str	r3, [r7, #16]
}
 800947c:	bf00      	nop
 800947e:	e7fe      	b.n	800947e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	1ad2      	subs	r2, r2, r3
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009492:	69b8      	ldr	r0, [r7, #24]
 8009494:	f000 f908 	bl	80096a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009498:	4b1d      	ldr	r3, [pc, #116]	; (8009510 <pvPortMalloc+0x188>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	4a1b      	ldr	r2, [pc, #108]	; (8009510 <pvPortMalloc+0x188>)
 80094a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094a6:	4b1a      	ldr	r3, [pc, #104]	; (8009510 <pvPortMalloc+0x188>)
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4b1b      	ldr	r3, [pc, #108]	; (8009518 <pvPortMalloc+0x190>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d203      	bcs.n	80094ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094b2:	4b17      	ldr	r3, [pc, #92]	; (8009510 <pvPortMalloc+0x188>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a18      	ldr	r2, [pc, #96]	; (8009518 <pvPortMalloc+0x190>)
 80094b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <pvPortMalloc+0x184>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <pvPortMalloc+0x194>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3301      	adds	r3, #1
 80094d4:	4a11      	ldr	r2, [pc, #68]	; (800951c <pvPortMalloc+0x194>)
 80094d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094d8:	f7fe fb26 	bl	8007b28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <pvPortMalloc+0x174>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60fb      	str	r3, [r7, #12]
}
 80094f8:	bf00      	nop
 80094fa:	e7fe      	b.n	80094fa <pvPortMalloc+0x172>
	return pvReturn;
 80094fc:	69fb      	ldr	r3, [r7, #28]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3728      	adds	r7, #40	; 0x28
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20001b5c 	.word	0x20001b5c
 800950c:	20001b70 	.word	0x20001b70
 8009510:	20001b60 	.word	0x20001b60
 8009514:	20001b54 	.word	0x20001b54
 8009518:	20001b64 	.word	0x20001b64
 800951c:	20001b68 	.word	0x20001b68

08009520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d04d      	beq.n	80095ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009532:	2308      	movs	r3, #8
 8009534:	425b      	negs	r3, r3
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	4413      	add	r3, r2
 800953a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	4b24      	ldr	r3, [pc, #144]	; (80095d8 <vPortFree+0xb8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4013      	ands	r3, r2
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <vPortFree+0x44>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	60fb      	str	r3, [r7, #12]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00a      	beq.n	8009582 <vPortFree+0x62>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	60bb      	str	r3, [r7, #8]
}
 800957e:	bf00      	nop
 8009580:	e7fe      	b.n	8009580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	4b14      	ldr	r3, [pc, #80]	; (80095d8 <vPortFree+0xb8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4013      	ands	r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01e      	beq.n	80095ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d11a      	bne.n	80095ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	4b0e      	ldr	r3, [pc, #56]	; (80095d8 <vPortFree+0xb8>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	43db      	mvns	r3, r3
 80095a2:	401a      	ands	r2, r3
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095a8:	f7fe fab0 	bl	8007b0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	4b0a      	ldr	r3, [pc, #40]	; (80095dc <vPortFree+0xbc>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4413      	add	r3, r2
 80095b6:	4a09      	ldr	r2, [pc, #36]	; (80095dc <vPortFree+0xbc>)
 80095b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095ba:	6938      	ldr	r0, [r7, #16]
 80095bc:	f000 f874 	bl	80096a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80095c0:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <vPortFree+0xc0>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	4a06      	ldr	r2, [pc, #24]	; (80095e0 <vPortFree+0xc0>)
 80095c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80095ca:	f7fe faad 	bl	8007b28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095ce:	bf00      	nop
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20001b70 	.word	0x20001b70
 80095dc:	20001b60 	.word	0x20001b60
 80095e0:	20001b6c 	.word	0x20001b6c

080095e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80095ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095f0:	4b27      	ldr	r3, [pc, #156]	; (8009690 <prvHeapInit+0xac>)
 80095f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f003 0307 	and.w	r3, r3, #7
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00c      	beq.n	8009618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3307      	adds	r3, #7
 8009602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f023 0307 	bic.w	r3, r3, #7
 800960a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	4a1f      	ldr	r2, [pc, #124]	; (8009690 <prvHeapInit+0xac>)
 8009614:	4413      	add	r3, r2
 8009616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800961c:	4a1d      	ldr	r2, [pc, #116]	; (8009694 <prvHeapInit+0xb0>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009622:	4b1c      	ldr	r3, [pc, #112]	; (8009694 <prvHeapInit+0xb0>)
 8009624:	2200      	movs	r2, #0
 8009626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	4413      	add	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009630:	2208      	movs	r2, #8
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	1a9b      	subs	r3, r3, r2
 8009636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0307 	bic.w	r3, r3, #7
 800963e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4a15      	ldr	r2, [pc, #84]	; (8009698 <prvHeapInit+0xb4>)
 8009644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009646:	4b14      	ldr	r3, [pc, #80]	; (8009698 <prvHeapInit+0xb4>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2200      	movs	r2, #0
 800964c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800964e:	4b12      	ldr	r3, [pc, #72]	; (8009698 <prvHeapInit+0xb4>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	1ad2      	subs	r2, r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009664:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <prvHeapInit+0xb4>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	4a0a      	ldr	r2, [pc, #40]	; (800969c <prvHeapInit+0xb8>)
 8009672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	4a09      	ldr	r2, [pc, #36]	; (80096a0 <prvHeapInit+0xbc>)
 800967a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800967c:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <prvHeapInit+0xc0>)
 800967e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009682:	601a      	str	r2, [r3, #0]
}
 8009684:	bf00      	nop
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	20000f9c 	.word	0x20000f9c
 8009694:	20001b54 	.word	0x20001b54
 8009698:	20001b5c 	.word	0x20001b5c
 800969c:	20001b64 	.word	0x20001b64
 80096a0:	20001b60 	.word	0x20001b60
 80096a4:	20001b70 	.word	0x20001b70

080096a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096b0:	4b28      	ldr	r3, [pc, #160]	; (8009754 <prvInsertBlockIntoFreeList+0xac>)
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	e002      	b.n	80096bc <prvInsertBlockIntoFreeList+0x14>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d8f7      	bhi.n	80096b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	4413      	add	r3, r2
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d108      	bne.n	80096ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	441a      	add	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	441a      	add	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d118      	bne.n	8009730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	4b15      	ldr	r3, [pc, #84]	; (8009758 <prvInsertBlockIntoFreeList+0xb0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d00d      	beq.n	8009726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	441a      	add	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	e008      	b.n	8009738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009726:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <prvInsertBlockIntoFreeList+0xb0>)
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	e003      	b.n	8009738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	429a      	cmp	r2, r3
 800973e:	d002      	beq.n	8009746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20001b54 	.word	0x20001b54
 8009758:	20001b5c 	.word	0x20001b5c

0800975c <std>:
 800975c:	2300      	movs	r3, #0
 800975e:	b510      	push	{r4, lr}
 8009760:	4604      	mov	r4, r0
 8009762:	e9c0 3300 	strd	r3, r3, [r0]
 8009766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800976a:	6083      	str	r3, [r0, #8]
 800976c:	8181      	strh	r1, [r0, #12]
 800976e:	6643      	str	r3, [r0, #100]	; 0x64
 8009770:	81c2      	strh	r2, [r0, #14]
 8009772:	6183      	str	r3, [r0, #24]
 8009774:	4619      	mov	r1, r3
 8009776:	2208      	movs	r2, #8
 8009778:	305c      	adds	r0, #92	; 0x5c
 800977a:	f000 f8c3 	bl	8009904 <memset>
 800977e:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <std+0x58>)
 8009780:	6263      	str	r3, [r4, #36]	; 0x24
 8009782:	4b0d      	ldr	r3, [pc, #52]	; (80097b8 <std+0x5c>)
 8009784:	62a3      	str	r3, [r4, #40]	; 0x28
 8009786:	4b0d      	ldr	r3, [pc, #52]	; (80097bc <std+0x60>)
 8009788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800978a:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <std+0x64>)
 800978c:	6323      	str	r3, [r4, #48]	; 0x30
 800978e:	4b0d      	ldr	r3, [pc, #52]	; (80097c4 <std+0x68>)
 8009790:	6224      	str	r4, [r4, #32]
 8009792:	429c      	cmp	r4, r3
 8009794:	d006      	beq.n	80097a4 <std+0x48>
 8009796:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800979a:	4294      	cmp	r4, r2
 800979c:	d002      	beq.n	80097a4 <std+0x48>
 800979e:	33d0      	adds	r3, #208	; 0xd0
 80097a0:	429c      	cmp	r4, r3
 80097a2:	d105      	bne.n	80097b0 <std+0x54>
 80097a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ac:	f000 b8dc 	b.w	8009968 <__retarget_lock_init_recursive>
 80097b0:	bd10      	pop	{r4, pc}
 80097b2:	bf00      	nop
 80097b4:	0800a1e5 	.word	0x0800a1e5
 80097b8:	0800a207 	.word	0x0800a207
 80097bc:	0800a23f 	.word	0x0800a23f
 80097c0:	0800a263 	.word	0x0800a263
 80097c4:	20001b74 	.word	0x20001b74

080097c8 <stdio_exit_handler>:
 80097c8:	4a02      	ldr	r2, [pc, #8]	; (80097d4 <stdio_exit_handler+0xc>)
 80097ca:	4903      	ldr	r1, [pc, #12]	; (80097d8 <stdio_exit_handler+0x10>)
 80097cc:	4803      	ldr	r0, [pc, #12]	; (80097dc <stdio_exit_handler+0x14>)
 80097ce:	f000 b869 	b.w	80098a4 <_fwalk_sglue>
 80097d2:	bf00      	nop
 80097d4:	20000010 	.word	0x20000010
 80097d8:	0800a17d 	.word	0x0800a17d
 80097dc:	2000001c 	.word	0x2000001c

080097e0 <cleanup_stdio>:
 80097e0:	6841      	ldr	r1, [r0, #4]
 80097e2:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <cleanup_stdio+0x34>)
 80097e4:	4299      	cmp	r1, r3
 80097e6:	b510      	push	{r4, lr}
 80097e8:	4604      	mov	r4, r0
 80097ea:	d001      	beq.n	80097f0 <cleanup_stdio+0x10>
 80097ec:	f000 fcc6 	bl	800a17c <_fflush_r>
 80097f0:	68a1      	ldr	r1, [r4, #8]
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <cleanup_stdio+0x38>)
 80097f4:	4299      	cmp	r1, r3
 80097f6:	d002      	beq.n	80097fe <cleanup_stdio+0x1e>
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 fcbf 	bl	800a17c <_fflush_r>
 80097fe:	68e1      	ldr	r1, [r4, #12]
 8009800:	4b06      	ldr	r3, [pc, #24]	; (800981c <cleanup_stdio+0x3c>)
 8009802:	4299      	cmp	r1, r3
 8009804:	d004      	beq.n	8009810 <cleanup_stdio+0x30>
 8009806:	4620      	mov	r0, r4
 8009808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800980c:	f000 bcb6 	b.w	800a17c <_fflush_r>
 8009810:	bd10      	pop	{r4, pc}
 8009812:	bf00      	nop
 8009814:	20001b74 	.word	0x20001b74
 8009818:	20001bdc 	.word	0x20001bdc
 800981c:	20001c44 	.word	0x20001c44

08009820 <global_stdio_init.part.0>:
 8009820:	b510      	push	{r4, lr}
 8009822:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <global_stdio_init.part.0+0x30>)
 8009824:	4c0b      	ldr	r4, [pc, #44]	; (8009854 <global_stdio_init.part.0+0x34>)
 8009826:	4a0c      	ldr	r2, [pc, #48]	; (8009858 <global_stdio_init.part.0+0x38>)
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	4620      	mov	r0, r4
 800982c:	2200      	movs	r2, #0
 800982e:	2104      	movs	r1, #4
 8009830:	f7ff ff94 	bl	800975c <std>
 8009834:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009838:	2201      	movs	r2, #1
 800983a:	2109      	movs	r1, #9
 800983c:	f7ff ff8e 	bl	800975c <std>
 8009840:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009844:	2202      	movs	r2, #2
 8009846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800984a:	2112      	movs	r1, #18
 800984c:	f7ff bf86 	b.w	800975c <std>
 8009850:	20001cac 	.word	0x20001cac
 8009854:	20001b74 	.word	0x20001b74
 8009858:	080097c9 	.word	0x080097c9

0800985c <__sfp_lock_acquire>:
 800985c:	4801      	ldr	r0, [pc, #4]	; (8009864 <__sfp_lock_acquire+0x8>)
 800985e:	f000 b884 	b.w	800996a <__retarget_lock_acquire_recursive>
 8009862:	bf00      	nop
 8009864:	20001cb1 	.word	0x20001cb1

08009868 <__sfp_lock_release>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__sfp_lock_release+0x8>)
 800986a:	f000 b87f 	b.w	800996c <__retarget_lock_release_recursive>
 800986e:	bf00      	nop
 8009870:	20001cb1 	.word	0x20001cb1

08009874 <__sinit>:
 8009874:	b510      	push	{r4, lr}
 8009876:	4604      	mov	r4, r0
 8009878:	f7ff fff0 	bl	800985c <__sfp_lock_acquire>
 800987c:	6a23      	ldr	r3, [r4, #32]
 800987e:	b11b      	cbz	r3, 8009888 <__sinit+0x14>
 8009880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009884:	f7ff bff0 	b.w	8009868 <__sfp_lock_release>
 8009888:	4b04      	ldr	r3, [pc, #16]	; (800989c <__sinit+0x28>)
 800988a:	6223      	str	r3, [r4, #32]
 800988c:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <__sinit+0x2c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1f5      	bne.n	8009880 <__sinit+0xc>
 8009894:	f7ff ffc4 	bl	8009820 <global_stdio_init.part.0>
 8009898:	e7f2      	b.n	8009880 <__sinit+0xc>
 800989a:	bf00      	nop
 800989c:	080097e1 	.word	0x080097e1
 80098a0:	20001cac 	.word	0x20001cac

080098a4 <_fwalk_sglue>:
 80098a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a8:	4607      	mov	r7, r0
 80098aa:	4688      	mov	r8, r1
 80098ac:	4614      	mov	r4, r2
 80098ae:	2600      	movs	r6, #0
 80098b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098b4:	f1b9 0901 	subs.w	r9, r9, #1
 80098b8:	d505      	bpl.n	80098c6 <_fwalk_sglue+0x22>
 80098ba:	6824      	ldr	r4, [r4, #0]
 80098bc:	2c00      	cmp	r4, #0
 80098be:	d1f7      	bne.n	80098b0 <_fwalk_sglue+0xc>
 80098c0:	4630      	mov	r0, r6
 80098c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c6:	89ab      	ldrh	r3, [r5, #12]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d907      	bls.n	80098dc <_fwalk_sglue+0x38>
 80098cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098d0:	3301      	adds	r3, #1
 80098d2:	d003      	beq.n	80098dc <_fwalk_sglue+0x38>
 80098d4:	4629      	mov	r1, r5
 80098d6:	4638      	mov	r0, r7
 80098d8:	47c0      	blx	r8
 80098da:	4306      	orrs	r6, r0
 80098dc:	3568      	adds	r5, #104	; 0x68
 80098de:	e7e9      	b.n	80098b4 <_fwalk_sglue+0x10>

080098e0 <iprintf>:
 80098e0:	b40f      	push	{r0, r1, r2, r3}
 80098e2:	b507      	push	{r0, r1, r2, lr}
 80098e4:	4906      	ldr	r1, [pc, #24]	; (8009900 <iprintf+0x20>)
 80098e6:	ab04      	add	r3, sp, #16
 80098e8:	6808      	ldr	r0, [r1, #0]
 80098ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ee:	6881      	ldr	r1, [r0, #8]
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	f000 f873 	bl	80099dc <_vfiprintf_r>
 80098f6:	b003      	add	sp, #12
 80098f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098fc:	b004      	add	sp, #16
 80098fe:	4770      	bx	lr
 8009900:	20000068 	.word	0x20000068

08009904 <memset>:
 8009904:	4402      	add	r2, r0
 8009906:	4603      	mov	r3, r0
 8009908:	4293      	cmp	r3, r2
 800990a:	d100      	bne.n	800990e <memset+0xa>
 800990c:	4770      	bx	lr
 800990e:	f803 1b01 	strb.w	r1, [r3], #1
 8009912:	e7f9      	b.n	8009908 <memset+0x4>

08009914 <__errno>:
 8009914:	4b01      	ldr	r3, [pc, #4]	; (800991c <__errno+0x8>)
 8009916:	6818      	ldr	r0, [r3, #0]
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	20000068 	.word	0x20000068

08009920 <__libc_init_array>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	4d0d      	ldr	r5, [pc, #52]	; (8009958 <__libc_init_array+0x38>)
 8009924:	4c0d      	ldr	r4, [pc, #52]	; (800995c <__libc_init_array+0x3c>)
 8009926:	1b64      	subs	r4, r4, r5
 8009928:	10a4      	asrs	r4, r4, #2
 800992a:	2600      	movs	r6, #0
 800992c:	42a6      	cmp	r6, r4
 800992e:	d109      	bne.n	8009944 <__libc_init_array+0x24>
 8009930:	4d0b      	ldr	r5, [pc, #44]	; (8009960 <__libc_init_array+0x40>)
 8009932:	4c0c      	ldr	r4, [pc, #48]	; (8009964 <__libc_init_array+0x44>)
 8009934:	f000 fe54 	bl	800a5e0 <_init>
 8009938:	1b64      	subs	r4, r4, r5
 800993a:	10a4      	asrs	r4, r4, #2
 800993c:	2600      	movs	r6, #0
 800993e:	42a6      	cmp	r6, r4
 8009940:	d105      	bne.n	800994e <__libc_init_array+0x2e>
 8009942:	bd70      	pop	{r4, r5, r6, pc}
 8009944:	f855 3b04 	ldr.w	r3, [r5], #4
 8009948:	4798      	blx	r3
 800994a:	3601      	adds	r6, #1
 800994c:	e7ee      	b.n	800992c <__libc_init_array+0xc>
 800994e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009952:	4798      	blx	r3
 8009954:	3601      	adds	r6, #1
 8009956:	e7f2      	b.n	800993e <__libc_init_array+0x1e>
 8009958:	0800a834 	.word	0x0800a834
 800995c:	0800a834 	.word	0x0800a834
 8009960:	0800a834 	.word	0x0800a834
 8009964:	0800a838 	.word	0x0800a838

08009968 <__retarget_lock_init_recursive>:
 8009968:	4770      	bx	lr

0800996a <__retarget_lock_acquire_recursive>:
 800996a:	4770      	bx	lr

0800996c <__retarget_lock_release_recursive>:
 800996c:	4770      	bx	lr

0800996e <memcpy>:
 800996e:	440a      	add	r2, r1
 8009970:	4291      	cmp	r1, r2
 8009972:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009976:	d100      	bne.n	800997a <memcpy+0xc>
 8009978:	4770      	bx	lr
 800997a:	b510      	push	{r4, lr}
 800997c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009980:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009984:	4291      	cmp	r1, r2
 8009986:	d1f9      	bne.n	800997c <memcpy+0xe>
 8009988:	bd10      	pop	{r4, pc}

0800998a <__sfputc_r>:
 800998a:	6893      	ldr	r3, [r2, #8]
 800998c:	3b01      	subs	r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	b410      	push	{r4}
 8009992:	6093      	str	r3, [r2, #8]
 8009994:	da08      	bge.n	80099a8 <__sfputc_r+0x1e>
 8009996:	6994      	ldr	r4, [r2, #24]
 8009998:	42a3      	cmp	r3, r4
 800999a:	db01      	blt.n	80099a0 <__sfputc_r+0x16>
 800999c:	290a      	cmp	r1, #10
 800999e:	d103      	bne.n	80099a8 <__sfputc_r+0x1e>
 80099a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099a4:	f000 bc61 	b.w	800a26a <__swbuf_r>
 80099a8:	6813      	ldr	r3, [r2, #0]
 80099aa:	1c58      	adds	r0, r3, #1
 80099ac:	6010      	str	r0, [r2, #0]
 80099ae:	7019      	strb	r1, [r3, #0]
 80099b0:	4608      	mov	r0, r1
 80099b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <__sfputs_r>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	4606      	mov	r6, r0
 80099bc:	460f      	mov	r7, r1
 80099be:	4614      	mov	r4, r2
 80099c0:	18d5      	adds	r5, r2, r3
 80099c2:	42ac      	cmp	r4, r5
 80099c4:	d101      	bne.n	80099ca <__sfputs_r+0x12>
 80099c6:	2000      	movs	r0, #0
 80099c8:	e007      	b.n	80099da <__sfputs_r+0x22>
 80099ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ce:	463a      	mov	r2, r7
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7ff ffda 	bl	800998a <__sfputc_r>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	d1f3      	bne.n	80099c2 <__sfputs_r+0xa>
 80099da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099dc <_vfiprintf_r>:
 80099dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	460d      	mov	r5, r1
 80099e2:	b09d      	sub	sp, #116	; 0x74
 80099e4:	4614      	mov	r4, r2
 80099e6:	4698      	mov	r8, r3
 80099e8:	4606      	mov	r6, r0
 80099ea:	b118      	cbz	r0, 80099f4 <_vfiprintf_r+0x18>
 80099ec:	6a03      	ldr	r3, [r0, #32]
 80099ee:	b90b      	cbnz	r3, 80099f4 <_vfiprintf_r+0x18>
 80099f0:	f7ff ff40 	bl	8009874 <__sinit>
 80099f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099f6:	07d9      	lsls	r1, r3, #31
 80099f8:	d405      	bmi.n	8009a06 <_vfiprintf_r+0x2a>
 80099fa:	89ab      	ldrh	r3, [r5, #12]
 80099fc:	059a      	lsls	r2, r3, #22
 80099fe:	d402      	bmi.n	8009a06 <_vfiprintf_r+0x2a>
 8009a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a02:	f7ff ffb2 	bl	800996a <__retarget_lock_acquire_recursive>
 8009a06:	89ab      	ldrh	r3, [r5, #12]
 8009a08:	071b      	lsls	r3, r3, #28
 8009a0a:	d501      	bpl.n	8009a10 <_vfiprintf_r+0x34>
 8009a0c:	692b      	ldr	r3, [r5, #16]
 8009a0e:	b99b      	cbnz	r3, 8009a38 <_vfiprintf_r+0x5c>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4630      	mov	r0, r6
 8009a14:	f000 fc66 	bl	800a2e4 <__swsetup_r>
 8009a18:	b170      	cbz	r0, 8009a38 <_vfiprintf_r+0x5c>
 8009a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a1c:	07dc      	lsls	r4, r3, #31
 8009a1e:	d504      	bpl.n	8009a2a <_vfiprintf_r+0x4e>
 8009a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a24:	b01d      	add	sp, #116	; 0x74
 8009a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	89ab      	ldrh	r3, [r5, #12]
 8009a2c:	0598      	lsls	r0, r3, #22
 8009a2e:	d4f7      	bmi.n	8009a20 <_vfiprintf_r+0x44>
 8009a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a32:	f7ff ff9b 	bl	800996c <__retarget_lock_release_recursive>
 8009a36:	e7f3      	b.n	8009a20 <_vfiprintf_r+0x44>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3c:	2320      	movs	r3, #32
 8009a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a46:	2330      	movs	r3, #48	; 0x30
 8009a48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009bfc <_vfiprintf_r+0x220>
 8009a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a50:	f04f 0901 	mov.w	r9, #1
 8009a54:	4623      	mov	r3, r4
 8009a56:	469a      	mov	sl, r3
 8009a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a5c:	b10a      	cbz	r2, 8009a62 <_vfiprintf_r+0x86>
 8009a5e:	2a25      	cmp	r2, #37	; 0x25
 8009a60:	d1f9      	bne.n	8009a56 <_vfiprintf_r+0x7a>
 8009a62:	ebba 0b04 	subs.w	fp, sl, r4
 8009a66:	d00b      	beq.n	8009a80 <_vfiprintf_r+0xa4>
 8009a68:	465b      	mov	r3, fp
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ffa2 	bl	80099b8 <__sfputs_r>
 8009a74:	3001      	adds	r0, #1
 8009a76:	f000 80a9 	beq.w	8009bcc <_vfiprintf_r+0x1f0>
 8009a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a7c:	445a      	add	r2, fp
 8009a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8009a80:	f89a 3000 	ldrb.w	r3, [sl]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 80a1 	beq.w	8009bcc <_vfiprintf_r+0x1f0>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a94:	f10a 0a01 	add.w	sl, sl, #1
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	9307      	str	r3, [sp, #28]
 8009a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8009aa2:	4654      	mov	r4, sl
 8009aa4:	2205      	movs	r2, #5
 8009aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aaa:	4854      	ldr	r0, [pc, #336]	; (8009bfc <_vfiprintf_r+0x220>)
 8009aac:	f7f6 fb90 	bl	80001d0 <memchr>
 8009ab0:	9a04      	ldr	r2, [sp, #16]
 8009ab2:	b9d8      	cbnz	r0, 8009aec <_vfiprintf_r+0x110>
 8009ab4:	06d1      	lsls	r1, r2, #27
 8009ab6:	bf44      	itt	mi
 8009ab8:	2320      	movmi	r3, #32
 8009aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009abe:	0713      	lsls	r3, r2, #28
 8009ac0:	bf44      	itt	mi
 8009ac2:	232b      	movmi	r3, #43	; 0x2b
 8009ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8009acc:	2b2a      	cmp	r3, #42	; 0x2a
 8009ace:	d015      	beq.n	8009afc <_vfiprintf_r+0x120>
 8009ad0:	9a07      	ldr	r2, [sp, #28]
 8009ad2:	4654      	mov	r4, sl
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	f04f 0c0a 	mov.w	ip, #10
 8009ada:	4621      	mov	r1, r4
 8009adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ae0:	3b30      	subs	r3, #48	; 0x30
 8009ae2:	2b09      	cmp	r3, #9
 8009ae4:	d94d      	bls.n	8009b82 <_vfiprintf_r+0x1a6>
 8009ae6:	b1b0      	cbz	r0, 8009b16 <_vfiprintf_r+0x13a>
 8009ae8:	9207      	str	r2, [sp, #28]
 8009aea:	e014      	b.n	8009b16 <_vfiprintf_r+0x13a>
 8009aec:	eba0 0308 	sub.w	r3, r0, r8
 8009af0:	fa09 f303 	lsl.w	r3, r9, r3
 8009af4:	4313      	orrs	r3, r2
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	46a2      	mov	sl, r4
 8009afa:	e7d2      	b.n	8009aa2 <_vfiprintf_r+0xc6>
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	1d19      	adds	r1, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	9103      	str	r1, [sp, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bfbb      	ittet	lt
 8009b08:	425b      	neglt	r3, r3
 8009b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b0e:	9307      	strge	r3, [sp, #28]
 8009b10:	9307      	strlt	r3, [sp, #28]
 8009b12:	bfb8      	it	lt
 8009b14:	9204      	strlt	r2, [sp, #16]
 8009b16:	7823      	ldrb	r3, [r4, #0]
 8009b18:	2b2e      	cmp	r3, #46	; 0x2e
 8009b1a:	d10c      	bne.n	8009b36 <_vfiprintf_r+0x15a>
 8009b1c:	7863      	ldrb	r3, [r4, #1]
 8009b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b20:	d134      	bne.n	8009b8c <_vfiprintf_r+0x1b0>
 8009b22:	9b03      	ldr	r3, [sp, #12]
 8009b24:	1d1a      	adds	r2, r3, #4
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	9203      	str	r2, [sp, #12]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	bfb8      	it	lt
 8009b2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b32:	3402      	adds	r4, #2
 8009b34:	9305      	str	r3, [sp, #20]
 8009b36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c0c <_vfiprintf_r+0x230>
 8009b3a:	7821      	ldrb	r1, [r4, #0]
 8009b3c:	2203      	movs	r2, #3
 8009b3e:	4650      	mov	r0, sl
 8009b40:	f7f6 fb46 	bl	80001d0 <memchr>
 8009b44:	b138      	cbz	r0, 8009b56 <_vfiprintf_r+0x17a>
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	eba0 000a 	sub.w	r0, r0, sl
 8009b4c:	2240      	movs	r2, #64	; 0x40
 8009b4e:	4082      	lsls	r2, r0
 8009b50:	4313      	orrs	r3, r2
 8009b52:	3401      	adds	r4, #1
 8009b54:	9304      	str	r3, [sp, #16]
 8009b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5a:	4829      	ldr	r0, [pc, #164]	; (8009c00 <_vfiprintf_r+0x224>)
 8009b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b60:	2206      	movs	r2, #6
 8009b62:	f7f6 fb35 	bl	80001d0 <memchr>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d03f      	beq.n	8009bea <_vfiprintf_r+0x20e>
 8009b6a:	4b26      	ldr	r3, [pc, #152]	; (8009c04 <_vfiprintf_r+0x228>)
 8009b6c:	bb1b      	cbnz	r3, 8009bb6 <_vfiprintf_r+0x1da>
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	3307      	adds	r3, #7
 8009b72:	f023 0307 	bic.w	r3, r3, #7
 8009b76:	3308      	adds	r3, #8
 8009b78:	9303      	str	r3, [sp, #12]
 8009b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7c:	443b      	add	r3, r7
 8009b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b80:	e768      	b.n	8009a54 <_vfiprintf_r+0x78>
 8009b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b86:	460c      	mov	r4, r1
 8009b88:	2001      	movs	r0, #1
 8009b8a:	e7a6      	b.n	8009ada <_vfiprintf_r+0xfe>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	3401      	adds	r4, #1
 8009b90:	9305      	str	r3, [sp, #20]
 8009b92:	4619      	mov	r1, r3
 8009b94:	f04f 0c0a 	mov.w	ip, #10
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9e:	3a30      	subs	r2, #48	; 0x30
 8009ba0:	2a09      	cmp	r2, #9
 8009ba2:	d903      	bls.n	8009bac <_vfiprintf_r+0x1d0>
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0c6      	beq.n	8009b36 <_vfiprintf_r+0x15a>
 8009ba8:	9105      	str	r1, [sp, #20]
 8009baa:	e7c4      	b.n	8009b36 <_vfiprintf_r+0x15a>
 8009bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e7f0      	b.n	8009b98 <_vfiprintf_r+0x1bc>
 8009bb6:	ab03      	add	r3, sp, #12
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	462a      	mov	r2, r5
 8009bbc:	4b12      	ldr	r3, [pc, #72]	; (8009c08 <_vfiprintf_r+0x22c>)
 8009bbe:	a904      	add	r1, sp, #16
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f3af 8000 	nop.w
 8009bc6:	4607      	mov	r7, r0
 8009bc8:	1c78      	adds	r0, r7, #1
 8009bca:	d1d6      	bne.n	8009b7a <_vfiprintf_r+0x19e>
 8009bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	d405      	bmi.n	8009bde <_vfiprintf_r+0x202>
 8009bd2:	89ab      	ldrh	r3, [r5, #12]
 8009bd4:	059a      	lsls	r2, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_vfiprintf_r+0x202>
 8009bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bda:	f7ff fec7 	bl	800996c <__retarget_lock_release_recursive>
 8009bde:	89ab      	ldrh	r3, [r5, #12]
 8009be0:	065b      	lsls	r3, r3, #25
 8009be2:	f53f af1d 	bmi.w	8009a20 <_vfiprintf_r+0x44>
 8009be6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009be8:	e71c      	b.n	8009a24 <_vfiprintf_r+0x48>
 8009bea:	ab03      	add	r3, sp, #12
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	462a      	mov	r2, r5
 8009bf0:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <_vfiprintf_r+0x22c>)
 8009bf2:	a904      	add	r1, sp, #16
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f000 f919 	bl	8009e2c <_printf_i>
 8009bfa:	e7e4      	b.n	8009bc6 <_vfiprintf_r+0x1ea>
 8009bfc:	0800a7f8 	.word	0x0800a7f8
 8009c00:	0800a802 	.word	0x0800a802
 8009c04:	00000000 	.word	0x00000000
 8009c08:	080099b9 	.word	0x080099b9
 8009c0c:	0800a7fe 	.word	0x0800a7fe

08009c10 <sbrk_aligned>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	4e0e      	ldr	r6, [pc, #56]	; (8009c4c <sbrk_aligned+0x3c>)
 8009c14:	460c      	mov	r4, r1
 8009c16:	6831      	ldr	r1, [r6, #0]
 8009c18:	4605      	mov	r5, r0
 8009c1a:	b911      	cbnz	r1, 8009c22 <sbrk_aligned+0x12>
 8009c1c:	f000 fc72 	bl	800a504 <_sbrk_r>
 8009c20:	6030      	str	r0, [r6, #0]
 8009c22:	4621      	mov	r1, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 fc6d 	bl	800a504 <_sbrk_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d00a      	beq.n	8009c44 <sbrk_aligned+0x34>
 8009c2e:	1cc4      	adds	r4, r0, #3
 8009c30:	f024 0403 	bic.w	r4, r4, #3
 8009c34:	42a0      	cmp	r0, r4
 8009c36:	d007      	beq.n	8009c48 <sbrk_aligned+0x38>
 8009c38:	1a21      	subs	r1, r4, r0
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f000 fc62 	bl	800a504 <_sbrk_r>
 8009c40:	3001      	adds	r0, #1
 8009c42:	d101      	bne.n	8009c48 <sbrk_aligned+0x38>
 8009c44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009c48:	4620      	mov	r0, r4
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	20001cb8 	.word	0x20001cb8

08009c50 <_malloc_r>:
 8009c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c54:	1ccd      	adds	r5, r1, #3
 8009c56:	f025 0503 	bic.w	r5, r5, #3
 8009c5a:	3508      	adds	r5, #8
 8009c5c:	2d0c      	cmp	r5, #12
 8009c5e:	bf38      	it	cc
 8009c60:	250c      	movcc	r5, #12
 8009c62:	2d00      	cmp	r5, #0
 8009c64:	4607      	mov	r7, r0
 8009c66:	db01      	blt.n	8009c6c <_malloc_r+0x1c>
 8009c68:	42a9      	cmp	r1, r5
 8009c6a:	d905      	bls.n	8009c78 <_malloc_r+0x28>
 8009c6c:	230c      	movs	r3, #12
 8009c6e:	603b      	str	r3, [r7, #0]
 8009c70:	2600      	movs	r6, #0
 8009c72:	4630      	mov	r0, r6
 8009c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d4c <_malloc_r+0xfc>
 8009c7c:	f000 faa6 	bl	800a1cc <__malloc_lock>
 8009c80:	f8d8 3000 	ldr.w	r3, [r8]
 8009c84:	461c      	mov	r4, r3
 8009c86:	bb5c      	cbnz	r4, 8009ce0 <_malloc_r+0x90>
 8009c88:	4629      	mov	r1, r5
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f7ff ffc0 	bl	8009c10 <sbrk_aligned>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	4604      	mov	r4, r0
 8009c94:	d155      	bne.n	8009d42 <_malloc_r+0xf2>
 8009c96:	f8d8 4000 	ldr.w	r4, [r8]
 8009c9a:	4626      	mov	r6, r4
 8009c9c:	2e00      	cmp	r6, #0
 8009c9e:	d145      	bne.n	8009d2c <_malloc_r+0xdc>
 8009ca0:	2c00      	cmp	r4, #0
 8009ca2:	d048      	beq.n	8009d36 <_malloc_r+0xe6>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4638      	mov	r0, r7
 8009caa:	eb04 0903 	add.w	r9, r4, r3
 8009cae:	f000 fc29 	bl	800a504 <_sbrk_r>
 8009cb2:	4581      	cmp	r9, r0
 8009cb4:	d13f      	bne.n	8009d36 <_malloc_r+0xe6>
 8009cb6:	6821      	ldr	r1, [r4, #0]
 8009cb8:	1a6d      	subs	r5, r5, r1
 8009cba:	4629      	mov	r1, r5
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	f7ff ffa7 	bl	8009c10 <sbrk_aligned>
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	d037      	beq.n	8009d36 <_malloc_r+0xe6>
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	442b      	add	r3, r5
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d038      	beq.n	8009d46 <_malloc_r+0xf6>
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	42a2      	cmp	r2, r4
 8009cd8:	d12b      	bne.n	8009d32 <_malloc_r+0xe2>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	605a      	str	r2, [r3, #4]
 8009cde:	e00f      	b.n	8009d00 <_malloc_r+0xb0>
 8009ce0:	6822      	ldr	r2, [r4, #0]
 8009ce2:	1b52      	subs	r2, r2, r5
 8009ce4:	d41f      	bmi.n	8009d26 <_malloc_r+0xd6>
 8009ce6:	2a0b      	cmp	r2, #11
 8009ce8:	d917      	bls.n	8009d1a <_malloc_r+0xca>
 8009cea:	1961      	adds	r1, r4, r5
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	6025      	str	r5, [r4, #0]
 8009cf0:	bf18      	it	ne
 8009cf2:	6059      	strne	r1, [r3, #4]
 8009cf4:	6863      	ldr	r3, [r4, #4]
 8009cf6:	bf08      	it	eq
 8009cf8:	f8c8 1000 	streq.w	r1, [r8]
 8009cfc:	5162      	str	r2, [r4, r5]
 8009cfe:	604b      	str	r3, [r1, #4]
 8009d00:	4638      	mov	r0, r7
 8009d02:	f104 060b 	add.w	r6, r4, #11
 8009d06:	f000 fa67 	bl	800a1d8 <__malloc_unlock>
 8009d0a:	f026 0607 	bic.w	r6, r6, #7
 8009d0e:	1d23      	adds	r3, r4, #4
 8009d10:	1af2      	subs	r2, r6, r3
 8009d12:	d0ae      	beq.n	8009c72 <_malloc_r+0x22>
 8009d14:	1b9b      	subs	r3, r3, r6
 8009d16:	50a3      	str	r3, [r4, r2]
 8009d18:	e7ab      	b.n	8009c72 <_malloc_r+0x22>
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	6862      	ldr	r2, [r4, #4]
 8009d1e:	d1dd      	bne.n	8009cdc <_malloc_r+0x8c>
 8009d20:	f8c8 2000 	str.w	r2, [r8]
 8009d24:	e7ec      	b.n	8009d00 <_malloc_r+0xb0>
 8009d26:	4623      	mov	r3, r4
 8009d28:	6864      	ldr	r4, [r4, #4]
 8009d2a:	e7ac      	b.n	8009c86 <_malloc_r+0x36>
 8009d2c:	4634      	mov	r4, r6
 8009d2e:	6876      	ldr	r6, [r6, #4]
 8009d30:	e7b4      	b.n	8009c9c <_malloc_r+0x4c>
 8009d32:	4613      	mov	r3, r2
 8009d34:	e7cc      	b.n	8009cd0 <_malloc_r+0x80>
 8009d36:	230c      	movs	r3, #12
 8009d38:	603b      	str	r3, [r7, #0]
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	f000 fa4c 	bl	800a1d8 <__malloc_unlock>
 8009d40:	e797      	b.n	8009c72 <_malloc_r+0x22>
 8009d42:	6025      	str	r5, [r4, #0]
 8009d44:	e7dc      	b.n	8009d00 <_malloc_r+0xb0>
 8009d46:	605b      	str	r3, [r3, #4]
 8009d48:	deff      	udf	#255	; 0xff
 8009d4a:	bf00      	nop
 8009d4c:	20001cb4 	.word	0x20001cb4

08009d50 <_printf_common>:
 8009d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d54:	4616      	mov	r6, r2
 8009d56:	4699      	mov	r9, r3
 8009d58:	688a      	ldr	r2, [r1, #8]
 8009d5a:	690b      	ldr	r3, [r1, #16]
 8009d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d60:	4293      	cmp	r3, r2
 8009d62:	bfb8      	it	lt
 8009d64:	4613      	movlt	r3, r2
 8009d66:	6033      	str	r3, [r6, #0]
 8009d68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	460c      	mov	r4, r1
 8009d70:	b10a      	cbz	r2, 8009d76 <_printf_common+0x26>
 8009d72:	3301      	adds	r3, #1
 8009d74:	6033      	str	r3, [r6, #0]
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	0699      	lsls	r1, r3, #26
 8009d7a:	bf42      	ittt	mi
 8009d7c:	6833      	ldrmi	r3, [r6, #0]
 8009d7e:	3302      	addmi	r3, #2
 8009d80:	6033      	strmi	r3, [r6, #0]
 8009d82:	6825      	ldr	r5, [r4, #0]
 8009d84:	f015 0506 	ands.w	r5, r5, #6
 8009d88:	d106      	bne.n	8009d98 <_printf_common+0x48>
 8009d8a:	f104 0a19 	add.w	sl, r4, #25
 8009d8e:	68e3      	ldr	r3, [r4, #12]
 8009d90:	6832      	ldr	r2, [r6, #0]
 8009d92:	1a9b      	subs	r3, r3, r2
 8009d94:	42ab      	cmp	r3, r5
 8009d96:	dc26      	bgt.n	8009de6 <_printf_common+0x96>
 8009d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d9c:	1e13      	subs	r3, r2, #0
 8009d9e:	6822      	ldr	r2, [r4, #0]
 8009da0:	bf18      	it	ne
 8009da2:	2301      	movne	r3, #1
 8009da4:	0692      	lsls	r2, r2, #26
 8009da6:	d42b      	bmi.n	8009e00 <_printf_common+0xb0>
 8009da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dac:	4649      	mov	r1, r9
 8009dae:	4638      	mov	r0, r7
 8009db0:	47c0      	blx	r8
 8009db2:	3001      	adds	r0, #1
 8009db4:	d01e      	beq.n	8009df4 <_printf_common+0xa4>
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	6922      	ldr	r2, [r4, #16]
 8009dba:	f003 0306 	and.w	r3, r3, #6
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	bf02      	ittt	eq
 8009dc2:	68e5      	ldreq	r5, [r4, #12]
 8009dc4:	6833      	ldreq	r3, [r6, #0]
 8009dc6:	1aed      	subeq	r5, r5, r3
 8009dc8:	68a3      	ldr	r3, [r4, #8]
 8009dca:	bf0c      	ite	eq
 8009dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dd0:	2500      	movne	r5, #0
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	bfc4      	itt	gt
 8009dd6:	1a9b      	subgt	r3, r3, r2
 8009dd8:	18ed      	addgt	r5, r5, r3
 8009dda:	2600      	movs	r6, #0
 8009ddc:	341a      	adds	r4, #26
 8009dde:	42b5      	cmp	r5, r6
 8009de0:	d11a      	bne.n	8009e18 <_printf_common+0xc8>
 8009de2:	2000      	movs	r0, #0
 8009de4:	e008      	b.n	8009df8 <_printf_common+0xa8>
 8009de6:	2301      	movs	r3, #1
 8009de8:	4652      	mov	r2, sl
 8009dea:	4649      	mov	r1, r9
 8009dec:	4638      	mov	r0, r7
 8009dee:	47c0      	blx	r8
 8009df0:	3001      	adds	r0, #1
 8009df2:	d103      	bne.n	8009dfc <_printf_common+0xac>
 8009df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dfc:	3501      	adds	r5, #1
 8009dfe:	e7c6      	b.n	8009d8e <_printf_common+0x3e>
 8009e00:	18e1      	adds	r1, r4, r3
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	2030      	movs	r0, #48	; 0x30
 8009e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e0a:	4422      	add	r2, r4
 8009e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e14:	3302      	adds	r3, #2
 8009e16:	e7c7      	b.n	8009da8 <_printf_common+0x58>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	4622      	mov	r2, r4
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	4638      	mov	r0, r7
 8009e20:	47c0      	blx	r8
 8009e22:	3001      	adds	r0, #1
 8009e24:	d0e6      	beq.n	8009df4 <_printf_common+0xa4>
 8009e26:	3601      	adds	r6, #1
 8009e28:	e7d9      	b.n	8009dde <_printf_common+0x8e>
	...

08009e2c <_printf_i>:
 8009e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e30:	7e0f      	ldrb	r7, [r1, #24]
 8009e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e34:	2f78      	cmp	r7, #120	; 0x78
 8009e36:	4691      	mov	r9, r2
 8009e38:	4680      	mov	r8, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	469a      	mov	sl, r3
 8009e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e42:	d807      	bhi.n	8009e54 <_printf_i+0x28>
 8009e44:	2f62      	cmp	r7, #98	; 0x62
 8009e46:	d80a      	bhi.n	8009e5e <_printf_i+0x32>
 8009e48:	2f00      	cmp	r7, #0
 8009e4a:	f000 80d4 	beq.w	8009ff6 <_printf_i+0x1ca>
 8009e4e:	2f58      	cmp	r7, #88	; 0x58
 8009e50:	f000 80c0 	beq.w	8009fd4 <_printf_i+0x1a8>
 8009e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e5c:	e03a      	b.n	8009ed4 <_printf_i+0xa8>
 8009e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e62:	2b15      	cmp	r3, #21
 8009e64:	d8f6      	bhi.n	8009e54 <_printf_i+0x28>
 8009e66:	a101      	add	r1, pc, #4	; (adr r1, 8009e6c <_printf_i+0x40>)
 8009e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e6c:	08009ec5 	.word	0x08009ec5
 8009e70:	08009ed9 	.word	0x08009ed9
 8009e74:	08009e55 	.word	0x08009e55
 8009e78:	08009e55 	.word	0x08009e55
 8009e7c:	08009e55 	.word	0x08009e55
 8009e80:	08009e55 	.word	0x08009e55
 8009e84:	08009ed9 	.word	0x08009ed9
 8009e88:	08009e55 	.word	0x08009e55
 8009e8c:	08009e55 	.word	0x08009e55
 8009e90:	08009e55 	.word	0x08009e55
 8009e94:	08009e55 	.word	0x08009e55
 8009e98:	08009fdd 	.word	0x08009fdd
 8009e9c:	08009f05 	.word	0x08009f05
 8009ea0:	08009f97 	.word	0x08009f97
 8009ea4:	08009e55 	.word	0x08009e55
 8009ea8:	08009e55 	.word	0x08009e55
 8009eac:	08009fff 	.word	0x08009fff
 8009eb0:	08009e55 	.word	0x08009e55
 8009eb4:	08009f05 	.word	0x08009f05
 8009eb8:	08009e55 	.word	0x08009e55
 8009ebc:	08009e55 	.word	0x08009e55
 8009ec0:	08009f9f 	.word	0x08009f9f
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	1d1a      	adds	r2, r3, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	602a      	str	r2, [r5, #0]
 8009ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e09f      	b.n	800a018 <_printf_i+0x1ec>
 8009ed8:	6820      	ldr	r0, [r4, #0]
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	0607      	lsls	r7, r0, #24
 8009ede:	f103 0104 	add.w	r1, r3, #4
 8009ee2:	6029      	str	r1, [r5, #0]
 8009ee4:	d501      	bpl.n	8009eea <_printf_i+0xbe>
 8009ee6:	681e      	ldr	r6, [r3, #0]
 8009ee8:	e003      	b.n	8009ef2 <_printf_i+0xc6>
 8009eea:	0646      	lsls	r6, r0, #25
 8009eec:	d5fb      	bpl.n	8009ee6 <_printf_i+0xba>
 8009eee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	da03      	bge.n	8009efe <_printf_i+0xd2>
 8009ef6:	232d      	movs	r3, #45	; 0x2d
 8009ef8:	4276      	negs	r6, r6
 8009efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009efe:	485a      	ldr	r0, [pc, #360]	; (800a068 <_printf_i+0x23c>)
 8009f00:	230a      	movs	r3, #10
 8009f02:	e012      	b.n	8009f2a <_printf_i+0xfe>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	6820      	ldr	r0, [r4, #0]
 8009f08:	1d19      	adds	r1, r3, #4
 8009f0a:	6029      	str	r1, [r5, #0]
 8009f0c:	0605      	lsls	r5, r0, #24
 8009f0e:	d501      	bpl.n	8009f14 <_printf_i+0xe8>
 8009f10:	681e      	ldr	r6, [r3, #0]
 8009f12:	e002      	b.n	8009f1a <_printf_i+0xee>
 8009f14:	0641      	lsls	r1, r0, #25
 8009f16:	d5fb      	bpl.n	8009f10 <_printf_i+0xe4>
 8009f18:	881e      	ldrh	r6, [r3, #0]
 8009f1a:	4853      	ldr	r0, [pc, #332]	; (800a068 <_printf_i+0x23c>)
 8009f1c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f1e:	bf0c      	ite	eq
 8009f20:	2308      	moveq	r3, #8
 8009f22:	230a      	movne	r3, #10
 8009f24:	2100      	movs	r1, #0
 8009f26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f2a:	6865      	ldr	r5, [r4, #4]
 8009f2c:	60a5      	str	r5, [r4, #8]
 8009f2e:	2d00      	cmp	r5, #0
 8009f30:	bfa2      	ittt	ge
 8009f32:	6821      	ldrge	r1, [r4, #0]
 8009f34:	f021 0104 	bicge.w	r1, r1, #4
 8009f38:	6021      	strge	r1, [r4, #0]
 8009f3a:	b90e      	cbnz	r6, 8009f40 <_printf_i+0x114>
 8009f3c:	2d00      	cmp	r5, #0
 8009f3e:	d04b      	beq.n	8009fd8 <_printf_i+0x1ac>
 8009f40:	4615      	mov	r5, r2
 8009f42:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f46:	fb03 6711 	mls	r7, r3, r1, r6
 8009f4a:	5dc7      	ldrb	r7, [r0, r7]
 8009f4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f50:	4637      	mov	r7, r6
 8009f52:	42bb      	cmp	r3, r7
 8009f54:	460e      	mov	r6, r1
 8009f56:	d9f4      	bls.n	8009f42 <_printf_i+0x116>
 8009f58:	2b08      	cmp	r3, #8
 8009f5a:	d10b      	bne.n	8009f74 <_printf_i+0x148>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	07de      	lsls	r6, r3, #31
 8009f60:	d508      	bpl.n	8009f74 <_printf_i+0x148>
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	6861      	ldr	r1, [r4, #4]
 8009f66:	4299      	cmp	r1, r3
 8009f68:	bfde      	ittt	le
 8009f6a:	2330      	movle	r3, #48	; 0x30
 8009f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f74:	1b52      	subs	r2, r2, r5
 8009f76:	6122      	str	r2, [r4, #16]
 8009f78:	f8cd a000 	str.w	sl, [sp]
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	aa03      	add	r2, sp, #12
 8009f80:	4621      	mov	r1, r4
 8009f82:	4640      	mov	r0, r8
 8009f84:	f7ff fee4 	bl	8009d50 <_printf_common>
 8009f88:	3001      	adds	r0, #1
 8009f8a:	d14a      	bne.n	800a022 <_printf_i+0x1f6>
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f90:	b004      	add	sp, #16
 8009f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	f043 0320 	orr.w	r3, r3, #32
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	4833      	ldr	r0, [pc, #204]	; (800a06c <_printf_i+0x240>)
 8009fa0:	2778      	movs	r7, #120	; 0x78
 8009fa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	6829      	ldr	r1, [r5, #0]
 8009faa:	061f      	lsls	r7, r3, #24
 8009fac:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fb0:	d402      	bmi.n	8009fb8 <_printf_i+0x18c>
 8009fb2:	065f      	lsls	r7, r3, #25
 8009fb4:	bf48      	it	mi
 8009fb6:	b2b6      	uxthmi	r6, r6
 8009fb8:	07df      	lsls	r7, r3, #31
 8009fba:	bf48      	it	mi
 8009fbc:	f043 0320 	orrmi.w	r3, r3, #32
 8009fc0:	6029      	str	r1, [r5, #0]
 8009fc2:	bf48      	it	mi
 8009fc4:	6023      	strmi	r3, [r4, #0]
 8009fc6:	b91e      	cbnz	r6, 8009fd0 <_printf_i+0x1a4>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	f023 0320 	bic.w	r3, r3, #32
 8009fce:	6023      	str	r3, [r4, #0]
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	e7a7      	b.n	8009f24 <_printf_i+0xf8>
 8009fd4:	4824      	ldr	r0, [pc, #144]	; (800a068 <_printf_i+0x23c>)
 8009fd6:	e7e4      	b.n	8009fa2 <_printf_i+0x176>
 8009fd8:	4615      	mov	r5, r2
 8009fda:	e7bd      	b.n	8009f58 <_printf_i+0x12c>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	6826      	ldr	r6, [r4, #0]
 8009fe0:	6961      	ldr	r1, [r4, #20]
 8009fe2:	1d18      	adds	r0, r3, #4
 8009fe4:	6028      	str	r0, [r5, #0]
 8009fe6:	0635      	lsls	r5, r6, #24
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	d501      	bpl.n	8009ff0 <_printf_i+0x1c4>
 8009fec:	6019      	str	r1, [r3, #0]
 8009fee:	e002      	b.n	8009ff6 <_printf_i+0x1ca>
 8009ff0:	0670      	lsls	r0, r6, #25
 8009ff2:	d5fb      	bpl.n	8009fec <_printf_i+0x1c0>
 8009ff4:	8019      	strh	r1, [r3, #0]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	4615      	mov	r5, r2
 8009ffc:	e7bc      	b.n	8009f78 <_printf_i+0x14c>
 8009ffe:	682b      	ldr	r3, [r5, #0]
 800a000:	1d1a      	adds	r2, r3, #4
 800a002:	602a      	str	r2, [r5, #0]
 800a004:	681d      	ldr	r5, [r3, #0]
 800a006:	6862      	ldr	r2, [r4, #4]
 800a008:	2100      	movs	r1, #0
 800a00a:	4628      	mov	r0, r5
 800a00c:	f7f6 f8e0 	bl	80001d0 <memchr>
 800a010:	b108      	cbz	r0, 800a016 <_printf_i+0x1ea>
 800a012:	1b40      	subs	r0, r0, r5
 800a014:	6060      	str	r0, [r4, #4]
 800a016:	6863      	ldr	r3, [r4, #4]
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	2300      	movs	r3, #0
 800a01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a020:	e7aa      	b.n	8009f78 <_printf_i+0x14c>
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	462a      	mov	r2, r5
 800a026:	4649      	mov	r1, r9
 800a028:	4640      	mov	r0, r8
 800a02a:	47d0      	blx	sl
 800a02c:	3001      	adds	r0, #1
 800a02e:	d0ad      	beq.n	8009f8c <_printf_i+0x160>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	079b      	lsls	r3, r3, #30
 800a034:	d413      	bmi.n	800a05e <_printf_i+0x232>
 800a036:	68e0      	ldr	r0, [r4, #12]
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	4298      	cmp	r0, r3
 800a03c:	bfb8      	it	lt
 800a03e:	4618      	movlt	r0, r3
 800a040:	e7a6      	b.n	8009f90 <_printf_i+0x164>
 800a042:	2301      	movs	r3, #1
 800a044:	4632      	mov	r2, r6
 800a046:	4649      	mov	r1, r9
 800a048:	4640      	mov	r0, r8
 800a04a:	47d0      	blx	sl
 800a04c:	3001      	adds	r0, #1
 800a04e:	d09d      	beq.n	8009f8c <_printf_i+0x160>
 800a050:	3501      	adds	r5, #1
 800a052:	68e3      	ldr	r3, [r4, #12]
 800a054:	9903      	ldr	r1, [sp, #12]
 800a056:	1a5b      	subs	r3, r3, r1
 800a058:	42ab      	cmp	r3, r5
 800a05a:	dcf2      	bgt.n	800a042 <_printf_i+0x216>
 800a05c:	e7eb      	b.n	800a036 <_printf_i+0x20a>
 800a05e:	2500      	movs	r5, #0
 800a060:	f104 0619 	add.w	r6, r4, #25
 800a064:	e7f5      	b.n	800a052 <_printf_i+0x226>
 800a066:	bf00      	nop
 800a068:	0800a809 	.word	0x0800a809
 800a06c:	0800a81a 	.word	0x0800a81a

0800a070 <__sflush_r>:
 800a070:	898a      	ldrh	r2, [r1, #12]
 800a072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a076:	4605      	mov	r5, r0
 800a078:	0710      	lsls	r0, r2, #28
 800a07a:	460c      	mov	r4, r1
 800a07c:	d458      	bmi.n	800a130 <__sflush_r+0xc0>
 800a07e:	684b      	ldr	r3, [r1, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	dc05      	bgt.n	800a090 <__sflush_r+0x20>
 800a084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	dc02      	bgt.n	800a090 <__sflush_r+0x20>
 800a08a:	2000      	movs	r0, #0
 800a08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a092:	2e00      	cmp	r6, #0
 800a094:	d0f9      	beq.n	800a08a <__sflush_r+0x1a>
 800a096:	2300      	movs	r3, #0
 800a098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a09c:	682f      	ldr	r7, [r5, #0]
 800a09e:	6a21      	ldr	r1, [r4, #32]
 800a0a0:	602b      	str	r3, [r5, #0]
 800a0a2:	d032      	beq.n	800a10a <__sflush_r+0x9a>
 800a0a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	075a      	lsls	r2, r3, #29
 800a0aa:	d505      	bpl.n	800a0b8 <__sflush_r+0x48>
 800a0ac:	6863      	ldr	r3, [r4, #4]
 800a0ae:	1ac0      	subs	r0, r0, r3
 800a0b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0b2:	b10b      	cbz	r3, 800a0b8 <__sflush_r+0x48>
 800a0b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0b6:	1ac0      	subs	r0, r0, r3
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0be:	6a21      	ldr	r1, [r4, #32]
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b0      	blx	r6
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	d106      	bne.n	800a0d8 <__sflush_r+0x68>
 800a0ca:	6829      	ldr	r1, [r5, #0]
 800a0cc:	291d      	cmp	r1, #29
 800a0ce:	d82b      	bhi.n	800a128 <__sflush_r+0xb8>
 800a0d0:	4a29      	ldr	r2, [pc, #164]	; (800a178 <__sflush_r+0x108>)
 800a0d2:	410a      	asrs	r2, r1
 800a0d4:	07d6      	lsls	r6, r2, #31
 800a0d6:	d427      	bmi.n	800a128 <__sflush_r+0xb8>
 800a0d8:	2200      	movs	r2, #0
 800a0da:	6062      	str	r2, [r4, #4]
 800a0dc:	04d9      	lsls	r1, r3, #19
 800a0de:	6922      	ldr	r2, [r4, #16]
 800a0e0:	6022      	str	r2, [r4, #0]
 800a0e2:	d504      	bpl.n	800a0ee <__sflush_r+0x7e>
 800a0e4:	1c42      	adds	r2, r0, #1
 800a0e6:	d101      	bne.n	800a0ec <__sflush_r+0x7c>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b903      	cbnz	r3, 800a0ee <__sflush_r+0x7e>
 800a0ec:	6560      	str	r0, [r4, #84]	; 0x54
 800a0ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0f0:	602f      	str	r7, [r5, #0]
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	d0c9      	beq.n	800a08a <__sflush_r+0x1a>
 800a0f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	d002      	beq.n	800a104 <__sflush_r+0x94>
 800a0fe:	4628      	mov	r0, r5
 800a100:	f000 fa22 	bl	800a548 <_free_r>
 800a104:	2000      	movs	r0, #0
 800a106:	6360      	str	r0, [r4, #52]	; 0x34
 800a108:	e7c0      	b.n	800a08c <__sflush_r+0x1c>
 800a10a:	2301      	movs	r3, #1
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b0      	blx	r6
 800a110:	1c41      	adds	r1, r0, #1
 800a112:	d1c8      	bne.n	800a0a6 <__sflush_r+0x36>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0c5      	beq.n	800a0a6 <__sflush_r+0x36>
 800a11a:	2b1d      	cmp	r3, #29
 800a11c:	d001      	beq.n	800a122 <__sflush_r+0xb2>
 800a11e:	2b16      	cmp	r3, #22
 800a120:	d101      	bne.n	800a126 <__sflush_r+0xb6>
 800a122:	602f      	str	r7, [r5, #0]
 800a124:	e7b1      	b.n	800a08a <__sflush_r+0x1a>
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a12c:	81a3      	strh	r3, [r4, #12]
 800a12e:	e7ad      	b.n	800a08c <__sflush_r+0x1c>
 800a130:	690f      	ldr	r7, [r1, #16]
 800a132:	2f00      	cmp	r7, #0
 800a134:	d0a9      	beq.n	800a08a <__sflush_r+0x1a>
 800a136:	0793      	lsls	r3, r2, #30
 800a138:	680e      	ldr	r6, [r1, #0]
 800a13a:	bf08      	it	eq
 800a13c:	694b      	ldreq	r3, [r1, #20]
 800a13e:	600f      	str	r7, [r1, #0]
 800a140:	bf18      	it	ne
 800a142:	2300      	movne	r3, #0
 800a144:	eba6 0807 	sub.w	r8, r6, r7
 800a148:	608b      	str	r3, [r1, #8]
 800a14a:	f1b8 0f00 	cmp.w	r8, #0
 800a14e:	dd9c      	ble.n	800a08a <__sflush_r+0x1a>
 800a150:	6a21      	ldr	r1, [r4, #32]
 800a152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a154:	4643      	mov	r3, r8
 800a156:	463a      	mov	r2, r7
 800a158:	4628      	mov	r0, r5
 800a15a:	47b0      	blx	r6
 800a15c:	2800      	cmp	r0, #0
 800a15e:	dc06      	bgt.n	800a16e <__sflush_r+0xfe>
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a166:	81a3      	strh	r3, [r4, #12]
 800a168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a16c:	e78e      	b.n	800a08c <__sflush_r+0x1c>
 800a16e:	4407      	add	r7, r0
 800a170:	eba8 0800 	sub.w	r8, r8, r0
 800a174:	e7e9      	b.n	800a14a <__sflush_r+0xda>
 800a176:	bf00      	nop
 800a178:	dfbffffe 	.word	0xdfbffffe

0800a17c <_fflush_r>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	690b      	ldr	r3, [r1, #16]
 800a180:	4605      	mov	r5, r0
 800a182:	460c      	mov	r4, r1
 800a184:	b913      	cbnz	r3, 800a18c <_fflush_r+0x10>
 800a186:	2500      	movs	r5, #0
 800a188:	4628      	mov	r0, r5
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	b118      	cbz	r0, 800a196 <_fflush_r+0x1a>
 800a18e:	6a03      	ldr	r3, [r0, #32]
 800a190:	b90b      	cbnz	r3, 800a196 <_fflush_r+0x1a>
 800a192:	f7ff fb6f 	bl	8009874 <__sinit>
 800a196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0f3      	beq.n	800a186 <_fflush_r+0xa>
 800a19e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1a0:	07d0      	lsls	r0, r2, #31
 800a1a2:	d404      	bmi.n	800a1ae <_fflush_r+0x32>
 800a1a4:	0599      	lsls	r1, r3, #22
 800a1a6:	d402      	bmi.n	800a1ae <_fflush_r+0x32>
 800a1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1aa:	f7ff fbde 	bl	800996a <__retarget_lock_acquire_recursive>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	f7ff ff5d 	bl	800a070 <__sflush_r>
 800a1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1b8:	07da      	lsls	r2, r3, #31
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	d4e4      	bmi.n	800a188 <_fflush_r+0xc>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	059b      	lsls	r3, r3, #22
 800a1c2:	d4e1      	bmi.n	800a188 <_fflush_r+0xc>
 800a1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c6:	f7ff fbd1 	bl	800996c <__retarget_lock_release_recursive>
 800a1ca:	e7dd      	b.n	800a188 <_fflush_r+0xc>

0800a1cc <__malloc_lock>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	; (800a1d4 <__malloc_lock+0x8>)
 800a1ce:	f7ff bbcc 	b.w	800996a <__retarget_lock_acquire_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	20001cb0 	.word	0x20001cb0

0800a1d8 <__malloc_unlock>:
 800a1d8:	4801      	ldr	r0, [pc, #4]	; (800a1e0 <__malloc_unlock+0x8>)
 800a1da:	f7ff bbc7 	b.w	800996c <__retarget_lock_release_recursive>
 800a1de:	bf00      	nop
 800a1e0:	20001cb0 	.word	0x20001cb0

0800a1e4 <__sread>:
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ec:	f000 f978 	bl	800a4e0 <_read_r>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	bfab      	itete	ge
 800a1f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a1f8:	181b      	addge	r3, r3, r0
 800a1fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1fe:	bfac      	ite	ge
 800a200:	6563      	strge	r3, [r4, #84]	; 0x54
 800a202:	81a3      	strhlt	r3, [r4, #12]
 800a204:	bd10      	pop	{r4, pc}

0800a206 <__swrite>:
 800a206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a20a:	461f      	mov	r7, r3
 800a20c:	898b      	ldrh	r3, [r1, #12]
 800a20e:	05db      	lsls	r3, r3, #23
 800a210:	4605      	mov	r5, r0
 800a212:	460c      	mov	r4, r1
 800a214:	4616      	mov	r6, r2
 800a216:	d505      	bpl.n	800a224 <__swrite+0x1e>
 800a218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a21c:	2302      	movs	r3, #2
 800a21e:	2200      	movs	r2, #0
 800a220:	f000 f94c 	bl	800a4bc <_lseek_r>
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a22a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a22e:	81a3      	strh	r3, [r4, #12]
 800a230:	4632      	mov	r2, r6
 800a232:	463b      	mov	r3, r7
 800a234:	4628      	mov	r0, r5
 800a236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a23a:	f000 b973 	b.w	800a524 <_write_r>

0800a23e <__sseek>:
 800a23e:	b510      	push	{r4, lr}
 800a240:	460c      	mov	r4, r1
 800a242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a246:	f000 f939 	bl	800a4bc <_lseek_r>
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	bf15      	itete	ne
 800a250:	6560      	strne	r0, [r4, #84]	; 0x54
 800a252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a25a:	81a3      	strheq	r3, [r4, #12]
 800a25c:	bf18      	it	ne
 800a25e:	81a3      	strhne	r3, [r4, #12]
 800a260:	bd10      	pop	{r4, pc}

0800a262 <__sclose>:
 800a262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a266:	f000 b8f7 	b.w	800a458 <_close_r>

0800a26a <__swbuf_r>:
 800a26a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26c:	460e      	mov	r6, r1
 800a26e:	4614      	mov	r4, r2
 800a270:	4605      	mov	r5, r0
 800a272:	b118      	cbz	r0, 800a27c <__swbuf_r+0x12>
 800a274:	6a03      	ldr	r3, [r0, #32]
 800a276:	b90b      	cbnz	r3, 800a27c <__swbuf_r+0x12>
 800a278:	f7ff fafc 	bl	8009874 <__sinit>
 800a27c:	69a3      	ldr	r3, [r4, #24]
 800a27e:	60a3      	str	r3, [r4, #8]
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	071a      	lsls	r2, r3, #28
 800a284:	d525      	bpl.n	800a2d2 <__swbuf_r+0x68>
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	b31b      	cbz	r3, 800a2d2 <__swbuf_r+0x68>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	6922      	ldr	r2, [r4, #16]
 800a28e:	1a98      	subs	r0, r3, r2
 800a290:	6963      	ldr	r3, [r4, #20]
 800a292:	b2f6      	uxtb	r6, r6
 800a294:	4283      	cmp	r3, r0
 800a296:	4637      	mov	r7, r6
 800a298:	dc04      	bgt.n	800a2a4 <__swbuf_r+0x3a>
 800a29a:	4621      	mov	r1, r4
 800a29c:	4628      	mov	r0, r5
 800a29e:	f7ff ff6d 	bl	800a17c <_fflush_r>
 800a2a2:	b9e0      	cbnz	r0, 800a2de <__swbuf_r+0x74>
 800a2a4:	68a3      	ldr	r3, [r4, #8]
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	60a3      	str	r3, [r4, #8]
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	6022      	str	r2, [r4, #0]
 800a2b0:	701e      	strb	r6, [r3, #0]
 800a2b2:	6962      	ldr	r2, [r4, #20]
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d004      	beq.n	800a2c4 <__swbuf_r+0x5a>
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	07db      	lsls	r3, r3, #31
 800a2be:	d506      	bpl.n	800a2ce <__swbuf_r+0x64>
 800a2c0:	2e0a      	cmp	r6, #10
 800a2c2:	d104      	bne.n	800a2ce <__swbuf_r+0x64>
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	f7ff ff58 	bl	800a17c <_fflush_r>
 800a2cc:	b938      	cbnz	r0, 800a2de <__swbuf_r+0x74>
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 f805 	bl	800a2e4 <__swsetup_r>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d0d5      	beq.n	800a28a <__swbuf_r+0x20>
 800a2de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a2e2:	e7f4      	b.n	800a2ce <__swbuf_r+0x64>

0800a2e4 <__swsetup_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4b2a      	ldr	r3, [pc, #168]	; (800a390 <__swsetup_r+0xac>)
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	6818      	ldr	r0, [r3, #0]
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	b118      	cbz	r0, 800a2f8 <__swsetup_r+0x14>
 800a2f0:	6a03      	ldr	r3, [r0, #32]
 800a2f2:	b90b      	cbnz	r3, 800a2f8 <__swsetup_r+0x14>
 800a2f4:	f7ff fabe 	bl	8009874 <__sinit>
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2fe:	0718      	lsls	r0, r3, #28
 800a300:	d422      	bmi.n	800a348 <__swsetup_r+0x64>
 800a302:	06d9      	lsls	r1, r3, #27
 800a304:	d407      	bmi.n	800a316 <__swsetup_r+0x32>
 800a306:	2309      	movs	r3, #9
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a314:	e034      	b.n	800a380 <__swsetup_r+0x9c>
 800a316:	0758      	lsls	r0, r3, #29
 800a318:	d512      	bpl.n	800a340 <__swsetup_r+0x5c>
 800a31a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a31c:	b141      	cbz	r1, 800a330 <__swsetup_r+0x4c>
 800a31e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a322:	4299      	cmp	r1, r3
 800a324:	d002      	beq.n	800a32c <__swsetup_r+0x48>
 800a326:	4628      	mov	r0, r5
 800a328:	f000 f90e 	bl	800a548 <_free_r>
 800a32c:	2300      	movs	r3, #0
 800a32e:	6363      	str	r3, [r4, #52]	; 0x34
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	2300      	movs	r3, #0
 800a33a:	6063      	str	r3, [r4, #4]
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	f043 0308 	orr.w	r3, r3, #8
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	b94b      	cbnz	r3, 800a360 <__swsetup_r+0x7c>
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a356:	d003      	beq.n	800a360 <__swsetup_r+0x7c>
 800a358:	4621      	mov	r1, r4
 800a35a:	4628      	mov	r0, r5
 800a35c:	f000 f840 	bl	800a3e0 <__smakebuf_r>
 800a360:	89a0      	ldrh	r0, [r4, #12]
 800a362:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a366:	f010 0301 	ands.w	r3, r0, #1
 800a36a:	d00a      	beq.n	800a382 <__swsetup_r+0x9e>
 800a36c:	2300      	movs	r3, #0
 800a36e:	60a3      	str	r3, [r4, #8]
 800a370:	6963      	ldr	r3, [r4, #20]
 800a372:	425b      	negs	r3, r3
 800a374:	61a3      	str	r3, [r4, #24]
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	b943      	cbnz	r3, 800a38c <__swsetup_r+0xa8>
 800a37a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a37e:	d1c4      	bne.n	800a30a <__swsetup_r+0x26>
 800a380:	bd38      	pop	{r3, r4, r5, pc}
 800a382:	0781      	lsls	r1, r0, #30
 800a384:	bf58      	it	pl
 800a386:	6963      	ldrpl	r3, [r4, #20]
 800a388:	60a3      	str	r3, [r4, #8]
 800a38a:	e7f4      	b.n	800a376 <__swsetup_r+0x92>
 800a38c:	2000      	movs	r0, #0
 800a38e:	e7f7      	b.n	800a380 <__swsetup_r+0x9c>
 800a390:	20000068 	.word	0x20000068

0800a394 <__swhatbuf_r>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	460c      	mov	r4, r1
 800a398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a39c:	2900      	cmp	r1, #0
 800a39e:	b096      	sub	sp, #88	; 0x58
 800a3a0:	4615      	mov	r5, r2
 800a3a2:	461e      	mov	r6, r3
 800a3a4:	da0d      	bge.n	800a3c2 <__swhatbuf_r+0x2e>
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3ac:	f04f 0100 	mov.w	r1, #0
 800a3b0:	bf0c      	ite	eq
 800a3b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3b6:	2340      	movne	r3, #64	; 0x40
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	6031      	str	r1, [r6, #0]
 800a3bc:	602b      	str	r3, [r5, #0]
 800a3be:	b016      	add	sp, #88	; 0x58
 800a3c0:	bd70      	pop	{r4, r5, r6, pc}
 800a3c2:	466a      	mov	r2, sp
 800a3c4:	f000 f858 	bl	800a478 <_fstat_r>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	dbec      	blt.n	800a3a6 <__swhatbuf_r+0x12>
 800a3cc:	9901      	ldr	r1, [sp, #4]
 800a3ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a3d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a3d6:	4259      	negs	r1, r3
 800a3d8:	4159      	adcs	r1, r3
 800a3da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3de:	e7eb      	b.n	800a3b8 <__swhatbuf_r+0x24>

0800a3e0 <__smakebuf_r>:
 800a3e0:	898b      	ldrh	r3, [r1, #12]
 800a3e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3e4:	079d      	lsls	r5, r3, #30
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	d507      	bpl.n	800a3fc <__smakebuf_r+0x1c>
 800a3ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	6123      	str	r3, [r4, #16]
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	6163      	str	r3, [r4, #20]
 800a3f8:	b002      	add	sp, #8
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}
 800a3fc:	ab01      	add	r3, sp, #4
 800a3fe:	466a      	mov	r2, sp
 800a400:	f7ff ffc8 	bl	800a394 <__swhatbuf_r>
 800a404:	9900      	ldr	r1, [sp, #0]
 800a406:	4605      	mov	r5, r0
 800a408:	4630      	mov	r0, r6
 800a40a:	f7ff fc21 	bl	8009c50 <_malloc_r>
 800a40e:	b948      	cbnz	r0, 800a424 <__smakebuf_r+0x44>
 800a410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a414:	059a      	lsls	r2, r3, #22
 800a416:	d4ef      	bmi.n	800a3f8 <__smakebuf_r+0x18>
 800a418:	f023 0303 	bic.w	r3, r3, #3
 800a41c:	f043 0302 	orr.w	r3, r3, #2
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	e7e3      	b.n	800a3ec <__smakebuf_r+0xc>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	6020      	str	r0, [r4, #0]
 800a428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a42c:	81a3      	strh	r3, [r4, #12]
 800a42e:	9b00      	ldr	r3, [sp, #0]
 800a430:	6163      	str	r3, [r4, #20]
 800a432:	9b01      	ldr	r3, [sp, #4]
 800a434:	6120      	str	r0, [r4, #16]
 800a436:	b15b      	cbz	r3, 800a450 <__smakebuf_r+0x70>
 800a438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a43c:	4630      	mov	r0, r6
 800a43e:	f000 f82d 	bl	800a49c <_isatty_r>
 800a442:	b128      	cbz	r0, 800a450 <__smakebuf_r+0x70>
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	f023 0303 	bic.w	r3, r3, #3
 800a44a:	f043 0301 	orr.w	r3, r3, #1
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	431d      	orrs	r5, r3
 800a454:	81a5      	strh	r5, [r4, #12]
 800a456:	e7cf      	b.n	800a3f8 <__smakebuf_r+0x18>

0800a458 <_close_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4d06      	ldr	r5, [pc, #24]	; (800a474 <_close_r+0x1c>)
 800a45c:	2300      	movs	r3, #0
 800a45e:	4604      	mov	r4, r0
 800a460:	4608      	mov	r0, r1
 800a462:	602b      	str	r3, [r5, #0]
 800a464:	f7f7 fde7 	bl	8002036 <_close>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_close_r+0x1a>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_close_r+0x1a>
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	20001cbc 	.word	0x20001cbc

0800a478 <_fstat_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	; (800a498 <_fstat_r+0x20>)
 800a47c:	2300      	movs	r3, #0
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	4611      	mov	r1, r2
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	f7f7 fde2 	bl	800204e <_fstat>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	d102      	bne.n	800a494 <_fstat_r+0x1c>
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	b103      	cbz	r3, 800a494 <_fstat_r+0x1c>
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	bd38      	pop	{r3, r4, r5, pc}
 800a496:	bf00      	nop
 800a498:	20001cbc 	.word	0x20001cbc

0800a49c <_isatty_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d06      	ldr	r5, [pc, #24]	; (800a4b8 <_isatty_r+0x1c>)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	602b      	str	r3, [r5, #0]
 800a4a8:	f7f7 fde1 	bl	800206e <_isatty>
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	d102      	bne.n	800a4b6 <_isatty_r+0x1a>
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	b103      	cbz	r3, 800a4b6 <_isatty_r+0x1a>
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	bd38      	pop	{r3, r4, r5, pc}
 800a4b8:	20001cbc 	.word	0x20001cbc

0800a4bc <_lseek_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4d07      	ldr	r5, [pc, #28]	; (800a4dc <_lseek_r+0x20>)
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	4608      	mov	r0, r1
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	602a      	str	r2, [r5, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	f7f7 fdda 	bl	8002084 <_lseek>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_lseek_r+0x1e>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_lseek_r+0x1e>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	20001cbc 	.word	0x20001cbc

0800a4e0 <_read_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4d07      	ldr	r5, [pc, #28]	; (800a500 <_read_r+0x20>)
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	4608      	mov	r0, r1
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	602a      	str	r2, [r5, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f7f7 fd68 	bl	8001fc4 <_read>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	d102      	bne.n	800a4fe <_read_r+0x1e>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	b103      	cbz	r3, 800a4fe <_read_r+0x1e>
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	20001cbc 	.word	0x20001cbc

0800a504 <_sbrk_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d06      	ldr	r5, [pc, #24]	; (800a520 <_sbrk_r+0x1c>)
 800a508:	2300      	movs	r3, #0
 800a50a:	4604      	mov	r4, r0
 800a50c:	4608      	mov	r0, r1
 800a50e:	602b      	str	r3, [r5, #0]
 800a510:	f7f7 fdc6 	bl	80020a0 <_sbrk>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_sbrk_r+0x1a>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_sbrk_r+0x1a>
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	20001cbc 	.word	0x20001cbc

0800a524 <_write_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d07      	ldr	r5, [pc, #28]	; (800a544 <_write_r+0x20>)
 800a528:	4604      	mov	r4, r0
 800a52a:	4608      	mov	r0, r1
 800a52c:	4611      	mov	r1, r2
 800a52e:	2200      	movs	r2, #0
 800a530:	602a      	str	r2, [r5, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	f7f7 fd63 	bl	8001ffe <_write>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d102      	bne.n	800a542 <_write_r+0x1e>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	b103      	cbz	r3, 800a542 <_write_r+0x1e>
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	20001cbc 	.word	0x20001cbc

0800a548 <_free_r>:
 800a548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a54a:	2900      	cmp	r1, #0
 800a54c:	d044      	beq.n	800a5d8 <_free_r+0x90>
 800a54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a552:	9001      	str	r0, [sp, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	f1a1 0404 	sub.w	r4, r1, #4
 800a55a:	bfb8      	it	lt
 800a55c:	18e4      	addlt	r4, r4, r3
 800a55e:	f7ff fe35 	bl	800a1cc <__malloc_lock>
 800a562:	4a1e      	ldr	r2, [pc, #120]	; (800a5dc <_free_r+0x94>)
 800a564:	9801      	ldr	r0, [sp, #4]
 800a566:	6813      	ldr	r3, [r2, #0]
 800a568:	b933      	cbnz	r3, 800a578 <_free_r+0x30>
 800a56a:	6063      	str	r3, [r4, #4]
 800a56c:	6014      	str	r4, [r2, #0]
 800a56e:	b003      	add	sp, #12
 800a570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a574:	f7ff be30 	b.w	800a1d8 <__malloc_unlock>
 800a578:	42a3      	cmp	r3, r4
 800a57a:	d908      	bls.n	800a58e <_free_r+0x46>
 800a57c:	6825      	ldr	r5, [r4, #0]
 800a57e:	1961      	adds	r1, r4, r5
 800a580:	428b      	cmp	r3, r1
 800a582:	bf01      	itttt	eq
 800a584:	6819      	ldreq	r1, [r3, #0]
 800a586:	685b      	ldreq	r3, [r3, #4]
 800a588:	1949      	addeq	r1, r1, r5
 800a58a:	6021      	streq	r1, [r4, #0]
 800a58c:	e7ed      	b.n	800a56a <_free_r+0x22>
 800a58e:	461a      	mov	r2, r3
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	b10b      	cbz	r3, 800a598 <_free_r+0x50>
 800a594:	42a3      	cmp	r3, r4
 800a596:	d9fa      	bls.n	800a58e <_free_r+0x46>
 800a598:	6811      	ldr	r1, [r2, #0]
 800a59a:	1855      	adds	r5, r2, r1
 800a59c:	42a5      	cmp	r5, r4
 800a59e:	d10b      	bne.n	800a5b8 <_free_r+0x70>
 800a5a0:	6824      	ldr	r4, [r4, #0]
 800a5a2:	4421      	add	r1, r4
 800a5a4:	1854      	adds	r4, r2, r1
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	6011      	str	r1, [r2, #0]
 800a5aa:	d1e0      	bne.n	800a56e <_free_r+0x26>
 800a5ac:	681c      	ldr	r4, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	6053      	str	r3, [r2, #4]
 800a5b2:	440c      	add	r4, r1
 800a5b4:	6014      	str	r4, [r2, #0]
 800a5b6:	e7da      	b.n	800a56e <_free_r+0x26>
 800a5b8:	d902      	bls.n	800a5c0 <_free_r+0x78>
 800a5ba:	230c      	movs	r3, #12
 800a5bc:	6003      	str	r3, [r0, #0]
 800a5be:	e7d6      	b.n	800a56e <_free_r+0x26>
 800a5c0:	6825      	ldr	r5, [r4, #0]
 800a5c2:	1961      	adds	r1, r4, r5
 800a5c4:	428b      	cmp	r3, r1
 800a5c6:	bf04      	itt	eq
 800a5c8:	6819      	ldreq	r1, [r3, #0]
 800a5ca:	685b      	ldreq	r3, [r3, #4]
 800a5cc:	6063      	str	r3, [r4, #4]
 800a5ce:	bf04      	itt	eq
 800a5d0:	1949      	addeq	r1, r1, r5
 800a5d2:	6021      	streq	r1, [r4, #0]
 800a5d4:	6054      	str	r4, [r2, #4]
 800a5d6:	e7ca      	b.n	800a56e <_free_r+0x26>
 800a5d8:	b003      	add	sp, #12
 800a5da:	bd30      	pop	{r4, r5, pc}
 800a5dc:	20001cb4 	.word	0x20001cb4

0800a5e0 <_init>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	bf00      	nop
 800a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e6:	bc08      	pop	{r3}
 800a5e8:	469e      	mov	lr, r3
 800a5ea:	4770      	bx	lr

0800a5ec <_fini>:
 800a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ee:	bf00      	nop
 800a5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f2:	bc08      	pop	{r3}
 800a5f4:	469e      	mov	lr, r3
 800a5f6:	4770      	bx	lr
