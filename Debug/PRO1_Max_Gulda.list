
PRO1_Max_Gulda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08009e08  08009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a004  0800a004  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a004  0800a004  0001a004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a00c  0800a00c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a00c  0800a00c  0001a00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a010  0800a010  0001a010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800a014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c44  2000006c  0800a080  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb0  0800a080  00021cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ed49  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049bf  00000000  00000000  0003ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c18  00000000  00000000  000437e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015a1  00000000  00000000  00045400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b785  00000000  00000000  000469a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000212a1  00000000  00000000  00072126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001016e6  00000000  00000000  000933c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a10  00000000  00000000  00194ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0019c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009df0 	.word	0x08009df0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08009df0 	.word	0x08009df0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <init_TrafficInputs>:
#include "TrafficInputs.h"

static ButtonStates buttonState = {0};


void init_TrafficInputs(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	trafficInputs_Update();
 80004d0:	f000 f802 	bl	80004d8 <trafficInputs_Update>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <trafficInputs_Update>:

void trafficInputs_Update(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	buttonState.LeftCar 	= !HAL_GPIO_ReadPin(TL1_CAR_GPIO_Port, TL1_CAR_Pin);
 80004dc:	2110      	movs	r1, #16
 80004de:	4827      	ldr	r0, [pc, #156]	; (800057c <trafficInputs_Update+0xa4>)
 80004e0:	f002 fb98 	bl	8002c14 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf0c      	ite	eq
 80004ea:	2301      	moveq	r3, #1
 80004ec:	2300      	movne	r3, #0
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <trafficInputs_Update+0xa8>)
 80004f2:	701a      	strb	r2, [r3, #0]
	buttonState.BottomCar 	= !HAL_GPIO_ReadPin(TL2_CAR_GPIO_Port, TL2_CAR_Pin);
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	4822      	ldr	r0, [pc, #136]	; (8000584 <trafficInputs_Update+0xac>)
 80004fa:	f002 fb8b 	bl	8002c14 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf0c      	ite	eq
 8000504:	2301      	moveq	r3, #1
 8000506:	2300      	movne	r3, #0
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <trafficInputs_Update+0xa8>)
 800050c:	705a      	strb	r2, [r3, #1]
	buttonState.RightCar 	= !HAL_GPIO_ReadPin(TL3_CAR_GPIO_Port, TL3_CAR_Pin);
 800050e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000512:	481c      	ldr	r0, [pc, #112]	; (8000584 <trafficInputs_Update+0xac>)
 8000514:	f002 fb7e 	bl	8002c14 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	bf0c      	ite	eq
 800051e:	2301      	moveq	r3, #1
 8000520:	2300      	movne	r3, #0
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <trafficInputs_Update+0xa8>)
 8000526:	709a      	strb	r2, [r3, #2]
	buttonState.TopCar 		= !HAL_GPIO_ReadPin(TL4_CAR_GPIO_Port, TL4_CAR_Pin);
 8000528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f002 fb70 	bl	8002c14 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <trafficInputs_Update+0xa8>)
 8000542:	70da      	strb	r2, [r3, #3]
	buttonState.LeftPed 	= !HAL_GPIO_ReadPin(PL1_Switch_GPIO_Port, PL1_Switch_Pin);
 8000544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f002 fb62 	bl	8002c14 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	bf0c      	ite	eq
 8000556:	2301      	moveq	r3, #1
 8000558:	2300      	movne	r3, #0
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <trafficInputs_Update+0xa8>)
 800055e:	711a      	strb	r2, [r3, #4]
	buttonState.TopPed 		= !HAL_GPIO_ReadPin(PL2_Switch_GPIO_Port, PL2_Switch_Pin);
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <trafficInputs_Update+0xac>)
 8000564:	f002 fb56 	bl	8002c14 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	bf0c      	ite	eq
 800056e:	2301      	moveq	r3, #1
 8000570:	2300      	movne	r3, #0
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <trafficInputs_Update+0xa8>)
 8000576:	715a      	strb	r2, [r3, #5]
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	48000800 	.word	0x48000800
 8000580:	20000088 	.word	0x20000088
 8000584:	48000400 	.word	0x48000400

08000588 <getInputState>:

ButtonStates getInputState(){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	return buttonState;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <getInputState+0x20>)
 8000594:	6810      	ldr	r0, [r2, #0]
 8000596:	6018      	str	r0, [r3, #0]
 8000598:	8892      	ldrh	r2, [r2, #4]
 800059a:	809a      	strh	r2, [r3, #4]
}
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000088 	.word	0x20000088

080005ac <initTrafficLogic>:
	bool delayUntilNextState;
	uint16_t delayTime;
}TrafficCrossingAction;
*/

void initTrafficLogic(CrossingVersion cross){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	previousDelayExpireAt = UINT16_MAX;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <initTrafficLogic+0x44>)
 80005b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005bc:	601a      	str	r2, [r3, #0]
	lightsActivated = false;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <initTrafficLogic+0x48>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	delaySent = false;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <initTrafficLogic+0x4c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	crossing = cross;
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <initTrafficLogic+0x50>)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	7013      	strb	r3, [r2, #0]
	state = H_Active;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <initTrafficLogic+0x54>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
	action.StartTimerForNextState = false;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <initTrafficLogic+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	709a      	strb	r2, [r3, #2]
	action.KeepStateFor = 0;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <initTrafficLogic+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	809a      	strh	r2, [r3, #4]

}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000009c 	.word	0x2000009c
 80005f4:	20000091 	.word	0x20000091
 80005f8:	20000092 	.word	0x20000092
 80005fc:	2000008e 	.word	0x2000008e
 8000600:	2000008f 	.word	0x2000008f
 8000604:	20000094 	.word	0x20000094

08000608 <TrafficCrossing>:

void TrafficCrossing(ButtonStates _buttonState){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	463b      	mov	r3, r7
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(crossing){
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <TrafficCrossing+0x50>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d012      	beq.n	8000642 <TrafficCrossing+0x3a>
 800061c:	2b02      	cmp	r3, #2
 800061e:	dc16      	bgt.n	800064e <TrafficCrossing+0x46>
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <TrafficCrossing+0x22>
 8000624:	2b01      	cmp	r3, #1
 8000626:	d006      	beq.n	8000636 <TrafficCrossing+0x2e>
			break;
		case PedTwoLane:
			TwoLanePed(_buttonState);
			break;
	}
}
 8000628:	e011      	b.n	800064e <TrafficCrossing+0x46>
			OneLane(_buttonState);
 800062a:	463b      	mov	r3, r7
 800062c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000630:	f000 f83e 	bl	80006b0 <OneLane>
			break;
 8000634:	e00b      	b.n	800064e <TrafficCrossing+0x46>
			TwoLane(_buttonState);
 8000636:	463b      	mov	r3, r7
 8000638:	e893 0003 	ldmia.w	r3, {r0, r1}
 800063c:	f000 f948 	bl	80008d0 <TwoLane>
			break;
 8000640:	e005      	b.n	800064e <TrafficCrossing+0x46>
			TwoLanePed(_buttonState);
 8000642:	463b      	mov	r3, r7
 8000644:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000648:	f000 fb28 	bl	8000c9c <TwoLanePed>
			break;
 800064c:	bf00      	nop
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000008e 	.word	0x2000008e

0800065c <getTrafficAction>:

TrafficCrossingAction* getTrafficAction(){
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	return &action;
 8000660:	4b02      	ldr	r3, [pc, #8]	; (800066c <getTrafficAction+0x10>)
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	20000094 	.word	0x20000094

08000670 <ActivateNextState>:

void ActivateNextState(){
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	state = nextState;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <ActivateNextState+0x2c>)
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <ActivateNextState+0x30>)
 800067a:	701a      	strb	r2, [r3, #0]
	delaySent = false;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <ActivateNextState+0x34>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
	lightsActivated = false;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <ActivateNextState+0x38>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	previousDelayExpireAt = UINT16_MAX;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <ActivateNextState+0x3c>)
 800068a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000090 	.word	0x20000090
 80006a0:	2000008f 	.word	0x2000008f
 80006a4:	20000092 	.word	0x20000092
 80006a8:	20000091 	.word	0x20000091
 80006ac:	2000009c 	.word	0x2000009c

080006b0 <OneLane>:


void OneLane(ButtonStates button){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	463b      	mov	r3, r7
 80006b8:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 80006bc:	4b7f      	ldr	r3, [pc, #508]	; (80008bc <OneLane+0x20c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	f200 80f6 	bhi.w	80008b2 <OneLane+0x202>
 80006c6:	a201      	add	r2, pc, #4	; (adr r2, 80006cc <OneLane+0x1c>)
 80006c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006cc:	080006e5 	.word	0x080006e5
 80006d0:	080008b3 	.word	0x080008b3
 80006d4:	080008b3 	.word	0x080008b3
 80006d8:	0800076b 	.word	0x0800076b
 80006dc:	080007d9 	.word	0x080007d9
 80006e0:	08000847 	.word	0x08000847
		case H_Active:
			nextState = Transition_To_V;
 80006e4:	4b76      	ldr	r3, [pc, #472]	; (80008c0 <OneLane+0x210>)
 80006e6:	2205      	movs	r2, #5
 80006e8:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 80006ea:	4b76      	ldr	r3, [pc, #472]	; (80008c4 <OneLane+0x214>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f083 0301 	eor.w	r3, r3, #1
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d01e      	beq.n	8000736 <OneLane+0x86>
				ControlLight(YELLOW_BOTTOM, OFF);
 80006f8:	2100      	movs	r1, #0
 80006fa:	2007      	movs	r0, #7
 80006fc:	f001 fcbc 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000700:	2100      	movs	r1, #0
 8000702:	2004      	movs	r0, #4
 8000704:	f001 fcb8 	bl	8002078 <ControlLight>

				ControlLight(GREEN_BOTTOM, ON);
 8000708:	2101      	movs	r1, #1
 800070a:	2008      	movs	r0, #8
 800070c:	f001 fcb4 	bl	8002078 <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000710:	2101      	movs	r1, #1
 8000712:	2005      	movs	r0, #5
 8000714:	f001 fcb0 	bl	8002078 <ControlLight>

				ControlLight(RED_TOP, OFF);
 8000718:	2100      	movs	r1, #0
 800071a:	2003      	movs	r0, #3
 800071c:	f001 fcac 	bl	8002078 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 8000720:	2100      	movs	r1, #0
 8000722:	2006      	movs	r0, #6
 8000724:	f001 fca8 	bl	8002078 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 8000728:	2101      	movs	r1, #1
 800072a:	2009      	movs	r0, #9
 800072c:	f001 fca4 	bl	8002078 <ControlLight>
				lightsActivated = true;
 8000730:	4b64      	ldr	r3, [pc, #400]	; (80008c4 <OneLane+0x214>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed && !delaySent){
 8000736:	797b      	ldrb	r3, [r7, #5]
 8000738:	2b00      	cmp	r3, #0
 800073a:	f000 80b3 	beq.w	80008a4 <OneLane+0x1f4>
 800073e:	4b62      	ldr	r3, [pc, #392]	; (80008c8 <OneLane+0x218>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	f083 0301 	eor.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	f000 80ab 	beq.w	80008a4 <OneLane+0x1f4>
				action.KeepStateFor = PEDESTRIAN_DELAY;
 800074e:	4b5f      	ldr	r3, [pc, #380]	; (80008cc <OneLane+0x21c>)
 8000750:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000754:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000756:	4b5d      	ldr	r3, [pc, #372]	; (80008cc <OneLane+0x21c>)
 8000758:	2201      	movs	r2, #1
 800075a:	709a      	strb	r2, [r3, #2]
				action.TopPedWaiting = true;
 800075c:	4b5b      	ldr	r3, [pc, #364]	; (80008cc <OneLane+0x21c>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
				delaySent = true;
 8000762:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <OneLane+0x218>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000768:	e09c      	b.n	80008a4 <OneLane+0x1f4>
		case V_P_Active:
			nextState = Transition_To_H;
 800076a:	4b55      	ldr	r3, [pc, #340]	; (80008c0 <OneLane+0x210>)
 800076c:	2204      	movs	r2, #4
 800076e:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000770:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <OneLane+0x214>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d01a      	beq.n	80007b4 <OneLane+0x104>
				ControlLight(YELLOW_BOTTOM, OFF);
 800077e:	2100      	movs	r1, #0
 8000780:	2007      	movs	r0, #7
 8000782:	f001 fc79 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000786:	2100      	movs	r1, #0
 8000788:	2004      	movs	r0, #4
 800078a:	f001 fc75 	bl	8002078 <ControlLight>

				ControlLight(GREEN_PED_TOP, ON);
 800078e:	2101      	movs	r1, #1
 8000790:	200a      	movs	r0, #10
 8000792:	f001 fc71 	bl	8002078 <ControlLight>
				ControlLight(RED_PED_TOP, OFF);
 8000796:	2100      	movs	r1, #0
 8000798:	2009      	movs	r0, #9
 800079a:	f001 fc6d 	bl	8002078 <ControlLight>

				ControlLight(RED_TOP, ON);
 800079e:	2101      	movs	r1, #1
 80007a0:	2003      	movs	r0, #3
 80007a2:	f001 fc69 	bl	8002078 <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 80007a6:	2101      	movs	r1, #1
 80007a8:	2006      	movs	r0, #6
 80007aa:	f001 fc65 	bl	8002078 <ControlLight>
				lightsActivated = true;
 80007ae:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <OneLane+0x214>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 80007b4:	4b44      	ldr	r3, [pc, #272]	; (80008c8 <OneLane+0x218>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f083 0301 	eor.w	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d072      	beq.n	80008a8 <OneLane+0x1f8>
				action.KeepStateFor = WALKING_DELAY;
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <OneLane+0x21c>)
 80007c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007c8:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 80007ca:	4b40      	ldr	r3, [pc, #256]	; (80008cc <OneLane+0x21c>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 80007d0:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <OneLane+0x218>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80007d6:	e067      	b.n	80008a8 <OneLane+0x1f8>
		case Transition_To_H:
			nextState = H_Active;
 80007d8:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <OneLane+0x210>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 80007de:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <OneLane+0x214>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	f083 0301 	eor.w	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d01a      	beq.n	8000822 <OneLane+0x172>
				ControlLight(GREEN_PED_TOP, OFF);
 80007ec:	2100      	movs	r1, #0
 80007ee:	200a      	movs	r0, #10
 80007f0:	f001 fc42 	bl	8002078 <ControlLight>
				ControlLight(RED_PED_TOP, ON);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2009      	movs	r0, #9
 80007f8:	f001 fc3e 	bl	8002078 <ControlLight>

				ControlLight(RED_TOP, OFF);
 80007fc:	2100      	movs	r1, #0
 80007fe:	2003      	movs	r0, #3
 8000800:	f001 fc3a 	bl	8002078 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 8000804:	2100      	movs	r1, #0
 8000806:	2006      	movs	r0, #6
 8000808:	f001 fc36 	bl	8002078 <ControlLight>

				ControlLight(YELLOW_BOTTOM, ON);
 800080c:	2101      	movs	r1, #1
 800080e:	2007      	movs	r0, #7
 8000810:	f001 fc32 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000814:	2101      	movs	r1, #1
 8000816:	2004      	movs	r0, #4
 8000818:	f001 fc2e 	bl	8002078 <ControlLight>
				lightsActivated = true;
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <OneLane+0x214>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <OneLane+0x218>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d03d      	beq.n	80008ac <OneLane+0x1fc>
				action.KeepStateFor = YELLOW_DELAY;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <OneLane+0x21c>)
 8000832:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000836:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <OneLane+0x21c>)
 800083a:	2201      	movs	r2, #1
 800083c:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <OneLane+0x218>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000844:	e032      	b.n	80008ac <OneLane+0x1fc>
		case Transition_To_V:
			nextState = V_P_Active;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <OneLane+0x210>)
 8000848:	2203      	movs	r2, #3
 800084a:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <OneLane+0x214>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d012      	beq.n	8000880 <OneLane+0x1d0>
				ControlLight(YELLOW_BOTTOM, ON);
 800085a:	2101      	movs	r1, #1
 800085c:	2007      	movs	r0, #7
 800085e:	f001 fc0b 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000862:	2101      	movs	r1, #1
 8000864:	2004      	movs	r0, #4
 8000866:	f001 fc07 	bl	8002078 <ControlLight>

				ControlLight(GREEN_BOTTOM, OFF);
 800086a:	2100      	movs	r1, #0
 800086c:	2008      	movs	r0, #8
 800086e:	f001 fc03 	bl	8002078 <ControlLight>
				ControlLight(GREEN_TOP, OFF);
 8000872:	2100      	movs	r1, #0
 8000874:	2005      	movs	r0, #5
 8000876:	f001 fbff 	bl	8002078 <ControlLight>
				lightsActivated = true;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <OneLane+0x214>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <OneLane+0x218>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	f083 0301 	eor.w	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d010      	beq.n	80008b0 <OneLane+0x200>
				action.KeepStateFor = YELLOW_DELAY;
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <OneLane+0x21c>)
 8000890:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000894:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <OneLane+0x21c>)
 8000898:	2201      	movs	r2, #1
 800089a:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <OneLane+0x218>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80008a2:	e005      	b.n	80008b0 <OneLane+0x200>
			break;
 80008a4:	bf00      	nop
 80008a6:	e004      	b.n	80008b2 <OneLane+0x202>
			break;
 80008a8:	bf00      	nop
 80008aa:	e002      	b.n	80008b2 <OneLane+0x202>
			break;
 80008ac:	bf00      	nop
 80008ae:	e000      	b.n	80008b2 <OneLane+0x202>
			break;
 80008b0:	bf00      	nop
	}
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000008f 	.word	0x2000008f
 80008c0:	20000090 	.word	0x20000090
 80008c4:	20000091 	.word	0x20000091
 80008c8:	20000092 	.word	0x20000092
 80008cc:	20000094 	.word	0x20000094

080008d0 <TwoLane>:


void TwoLane(ButtonStates button){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	463b      	mov	r3, r7
 80008d8:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 80008dc:	4bc1      	ldr	r3, [pc, #772]	; (8000be4 <TwoLane+0x314>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b05      	cmp	r3, #5
 80008e2:	f200 81cf 	bhi.w	8000c84 <TwoLane+0x3b4>
 80008e6:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <TwoLane+0x1c>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	08000a35 	.word	0x08000a35
 80008f0:	08000c85 	.word	0x08000c85
 80008f4:	08000905 	.word	0x08000905
 80008f8:	08000c85 	.word	0x08000c85
 80008fc:	08000b65 	.word	0x08000b65
 8000900:	08000bf9 	.word	0x08000bf9
		case V_Active:

			nextState = Transition_To_H;
 8000904:	4bb8      	ldr	r3, [pc, #736]	; (8000be8 <TwoLane+0x318>)
 8000906:	2204      	movs	r2, #4
 8000908:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 800090a:	4bb8      	ldr	r3, [pc, #736]	; (8000bec <TwoLane+0x31c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f083 0301 	eor.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d022      	beq.n	800095e <TwoLane+0x8e>
				ControlLight(GREEN_BOTTOM, ON);
 8000918:	2101      	movs	r1, #1
 800091a:	2008      	movs	r0, #8
 800091c:	f001 fbac 	bl	8002078 <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000920:	2101      	movs	r1, #1
 8000922:	2005      	movs	r0, #5
 8000924:	f001 fba8 	bl	8002078 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000928:	2100      	movs	r1, #0
 800092a:	2007      	movs	r0, #7
 800092c:	f001 fba4 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000930:	2100      	movs	r1, #0
 8000932:	2004      	movs	r0, #4
 8000934:	f001 fba0 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000938:	2100      	movs	r1, #0
 800093a:	2001      	movs	r0, #1
 800093c:	f001 fb9c 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000940:	2100      	movs	r1, #0
 8000942:	200d      	movs	r0, #13
 8000944:	f001 fb98 	bl	8002078 <ControlLight>

				ControlLight(RED_LEFT, ON);
 8000948:	2101      	movs	r1, #1
 800094a:	200c      	movs	r0, #12
 800094c:	f001 fb94 	bl	8002078 <ControlLight>
				ControlLight(RED_RIGHT, ON);
 8000950:	2101      	movs	r1, #1
 8000952:	2000      	movs	r0, #0
 8000954:	f001 fb90 	bl	8002078 <ControlLight>
				lightsActivated = true;
 8000958:	4ba4      	ldr	r3, [pc, #656]	; (8000bec <TwoLane+0x31c>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
			}

			if(!NoCarH(button) && NoCarV(button)){
 800095e:	463b      	mov	r3, r7
 8000960:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000964:	f000 fd9f 	bl	80014a6 <NoCarH>
 8000968:	4603      	mov	r3, r0
 800096a:	f083 0301 	eor.w	r3, r3, #1
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	d011      	beq.n	8000998 <TwoLane+0xc8>
 8000974:	463b      	mov	r3, r7
 8000976:	e893 0003 	ldmia.w	r3, {r0, r1}
 800097a:	f000 fd79 	bl	8001470 <NoCarV>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d009      	beq.n	8000998 <TwoLane+0xc8>
				action.KeepStateFor = 1;
 8000984:	4b9a      	ldr	r3, [pc, #616]	; (8000bf0 <TwoLane+0x320>)
 8000986:	2201      	movs	r2, #1
 8000988:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 800098a:	4b99      	ldr	r3, [pc, #612]	; (8000bf0 <TwoLane+0x320>)
 800098c:	2201      	movs	r2, #1
 800098e:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000990:	4b98      	ldr	r3, [pc, #608]	; (8000bf4 <TwoLane+0x324>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e04c      	b.n	8000a32 <TwoLane+0x162>
			} else if (!NoCarH(button) && !NoCarV(button) && !delaySent) {
 8000998:	463b      	mov	r3, r7
 800099a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800099e:	f000 fd82 	bl	80014a6 <NoCarH>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f083 0301 	eor.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d01c      	beq.n	80009e8 <TwoLane+0x118>
 80009ae:	463b      	mov	r3, r7
 80009b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009b4:	f000 fd5c 	bl	8001470 <NoCarV>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f083 0301 	eor.w	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d011      	beq.n	80009e8 <TwoLane+0x118>
 80009c4:	4b8b      	ldr	r3, [pc, #556]	; (8000bf4 <TwoLane+0x324>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	f083 0301 	eor.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00a      	beq.n	80009e8 <TwoLane+0x118>
				action.KeepStateFor = RED_DELAY_MAX;
 80009d2:	4b87      	ldr	r3, [pc, #540]	; (8000bf0 <TwoLane+0x320>)
 80009d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80009d8:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 80009da:	4b85      	ldr	r3, [pc, #532]	; (8000bf0 <TwoLane+0x320>)
 80009dc:	2201      	movs	r2, #1
 80009de:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 80009e0:	4b84      	ldr	r3, [pc, #528]	; (8000bf4 <TwoLane+0x324>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	e024      	b.n	8000a32 <TwoLane+0x162>

			} else if (NoCarH(button) && NoCarV(button) && !delaySent){
 80009e8:	463b      	mov	r3, r7
 80009ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009ee:	f000 fd5a 	bl	80014a6 <NoCarH>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 813e 	beq.w	8000c76 <TwoLane+0x3a6>
 80009fa:	463b      	mov	r3, r7
 80009fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a00:	f000 fd36 	bl	8001470 <NoCarV>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8135 	beq.w	8000c76 <TwoLane+0x3a6>
 8000a0c:	4b79      	ldr	r3, [pc, #484]	; (8000bf4 <TwoLane+0x324>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	f083 0301 	eor.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 812d 	beq.w	8000c76 <TwoLane+0x3a6>
				action.KeepStateFor = GREEN_DELAY;
 8000a1c:	4b74      	ldr	r3, [pc, #464]	; (8000bf0 <TwoLane+0x320>)
 8000a1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000a22:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000a24:	4b72      	ldr	r3, [pc, #456]	; (8000bf0 <TwoLane+0x320>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000a2a:	4b72      	ldr	r3, [pc, #456]	; (8000bf4 <TwoLane+0x324>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000a30:	e121      	b.n	8000c76 <TwoLane+0x3a6>
 8000a32:	e120      	b.n	8000c76 <TwoLane+0x3a6>
		case H_Active:

			nextState = Transition_To_V;
 8000a34:	4b6c      	ldr	r3, [pc, #432]	; (8000be8 <TwoLane+0x318>)
 8000a36:	2205      	movs	r2, #5
 8000a38:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000a3a:	4b6c      	ldr	r3, [pc, #432]	; (8000bec <TwoLane+0x31c>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	f083 0301 	eor.w	r3, r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d022      	beq.n	8000a8e <TwoLane+0x1be>
				ControlLight(GREEN_RIGHT, ON);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f001 fb14 	bl	8002078 <ControlLight>
				ControlLight(GREEN_LEFT, ON);
 8000a50:	2101      	movs	r1, #1
 8000a52:	200e      	movs	r0, #14
 8000a54:	f001 fb10 	bl	8002078 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f001 fb0c 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2004      	movs	r0, #4
 8000a64:	f001 fb08 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f001 fb04 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000a70:	2100      	movs	r1, #0
 8000a72:	200d      	movs	r0, #13
 8000a74:	f001 fb00 	bl	8002078 <ControlLight>

				ControlLight(RED_TOP, ON);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f001 fafc 	bl	8002078 <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 8000a80:	2101      	movs	r1, #1
 8000a82:	2006      	movs	r0, #6
 8000a84:	f001 faf8 	bl	8002078 <ControlLight>
				lightsActivated = true;
 8000a88:	4b58      	ldr	r3, [pc, #352]	; (8000bec <TwoLane+0x31c>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
			}

			if(NoCarH(button) && !NoCarV(button)){
 8000a8e:	463b      	mov	r3, r7
 8000a90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a94:	f000 fd07 	bl	80014a6 <NoCarH>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d014      	beq.n	8000ac8 <TwoLane+0x1f8>
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000aa4:	f000 fce4 	bl	8001470 <NoCarV>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <TwoLane+0x1f8>
				action.KeepStateFor = 1;
 8000ab4:	4b4e      	ldr	r3, [pc, #312]	; (8000bf0 <TwoLane+0x320>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000aba:	4b4d      	ldr	r3, [pc, #308]	; (8000bf0 <TwoLane+0x320>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <TwoLane+0x324>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e04c      	b.n	8000b62 <TwoLane+0x292>
			} else if (!NoCarH(button) && !NoCarV(button) && !delaySent) {
 8000ac8:	463b      	mov	r3, r7
 8000aca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ace:	f000 fcea 	bl	80014a6 <NoCarH>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f083 0301 	eor.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d01c      	beq.n	8000b18 <TwoLane+0x248>
 8000ade:	463b      	mov	r3, r7
 8000ae0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ae4:	f000 fcc4 	bl	8001470 <NoCarV>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f083 0301 	eor.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d011      	beq.n	8000b18 <TwoLane+0x248>
 8000af4:	4b3f      	ldr	r3, [pc, #252]	; (8000bf4 <TwoLane+0x324>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f083 0301 	eor.w	r3, r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d00a      	beq.n	8000b18 <TwoLane+0x248>
				action.KeepStateFor = RED_DELAY_MAX;
 8000b02:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <TwoLane+0x320>)
 8000b04:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b08:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000b0a:	4b39      	ldr	r3, [pc, #228]	; (8000bf0 <TwoLane+0x320>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000b10:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <TwoLane+0x324>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	e024      	b.n	8000b62 <TwoLane+0x292>

			} else if (NoCarH(button) && NoCarV(button) && !delaySent){
 8000b18:	463b      	mov	r3, r7
 8000b1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b1e:	f000 fcc2 	bl	80014a6 <NoCarH>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 80a8 	beq.w	8000c7a <TwoLane+0x3aa>
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b30:	f000 fc9e 	bl	8001470 <NoCarV>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 809f 	beq.w	8000c7a <TwoLane+0x3aa>
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <TwoLane+0x324>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	f083 0301 	eor.w	r3, r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8097 	beq.w	8000c7a <TwoLane+0x3aa>
				action.KeepStateFor = GREEN_DELAY;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <TwoLane+0x320>)
 8000b4e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000b52:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000b54:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <TwoLane+0x320>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <TwoLane+0x324>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000b60:	e08b      	b.n	8000c7a <TwoLane+0x3aa>
 8000b62:	e08a      	b.n	8000c7a <TwoLane+0x3aa>
		case Transition_To_H:

			nextState = H_Active;
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <TwoLane+0x318>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <TwoLane+0x31c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f083 0301 	eor.w	r3, r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d022      	beq.n	8000bbe <TwoLane+0x2ee>
				ControlLight(YELLOW_BOTTOM, ON);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2007      	movs	r0, #7
 8000b7c:	f001 fa7c 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000b80:	2101      	movs	r1, #1
 8000b82:	2004      	movs	r0, #4
 8000b84:	f001 fa78 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f001 fa74 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 8000b90:	2101      	movs	r1, #1
 8000b92:	200d      	movs	r0, #13
 8000b94:	f001 fa70 	bl	8002078 <ControlLight>

				ControlLight(GREEN_TOP, OFF);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2005      	movs	r0, #5
 8000b9c:	f001 fa6c 	bl	8002078 <ControlLight>
				ControlLight(GREEN_BOTTOM, OFF);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2008      	movs	r0, #8
 8000ba4:	f001 fa68 	bl	8002078 <ControlLight>

				ControlLight(RED_RIGHT, OFF);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2000      	movs	r0, #0
 8000bac:	f001 fa64 	bl	8002078 <ControlLight>
				ControlLight(RED_LEFT, OFF);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	200c      	movs	r0, #12
 8000bb4:	f001 fa60 	bl	8002078 <ControlLight>
				lightsActivated = true;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <TwoLane+0x31c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <TwoLane+0x324>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f083 0301 	eor.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d058      	beq.n	8000c7e <TwoLane+0x3ae>
				action.KeepStateFor = YELLOW_DELAY;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <TwoLane+0x320>)
 8000bce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bd2:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <TwoLane+0x320>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <TwoLane+0x324>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000be0:	e04d      	b.n	8000c7e <TwoLane+0x3ae>
 8000be2:	bf00      	nop
 8000be4:	2000008f 	.word	0x2000008f
 8000be8:	20000090 	.word	0x20000090
 8000bec:	20000091 	.word	0x20000091
 8000bf0:	20000094 	.word	0x20000094
 8000bf4:	20000092 	.word	0x20000092
		case Transition_To_V:

			nextState = V_Active;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <TwoLane+0x3bc>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <TwoLane+0x3c0>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d022      	beq.n	8000c52 <TwoLane+0x382>
				ControlLight(YELLOW_BOTTOM, ON);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f001 fa32 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 8000c14:	2101      	movs	r1, #1
 8000c16:	2004      	movs	r0, #4
 8000c18:	f001 fa2e 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f001 fa2a 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 8000c24:	2101      	movs	r1, #1
 8000c26:	200d      	movs	r0, #13
 8000c28:	f001 fa26 	bl	8002078 <ControlLight>

				ControlLight(GREEN_RIGHT, OFF);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f001 fa22 	bl	8002078 <ControlLight>
				ControlLight(GREEN_LEFT, OFF);
 8000c34:	2100      	movs	r1, #0
 8000c36:	200e      	movs	r0, #14
 8000c38:	f001 fa1e 	bl	8002078 <ControlLight>

				ControlLight(RED_TOP, OFF);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f001 fa1a 	bl	8002078 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 8000c44:	2100      	movs	r1, #0
 8000c46:	2006      	movs	r0, #6
 8000c48:	f001 fa16 	bl	8002078 <ControlLight>
				lightsActivated = true;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <TwoLane+0x3c0>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <TwoLane+0x3c4>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f083 0301 	eor.w	r3, r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d010      	beq.n	8000c82 <TwoLane+0x3b2>
				action.KeepStateFor = YELLOW_DELAY;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <TwoLane+0x3c8>)
 8000c62:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000c66:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <TwoLane+0x3c8>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <TwoLane+0x3c4>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000c74:	e005      	b.n	8000c82 <TwoLane+0x3b2>
			break;
 8000c76:	bf00      	nop
 8000c78:	e004      	b.n	8000c84 <TwoLane+0x3b4>
			break;
 8000c7a:	bf00      	nop
 8000c7c:	e002      	b.n	8000c84 <TwoLane+0x3b4>
			break;
 8000c7e:	bf00      	nop
 8000c80:	e000      	b.n	8000c84 <TwoLane+0x3b4>
			break;
 8000c82:	bf00      	nop

	}
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000090 	.word	0x20000090
 8000c90:	20000091 	.word	0x20000091
 8000c94:	20000092 	.word	0x20000092
 8000c98:	20000094 	.word	0x20000094

08000c9c <TwoLanePed>:

void TwoLanePed(ButtonStates button){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 8000ca8:	4bb4      	ldr	r3, [pc, #720]	; (8000f7c <TwoLanePed+0x2e0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b05      	cmp	r3, #5
 8000cae:	f200 83d3 	bhi.w	8001458 <TwoLanePed+0x7bc>
 8000cb2:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <TwoLanePed+0x1c>)
 8000cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb8:	08000f95 	.word	0x08000f95
 8000cbc:	0800116f 	.word	0x0800116f
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000e8d 	.word	0x08000e8d
 8000cc8:	08001275 	.word	0x08001275
 8000ccc:	0800135d 	.word	0x0800135d
		case V_Active:
			nextState = Transition_To_H;
 8000cd0:	4bab      	ldr	r3, [pc, #684]	; (8000f80 <TwoLanePed+0x2e4>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000cd6:	4bab      	ldr	r3, [pc, #684]	; (8000f84 <TwoLanePed+0x2e8>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f083 0301 	eor.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d032      	beq.n	8000d4a <TwoLanePed+0xae>
				ControlLight(GREEN_BOTTOM, ON);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2008      	movs	r0, #8
 8000ce8:	f001 f9c6 	bl	8002078 <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000cec:	2101      	movs	r1, #1
 8000cee:	2005      	movs	r0, #5
 8000cf0:	f001 f9c2 	bl	8002078 <ControlLight>

				ControlLight(RED_LEFT, ON);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	200c      	movs	r0, #12
 8000cf8:	f001 f9be 	bl	8002078 <ControlLight>
				ControlLight(RED_RIGHT, ON);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f001 f9ba 	bl	8002078 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 8000d04:	2100      	movs	r1, #0
 8000d06:	200a      	movs	r0, #10
 8000d08:	f001 f9b6 	bl	8002078 <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f001 f9b2 	bl	8002078 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 8000d14:	2101      	movs	r1, #1
 8000d16:	2009      	movs	r0, #9
 8000d18:	f001 f9ae 	bl	8002078 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f001 f9aa 	bl	8002078 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000d24:	2100      	movs	r1, #0
 8000d26:	2007      	movs	r0, #7
 8000d28:	f001 f9a6 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2004      	movs	r0, #4
 8000d30:	f001 f9a2 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000d34:	2100      	movs	r1, #0
 8000d36:	200d      	movs	r0, #13
 8000d38:	f001 f99e 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f001 f99a 	bl	8002078 <ControlLight>

				lightsActivated = true;
 8000d44:	4b8f      	ldr	r3, [pc, #572]	; (8000f84 <TwoLanePed+0x2e8>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
			}

			if(button.LeftPed){
 8000d4a:	793b      	ldrb	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00f      	beq.n	8000d70 <TwoLanePed+0xd4>
				nextState = V_P_Active;
 8000d50:	4b8b      	ldr	r3, [pc, #556]	; (8000f80 <TwoLanePed+0x2e4>)
 8000d52:	2203      	movs	r2, #3
 8000d54:	701a      	strb	r2, [r3, #0]
				action.KeepStateFor = 1;
 8000d56:	4b8c      	ldr	r3, [pc, #560]	; (8000f88 <TwoLanePed+0x2ec>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000d5c:	4b8a      	ldr	r3, [pc, #552]	; (8000f88 <TwoLanePed+0x2ec>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + 1;
 8000d62:	f001 fac7 	bl	80022f4 <HAL_GetTick>
 8000d66:	4603      	mov	r3, r0
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a88      	ldr	r2, [pc, #544]	; (8000f8c <TwoLanePed+0x2f0>)
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e01e      	b.n	8000dae <TwoLanePed+0x112>
			} else if(!NoCarH(button) && NoCarV(button)) {
 8000d70:	463b      	mov	r3, r7
 8000d72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d76:	f000 fb96 	bl	80014a6 <NoCarH>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d013      	beq.n	8000dae <TwoLanePed+0x112>
 8000d86:	463b      	mov	r3, r7
 8000d88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d8c:	f000 fb70 	bl	8001470 <NoCarV>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00b      	beq.n	8000dae <TwoLanePed+0x112>
				action.KeepStateFor = 1;
 8000d96:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <TwoLanePed+0x2ec>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000d9c:	4b7a      	ldr	r3, [pc, #488]	; (8000f88 <TwoLanePed+0x2ec>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + 1;
 8000da2:	f001 faa7 	bl	80022f4 <HAL_GetTick>
 8000da6:	4603      	mov	r3, r0
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a78      	ldr	r2, [pc, #480]	; (8000f8c <TwoLanePed+0x2f0>)
 8000dac:	6013      	str	r3, [r2, #0]
			}
			if (!NoCarH(button) && !NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + RED_DELAY_MAX)) {
 8000dae:	463b      	mov	r3, r7
 8000db0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000db4:	f000 fb77 	bl	80014a6 <NoCarH>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f083 0301 	eor.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d024      	beq.n	8000e0e <TwoLanePed+0x172>
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dca:	f000 fb51 	bl	8001470 <NoCarV>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f083 0301 	eor.w	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d019      	beq.n	8000e0e <TwoLanePed+0x172>
 8000dda:	f001 fa8b 	bl	80022f4 <HAL_GetTick>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000de4:	3310      	adds	r3, #16
 8000de6:	4a69      	ldr	r2, [pc, #420]	; (8000f8c <TwoLanePed+0x2f0>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d20f      	bcs.n	8000e0e <TwoLanePed+0x172>
				action.KeepStateFor = RED_DELAY_MAX;
 8000dee:	4b66      	ldr	r3, [pc, #408]	; (8000f88 <TwoLanePed+0x2ec>)
 8000df0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000df4:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000df6:	4b64      	ldr	r3, [pc, #400]	; (8000f88 <TwoLanePed+0x2ec>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + RED_DELAY_MAX;
 8000dfc:	f001 fa7a 	bl	80022f4 <HAL_GetTick>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000e06:	3310      	adds	r3, #16
 8000e08:	4a60      	ldr	r2, [pc, #384]	; (8000f8c <TwoLanePed+0x2f0>)
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	e028      	b.n	8000e60 <TwoLanePed+0x1c4>
			} else if (NoCarH(button) && NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + GREEN_DELAY)) {
 8000e0e:	463b      	mov	r3, r7
 8000e10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e14:	f000 fb47 	bl	80014a6 <NoCarH>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d020      	beq.n	8000e60 <TwoLanePed+0x1c4>
 8000e1e:	463b      	mov	r3, r7
 8000e20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e24:	f000 fb24 	bl	8001470 <NoCarV>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d018      	beq.n	8000e60 <TwoLanePed+0x1c4>
 8000e2e:	f001 fa61 	bl	80022f4 <HAL_GetTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000e38:	3310      	adds	r3, #16
 8000e3a:	4a54      	ldr	r2, [pc, #336]	; (8000f8c <TwoLanePed+0x2f0>)
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d20e      	bcs.n	8000e60 <TwoLanePed+0x1c4>
				action.KeepStateFor = GREEN_DELAY;
 8000e42:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <TwoLanePed+0x2ec>)
 8000e44:	f241 7270 	movw	r2, #6000	; 0x1770
 8000e48:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000e4a:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <TwoLanePed+0x2ec>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + GREEN_DELAY;
 8000e50:	f001 fa50 	bl	80022f4 <HAL_GetTick>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8000e5a:	3310      	adds	r3, #16
 8000e5c:	4a4b      	ldr	r2, [pc, #300]	; (8000f8c <TwoLanePed+0x2f0>)
 8000e5e:	6013      	str	r3, [r2, #0]
			}

			if(button.TopPed){
 8000e60:	797b      	ldrb	r3, [r7, #5]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 82ed 	beq.w	8001442 <TwoLanePed+0x7a6>
				action.TopPedWaiting = true;
 8000e68:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <TwoLanePed+0x2ec>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
				action.KeepStateFor = PEDESTRIAN_DELAY;
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <TwoLanePed+0x2ec>)
 8000e70:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e74:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <TwoLanePed+0x2ec>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	709a      	strb	r2, [r3, #2]
				previousDelayExpireAt = HAL_GetTick() + PEDESTRIAN_DELAY;
 8000e7c:	f001 fa3a 	bl	80022f4 <HAL_GetTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8000e86:	4a41      	ldr	r2, [pc, #260]	; (8000f8c <TwoLanePed+0x2f0>)
 8000e88:	6013      	str	r3, [r2, #0]
			}

			break;
 8000e8a:	e2da      	b.n	8001442 <TwoLanePed+0x7a6>

		case V_P_Active:
			if(action.TopPedWaiting){
 8000e8c:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <TwoLanePed+0x2ec>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <TwoLanePed+0x200>
				nextState = Transition_To_H;
 8000e94:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <TwoLanePed+0x2e4>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e019      	b.n	8000ed0 <TwoLanePed+0x234>
			} else if (!NoCarV(button) && NoCarH(button)){
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ea2:	f000 fae5 	bl	8001470 <NoCarV>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f083 0301 	eor.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <TwoLanePed+0x22e>
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000eb8:	f000 faf5 	bl	80014a6 <NoCarH>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <TwoLanePed+0x22e>
				nextState = V_Active;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <TwoLanePed+0x2e4>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e002      	b.n	8000ed0 <TwoLanePed+0x234>
			}else {
				nextState = Transition_To_H;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <TwoLanePed+0x2e4>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	701a      	strb	r2, [r3, #0]
			}

			if(!lightsActivated){
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <TwoLanePed+0x2e8>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	f083 0301 	eor.w	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d035      	beq.n	8000f4a <TwoLanePed+0x2ae>
				ControlLight(GREEN_BOTTOM, ON);
 8000ede:	2101      	movs	r1, #1
 8000ee0:	2008      	movs	r0, #8
 8000ee2:	f001 f8c9 	bl	8002078 <ControlLight>
				ControlLight(GREEN_TOP, ON);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2005      	movs	r0, #5
 8000eea:	f001 f8c5 	bl	8002078 <ControlLight>

				ControlLight(RED_LEFT, ON);
 8000eee:	2101      	movs	r1, #1
 8000ef0:	200c      	movs	r0, #12
 8000ef2:	f001 f8c1 	bl	8002078 <ControlLight>
				ControlLight(RED_RIGHT, ON);
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f001 f8bd 	bl	8002078 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 8000efe:	2100      	movs	r1, #0
 8000f00:	200a      	movs	r0, #10
 8000f02:	f001 f8b9 	bl	8002078 <ControlLight>
				ControlLight(GREEN_PED_LEFT, ON);
 8000f06:	2101      	movs	r1, #1
 8000f08:	2010      	movs	r0, #16
 8000f0a:	f001 f8b5 	bl	8002078 <ControlLight>
				action.LeftPedWaiting = false;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <TwoLanePed+0x2ec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	705a      	strb	r2, [r3, #1]

				ControlLight(RED_PED_TOP, ON);
 8000f14:	2101      	movs	r1, #1
 8000f16:	2009      	movs	r0, #9
 8000f18:	f001 f8ae 	bl	8002078 <ControlLight>
				ControlLight(RED_PED_LEFT, OFF);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f001 f8aa 	bl	8002078 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2007      	movs	r0, #7
 8000f28:	f001 f8a6 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f001 f8a2 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000f34:	2100      	movs	r1, #0
 8000f36:	200d      	movs	r0, #13
 8000f38:	f001 f89e 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f001 f89a 	bl	8002078 <ControlLight>

				lightsActivated = true;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <TwoLanePed+0x2e8>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <TwoLanePed+0x2f4>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	f083 0301 	eor.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d009      	beq.n	8000f6c <TwoLanePed+0x2d0>
				action.KeepStateFor = WALKING_DELAY;
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <TwoLanePed+0x2ec>)
 8000f5a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f5e:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <TwoLanePed+0x2ec>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <TwoLanePed+0x2f4>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed){
 8000f6c:	797b      	ldrb	r3, [r7, #5]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8269 	beq.w	8001446 <TwoLanePed+0x7aa>
				action.TopPedWaiting = true;
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <TwoLanePed+0x2ec>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000f7a:	e264      	b.n	8001446 <TwoLanePed+0x7aa>
 8000f7c:	2000008f 	.word	0x2000008f
 8000f80:	20000090 	.word	0x20000090
 8000f84:	20000091 	.word	0x20000091
 8000f88:	20000094 	.word	0x20000094
 8000f8c:	2000009c 	.word	0x2000009c
 8000f90:	20000092 	.word	0x20000092

		case H_Active:
			nextState = Transition_To_V;
 8000f94:	4bb2      	ldr	r3, [pc, #712]	; (8001260 <TwoLanePed+0x5c4>)
 8000f96:	2205      	movs	r2, #5
 8000f98:	701a      	strb	r2, [r3, #0]
			if(!lightsActivated){
 8000f9a:	4bb2      	ldr	r3, [pc, #712]	; (8001264 <TwoLanePed+0x5c8>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d032      	beq.n	800100e <TwoLanePed+0x372>
				ControlLight(GREEN_LEFT, ON);
 8000fa8:	2101      	movs	r1, #1
 8000faa:	200e      	movs	r0, #14
 8000fac:	f001 f864 	bl	8002078 <ControlLight>
				ControlLight(GREEN_RIGHT, ON);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f001 f860 	bl	8002078 <ControlLight>

				ControlLight(RED_TOP, ON);
 8000fb8:	2101      	movs	r1, #1
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f001 f85c 	bl	8002078 <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f001 f858 	bl	8002078 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	200a      	movs	r0, #10
 8000fcc:	f001 f854 	bl	8002078 <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2010      	movs	r0, #16
 8000fd4:	f001 f850 	bl	8002078 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 8000fd8:	2101      	movs	r1, #1
 8000fda:	2009      	movs	r0, #9
 8000fdc:	f001 f84c 	bl	8002078 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f001 f848 	bl	8002078 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2007      	movs	r0, #7
 8000fec:	f001 f844 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2004      	movs	r0, #4
 8000ff4:	f001 f840 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200d      	movs	r0, #13
 8000ffc:	f001 f83c 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 8001000:	2100      	movs	r1, #0
 8001002:	2001      	movs	r0, #1
 8001004:	f001 f838 	bl	8002078 <ControlLight>

				lightsActivated = true;
 8001008:	4b96      	ldr	r3, [pc, #600]	; (8001264 <TwoLanePed+0x5c8>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed){
 800100e:	797b      	ldrb	r3, [r7, #5]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d012      	beq.n	800103a <TwoLanePed+0x39e>
				nextState = H_P_Active;
 8001014:	4b92      	ldr	r3, [pc, #584]	; (8001260 <TwoLanePed+0x5c4>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
				action.KeepStateFor = 1;
 800101a:	4b93      	ldr	r3, [pc, #588]	; (8001268 <TwoLanePed+0x5cc>)
 800101c:	2201      	movs	r2, #1
 800101e:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001020:	4b91      	ldr	r3, [pc, #580]	; (8001268 <TwoLanePed+0x5cc>)
 8001022:	2201      	movs	r2, #1
 8001024:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8001026:	4b91      	ldr	r3, [pc, #580]	; (800126c <TwoLanePed+0x5d0>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + 1;
 800102c:	f001 f962 	bl	80022f4 <HAL_GetTick>
 8001030:	4603      	mov	r3, r0
 8001032:	3301      	adds	r3, #1
 8001034:	4a8e      	ldr	r2, [pc, #568]	; (8001270 <TwoLanePed+0x5d4>)
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e021      	b.n	800107e <TwoLanePed+0x3e2>
			} else if(NoCarH(button) && !NoCarV(button)) {
 800103a:	463b      	mov	r3, r7
 800103c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001040:	f000 fa31 	bl	80014a6 <NoCarH>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d019      	beq.n	800107e <TwoLanePed+0x3e2>
 800104a:	463b      	mov	r3, r7
 800104c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001050:	f000 fa0e 	bl	8001470 <NoCarV>
 8001054:	4603      	mov	r3, r0
 8001056:	f083 0301 	eor.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <TwoLanePed+0x3e2>
				action.KeepStateFor = 1;
 8001060:	4b81      	ldr	r3, [pc, #516]	; (8001268 <TwoLanePed+0x5cc>)
 8001062:	2201      	movs	r2, #1
 8001064:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001066:	4b80      	ldr	r3, [pc, #512]	; (8001268 <TwoLanePed+0x5cc>)
 8001068:	2201      	movs	r2, #1
 800106a:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800106c:	4b7f      	ldr	r3, [pc, #508]	; (800126c <TwoLanePed+0x5d0>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + 1;
 8001072:	f001 f93f 	bl	80022f4 <HAL_GetTick>
 8001076:	4603      	mov	r3, r0
 8001078:	3301      	adds	r3, #1
 800107a:	4a7d      	ldr	r2, [pc, #500]	; (8001270 <TwoLanePed+0x5d4>)
 800107c:	6013      	str	r3, [r2, #0]
			}
			if (!NoCarH(button) && !NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + RED_DELAY_MAX)) {
 800107e:	463b      	mov	r3, r7
 8001080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001084:	f000 fa0f 	bl	80014a6 <NoCarH>
 8001088:	4603      	mov	r3, r0
 800108a:	f083 0301 	eor.w	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d027      	beq.n	80010e4 <TwoLanePed+0x448>
 8001094:	463b      	mov	r3, r7
 8001096:	e893 0003 	ldmia.w	r3, {r0, r1}
 800109a:	f000 f9e9 	bl	8001470 <NoCarV>
 800109e:	4603      	mov	r3, r0
 80010a0:	f083 0301 	eor.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d01c      	beq.n	80010e4 <TwoLanePed+0x448>
 80010aa:	f001 f923 	bl	80022f4 <HAL_GetTick>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80010b4:	3310      	adds	r3, #16
 80010b6:	4a6e      	ldr	r2, [pc, #440]	; (8001270 <TwoLanePed+0x5d4>)
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d212      	bcs.n	80010e4 <TwoLanePed+0x448>
				action.KeepStateFor = RED_DELAY_MAX;
 80010be:	4b6a      	ldr	r3, [pc, #424]	; (8001268 <TwoLanePed+0x5cc>)
 80010c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80010c4:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 80010c6:	4b68      	ldr	r3, [pc, #416]	; (8001268 <TwoLanePed+0x5cc>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 80010cc:	4b67      	ldr	r3, [pc, #412]	; (800126c <TwoLanePed+0x5d0>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + RED_DELAY_MAX;
 80010d2:	f001 f90f 	bl	80022f4 <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80010dc:	3310      	adds	r3, #16
 80010de:	4a64      	ldr	r2, [pc, #400]	; (8001270 <TwoLanePed+0x5d4>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e02b      	b.n	800113c <TwoLanePed+0x4a0>
			} else if (NoCarH(button) && NoCarV(button) && previousDelayExpireAt > (HAL_GetTick() + GREEN_DELAY)) {
 80010e4:	463b      	mov	r3, r7
 80010e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010ea:	f000 f9dc 	bl	80014a6 <NoCarH>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d023      	beq.n	800113c <TwoLanePed+0x4a0>
 80010f4:	463b      	mov	r3, r7
 80010f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010fa:	f000 f9b9 	bl	8001470 <NoCarV>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d01b      	beq.n	800113c <TwoLanePed+0x4a0>
 8001104:	f001 f8f6 	bl	80022f4 <HAL_GetTick>
 8001108:	4603      	mov	r3, r0
 800110a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800110e:	3310      	adds	r3, #16
 8001110:	4a57      	ldr	r2, [pc, #348]	; (8001270 <TwoLanePed+0x5d4>)
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	4293      	cmp	r3, r2
 8001116:	d211      	bcs.n	800113c <TwoLanePed+0x4a0>
				action.KeepStateFor = GREEN_DELAY;
 8001118:	4b53      	ldr	r3, [pc, #332]	; (8001268 <TwoLanePed+0x5cc>)
 800111a:	f241 7270 	movw	r2, #6000	; 0x1770
 800111e:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001120:	4b51      	ldr	r3, [pc, #324]	; (8001268 <TwoLanePed+0x5cc>)
 8001122:	2201      	movs	r2, #1
 8001124:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8001126:	4b51      	ldr	r3, [pc, #324]	; (800126c <TwoLanePed+0x5d0>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + GREEN_DELAY;
 800112c:	f001 f8e2 	bl	80022f4 <HAL_GetTick>
 8001130:	4603      	mov	r3, r0
 8001132:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001136:	3310      	adds	r3, #16
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <TwoLanePed+0x5d4>)
 800113a:	6013      	str	r3, [r2, #0]
			}

			if(button.LeftPed){ //Press pd at same time error
 800113c:	793b      	ldrb	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8183 	beq.w	800144a <TwoLanePed+0x7ae>
				action.LeftPedWaiting = true;
 8001144:	4b48      	ldr	r3, [pc, #288]	; (8001268 <TwoLanePed+0x5cc>)
 8001146:	2201      	movs	r2, #1
 8001148:	705a      	strb	r2, [r3, #1]
				action.KeepStateFor = PEDESTRIAN_DELAY;
 800114a:	4b47      	ldr	r3, [pc, #284]	; (8001268 <TwoLanePed+0x5cc>)
 800114c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001150:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001152:	4b45      	ldr	r3, [pc, #276]	; (8001268 <TwoLanePed+0x5cc>)
 8001154:	2201      	movs	r2, #1
 8001156:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8001158:	4b44      	ldr	r3, [pc, #272]	; (800126c <TwoLanePed+0x5d0>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
				previousDelayExpireAt = HAL_GetTick() + PEDESTRIAN_DELAY;
 800115e:	f001 f8c9 	bl	80022f4 <HAL_GetTick>
 8001162:	4603      	mov	r3, r0
 8001164:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8001168:	4a41      	ldr	r2, [pc, #260]	; (8001270 <TwoLanePed+0x5d4>)
 800116a:	6013      	str	r3, [r2, #0]
			}

			break;
 800116c:	e16d      	b.n	800144a <TwoLanePed+0x7ae>

		case H_P_Active:
			if(action.LeftPedWaiting){
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <TwoLanePed+0x5cc>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <TwoLanePed+0x4e2>
				nextState = Transition_To_V;
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <TwoLanePed+0x5c4>)
 8001178:	2205      	movs	r2, #5
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e019      	b.n	80011b2 <TwoLanePed+0x516>
			} else if (!NoCarH(button) && NoCarV(button)){
 800117e:	463b      	mov	r3, r7
 8001180:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001184:	f000 f98f 	bl	80014a6 <NoCarH>
 8001188:	4603      	mov	r3, r0
 800118a:	f083 0301 	eor.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00b      	beq.n	80011ac <TwoLanePed+0x510>
 8001194:	463b      	mov	r3, r7
 8001196:	e893 0003 	ldmia.w	r3, {r0, r1}
 800119a:	f000 f969 	bl	8001470 <NoCarV>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <TwoLanePed+0x510>
				nextState = H_Active;
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <TwoLanePed+0x5c4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e002      	b.n	80011b2 <TwoLanePed+0x516>
			} else {
				nextState = Transition_To_V;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <TwoLanePed+0x5c4>)
 80011ae:	2205      	movs	r2, #5
 80011b0:	701a      	strb	r2, [r3, #0]
			}
			if(!lightsActivated){
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <TwoLanePed+0x5c8>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f083 0301 	eor.w	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d035      	beq.n	800122c <TwoLanePed+0x590>
				ControlLight(GREEN_LEFT, ON);
 80011c0:	2101      	movs	r1, #1
 80011c2:	200e      	movs	r0, #14
 80011c4:	f000 ff58 	bl	8002078 <ControlLight>
				ControlLight(GREEN_RIGHT, ON);
 80011c8:	2101      	movs	r1, #1
 80011ca:	2002      	movs	r0, #2
 80011cc:	f000 ff54 	bl	8002078 <ControlLight>

				ControlLight(RED_TOP, ON);
 80011d0:	2101      	movs	r1, #1
 80011d2:	2003      	movs	r0, #3
 80011d4:	f000 ff50 	bl	8002078 <ControlLight>
				ControlLight(RED_BOTTOM, ON);
 80011d8:	2101      	movs	r1, #1
 80011da:	2006      	movs	r0, #6
 80011dc:	f000 ff4c 	bl	8002078 <ControlLight>

				ControlLight(GREEN_PED_TOP, ON);
 80011e0:	2101      	movs	r1, #1
 80011e2:	200a      	movs	r0, #10
 80011e4:	f000 ff48 	bl	8002078 <ControlLight>
				action.TopPedWaiting = false;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <TwoLanePed+0x5cc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
				ControlLight(GREEN_PED_LEFT, OFF);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2010      	movs	r0, #16
 80011f2:	f000 ff41 	bl	8002078 <ControlLight>

				ControlLight(RED_PED_TOP, OFF);
 80011f6:	2100      	movs	r1, #0
 80011f8:	2009      	movs	r0, #9
 80011fa:	f000 ff3d 	bl	8002078 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 80011fe:	2101      	movs	r1, #1
 8001200:	200f      	movs	r0, #15
 8001202:	f000 ff39 	bl	8002078 <ControlLight>

				ControlLight(YELLOW_BOTTOM, OFF);
 8001206:	2100      	movs	r1, #0
 8001208:	2007      	movs	r0, #7
 800120a:	f000 ff35 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, OFF);
 800120e:	2100      	movs	r1, #0
 8001210:	2004      	movs	r0, #4
 8001212:	f000 ff31 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, OFF);
 8001216:	2100      	movs	r1, #0
 8001218:	200d      	movs	r0, #13
 800121a:	f000 ff2d 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, OFF);
 800121e:	2100      	movs	r1, #0
 8001220:	2001      	movs	r0, #1
 8001222:	f000 ff29 	bl	8002078 <ControlLight>

				lightsActivated = true;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <TwoLanePed+0x5c8>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
			}
			if(!delaySent){
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <TwoLanePed+0x5d0>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d009      	beq.n	800124e <TwoLanePed+0x5b2>
				action.KeepStateFor = WALKING_DELAY;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <TwoLanePed+0x5cc>)
 800123c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001240:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <TwoLanePed+0x5cc>)
 8001244:	2201      	movs	r2, #1
 8001246:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <TwoLanePed+0x5d0>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
			}

			if(button.LeftPed){
 800124e:	793b      	ldrb	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80fc 	beq.w	800144e <TwoLanePed+0x7b2>
				action.LeftPedWaiting = true;
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <TwoLanePed+0x5cc>)
 8001258:	2201      	movs	r2, #1
 800125a:	705a      	strb	r2, [r3, #1]
			}

			break;
 800125c:	e0f7      	b.n	800144e <TwoLanePed+0x7b2>
 800125e:	bf00      	nop
 8001260:	20000090 	.word	0x20000090
 8001264:	20000091 	.word	0x20000091
 8001268:	20000094 	.word	0x20000094
 800126c:	20000092 	.word	0x20000092
 8001270:	2000009c 	.word	0x2000009c

		case Transition_To_H:
			if(!lightsActivated){
 8001274:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <TwoLanePed+0x7c4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d042      	beq.n	8001308 <TwoLanePed+0x66c>
				ControlLight(GREEN_LEFT, OFF);
 8001282:	2100      	movs	r1, #0
 8001284:	200e      	movs	r0, #14
 8001286:	f000 fef7 	bl	8002078 <ControlLight>
				ControlLight(GREEN_RIGHT, OFF);
 800128a:	2100      	movs	r1, #0
 800128c:	2002      	movs	r0, #2
 800128e:	f000 fef3 	bl	8002078 <ControlLight>
				ControlLight(GREEN_TOP, OFF);
 8001292:	2100      	movs	r1, #0
 8001294:	2005      	movs	r0, #5
 8001296:	f000 feef 	bl	8002078 <ControlLight>
				ControlLight(GREEN_BOTTOM, OFF);
 800129a:	2100      	movs	r1, #0
 800129c:	2008      	movs	r0, #8
 800129e:	f000 feeb 	bl	8002078 <ControlLight>

				ControlLight(RED_TOP, OFF);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 fee7 	bl	8002078 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2006      	movs	r0, #6
 80012ae:	f000 fee3 	bl	8002078 <ControlLight>
				ControlLight(RED_LEFT, OFF);
 80012b2:	2100      	movs	r1, #0
 80012b4:	200c      	movs	r0, #12
 80012b6:	f000 fedf 	bl	8002078 <ControlLight>
				ControlLight(RED_RIGHT, OFF);
 80012ba:	2100      	movs	r1, #0
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 fedb 	bl	8002078 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 80012c2:	2100      	movs	r1, #0
 80012c4:	200a      	movs	r0, #10
 80012c6:	f000 fed7 	bl	8002078 <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 80012ca:	2100      	movs	r1, #0
 80012cc:	2010      	movs	r0, #16
 80012ce:	f000 fed3 	bl	8002078 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 80012d2:	2101      	movs	r1, #1
 80012d4:	2009      	movs	r0, #9
 80012d6:	f000 fecf 	bl	8002078 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 80012da:	2101      	movs	r1, #1
 80012dc:	200f      	movs	r0, #15
 80012de:	f000 fecb 	bl	8002078 <ControlLight>

				ControlLight(YELLOW_BOTTOM, ON);
 80012e2:	2101      	movs	r1, #1
 80012e4:	2007      	movs	r0, #7
 80012e6:	f000 fec7 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 80012ea:	2101      	movs	r1, #1
 80012ec:	2004      	movs	r0, #4
 80012ee:	f000 fec3 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 80012f2:	2101      	movs	r1, #1
 80012f4:	200d      	movs	r0, #13
 80012f6:	f000 febf 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 80012fa:	2101      	movs	r1, #1
 80012fc:	2001      	movs	r0, #1
 80012fe:	f000 febb 	bl	8002078 <ControlLight>
				lightsActivated = true;
 8001302:	4b57      	ldr	r3, [pc, #348]	; (8001460 <TwoLanePed+0x7c4>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
			}

			if(button.TopPed){
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <TwoLanePed+0x678>
				action.TopPedWaiting = true;
 800130e:	4b55      	ldr	r3, [pc, #340]	; (8001464 <TwoLanePed+0x7c8>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
			}
			if(button.LeftPed){
 8001314:	793b      	ldrb	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <TwoLanePed+0x684>
				action.LeftPedWaiting = true;
 800131a:	4b52      	ldr	r3, [pc, #328]	; (8001464 <TwoLanePed+0x7c8>)
 800131c:	2201      	movs	r2, #1
 800131e:	705a      	strb	r2, [r3, #1]
			}
			if(action.TopPedWaiting){
 8001320:	4b50      	ldr	r3, [pc, #320]	; (8001464 <TwoLanePed+0x7c8>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <TwoLanePed+0x694>
				nextState = H_P_Active;
 8001328:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <TwoLanePed+0x7cc>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e002      	b.n	8001336 <TwoLanePed+0x69a>
			}else{
				nextState = H_Active;
 8001330:	4b4d      	ldr	r3, [pc, #308]	; (8001468 <TwoLanePed+0x7cc>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 8001336:	4b4d      	ldr	r3, [pc, #308]	; (800146c <TwoLanePed+0x7d0>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f083 0301 	eor.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 8086 	beq.w	8001452 <TwoLanePed+0x7b6>
				action.KeepStateFor = YELLOW_DELAY;
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <TwoLanePed+0x7c8>)
 8001348:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800134c:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 800134e:	4b45      	ldr	r3, [pc, #276]	; (8001464 <TwoLanePed+0x7c8>)
 8001350:	2201      	movs	r2, #1
 8001352:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 8001354:	4b45      	ldr	r3, [pc, #276]	; (800146c <TwoLanePed+0x7d0>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
			}

			break;
 800135a:	e07a      	b.n	8001452 <TwoLanePed+0x7b6>

		case Transition_To_V:
			if(!lightsActivated){
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <TwoLanePed+0x7c4>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d042      	beq.n	80013f0 <TwoLanePed+0x754>
				ControlLight(GREEN_LEFT, OFF);
 800136a:	2100      	movs	r1, #0
 800136c:	200e      	movs	r0, #14
 800136e:	f000 fe83 	bl	8002078 <ControlLight>
				ControlLight(GREEN_RIGHT, OFF);
 8001372:	2100      	movs	r1, #0
 8001374:	2002      	movs	r0, #2
 8001376:	f000 fe7f 	bl	8002078 <ControlLight>
				ControlLight(GREEN_TOP, OFF);
 800137a:	2100      	movs	r1, #0
 800137c:	2005      	movs	r0, #5
 800137e:	f000 fe7b 	bl	8002078 <ControlLight>
				ControlLight(GREEN_BOTTOM, OFF);
 8001382:	2100      	movs	r1, #0
 8001384:	2008      	movs	r0, #8
 8001386:	f000 fe77 	bl	8002078 <ControlLight>

				ControlLight(RED_TOP, OFF);
 800138a:	2100      	movs	r1, #0
 800138c:	2003      	movs	r0, #3
 800138e:	f000 fe73 	bl	8002078 <ControlLight>
				ControlLight(RED_RIGHT, OFF);
 8001392:	2100      	movs	r1, #0
 8001394:	2000      	movs	r0, #0
 8001396:	f000 fe6f 	bl	8002078 <ControlLight>
				ControlLight(RED_BOTTOM, OFF);
 800139a:	2100      	movs	r1, #0
 800139c:	2006      	movs	r0, #6
 800139e:	f000 fe6b 	bl	8002078 <ControlLight>
				ControlLight(RED_LEFT, OFF);
 80013a2:	2100      	movs	r1, #0
 80013a4:	200c      	movs	r0, #12
 80013a6:	f000 fe67 	bl	8002078 <ControlLight>

				ControlLight(GREEN_PED_TOP, OFF);
 80013aa:	2100      	movs	r1, #0
 80013ac:	200a      	movs	r0, #10
 80013ae:	f000 fe63 	bl	8002078 <ControlLight>
				ControlLight(GREEN_PED_LEFT, OFF);
 80013b2:	2100      	movs	r1, #0
 80013b4:	2010      	movs	r0, #16
 80013b6:	f000 fe5f 	bl	8002078 <ControlLight>

				ControlLight(RED_PED_TOP, ON);
 80013ba:	2101      	movs	r1, #1
 80013bc:	2009      	movs	r0, #9
 80013be:	f000 fe5b 	bl	8002078 <ControlLight>
				ControlLight(RED_PED_LEFT, ON);
 80013c2:	2101      	movs	r1, #1
 80013c4:	200f      	movs	r0, #15
 80013c6:	f000 fe57 	bl	8002078 <ControlLight>

				ControlLight(YELLOW_BOTTOM, ON);
 80013ca:	2101      	movs	r1, #1
 80013cc:	2007      	movs	r0, #7
 80013ce:	f000 fe53 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_TOP, ON);
 80013d2:	2101      	movs	r1, #1
 80013d4:	2004      	movs	r0, #4
 80013d6:	f000 fe4f 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_LEFT, ON);
 80013da:	2101      	movs	r1, #1
 80013dc:	200d      	movs	r0, #13
 80013de:	f000 fe4b 	bl	8002078 <ControlLight>
				ControlLight(YELLOW_RIGHT, ON);
 80013e2:	2101      	movs	r1, #1
 80013e4:	2001      	movs	r0, #1
 80013e6:	f000 fe47 	bl	8002078 <ControlLight>
				lightsActivated = true;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <TwoLanePed+0x7c4>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
			}
			if(button.LeftPed){
 80013f0:	793b      	ldrb	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <TwoLanePed+0x760>
				action.LeftPedWaiting = true;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <TwoLanePed+0x7c8>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	705a      	strb	r2, [r3, #1]
			}
			if(button.TopPed){
 80013fc:	797b      	ldrb	r3, [r7, #5]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <TwoLanePed+0x76c>
				action.TopPedWaiting = true;
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <TwoLanePed+0x7c8>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
			}

			if(action.LeftPedWaiting){
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <TwoLanePed+0x7c8>)
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <TwoLanePed+0x77c>
				nextState = V_P_Active;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <TwoLanePed+0x7cc>)
 8001412:	2203      	movs	r2, #3
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	e002      	b.n	800141e <TwoLanePed+0x782>
			}else{
				nextState = V_Active;
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <TwoLanePed+0x7cc>)
 800141a:	2202      	movs	r2, #2
 800141c:	701a      	strb	r2, [r3, #0]
			}

			if(!delaySent){
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <TwoLanePed+0x7d0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d014      	beq.n	8001456 <TwoLanePed+0x7ba>
				action.KeepStateFor = YELLOW_DELAY;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <TwoLanePed+0x7c8>)
 800142e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001432:	809a      	strh	r2, [r3, #4]
				action.StartTimerForNextState = true;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <TwoLanePed+0x7c8>)
 8001436:	2201      	movs	r2, #1
 8001438:	709a      	strb	r2, [r3, #2]
				delaySent = true;
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <TwoLanePed+0x7d0>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001440:	e009      	b.n	8001456 <TwoLanePed+0x7ba>
			break;
 8001442:	bf00      	nop
 8001444:	e008      	b.n	8001458 <TwoLanePed+0x7bc>
			break;
 8001446:	bf00      	nop
 8001448:	e006      	b.n	8001458 <TwoLanePed+0x7bc>
			break;
 800144a:	bf00      	nop
 800144c:	e004      	b.n	8001458 <TwoLanePed+0x7bc>
			break;
 800144e:	bf00      	nop
 8001450:	e002      	b.n	8001458 <TwoLanePed+0x7bc>
			break;
 8001452:	bf00      	nop
 8001454:	e000      	b.n	8001458 <TwoLanePed+0x7bc>
			break;
 8001456:	bf00      	nop
	}
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000091 	.word	0x20000091
 8001464:	20000094 	.word	0x20000094
 8001468:	20000090 	.word	0x20000090
 800146c:	20000092 	.word	0x20000092

08001470 <NoCarV>:

bool NoCarV(ButtonStates button){
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	463b      	mov	r3, r7
 8001478:	e883 0003 	stmia.w	r3, {r0, r1}
	return !(button.TopCar | button.BottomCar);
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	787b      	ldrb	r3, [r7, #1]
 8001480:	4313      	orrs	r3, r2
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf14      	ite	ne
 8001488:	2301      	movne	r3, #1
 800148a:	2300      	moveq	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f083 0301 	eor.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <NoCarH>:

bool NoCarH(ButtonStates button){
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	463b      	mov	r3, r7
 80014ae:	e883 0003 	stmia.w	r3, {r0, r1}
	return !(button.LeftCar | button.RightCar);
 80014b2:	783a      	ldrb	r2, [r7, #0]
 80014b4:	78bb      	ldrb	r3, [r7, #2]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f083 0301 	eor.w	r3, r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_DMA_Init+0x38>)
 80014e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <MX_DMA_Init+0x38>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6493      	str	r3, [r2, #72]	; 0x48
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_DMA_Init+0x38>)
 80014f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2105      	movs	r1, #5
 80014fe:	2039      	movs	r0, #57	; 0x39
 8001500:	f000 ffbc 	bl	800247c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001504:	2039      	movs	r0, #57	; 0x39
 8001506:	f000 ffd5 	bl	80024b4 <HAL_NVIC_EnableIRQ>

}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore */
  SemaphoreHandle = osSemaphoreNew(1, 1, &Semaphore_attributes);
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <MX_FREERTOS_Init+0x7c>)
 800151e:	2101      	movs	r1, #1
 8001520:	2001      	movs	r0, #1
 8001522:	f004 fcdb 	bl	8005edc <osSemaphoreNew>
 8001526:	4603      	mov	r3, r0
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <MX_FREERTOS_Init+0x80>)
 800152a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Delay */
  DelayHandle = osTimerNew(DelayCallback, osTimerOnce, NULL, &Delay_attributes);
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_FREERTOS_Init+0x84>)
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <MX_FREERTOS_Init+0x88>)
 8001534:	f004 fc28 	bl	8005d88 <osTimerNew>
 8001538:	4603      	mov	r3, r0
 800153a:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <MX_FREERTOS_Init+0x8c>)
 800153c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800153e:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <MX_FREERTOS_Init+0x90>)
 8001540:	2100      	movs	r1, #0
 8001542:	481a      	ldr	r0, [pc, #104]	; (80015ac <MX_FREERTOS_Init+0x94>)
 8001544:	f004 fb5e 	bl	8005c04 <osThreadNew>
 8001548:	4603      	mov	r3, r0
 800154a:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <MX_FREERTOS_Init+0x98>)
 800154c:	6013      	str	r3, [r2, #0]

  /* creation of toggleBlueLight */
  toggleBlueLightHandle = osThreadNew(BlueLight, NULL, &toggleBlueLight_attributes);
 800154e:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <MX_FREERTOS_Init+0x9c>)
 8001550:	2100      	movs	r1, #0
 8001552:	4819      	ldr	r0, [pc, #100]	; (80015b8 <MX_FREERTOS_Init+0xa0>)
 8001554:	f004 fb56 	bl	8005c04 <osThreadNew>
 8001558:	4603      	mov	r3, r0
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <MX_FREERTOS_Init+0xa4>)
 800155c:	6013      	str	r3, [r2, #0]

  /* creation of UpdateInputOutp */
  UpdateInputOutpHandle = osThreadNew(inputOutput, NULL, &UpdateInputOutp_attributes);
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <MX_FREERTOS_Init+0xa8>)
 8001560:	2100      	movs	r1, #0
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <MX_FREERTOS_Init+0xac>)
 8001564:	f004 fb4e 	bl	8005c04 <osThreadNew>
 8001568:	4603      	mov	r3, r0
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <MX_FREERTOS_Init+0xb0>)
 800156c:	6013      	str	r3, [r2, #0]

  /* creation of updateStateTask */
  updateStateTaskHandle = osThreadNew(updateState, NULL, &updateStateTask_attributes);
 800156e:	4a17      	ldr	r2, [pc, #92]	; (80015cc <MX_FREERTOS_Init+0xb4>)
 8001570:	2100      	movs	r1, #0
 8001572:	4817      	ldr	r0, [pc, #92]	; (80015d0 <MX_FREERTOS_Init+0xb8>)
 8001574:	f004 fb46 	bl	8005c04 <osThreadNew>
 8001578:	4603      	mov	r3, r0
 800157a:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <MX_FREERTOS_Init+0xbc>)
 800157c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  //initTrafficLogic(PedOneLane);
  //initTrafficLogic(NoPedTwoLane);
  initTrafficLogic(PedTwoLane);
 800157e:	2002      	movs	r0, #2
 8001580:	f7ff f814 	bl	80005ac <initTrafficLogic>
  TrafficAction = getTrafficAction();
 8001584:	f7ff f86a 	bl	800065c <getTrafficAction>
 8001588:	4603      	mov	r3, r0
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <MX_FREERTOS_Init+0xc0>)
 800158c:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	08009f1c 	.word	0x08009f1c
 8001598:	200000c8 	.word	0x200000c8
 800159c:	08009f0c 	.word	0x08009f0c
 80015a0:	080017b9 	.word	0x080017b9
 80015a4:	200000c4 	.word	0x200000c4
 80015a8:	08009e7c 	.word	0x08009e7c
 80015ac:	080015dd 	.word	0x080015dd
 80015b0:	200000b4 	.word	0x200000b4
 80015b4:	08009ea0 	.word	0x08009ea0
 80015b8:	080015ed 	.word	0x080015ed
 80015bc:	200000b8 	.word	0x200000b8
 80015c0:	08009ec4 	.word	0x08009ec4
 80015c4:	08001645 	.word	0x08001645
 80015c8:	200000bc 	.word	0x200000bc
 80015cc:	08009ee8 	.word	0x08009ee8
 80015d0:	08001701 	.word	0x08001701
 80015d4:	200000c0 	.word	0x200000c0
 80015d8:	200000b0 	.word	0x200000b0

080015dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f004 fb9f 	bl	8005d28 <osDelay>
 80015ea:	e7fb      	b.n	80015e4 <StartDefaultTask+0x8>

080015ec <BlueLight>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlueLight */
void BlueLight(void *argument)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueLight */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(TOGGLE_FREQ) ; // ms to ticks
 80015f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015f8:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80015fa:	f006 f9eb 	bl	80079d4 <xTaskGetTickCount>
 80015fe:	4603      	mov	r3, r0
 8001600:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if(TrafficAction->LeftPedWaiting){
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <BlueLight+0x54>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <BlueLight+0x26>
		  toggleBlueLeft();
 800160c:	f000 fd5c 	bl	80020c8 <toggleBlueLeft>
 8001610:	e003      	b.n	800161a <BlueLight+0x2e>
	  } else {
		  ControlLight(BLUE_PED_LEFT, OFF);
 8001612:	2100      	movs	r1, #0
 8001614:	2011      	movs	r0, #17
 8001616:	f000 fd2f 	bl	8002078 <ControlLight>
	  }
	  if(TrafficAction->TopPedWaiting){
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <BlueLight+0x54>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <BlueLight+0x3e>
		  toggleBlueTop();
 8001624:	f000 fd66 	bl	80020f4 <toggleBlueTop>
 8001628:	e003      	b.n	8001632 <BlueLight+0x46>
	  } else {
		  ControlLight(BLUE_PED_TOP, OFF);
 800162a:	2100      	movs	r1, #0
 800162c:	200b      	movs	r0, #11
 800162e:	f000 fd23 	bl	8002078 <ControlLight>
	  }
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	68f9      	ldr	r1, [r7, #12]
 8001638:	4618      	mov	r0, r3
 800163a:	f006 f807 	bl	800764c <vTaskDelayUntil>
	  if(TrafficAction->LeftPedWaiting){
 800163e:	e7e0      	b.n	8001602 <BlueLight+0x16>
 8001640:	200000b0 	.word	0x200000b0

08001644 <inputOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_inputOutput */
void inputOutput(void *argument)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN inputOutput */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20) ; // ms to ticks
 800164c:	2314      	movs	r3, #20
 800164e:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 8001650:	f006 f9c0 	bl	80079d4 <xTaskGetTickCount>
 8001654:	4603      	mov	r3, r0
 8001656:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreAcquire(SemaphoreHandle, 0)){
 8001658:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <inputOutput+0xb0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fcc6 	bl	8005ff0 <osSemaphoreAcquire>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d039      	beq.n	80016de <inputOutput+0x9a>
		  tempInputState = getInputState();
 800166a:	4c23      	ldr	r4, [pc, #140]	; (80016f8 <inputOutput+0xb4>)
 800166c:	463b      	mov	r3, r7
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff8a 	bl	8000588 <getInputState>
 8001674:	4622      	mov	r2, r4
 8001676:	463b      	mov	r3, r7
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	6010      	str	r0, [r2, #0]
 800167c:	889b      	ldrh	r3, [r3, #4]
 800167e:	8093      	strh	r3, [r2, #4]
		  if(tempInputState.BottomCar){
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <inputOutput+0xb4>)
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <inputOutput+0x4a>
			  inputState.BottomCar = true;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <inputOutput+0xb8>)
 800168a:	2201      	movs	r2, #1
 800168c:	705a      	strb	r2, [r3, #1]
		  }
		  if(tempInputState.LeftCar){
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <inputOutput+0xb4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <inputOutput+0x58>
			  inputState.LeftCar = true;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <inputOutput+0xb8>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
		  }
		  if(tempInputState.LeftPed){
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <inputOutput+0xb4>)
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <inputOutput+0x66>
			  inputState.LeftPed = true;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <inputOutput+0xb8>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	711a      	strb	r2, [r3, #4]
		  }
		  if(tempInputState.RightCar){
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <inputOutput+0xb4>)
 80016ac:	789b      	ldrb	r3, [r3, #2]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <inputOutput+0x74>
			  inputState.RightCar = true;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <inputOutput+0xb8>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	709a      	strb	r2, [r3, #2]
		  }
		  if(tempInputState.TopCar){
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <inputOutput+0xb4>)
 80016ba:	78db      	ldrb	r3, [r3, #3]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <inputOutput+0x82>
			  inputState.TopCar = true;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <inputOutput+0xb8>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	70da      	strb	r2, [r3, #3]
		  }
		  if(tempInputState.TopPed){
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <inputOutput+0xb4>)
 80016c8:	795b      	ldrb	r3, [r3, #5]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <inputOutput+0x90>
			  inputState.TopPed = true;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <inputOutput+0xb8>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	715a      	strb	r2, [r3, #5]
		  }
		  osSemaphoreRelease(SemaphoreHandle);
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <inputOutput+0xb0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fcdb 	bl	8006094 <osSemaphoreRelease>
	  }
	  trafficInputs_Update();
 80016de:	f7fe fefb 	bl	80004d8 <trafficInputs_Update>

	  updateLights();
 80016e2:	f000 fcdf 	bl	80020a4 <updateLights>
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	6979      	ldr	r1, [r7, #20]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 ffad 	bl	800764c <vTaskDelayUntil>
	  if(osSemaphoreAcquire(SemaphoreHandle, 0)){
 80016f2:	e7b1      	b.n	8001658 <inputOutput+0x14>
 80016f4:	200000c8 	.word	0x200000c8
 80016f8:	200000a8 	.word	0x200000a8
 80016fc:	200000a0 	.word	0x200000a0

08001700 <updateState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateState */
void updateState(void *argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateState */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(200) ; // ms to ticks
 8001708:	23c8      	movs	r3, #200	; 0xc8
 800170a:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 800170c:	f006 f962 	bl	80079d4 <xTaskGetTickCount>
 8001710:	4603      	mov	r3, r0
 8001712:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  TrafficCrossing(inputState);
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <updateState+0xa4>)
 8001716:	e893 0003 	ldmia.w	r3, {r0, r1}
 800171a:	f7fe ff75 	bl	8000608 <TrafficCrossing>
	  if(TrafficAction->StartTimerForNextState){
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <updateState+0xa8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	789b      	ldrb	r3, [r3, #2]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d015      	beq.n	8001754 <updateState+0x54>
		  osTimerStart(DelayHandle, pdMS_TO_TICKS(TrafficAction->KeepStateFor));
 8001728:	4b20      	ldr	r3, [pc, #128]	; (80017ac <updateState+0xac>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <updateState+0xa8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	889b      	ldrh	r3, [r3, #4]
 8001732:	4619      	mov	r1, r3
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	fb01 f303 	mul.w	r3, r1, r3
 800173c:	491c      	ldr	r1, [pc, #112]	; (80017b0 <updateState+0xb0>)
 800173e:	fba1 1303 	umull	r1, r3, r1, r3
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	4619      	mov	r1, r3
 8001746:	4610      	mov	r0, r2
 8001748:	f004 fb9a 	bl	8005e80 <osTimerStart>
		  TrafficAction->StartTimerForNextState = false;
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <updateState+0xa8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	709a      	strb	r2, [r3, #2]
	  }
	  if(osSemaphoreAcquire(SemaphoreHandle, 0)){
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <updateState+0xb4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f004 fc48 	bl	8005ff0 <osSemaphoreAcquire>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d016      	beq.n	8001794 <updateState+0x94>
		  inputState.BottomCar = false;
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <updateState+0xa4>)
 8001768:	2200      	movs	r2, #0
 800176a:	705a      	strb	r2, [r3, #1]
		  inputState.LeftCar = false;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <updateState+0xa4>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		  inputState.LeftPed = false;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <updateState+0xa4>)
 8001774:	2200      	movs	r2, #0
 8001776:	711a      	strb	r2, [r3, #4]
		  inputState.RightCar = false;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <updateState+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	709a      	strb	r2, [r3, #2]
		  inputState.TopCar = false;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <updateState+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	70da      	strb	r2, [r3, #3]
		  inputState.TopPed = false;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <updateState+0xa4>)
 8001786:	2200      	movs	r2, #0
 8001788:	715a      	strb	r2, [r3, #5]

		  osSemaphoreRelease(SemaphoreHandle);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <updateState+0xb4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f004 fc80 	bl	8006094 <osSemaphoreRelease>
	  }
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	68f9      	ldr	r1, [r7, #12]
 800179a:	4618      	mov	r0, r3
 800179c:	f005 ff56 	bl	800764c <vTaskDelayUntil>
	  TrafficCrossing(inputState);
 80017a0:	e7b8      	b.n	8001714 <updateState+0x14>
 80017a2:	bf00      	nop
 80017a4:	200000a0 	.word	0x200000a0
 80017a8:	200000b0 	.word	0x200000b0
 80017ac:	200000c4 	.word	0x200000c4
 80017b0:	10624dd3 	.word	0x10624dd3
 80017b4:	200000c8 	.word	0x200000c8

080017b8 <DelayCallback>:
  /* USER CODE END updateState */
}

/* DelayCallback function */
void DelayCallback(void *argument)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DelayCallback */
	ActivateNextState();
 80017c0:	f7fe ff56 	bl	8000670 <ActivateNextState>
  /* USER CODE END DelayCallback */
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b54      	ldr	r3, [pc, #336]	; (8001934 <MX_GPIO_Init+0x168>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a53      	ldr	r2, [pc, #332]	; (8001934 <MX_GPIO_Init+0x168>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b51      	ldr	r3, [pc, #324]	; (8001934 <MX_GPIO_Init+0x168>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <MX_GPIO_Init+0x168>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <MX_GPIO_Init+0x168>)
 8001800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <MX_GPIO_Init+0x168>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b48      	ldr	r3, [pc, #288]	; (8001934 <MX_GPIO_Init+0x168>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a47      	ldr	r2, [pc, #284]	; (8001934 <MX_GPIO_Init+0x168>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b45      	ldr	r3, [pc, #276]	; (8001934 <MX_GPIO_Init+0x168>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b42      	ldr	r3, [pc, #264]	; (8001934 <MX_GPIO_Init+0x168>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a41      	ldr	r2, [pc, #260]	; (8001934 <MX_GPIO_Init+0x168>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <MX_GPIO_Init+0x168>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Reset_595_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f001 f9fa 	bl	8002c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001856:	4838      	ldr	r0, [pc, #224]	; (8001938 <MX_GPIO_Init+0x16c>)
 8001858:	f001 f9f4 	bl	8002c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	4836      	ldr	r0, [pc, #216]	; (800193c <MX_GPIO_Init+0x170>)
 8001862:	f001 f9ef 	bl	8002c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800186c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	482f      	ldr	r0, [pc, #188]	; (800193c <MX_GPIO_Init+0x170>)
 800187e:	f001 f81f 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Reset_595_Pin;
 8001882:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f001 f80f 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_CAR_Pin;
 80018a2:	2310      	movs	r3, #16
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_CAR_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4821      	ldr	r0, [pc, #132]	; (800193c <MX_GPIO_Init+0x170>)
 80018b6:	f001 f803 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STCP_595_Pin;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STCP_595_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	4819      	ldr	r0, [pc, #100]	; (8001938 <MX_GPIO_Init+0x16c>)
 80018d4:	f000 fff4 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_CAR_Pin|TL3_CAR_Pin|PL2_Switch_Pin;
 80018d8:	f44f 43c1 	mov.w	r3, #24704	; 0x6080
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <MX_GPIO_Init+0x16c>)
 80018ee:	f000 ffe7 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_595_Pin;
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_595_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <MX_GPIO_Init+0x170>)
 800190a:	f000 ffd9 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TL4_CAR_Pin|PL1_Switch_Pin;
 800190e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001918:	2301      	movs	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f000 ffcb 	bl	80028c0 <HAL_GPIO_Init>

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800

08001940 <hc595_init>:

#include "hc595.h"

static SPI_HandleTypeDef *SPI_Handle;

void hc595_init(SPI_HandleTypeDef *_hspi3){
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	SPI_Handle = _hspi3;
 8001948:	4a09      	ldr	r2, [pc, #36]	; (8001970 <hc595_init+0x30>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(Reset_595_GPIO_Port, Reset_595_Pin, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f001 f974 	bl	8002c44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Enable_595_GPIO_Port, Enable_595_Pin, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <hc595_init+0x34>)
 8001962:	f001 f96f 	bl	8002c44 <HAL_GPIO_WritePin>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200000cc 	.word	0x200000cc
 8001974:	48000800 	.word	0x48000800

08001978 <hc595_update>:
 *	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);
 * 	HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 * }
*/

void hc595_update(uint8_t* dataToSend){
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    HAL_SPI_Transmit_DMA(SPI_Handle, dataToSend, 3);
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <hc595_update+0x20>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2203      	movs	r2, #3
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fd69 	bl	8004460 <HAL_SPI_Transmit_DMA>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000cc 	.word	0x200000cc

0800199c <HAL_SPI_TxCpltCallback>:

// DMA Transfer Complete callback
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    if (hspi == SPI_Handle) {
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_SPI_TxCpltCallback+0x34>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d10b      	bne.n	80019c6 <HAL_SPI_TxCpltCallback+0x2a>
        HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b4:	4807      	ldr	r0, [pc, #28]	; (80019d4 <HAL_SPI_TxCpltCallback+0x38>)
 80019b6:	f001 f945 	bl	8002c44 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(STCP_595_GPIO_Port, STCP_595_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <HAL_SPI_TxCpltCallback+0x38>)
 80019c2:	f001 f93f 	bl	8002c44 <HAL_GPIO_WritePin>
    }
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000cc 	.word	0x200000cc
 80019d4:	48000400 	.word	0x48000400

080019d8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80019e0:	1d39      	adds	r1, r7, #4
 80019e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e6:	2201      	movs	r2, #1
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <__io_putchar+0x20>)
 80019ea:	f003 fb25 	bl	8005038 <HAL_UART_Transmit>

  return ch;
 80019ee:	687b      	ldr	r3, [r7, #4]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200001d0 	.word	0x200001d0

080019fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a00:	f000 fc44 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a04:	f000 f81c 	bl	8001a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a08:	f7ff fee0 	bl	80017cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001a0c:	f7ff fd66 	bl	80014dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a10:	f000 fb86 	bl	8002120 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001a14:	f000 f87e 	bl	8001b14 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  initTrafficLights(&hspi3);
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <main+0x3c>)
 8001a1a:	f000 fabf 	bl	8001f9c <initTrafficLights>
  init_TrafficInputs();
 8001a1e:	f7fe fd55 	bl	80004cc <init_TrafficInputs>
  printf("Init done\n");
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <main+0x40>)
 8001a24:	f007 fe40 	bl	80096a8 <puts>
  //Test_Program();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001a28:	f004 f8a2 	bl	8005b70 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001a2c:	f7ff fd74 	bl	8001518 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a30:	f004 f8c2 	bl	8005bb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001a34:	e7fe      	b.n	8001a34 <main+0x38>
 8001a36:	bf00      	nop
 8001a38:	200000d0 	.word	0x200000d0
 8001a3c:	08009e58 	.word	0x08009e58

08001a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b096      	sub	sp, #88	; 0x58
 8001a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	2244      	movs	r2, #68	; 0x44
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f007 fe32 	bl	80096b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a66:	f001 f913 	bl	8002c90 <HAL_PWREx_ControlVoltageScaling>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a70:	f000 f84a 	bl	8001b08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a74:	2302      	movs	r3, #2
 8001a76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a7e:	2310      	movs	r3, #16
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a82:	2302      	movs	r3, #2
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a86:	2302      	movs	r3, #2
 8001a88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a8e:	230a      	movs	r3, #10
 8001a90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a92:	2307      	movs	r3, #7
 8001a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 f94a 	bl	8002d3c <HAL_RCC_OscConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001aae:	f000 f82b 	bl	8001b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2104      	movs	r1, #4
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 fd12 	bl	80034f4 <HAL_RCC_ClockConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ad6:	f000 f817 	bl	8001b08 <Error_Handler>
  }
}
 8001ada:	bf00      	nop
 8001adc:	3758      	adds	r7, #88	; 0x58
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001af6:	f000 fbe9 	bl	80022cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40012c00 	.word	0x40012c00

08001b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0c:	b672      	cpsid	i
}
 8001b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <Error_Handler+0x8>
	...

08001b14 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <MX_SPI3_Init+0x78>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b32:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b46:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b62:	2207      	movs	r2, #7
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b6e:	2208      	movs	r2, #8
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_SPI3_Init+0x74>)
 8001b74:	f002 fbd0 	bl	8004318 <HAL_SPI_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b7e:	f7ff ffc3 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200000d0 	.word	0x200000d0
 8001b8c:	40003c00 	.word	0x40003c00

08001b90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a3a      	ldr	r2, [pc, #232]	; (8001c98 <HAL_SPI_MspInit+0x108>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d16d      	bne.n	8001c8e <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <HAL_SPI_MspInit+0x10c>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <HAL_SPI_MspInit+0x10c>)
 8001bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_SPI_MspInit+0x10c>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_SPI_MspInit+0x10c>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a33      	ldr	r2, [pc, #204]	; (8001c9c <HAL_SPI_MspInit+0x10c>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_SPI_MspInit+0x10c>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_SPI_MspInit+0x10c>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <HAL_SPI_MspInit+0x10c>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_SPI_MspInit+0x10c>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c0c:	2306      	movs	r3, #6
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4822      	ldr	r0, [pc, #136]	; (8001ca0 <HAL_SPI_MspInit+0x110>)
 8001c18:	f000 fe52 	bl	80028c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <HAL_SPI_MspInit+0x114>)
 8001c38:	f000 fe42 	bl	80028c0 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c3e:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_SPI_MspInit+0x11c>)
 8001c40:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c44:	2203      	movs	r2, #3
 8001c46:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c74:	f000 fc2c 	bl	80024d0 <HAL_DMA_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001c7e:	f7ff ff43 	bl	8001b08 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_SPI_MspInit+0x118>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40003c00 	.word	0x40003c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	48000800 	.word	0x48000800
 8001ca4:	48000400 	.word	0x48000400
 8001ca8:	20000134 	.word	0x20000134
 8001cac:	4002041c 	.word	0x4002041c

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	210f      	movs	r1, #15
 8001cea:	f06f 0001 	mvn.w	r0, #1
 8001cee:	f000 fbc5 	bl	800247c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_InitTick+0xc8>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	4a2d      	ldr	r2, [pc, #180]	; (8001dc8 <HAL_InitTick+0xc8>)
 8001d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d18:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_InitTick+0xc8>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d26:	f107 020c 	add.w	r2, r7, #12
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fda3 	bl	800387c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d36:	f001 fd8b 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8001d3a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3e:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <HAL_InitTick+0xcc>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	0c9b      	lsrs	r3, r3, #18
 8001d46:	3b01      	subs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_InitTick+0xd4>)
 8001d4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d56:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d70:	4817      	ldr	r0, [pc, #92]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d72:	f002 fe5f 	bl	8004a34 <HAL_TIM_Base_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d11b      	bne.n	8001dbc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d84:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <HAL_InitTick+0xd0>)
 8001d86:	f002 feb7 	bl	8004af8 <HAL_TIM_Base_Start_IT>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d111      	bne.n	8001dbc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d98:	2019      	movs	r0, #25
 8001d9a:	f000 fb8b 	bl	80024b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d808      	bhi.n	8001db6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	2019      	movs	r0, #25
 8001daa:	f000 fb67 	bl	800247c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_InitTick+0xd8>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e002      	b.n	8001dbc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3730      	adds	r7, #48	; 0x30
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	431bde83 	.word	0x431bde83
 8001dd0:	2000017c 	.word	0x2000017c
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	20000004 	.word	0x20000004

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <NMI_Handler+0x4>

08001de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>

08001dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e0e:	f002 fee3 	bl	8004bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000017c 	.word	0x2000017c

08001e1c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <DMA2_Channel2_IRQHandler+0x10>)
 8001e22:	f000 fc6d 	bl	8002700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000134 	.word	0x20000134

08001e30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e00a      	b.n	8001e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e42:	f3af 8000 	nop.w
 8001e46:	4601      	mov	r1, r0
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf0      	blt.n	8001e42 <_read+0x12>
  }

  return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e009      	b.n	8001e90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60ba      	str	r2, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fda7 	bl	80019d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf1      	blt.n	8001e7c <_write+0x12>
  }
  return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_close>:

int _close(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eca:	605a      	str	r2, [r3, #4]
  return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_isatty>:

int _isatty(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f007 fbc4 	bl	80096c8 <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20018000 	.word	0x20018000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	200001c8 	.word	0x200001c8
 8001f74:	20001cb0 	.word	0x20001cb0

08001f78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <initTrafficLights>:
};

static uint8_t buffer[3] = {0, 0, 0};
static bool lightsChanged;

void initTrafficLights(SPI_HandleTypeDef *_hspi3){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	lightsChanged = false;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <initTrafficLights+0x3c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
	hc595_init(_hspi3);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fcc8 	bl	8001940 <hc595_init>
	for(int i = 0; i < 3; i++){
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e007      	b.n	8001fc6 <initTrafficLights+0x2a>
		buffer[i] = 0;
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <initTrafficLights+0x40>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	ddf4      	ble.n	8001fb6 <initTrafficLights+0x1a>
	}
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200001cf 	.word	0x200001cf
 8001fdc:	200001cc 	.word	0x200001cc

08001fe0 <setLight>:

void setLight(LightConfig config, LightState state) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	e883 0003 	stmia.w	r3, {r0, r1}
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71fb      	strb	r3, [r7, #7]
    uint8_t currentMask = (1 << config.bitPosition);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	75fb      	strb	r3, [r7, #23]
    bool isLightCurrentlyOn = (buffer[config.bufferIndex] & currentMask) != 0;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <setLight+0x90>)
 8002000:	5cd2      	ldrb	r2, [r2, r3]
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	4013      	ands	r3, r2
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	75bb      	strb	r3, [r7, #22]
    bool isLightBeingTurnedOn = (state == ON);
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b01      	cmp	r3, #1
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	757b      	strb	r3, [r7, #21]

    if (isLightCurrentlyOn != isLightBeingTurnedOn) {
 800201e:	7dba      	ldrb	r2, [r7, #22]
 8002020:	7d7b      	ldrb	r3, [r7, #21]
 8002022:	429a      	cmp	r2, r3
 8002024:	d01d      	beq.n	8002062 <setLight+0x82>
        lightsChanged = true;
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <setLight+0x94>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]

        if (isLightBeingTurnedOn) {
 800202c:	7d7b      	ldrb	r3, [r7, #21]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <setLight+0x66>
            buffer[config.bufferIndex] |= currentMask;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <setLight+0x90>)
 8002036:	5cd1      	ldrb	r1, [r2, r3]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	7dfa      	ldrb	r2, [r7, #23]
 800203c:	430a      	orrs	r2, r1
 800203e:	b2d1      	uxtb	r1, r2
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <setLight+0x90>)
 8002042:	54d1      	strb	r1, [r2, r3]
        } else {
            buffer[config.bufferIndex] &= ~currentMask;
        }
    }
}
 8002044:	e00d      	b.n	8002062 <setLight+0x82>
            buffer[config.bufferIndex] &= ~currentMask;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4a09      	ldr	r2, [pc, #36]	; (8002070 <setLight+0x90>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	b25a      	sxtb	r2, r3
 800204e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002052:	43db      	mvns	r3, r3
 8002054:	b25b      	sxtb	r3, r3
 8002056:	4013      	ands	r3, r2
 8002058:	b25a      	sxtb	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	b2d1      	uxtb	r1, r2
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <setLight+0x90>)
 8002060:	54d1      	strb	r1, [r2, r3]
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200001cc 	.word	0x200001cc
 8002074:	200001cf 	.word	0x200001cf

08002078 <ControlLight>:


void ControlLight(int lightId, LightState state) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
    setLight(lightConfigs[lightId], state);
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	4906      	ldr	r1, [pc, #24]	; (80020a0 <ControlLight+0x28>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002092:	f7ff ffa5 	bl	8001fe0 <setLight>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08009f74 	.word	0x08009f74

080020a4 <updateLights>:

void updateLights(){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	if(lightsChanged){
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <updateLights+0x1c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <updateLights+0x18>
		hc595_update(buffer);
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <updateLights+0x20>)
 80020b2:	f7ff fc61 	bl	8001978 <hc595_update>
		lightsChanged = false;
 80020b6:	4b02      	ldr	r3, [pc, #8]	; (80020c0 <updateLights+0x1c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
	}
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200001cf 	.word	0x200001cf
 80020c4:	200001cc 	.word	0x200001cc

080020c8 <toggleBlueLeft>:

void toggleBlueLeft() {
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	buffer[2] ^= 0b00100000;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <toggleBlueLeft+0x24>)
 80020ce:	789b      	ldrb	r3, [r3, #2]
 80020d0:	f083 0320 	eor.w	r3, r3, #32
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <toggleBlueLeft+0x24>)
 80020d8:	709a      	strb	r2, [r3, #2]
	lightsChanged = true;
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <toggleBlueLeft+0x28>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	200001cc 	.word	0x200001cc
 80020f0:	200001cf 	.word	0x200001cf

080020f4 <toggleBlueTop>:

void toggleBlueTop() {
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
	buffer[1] ^= 0b00100000;
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <toggleBlueTop+0x24>)
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	f083 0320 	eor.w	r3, r3, #32
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <toggleBlueTop+0x24>)
 8002104:	705a      	strb	r2, [r3, #1]
	lightsChanged = true;
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <toggleBlueTop+0x28>)
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	200001cc 	.word	0x200001cc
 800211c:	200001cf 	.word	0x200001cf

08002120 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002126:	4a15      	ldr	r2, [pc, #84]	; (800217c <MX_USART2_UART_Init+0x5c>)
 8002128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <MX_USART2_UART_Init+0x58>)
 800212c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <MX_USART2_UART_Init+0x58>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002146:	220c      	movs	r2, #12
 8002148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <MX_USART2_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <MX_USART2_UART_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <MX_USART2_UART_Init+0x58>)
 8002164:	f002 ff1a 	bl	8004f9c <HAL_UART_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800216e:	f7ff fccb 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200001d0 	.word	0x200001d0
 800217c:	40004400 	.word	0x40004400

08002180 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b0ac      	sub	sp, #176	; 0xb0
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2288      	movs	r2, #136	; 0x88
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f007 fa89 	bl	80096b8 <memset>
  if(uartHandle->Instance==USART2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_UART_MspInit+0xb0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d13b      	bne.n	8002228 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021b0:	2302      	movs	r3, #2
 80021b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 fbef 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021c8:	f7ff fc9e 	bl	8001b08 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_UART_MspInit+0xb4>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_UART_MspInit+0xb4>)
 80021d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_UART_MspInit+0xb4>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_UART_MspInit+0xb4>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <HAL_UART_MspInit+0xb4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_UART_MspInit+0xb4>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021fc:	230c      	movs	r3, #12
 80021fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002214:	2307      	movs	r3, #7
 8002216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800221e:	4619      	mov	r1, r3
 8002220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002224:	f000 fb4c 	bl	80028c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002228:	bf00      	nop
 800222a:	37b0      	adds	r7, #176	; 0xb0
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40004400 	.word	0x40004400
 8002234:	40021000 	.word	0x40021000

08002238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002270 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800223c:	f7ff fe9c 	bl	8001f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <LoopForever+0x6>)
  ldr r1, =_edata
 8002242:	490d      	ldr	r1, [pc, #52]	; (8002278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002244:	4a0d      	ldr	r2, [pc, #52]	; (800227c <LoopForever+0xe>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002248:	e002      	b.n	8002250 <LoopCopyDataInit>

0800224a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800224c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224e:	3304      	adds	r3, #4

08002250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002254:	d3f9      	bcc.n	800224a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002258:	4c0a      	ldr	r4, [pc, #40]	; (8002284 <LoopForever+0x16>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800225c:	e001      	b.n	8002262 <LoopFillZerobss>

0800225e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002260:	3204      	adds	r2, #4

08002262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002264:	d3fb      	bcc.n	800225e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002266:	f007 fa35 	bl	80096d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800226a:	f7ff fbc7 	bl	80019fc <main>

0800226e <LoopForever>:

LoopForever:
    b LoopForever
 800226e:	e7fe      	b.n	800226e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002270:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002278:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800227c:	0800a014 	.word	0x0800a014
  ldr r2, =_sbss
 8002280:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002284:	20001cb0 	.word	0x20001cb0

08002288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC1_2_IRQHandler>
	...

0800228c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_Init+0x3c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <HAL_Init+0x3c>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a2:	2003      	movs	r0, #3
 80022a4:	f000 f8df 	bl	8002466 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a8:	200f      	movs	r0, #15
 80022aa:	f7ff fd29 	bl	8001d00 <HAL_InitTick>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	e001      	b.n	80022be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022ba:	f7ff fcf9 	bl	8001cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022be:	79fb      	ldrb	r3, [r7, #7]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40022000 	.word	0x40022000

080022cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x20>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x24>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_IncTick+0x24>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008
 80022f0:	20000258 	.word	0x20000258

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000258 	.word	0x20000258

0800230c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002328:	4013      	ands	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233e:	4a04      	ldr	r2, [pc, #16]	; (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	60d3      	str	r3, [r2, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <__NVIC_GetPriorityGrouping+0x18>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	f003 0307 	and.w	r3, r3, #7
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	2b00      	cmp	r3, #0
 8002380:	db0b      	blt.n	800239a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	4907      	ldr	r1, [pc, #28]	; (80023a8 <__NVIC_EnableIRQ+0x38>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2001      	movs	r0, #1
 8002392:	fa00 f202 	lsl.w	r2, r0, r2
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	; (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	; (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ff4c 	bl	800230c <__NVIC_SetPriorityGrouping>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800248e:	f7ff ff61 	bl	8002354 <__NVIC_GetPriorityGrouping>
 8002492:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	6978      	ldr	r0, [r7, #20]
 800249a:	f7ff ffb1 	bl	8002400 <NVIC_EncodePriority>
 800249e:	4602      	mov	r2, r0
 80024a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff80 	bl	80023ac <__NVIC_SetPriority>
}
 80024ac:	bf00      	nop
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff54 	bl	8002370 <__NVIC_EnableIRQ>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e098      	b.n	8002614 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_DMA_Init+0x150>)
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d80f      	bhi.n	800250e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b4b      	ldr	r3, [pc, #300]	; (8002624 <HAL_DMA_Init+0x154>)
 80024f6:	4413      	add	r3, r2
 80024f8:	4a4b      	ldr	r2, [pc, #300]	; (8002628 <HAL_DMA_Init+0x158>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	009a      	lsls	r2, r3, #2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_DMA_Init+0x15c>)
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
 800250c:	e00e      	b.n	800252c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	4b46      	ldr	r3, [pc, #280]	; (8002630 <HAL_DMA_Init+0x160>)
 8002516:	4413      	add	r3, r2
 8002518:	4a43      	ldr	r2, [pc, #268]	; (8002628 <HAL_DMA_Init+0x158>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	009a      	lsls	r2, r3, #2
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a42      	ldr	r2, [pc, #264]	; (8002634 <HAL_DMA_Init+0x164>)
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002546:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002586:	d039      	beq.n	80025fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_DMA_Init+0x15c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d11a      	bne.n	80025c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_DMA_Init+0x168>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f003 031c 	and.w	r3, r3, #28
 800259e:	210f      	movs	r1, #15
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4924      	ldr	r1, [pc, #144]	; (8002638 <HAL_DMA_Init+0x168>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_DMA_Init+0x168>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f003 031c 	and.w	r3, r3, #28
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	491d      	ldr	r1, [pc, #116]	; (8002638 <HAL_DMA_Init+0x168>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
 80025c6:	e019      	b.n	80025fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_DMA_Init+0x16c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f003 031c 	and.w	r3, r3, #28
 80025d4:	210f      	movs	r1, #15
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	4917      	ldr	r1, [pc, #92]	; (800263c <HAL_DMA_Init+0x16c>)
 80025de:	4013      	ands	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_DMA_Init+0x16c>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f003 031c 	and.w	r3, r3, #28
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	4911      	ldr	r1, [pc, #68]	; (800263c <HAL_DMA_Init+0x16c>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40020407 	.word	0x40020407
 8002624:	bffdfff8 	.word	0xbffdfff8
 8002628:	cccccccd 	.word	0xcccccccd
 800262c:	40020000 	.word	0x40020000
 8002630:	bffdfbf8 	.word	0xbffdfbf8
 8002634:	40020400 	.word	0x40020400
 8002638:	400200a8 	.word	0x400200a8
 800263c:	400204a8 	.word	0x400204a8

08002640 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_DMA_Start_IT+0x20>
 800265c:	2302      	movs	r3, #2
 800265e:	e04b      	b.n	80026f8 <HAL_DMA_Start_IT+0xb8>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d13a      	bne.n	80026ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f8e0 	bl	800285e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 020e 	orr.w	r2, r2, #14
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e00f      	b.n	80026d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0204 	bic.w	r2, r2, #4
 80026c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 020a 	orr.w	r2, r2, #10
 80026d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e005      	b.n	80026f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	f003 031c 	and.w	r3, r3, #28
 8002720:	2204      	movs	r2, #4
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d026      	beq.n	800277a <HAL_DMA_IRQHandler+0x7a>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d021      	beq.n	800277a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d107      	bne.n	8002754 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0204 	bic.w	r2, r2, #4
 8002752:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	f003 021c 	and.w	r2, r3, #28
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2104      	movs	r1, #4
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	2b00      	cmp	r3, #0
 800276e:	d071      	beq.n	8002854 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002778:	e06c      	b.n	8002854 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f003 031c 	and.w	r3, r3, #28
 8002782:	2202      	movs	r2, #2
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d02e      	beq.n	80027ec <HAL_DMA_IRQHandler+0xec>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d029      	beq.n	80027ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 020a 	bic.w	r2, r2, #10
 80027b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f003 021c 	and.w	r2, r3, #28
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2102      	movs	r1, #2
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d038      	beq.n	8002854 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80027ea:	e033      	b.n	8002854 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f003 031c 	and.w	r3, r3, #28
 80027f4:	2208      	movs	r2, #8
 80027f6:	409a      	lsls	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d02a      	beq.n	8002856 <HAL_DMA_IRQHandler+0x156>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d025      	beq.n	8002856 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 020e 	bic.w	r2, r2, #14
 8002818:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f003 021c 	and.w	r2, r3, #28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	2b00      	cmp	r3, #0
 800284a:	d004      	beq.n	8002856 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002854:	bf00      	nop
 8002856:	bf00      	nop
}
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	f003 021c 	and.w	r2, r3, #28
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f202 	lsl.w	r2, r1, r2
 800287e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b10      	cmp	r3, #16
 800288e:	d108      	bne.n	80028a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028a0:	e007      	b.n	80028b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	60da      	str	r2, [r3, #12]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ce:	e17f      	b.n	8002bd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8171 	beq.w	8002bca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d005      	beq.n	8002900 <HAL_GPIO_Init+0x40>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d130      	bne.n	8002962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002936:	2201      	movs	r2, #1
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0201 	and.w	r2, r3, #1
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b03      	cmp	r3, #3
 800296c:	d118      	bne.n	80029a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	08db      	lsrs	r3, r3, #3
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d017      	beq.n	80029dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	6939      	ldr	r1, [r7, #16]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80ac 	beq.w	8002bca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a76:	4a5e      	ldr	r2, [pc, #376]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <HAL_GPIO_Init+0x330>)
 8002a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a8a:	4a5a      	ldr	r2, [pc, #360]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ab4:	d025      	beq.n	8002b02 <HAL_GPIO_Init+0x242>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4f      	ldr	r2, [pc, #316]	; (8002bf8 <HAL_GPIO_Init+0x338>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01f      	beq.n	8002afe <HAL_GPIO_Init+0x23e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4e      	ldr	r2, [pc, #312]	; (8002bfc <HAL_GPIO_Init+0x33c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0x23a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4d      	ldr	r2, [pc, #308]	; (8002c00 <HAL_GPIO_Init+0x340>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x236>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4c      	ldr	r2, [pc, #304]	; (8002c04 <HAL_GPIO_Init+0x344>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00d      	beq.n	8002af2 <HAL_GPIO_Init+0x232>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4b      	ldr	r2, [pc, #300]	; (8002c08 <HAL_GPIO_Init+0x348>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <HAL_GPIO_Init+0x22e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <HAL_GPIO_Init+0x34c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_GPIO_Init+0x22a>
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	e00c      	b.n	8002b04 <HAL_GPIO_Init+0x244>
 8002aea:	2307      	movs	r3, #7
 8002aec:	e00a      	b.n	8002b04 <HAL_GPIO_Init+0x244>
 8002aee:	2305      	movs	r3, #5
 8002af0:	e008      	b.n	8002b04 <HAL_GPIO_Init+0x244>
 8002af2:	2304      	movs	r3, #4
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x244>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e004      	b.n	8002b04 <HAL_GPIO_Init+0x244>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_Init+0x244>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x244>
 8002b02:	2300      	movs	r3, #0
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	f002 0203 	and.w	r2, r2, #3
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	4093      	lsls	r3, r2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b14:	4937      	ldr	r1, [pc, #220]	; (8002bf4 <HAL_GPIO_Init+0x334>)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_GPIO_Init+0x350>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b46:	4a32      	ldr	r2, [pc, #200]	; (8002c10 <HAL_GPIO_Init+0x350>)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b4c:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <HAL_GPIO_Init+0x350>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b70:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <HAL_GPIO_Init+0x350>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <HAL_GPIO_Init+0x350>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_GPIO_Init+0x350>)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_GPIO_Init+0x350>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bc4:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <HAL_GPIO_Init+0x350>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f47f ae78 	bne.w	80028d0 <HAL_GPIO_Init+0x10>
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	48000400 	.word	0x48000400
 8002bfc:	48000800 	.word	0x48000800
 8002c00:	48000c00 	.word	0x48000c00
 8002c04:	48001000 	.word	0x48001000
 8002c08:	48001400 	.word	0x48001400
 8002c0c:	48001800 	.word	0x48001800
 8002c10:	40010400 	.word	0x40010400

08002c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e001      	b.n	8002c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
 8002c50:	4613      	mov	r3, r2
 8002c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c54:	787b      	ldrb	r3, [r7, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c60:	e002      	b.n	8002c68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9e:	d130      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cac:	d038      	beq.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2232      	movs	r2, #50	; 0x32
 8002cc4:	fb02 f303 	mul.w	r3, r2, r3
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0c9b      	lsrs	r3, r3, #18
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd4:	e002      	b.n	8002cdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce8:	d102      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f2      	bne.n	8002cd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfc:	d110      	bne.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e00f      	b.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d02:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0e:	d007      	beq.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d18:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40007000 	.word	0x40007000
 8002d34:	20000000 	.word	0x20000000
 8002d38:	431bde83 	.word	0x431bde83

08002d3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e3ca      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4e:	4b97      	ldr	r3, [pc, #604]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d58:	4b94      	ldr	r3, [pc, #592]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80e4 	beq.w	8002f38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_RCC_OscConfig+0x4a>
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	f040 808b 	bne.w	8002e94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	f040 8087 	bne.w	8002e94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d86:	4b89      	ldr	r3, [pc, #548]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_RCC_OscConfig+0x62>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e3a2      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1a      	ldr	r2, [r3, #32]
 8002da2:	4b82      	ldr	r3, [pc, #520]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <HAL_RCC_OscConfig+0x7c>
 8002dae:	4b7f      	ldr	r3, [pc, #508]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db6:	e005      	b.n	8002dc4 <HAL_RCC_OscConfig+0x88>
 8002db8:	4b7c      	ldr	r3, [pc, #496]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d223      	bcs.n	8002e10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fd87 	bl	80038e0 <RCC_SetFlashLatencyFromMSIRange>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e383      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ddc:	4b73      	ldr	r3, [pc, #460]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a72      	ldr	r2, [pc, #456]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002de2:	f043 0308 	orr.w	r3, r3, #8
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	496d      	ldr	r1, [pc, #436]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfa:	4b6c      	ldr	r3, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	4968      	ldr	r1, [pc, #416]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
 8002e0e:	e025      	b.n	8002e5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e10:	4b66      	ldr	r3, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e16:	f043 0308 	orr.w	r3, r3, #8
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b63      	ldr	r3, [pc, #396]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4960      	ldr	r1, [pc, #384]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	495b      	ldr	r1, [pc, #364]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fd47 	bl	80038e0 <RCC_SetFlashLatencyFromMSIRange>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e343      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e5c:	f000 fc4a 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b52      	ldr	r3, [pc, #328]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	4950      	ldr	r1, [pc, #320]	; (8002fb0 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	4a4e      	ldr	r2, [pc, #312]	; (8002fb4 <HAL_RCC_OscConfig+0x278>)
 8002e7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e7c:	4b4e      	ldr	r3, [pc, #312]	; (8002fb8 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe ff3d 	bl	8001d00 <HAL_InitTick>
 8002e86:	4603      	mov	r3, r0
 8002e88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d052      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	e327      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d032      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e9c:	4b43      	ldr	r3, [pc, #268]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a42      	ldr	r2, [pc, #264]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff fa24 	bl	80022f4 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb0:	f7ff fa20 	bl	80022f4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e310      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a36      	ldr	r2, [pc, #216]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002ed4:	f043 0308 	orr.w	r3, r3, #8
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4931      	ldr	r1, [pc, #196]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eec:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	492c      	ldr	r1, [pc, #176]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
 8002f00:	e01a      	b.n	8002f38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a29      	ldr	r2, [pc, #164]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f0e:	f7ff f9f1 	bl	80022f4 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f16:	f7ff f9ed 	bl	80022f4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e2dd      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x1da>
 8002f34:	e000      	b.n	8002f38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d074      	beq.n	800302e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x21a>
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d10e      	bne.n	8002f6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d10b      	bne.n	8002f6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d064      	beq.n	800302c <HAL_RCC_OscConfig+0x2f0>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d160      	bne.n	800302c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e2ba      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x24a>
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e026      	b.n	8002fd4 <HAL_RCC_OscConfig+0x298>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8e:	d115      	bne.n	8002fbc <HAL_RCC_OscConfig+0x280>
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a05      	ldr	r2, [pc, #20]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a02      	ldr	r2, [pc, #8]	; (8002fac <HAL_RCC_OscConfig+0x270>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e014      	b.n	8002fd4 <HAL_RCC_OscConfig+0x298>
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08009f2c 	.word	0x08009f2c
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	20000004 	.word	0x20000004
 8002fbc:	4ba0      	ldr	r3, [pc, #640]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a9f      	ldr	r2, [pc, #636]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b9d      	ldr	r3, [pc, #628]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a9c      	ldr	r2, [pc, #624]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7ff f98a 	bl	80022f4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7ff f986 	bl	80022f4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e276      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff6:	4b92      	ldr	r3, [pc, #584]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x2a8>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7ff f976 	bl	80022f4 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7ff f972 	bl	80022f4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e262      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800301e:	4b88      	ldr	r3, [pc, #544]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x2d0>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d060      	beq.n	80030fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d005      	beq.n	800304c <HAL_RCC_OscConfig+0x310>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d119      	bne.n	800307a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d116      	bne.n	800307a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800304c:	4b7c      	ldr	r3, [pc, #496]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_OscConfig+0x328>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e23f      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b76      	ldr	r3, [pc, #472]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	4973      	ldr	r1, [pc, #460]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003078:	e040      	b.n	80030fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d023      	beq.n	80030ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003082:	4b6f      	ldr	r3, [pc, #444]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6e      	ldr	r2, [pc, #440]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7ff f931 	bl	80022f4 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003096:	f7ff f92d 	bl	80022f4 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e21d      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a8:	4b65      	ldr	r3, [pc, #404]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b62      	ldr	r3, [pc, #392]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	495f      	ldr	r1, [pc, #380]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
 80030c8:	e018      	b.n	80030fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ca:	4b5d      	ldr	r3, [pc, #372]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5c      	ldr	r2, [pc, #368]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 80030d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7ff f90d 	bl	80022f4 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030de:	f7ff f909 	bl	80022f4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e1f9      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d03c      	beq.n	8003182 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01c      	beq.n	800314a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003110:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003116:	4a4a      	ldr	r2, [pc, #296]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7ff f8e8 	bl	80022f4 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7ff f8e4 	bl	80022f4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1d4      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800313a:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 800313c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ef      	beq.n	8003128 <HAL_RCC_OscConfig+0x3ec>
 8003148:	e01b      	b.n	8003182 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 800314c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003150:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7ff f8cb 	bl	80022f4 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003162:	f7ff f8c7 	bl	80022f4 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e1b7      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003174:	4b32      	ldr	r3, [pc, #200]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ef      	bne.n	8003162 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80a6 	beq.w	80032dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003190:	2300      	movs	r3, #0
 8003192:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003194:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10d      	bne.n	80031bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a0:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	4a26      	ldr	r2, [pc, #152]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031aa:	6593      	str	r3, [r2, #88]	; 0x58
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b8:	2301      	movs	r3, #1
 80031ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031bc:	4b21      	ldr	r3, [pc, #132]	; (8003244 <HAL_RCC_OscConfig+0x508>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d118      	bne.n	80031fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_OscConfig+0x508>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <HAL_RCC_OscConfig+0x508>)
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d4:	f7ff f88e 	bl	80022f4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031dc:	f7ff f88a 	bl	80022f4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e17a      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_RCC_OscConfig+0x508>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d108      	bne.n	8003214 <HAL_RCC_OscConfig+0x4d8>
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003212:	e029      	b.n	8003268 <HAL_RCC_OscConfig+0x52c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b05      	cmp	r3, #5
 800321a:	d115      	bne.n	8003248 <HAL_RCC_OscConfig+0x50c>
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	4a03      	ldr	r2, [pc, #12]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x52c>
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	40007000 	.word	0x40007000
 8003248:	4b9c      	ldr	r3, [pc, #624]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	4a9b      	ldr	r2, [pc, #620]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003258:	4b98      	ldr	r3, [pc, #608]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	4a97      	ldr	r2, [pc, #604]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003260:	f023 0304 	bic.w	r3, r3, #4
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003270:	f7ff f840 	bl	80022f4 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003276:	e00a      	b.n	800328e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7ff f83c 	bl	80022f4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e12a      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328e:	4b8b      	ldr	r3, [pc, #556]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ed      	beq.n	8003278 <HAL_RCC_OscConfig+0x53c>
 800329c:	e015      	b.n	80032ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7ff f829 	bl	80022f4 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7ff f825 	bl	80022f4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e113      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032bc:	4b7f      	ldr	r3, [pc, #508]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ed      	bne.n	80032a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ca:	7ffb      	ldrb	r3, [r7, #31]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d0:	4b7a      	ldr	r3, [pc, #488]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 80032d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d4:	4a79      	ldr	r2, [pc, #484]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 80032d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80fe 	beq.w	80034e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	f040 80d0 	bne.w	8003490 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032f0:	4b72      	ldr	r3, [pc, #456]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	429a      	cmp	r2, r3
 8003302:	d130      	bne.n	8003366 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	3b01      	subs	r3, #1
 8003310:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d127      	bne.n	8003366 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d11f      	bne.n	8003366 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003330:	2a07      	cmp	r2, #7
 8003332:	bf14      	ite	ne
 8003334:	2201      	movne	r2, #1
 8003336:	2200      	moveq	r2, #0
 8003338:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800333a:	4293      	cmp	r3, r2
 800333c:	d113      	bne.n	8003366 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	3b01      	subs	r3, #1
 800334c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d109      	bne.n	8003366 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	3b01      	subs	r3, #1
 8003360:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d06e      	beq.n	8003444 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d069      	beq.n	8003440 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800336c:	4b53      	ldr	r3, [pc, #332]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003378:	4b50      	ldr	r3, [pc, #320]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0ad      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003388:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a4b      	ldr	r2, [pc, #300]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 800338e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003392:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003394:	f7fe ffae 	bl	80022f4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe ffaa 	bl	80022f4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e09a      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ae:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ba:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <HAL_RCC_OscConfig+0x784>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033ca:	3a01      	subs	r2, #1
 80033cc:	0112      	lsls	r2, r2, #4
 80033ce:	4311      	orrs	r1, r2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033d4:	0212      	lsls	r2, r2, #8
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033dc:	0852      	lsrs	r2, r2, #1
 80033de:	3a01      	subs	r2, #1
 80033e0:	0552      	lsls	r2, r2, #21
 80033e2:	4311      	orrs	r1, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033e8:	0852      	lsrs	r2, r2, #1
 80033ea:	3a01      	subs	r2, #1
 80033ec:	0652      	lsls	r2, r2, #25
 80033ee:	4311      	orrs	r1, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f4:	0912      	lsrs	r2, r2, #4
 80033f6:	0452      	lsls	r2, r2, #17
 80033f8:	430a      	orrs	r2, r1
 80033fa:	4930      	ldr	r1, [pc, #192]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003400:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2d      	ldr	r2, [pc, #180]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800340c:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a2a      	ldr	r2, [pc, #168]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003416:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003418:	f7fe ff6c 	bl	80022f4 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe ff68 	bl	80022f4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e058      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800343e:	e050      	b.n	80034e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04f      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d148      	bne.n	80034e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a19      	ldr	r2, [pc, #100]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003466:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003468:	f7fe ff44 	bl	80022f4 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe ff40 	bl	80022f4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e030      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x734>
 800348e:	e028      	b.n	80034e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d023      	beq.n	80034de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a08      	ldr	r2, [pc, #32]	; (80034bc <HAL_RCC_OscConfig+0x780>)
 800349c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe ff27 	bl	80022f4 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a8:	e00c      	b.n	80034c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe ff23 	bl	80022f4 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d905      	bls.n	80034c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e013      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
 80034bc:	40021000 	.word	0x40021000
 80034c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_OscConfig+0x7b0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ec      	bne.n	80034aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_OscConfig+0x7b0>)
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	4905      	ldr	r1, [pc, #20]	; (80034ec <HAL_RCC_OscConfig+0x7b0>)
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_OscConfig+0x7b4>)
 80034d8:	4013      	ands	r3, r2
 80034da:	60cb      	str	r3, [r1, #12]
 80034dc:	e001      	b.n	80034e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	feeefffc 	.word	0xfeeefffc

080034f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0e7      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b75      	ldr	r3, [pc, #468]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d910      	bls.n	8003538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b72      	ldr	r3, [pc, #456]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 0207 	bic.w	r2, r3, #7
 800351e:	4970      	ldr	r1, [pc, #448]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b6e      	ldr	r3, [pc, #440]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0cf      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b66      	ldr	r3, [pc, #408]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003550:	429a      	cmp	r2, r3
 8003552:	d908      	bls.n	8003566 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003554:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4960      	ldr	r1, [pc, #384]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d04c      	beq.n	800360c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357a:	4b5a      	ldr	r3, [pc, #360]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d121      	bne.n	80035ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0a6      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003592:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d115      	bne.n	80035ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e09a      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035aa:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e08e      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e086      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4943      	ldr	r1, [pc, #268]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035dc:	f7fe fe8a 	bl	80022f4 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fe fe86 	bl	80022f4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e06e      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003624:	429a      	cmp	r2, r3
 8003626:	d208      	bcs.n	800363a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003628:	4b2e      	ldr	r3, [pc, #184]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	492b      	ldr	r1, [pc, #172]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800363a:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d210      	bcs.n	800366a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 0207 	bic.w	r2, r3, #7
 8003650:	4923      	ldr	r1, [pc, #140]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003658:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_RCC_ClockConfig+0x1ec>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d001      	beq.n	800366a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e036      	b.n	80036d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003676:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4918      	ldr	r1, [pc, #96]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4910      	ldr	r1, [pc, #64]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036a8:	f000 f824 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	490b      	ldr	r1, [pc, #44]	; (80036e8 <HAL_RCC_ClockConfig+0x1f4>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
 80036c4:	4a09      	ldr	r2, [pc, #36]	; (80036ec <HAL_RCC_ClockConfig+0x1f8>)
 80036c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1fc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fb17 	bl	8001d00 <HAL_InitTick>
 80036d2:	4603      	mov	r3, r0
 80036d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80036d6:	7afb      	ldrb	r3, [r7, #11]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40022000 	.word	0x40022000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08009f2c 	.word	0x08009f2c
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000004 	.word	0x20000004

080036f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003702:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x34>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d121      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d11e      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003728:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	e005      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003744:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003750:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003764:	e00a      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d102      	bne.n	8003772 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800376c:	4b25      	ldr	r3, [pc, #148]	; (8003804 <HAL_RCC_GetSysClockFreq+0x110>)
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	e004      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d101      	bne.n	800377c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003778:	4b23      	ldr	r3, [pc, #140]	; (8003808 <HAL_RCC_GetSysClockFreq+0x114>)
 800377a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d134      	bne.n	80037ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003782:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0xa6>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d003      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003798:	e005      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800379a:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_RCC_GetSysClockFreq+0x110>)
 800379c:	617b      	str	r3, [r7, #20]
      break;
 800379e:	e005      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037a0:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_RCC_GetSysClockFreq+0x114>)
 80037a2:	617b      	str	r3, [r7, #20]
      break;
 80037a4:	e002      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	617b      	str	r3, [r7, #20]
      break;
 80037aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	3301      	adds	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	fb03 f202 	mul.w	r2, r3, r2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_RCC_GetSysClockFreq+0x108>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	0e5b      	lsrs	r3, r3, #25
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	3301      	adds	r3, #1
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037ec:	69bb      	ldr	r3, [r7, #24]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3724      	adds	r7, #36	; 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	08009f44 	.word	0x08009f44
 8003804:	00f42400 	.word	0x00f42400
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003828:	f7ff fff0 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4904      	ldr	r1, [pc, #16]	; (800384c <HAL_RCC_GetPCLK1Freq+0x28>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	08009f3c 	.word	0x08009f3c

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003854:	f7ff ffda 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0adb      	lsrs	r3, r3, #11
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4904      	ldr	r1, [pc, #16]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	08009f3c 	.word	0x08009f3c

0800387c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	220f      	movs	r2, #15
 800388a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0203 	and.w	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_GetClockConfig+0x5c>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_RCC_GetClockConfig+0x60>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0207 	and.w	r2, r3, #7
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	601a      	str	r2, [r3, #0]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40022000 	.word	0x40022000

080038e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038ec:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038f8:	f7ff f9bc 	bl	8002c74 <HAL_PWREx_GetVoltageRange>
 80038fc:	6178      	str	r0, [r7, #20]
 80038fe:	e014      	b.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6593      	str	r3, [r2, #88]	; 0x58
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003918:	f7ff f9ac 	bl	8002c74 <HAL_PWREx_GetVoltageRange>
 800391c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003930:	d10b      	bne.n	800394a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d919      	bls.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2ba0      	cmp	r3, #160	; 0xa0
 800393c:	d902      	bls.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800393e:	2302      	movs	r3, #2
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	e013      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003944:	2301      	movs	r3, #1
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	e010      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d902      	bls.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003950:	2303      	movs	r3, #3
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	e00a      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d102      	bne.n	8003962 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800395c:	2302      	movs	r3, #2
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	e004      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b70      	cmp	r3, #112	; 0x70
 8003966:	d101      	bne.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003968:	2301      	movs	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 0207 	bic.w	r2, r3, #7
 8003974:	4909      	ldr	r1, [pc, #36]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	40022000 	.word	0x40022000

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039a8:	2300      	movs	r3, #0
 80039aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ac:	2300      	movs	r3, #0
 80039ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d041      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039c4:	d02a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ca:	d824      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039d0:	d008      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039d6:	d81e      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e0:	d010      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039e2:	e018      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039e4:	4b86      	ldr	r3, [pc, #536]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a85      	ldr	r2, [pc, #532]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039f0:	e015      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fabb 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a02:	e00c      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3320      	adds	r3, #32
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fba6 	bl	800415c <RCCEx_PLLSAI2_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	74fb      	strb	r3, [r7, #19]
      break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a24:	4b76      	ldr	r3, [pc, #472]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a32:	4973      	ldr	r1, [pc, #460]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d041      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a54:	d02a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a5a:	d824      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a60:	d008      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a66:	d81e      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a70:	d010      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a72:	e018      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a74:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a80:	e015      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fa73 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a92:	e00c      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3320      	adds	r3, #32
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb5e 	bl	800415c <RCCEx_PLLSAI2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac2:	494f      	ldr	r1, [pc, #316]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aca:	e001      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80a0 	beq.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ae2:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	4a40      	ldr	r2, [pc, #256]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	; 0x58
 8003b04:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b20:	f7fe fbe8 	bl	80022f4 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b26:	e009      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fe fbe4 	bl	80022f4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	74fb      	strb	r3, [r7, #19]
        break;
 8003b3a:	e005      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b3c:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d15c      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b4e:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01f      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d019      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b88:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe fba3 	bl	80022f4 <HAL_GetTick>
 8003bae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb0:	e00b      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fe fb9f 	bl	80022f4 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d902      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ec      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bee:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bf6:	e009      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
 8003bfc:	e006      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0c:	7c7b      	ldrb	r3, [r7, #17]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4b9e      	ldr	r3, [pc, #632]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	4a9d      	ldr	r2, [pc, #628]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c2a:	4b98      	ldr	r3, [pc, #608]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f023 0203 	bic.w	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	4994      	ldr	r1, [pc, #592]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c4c:	4b8f      	ldr	r3, [pc, #572]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 020c 	bic.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	498c      	ldr	r1, [pc, #560]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c6e:	4b87      	ldr	r3, [pc, #540]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	4983      	ldr	r1, [pc, #524]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c90:	4b7e      	ldr	r3, [pc, #504]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	497b      	ldr	r1, [pc, #492]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cb2:	4b76      	ldr	r3, [pc, #472]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc0:	4972      	ldr	r1, [pc, #456]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cd4:	4b6d      	ldr	r3, [pc, #436]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	496a      	ldr	r1, [pc, #424]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cf6:	4b65      	ldr	r3, [pc, #404]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	4961      	ldr	r1, [pc, #388]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d18:	4b5c      	ldr	r3, [pc, #368]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d26:	4959      	ldr	r1, [pc, #356]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	4950      	ldr	r1, [pc, #320]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	4948      	ldr	r1, [pc, #288]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	493f      	ldr	r1, [pc, #252]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d028      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003da0:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dae:	4937      	ldr	r1, [pc, #220]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dbe:	d106      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b32      	ldr	r3, [pc, #200]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a31      	ldr	r2, [pc, #196]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
 8003dcc:	e011      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd6:	d10c      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f8c8 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dfe:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	491f      	ldr	r1, [pc, #124]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e28:	60d3      	str	r3, [r2, #12]
 8003e2a:	e011      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f899 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d02b      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	4908      	ldr	r1, [pc, #32]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7a:	d109      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a02      	ldr	r2, [pc, #8]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e86:	60d3      	str	r3, [r2, #12]
 8003e88:	e014      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f867 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02f      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ece:	4928      	ldr	r1, [pc, #160]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ede:	d10d      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f844 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef0:	7cfb      	ldrb	r3, [r7, #19]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d014      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	74bb      	strb	r3, [r7, #18]
 8003efa:	e011      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3320      	adds	r3, #32
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f925 	bl	800415c <RCCEx_PLLSAI2_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3a:	490d      	ldr	r1, [pc, #52]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5e:	4904      	ldr	r1, [pc, #16]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f66:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000

08003f74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f82:	4b75      	ldr	r3, [pc, #468]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0203 	and.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10d      	bne.n	8003fba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d047      	beq.n	800404a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	e044      	b.n	800404a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d018      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0x86>
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d825      	bhi.n	8004018 <RCCEx_PLLSAI1_Config+0xa4>
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d002      	beq.n	8003fd6 <RCCEx_PLLSAI1_Config+0x62>
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d009      	beq.n	8003fe8 <RCCEx_PLLSAI1_Config+0x74>
 8003fd4:	e020      	b.n	8004018 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fd6:	4b60      	ldr	r3, [pc, #384]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11d      	bne.n	800401e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe6:	e01a      	b.n	800401e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fe8:	4b5b      	ldr	r3, [pc, #364]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff8:	e013      	b.n	8004022 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ffa:	4b57      	ldr	r3, [pc, #348]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10f      	bne.n	8004026 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004006:	4b54      	ldr	r3, [pc, #336]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004016:	e006      	b.n	8004026 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      break;
 800401c:	e004      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004026:	bf00      	nop
    }

    if(status == HAL_OK)
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800402e:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	3b01      	subs	r3, #1
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	430b      	orrs	r3, r1
 8004044:	4944      	ldr	r1, [pc, #272]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d17d      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004050:	4b41      	ldr	r3, [pc, #260]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a40      	ldr	r2, [pc, #256]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004056:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800405a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405c:	f7fe f94a 	bl	80022f4 <HAL_GetTick>
 8004060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004062:	e009      	b.n	8004078 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004064:	f7fe f946 	bl	80022f4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d902      	bls.n	8004078 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	73fb      	strb	r3, [r7, #15]
        break;
 8004076:	e005      	b.n	8004084 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004078:	4b37      	ldr	r3, [pc, #220]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ef      	bne.n	8004064 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d160      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d111      	bne.n	80040b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004090:	4b31      	ldr	r3, [pc, #196]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	0211      	lsls	r1, r2, #8
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68d2      	ldr	r2, [r2, #12]
 80040a6:	0912      	lsrs	r2, r2, #4
 80040a8:	0452      	lsls	r2, r2, #17
 80040aa:	430a      	orrs	r2, r1
 80040ac:	492a      	ldr	r1, [pc, #168]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	610b      	str	r3, [r1, #16]
 80040b2:	e027      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d112      	bne.n	80040e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6892      	ldr	r2, [r2, #8]
 80040ca:	0211      	lsls	r1, r2, #8
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6912      	ldr	r2, [r2, #16]
 80040d0:	0852      	lsrs	r2, r2, #1
 80040d2:	3a01      	subs	r2, #1
 80040d4:	0552      	lsls	r2, r2, #21
 80040d6:	430a      	orrs	r2, r1
 80040d8:	491f      	ldr	r1, [pc, #124]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	610b      	str	r3, [r1, #16]
 80040de:	e011      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6892      	ldr	r2, [r2, #8]
 80040f0:	0211      	lsls	r1, r2, #8
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6952      	ldr	r2, [r2, #20]
 80040f6:	0852      	lsrs	r2, r2, #1
 80040f8:	3a01      	subs	r2, #1
 80040fa:	0652      	lsls	r2, r2, #25
 80040fc:	430a      	orrs	r2, r1
 80040fe:	4916      	ldr	r1, [pc, #88]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800410e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fe f8f0 	bl	80022f4 <HAL_GetTick>
 8004114:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004116:	e009      	b.n	800412c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004118:	f7fe f8ec 	bl	80022f4 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	73fb      	strb	r3, [r7, #15]
          break;
 800412a:	e005      	b.n	8004138 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ef      	beq.n	8004118 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	4904      	ldr	r1, [pc, #16]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000

0800415c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800416a:	4b6a      	ldr	r3, [pc, #424]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004176:	4b67      	ldr	r3, [pc, #412]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0203 	and.w	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d10d      	bne.n	80041a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
       ||
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800418e:	4b61      	ldr	r3, [pc, #388]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
       ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d047      	beq.n	8004232 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e044      	b.n	8004232 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d018      	beq.n	80041e2 <RCCEx_PLLSAI2_Config+0x86>
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d825      	bhi.n	8004200 <RCCEx_PLLSAI2_Config+0xa4>
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d002      	beq.n	80041be <RCCEx_PLLSAI2_Config+0x62>
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d009      	beq.n	80041d0 <RCCEx_PLLSAI2_Config+0x74>
 80041bc:	e020      	b.n	8004200 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041be:	4b55      	ldr	r3, [pc, #340]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d11d      	bne.n	8004206 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ce:	e01a      	b.n	8004206 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041d0:	4b50      	ldr	r3, [pc, #320]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d116      	bne.n	800420a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e0:	e013      	b.n	800420a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041e2:	4b4c      	ldr	r3, [pc, #304]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ee:	4b49      	ldr	r3, [pc, #292]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041fe:	e006      	b.n	800420e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      break;
 8004204:	e004      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800420e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10d      	bne.n	8004232 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004216:	4b3f      	ldr	r3, [pc, #252]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	3b01      	subs	r3, #1
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	430b      	orrs	r3, r1
 800422c:	4939      	ldr	r1, [pc, #228]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d167      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004238:	4b36      	ldr	r3, [pc, #216]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a35      	ldr	r2, [pc, #212]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004244:	f7fe f856 	bl	80022f4 <HAL_GetTick>
 8004248:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800424a:	e009      	b.n	8004260 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800424c:	f7fe f852 	bl	80022f4 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d902      	bls.n	8004260 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	73fb      	strb	r3, [r7, #15]
        break;
 800425e:	e005      	b.n	800426c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004260:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ef      	bne.n	800424c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d14a      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d111      	bne.n	800429c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004278:	4b26      	ldr	r3, [pc, #152]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6892      	ldr	r2, [r2, #8]
 8004288:	0211      	lsls	r1, r2, #8
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68d2      	ldr	r2, [r2, #12]
 800428e:	0912      	lsrs	r2, r2, #4
 8004290:	0452      	lsls	r2, r2, #17
 8004292:	430a      	orrs	r2, r1
 8004294:	491f      	ldr	r1, [pc, #124]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	614b      	str	r3, [r1, #20]
 800429a:	e011      	b.n	80042c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	0211      	lsls	r1, r2, #8
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6912      	ldr	r2, [r2, #16]
 80042b2:	0852      	lsrs	r2, r2, #1
 80042b4:	3a01      	subs	r2, #1
 80042b6:	0652      	lsls	r2, r2, #25
 80042b8:	430a      	orrs	r2, r1
 80042ba:	4916      	ldr	r1, [pc, #88]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a13      	ldr	r2, [pc, #76]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fe f812 	bl	80022f4 <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042d2:	e009      	b.n	80042e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042d4:	f7fe f80e 	bl	80022f4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d902      	bls.n	80042e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	73fb      	strb	r3, [r7, #15]
          break;
 80042e6:	e005      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ef      	beq.n	80042d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	4904      	ldr	r1, [pc, #16]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000

08004318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e095      	b.n	8004456 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433a:	d009      	beq.n	8004350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	61da      	str	r2, [r3, #28]
 8004342:	e005      	b.n	8004350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fc10 	bl	8001b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004386:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004390:	d902      	bls.n	8004398 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e002      	b.n	800439e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800439c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043a6:	d007      	beq.n	80043b8 <HAL_SPI_Init+0xa0>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b0:	d002      	beq.n	80043b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	ea42 0103 	orr.w	r1, r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	f003 0204 	and.w	r2, r3, #4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004434:	ea42 0103 	orr.w	r1, r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_SPI_Transmit_DMA+0x20>
 800447c:	2302      	movs	r3, #2
 800447e:	e0d4      	b.n	800462a <HAL_SPI_Transmit_DMA+0x1ca>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d002      	beq.n	800449a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004494:	2302      	movs	r3, #2
 8004496:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004498:	e0c2      	b.n	8004620 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_SPI_Transmit_DMA+0x46>
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044aa:	e0b9      	b.n	8004620 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2203      	movs	r2, #3
 80044b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f6:	d10f      	bne.n	8004518 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004506:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004516:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	4a45      	ldr	r2, [pc, #276]	; (8004634 <HAL_SPI_Transmit_DMA+0x1d4>)
 800451e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	4a44      	ldr	r2, [pc, #272]	; (8004638 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	4a43      	ldr	r2, [pc, #268]	; (800463c <HAL_SPI_Transmit_DMA+0x1dc>)
 800452e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	2200      	movs	r2, #0
 8004536:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004546:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004550:	d82d      	bhi.n	80045ae <HAL_SPI_Transmit_DMA+0x14e>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455c:	d127      	bne.n	80045ae <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004562:	b29b      	uxth	r3, r3
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10f      	bne.n	800458c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800457a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004580:	b29b      	uxth	r3, r3
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	87da      	strh	r2, [r3, #62]	; 0x3e
 800458a:	e010      	b.n	80045ae <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800459a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3301      	adds	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	4619      	mov	r1, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80045c6:	f7fe f83b 	bl	8002640 <HAL_DMA_Start_IT>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	f043 0210 	orr.w	r2, r3, #16
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75fb      	strb	r3, [r7, #23]

    goto error;
 80045e0:	e01e      	b.n	8004620 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d007      	beq.n	8004600 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0220 	orr.w	r2, r2, #32
 800460e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0202 	orr.w	r2, r2, #2
 800461e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004628:	7dfb      	ldrb	r3, [r7, #23]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	0800470f 	.word	0x0800470f
 8004638:	08004669 	.word	0x08004669
 800463c:	0800472b 	.word	0x0800472b

08004640 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004676:	f7fd fe3d 	bl	80022f4 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b20      	cmp	r3, #32
 8004688:	d03b      	beq.n	8004702 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0220 	bic.w	r2, r2, #32
 8004698:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0202 	bic.w	r2, r2, #2
 80046a8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	2164      	movs	r1, #100	; 0x64
 80046ae:	6978      	ldr	r0, [r7, #20]
 80046b0:	f000 f97a 	bl	80049a8 <SPI_EndRxTxTransaction>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046be:	f043 0220 	orr.w	r2, r3, #32
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2200      	movs	r2, #0
 80046e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f7ff ffaa 	bl	8004654 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004700:	e002      	b.n	8004708 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004702:	6978      	ldr	r0, [r7, #20]
 8004704:	f7fd f94a 	bl	800199c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff ff8f 	bl	8004640 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0203 	bic.w	r2, r2, #3
 8004746:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474c:	f043 0210 	orr.w	r2, r3, #16
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff ff79 	bl	8004654 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800477c:	f7fd fdba 	bl	80022f4 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	4413      	add	r3, r2
 800478a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800478c:	f7fd fdb2 	bl	80022f4 <HAL_GetTick>
 8004790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004792:	4b39      	ldr	r3, [pc, #228]	; (8004878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	015b      	lsls	r3, r3, #5
 8004798:	0d1b      	lsrs	r3, r3, #20
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a2:	e054      	b.n	800484e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047aa:	d050      	beq.n	800484e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ac:	f7fd fda2 	bl	80022f4 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d902      	bls.n	80047c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d13d      	bne.n	800483e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047da:	d111      	bne.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e4:	d004      	beq.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ee:	d107      	bne.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004808:	d10f      	bne.n	800482a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e017      	b.n	800486e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3b01      	subs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d19b      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000000 	.word	0x20000000

0800487c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	; 0x28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800488e:	f7fd fd31 	bl	80022f4 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	4413      	add	r3, r2
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800489e:	f7fd fd29 	bl	80022f4 <HAL_GetTick>
 80048a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048ac:	4b3d      	ldr	r3, [pc, #244]	; (80049a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00da      	lsls	r2, r3, #3
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	0d1b      	lsrs	r3, r3, #20
 80048bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048c4:	e060      	b.n	8004988 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048cc:	d107      	bne.n	80048de <SPI_WaitFifoStateUntilTimeout+0x62>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e4:	d050      	beq.n	8004988 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048e6:	f7fd fd05 	bl	80022f4 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d902      	bls.n	80048fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d13d      	bne.n	8004978 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800490a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004914:	d111      	bne.n	800493a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491e:	d004      	beq.n	800492a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004928:	d107      	bne.n	800493a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004938:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004942:	d10f      	bne.n	8004964 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004962:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e010      	b.n	800499a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	3b01      	subs	r3, #1
 8004986:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4013      	ands	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d196      	bne.n	80048c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3728      	adds	r7, #40	; 0x28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000000 	.word	0x20000000

080049a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff ff5b 	bl	800487c <SPI_WaitFifoStateUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d0:	f043 0220 	orr.w	r2, r3, #32
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e027      	b.n	8004a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2200      	movs	r2, #0
 80049e4:	2180      	movs	r1, #128	; 0x80
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff fec0 	bl	800476c <SPI_WaitFlagStateUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f6:	f043 0220 	orr.w	r2, r3, #32
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e014      	b.n	8004a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7ff ff34 	bl	800487c <SPI_WaitFifoStateUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e000      	b.n	8004a2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e049      	b.n	8004ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f841 	bl	8004ae2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f000 f9da 	bl	8004e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d001      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e04f      	b.n	8004bb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <HAL_TIM_Base_Start_IT+0xc4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01d      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0x76>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3a:	d018      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0x76>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0x76>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00e      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0x76>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d009      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0x76>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1b      	ldr	r2, [pc, #108]	; (8004bcc <HAL_TIM_Base_Start_IT+0xd4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0x76>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a19      	ldr	r2, [pc, #100]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d115      	bne.n	8004b9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b06      	cmp	r3, #6
 8004b7e:	d015      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0xb4>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b86:	d011      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b98:	e008      	b.n	8004bac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e000      	b.n	8004bae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40012c00 	.word	0x40012c00
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	40013400 	.word	0x40013400
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	00010007 	.word	0x00010007

08004bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d020      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0202 	mvn.w	r2, #2
 8004c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f8e4 	bl	8004df0 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f8d6 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8e7 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d020      	beq.n	8004c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01b      	beq.n	8004c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0204 	mvn.w	r2, #4
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f8be 	bl	8004df0 <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f8b0 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f8c1 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d020      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01b      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0208 	mvn.w	r2, #8
 8004ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f898 	bl	8004df0 <HAL_TIM_IC_CaptureCallback>
 8004cc0:	e005      	b.n	8004cce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f88a 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f89b 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d020      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0210 	mvn.w	r2, #16
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f872 	bl	8004df0 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f864 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f875 	bl	8004e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0201 	mvn.w	r2, #1
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc fed0 	bl	8001ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00c      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f906 	bl	8004f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00c      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f8fe 	bl	8004f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00c      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f834 	bl	8004e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00c      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0220 	mvn.w	r2, #32
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f8c6 	bl	8004f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <TIM_Base_SetConfig+0x114>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d00f      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3d      	ldr	r2, [pc, #244]	; (8004f44 <TIM_Base_SetConfig+0x118>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00b      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3c      	ldr	r2, [pc, #240]	; (8004f48 <TIM_Base_SetConfig+0x11c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3b      	ldr	r2, [pc, #236]	; (8004f4c <TIM_Base_SetConfig+0x120>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3a      	ldr	r2, [pc, #232]	; (8004f50 <TIM_Base_SetConfig+0x124>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d108      	bne.n	8004e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <TIM_Base_SetConfig+0x114>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01f      	beq.n	8004ec6 <TIM_Base_SetConfig+0x9a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d01b      	beq.n	8004ec6 <TIM_Base_SetConfig+0x9a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <TIM_Base_SetConfig+0x118>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d017      	beq.n	8004ec6 <TIM_Base_SetConfig+0x9a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2b      	ldr	r2, [pc, #172]	; (8004f48 <TIM_Base_SetConfig+0x11c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <TIM_Base_SetConfig+0x9a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <TIM_Base_SetConfig+0x120>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00f      	beq.n	8004ec6 <TIM_Base_SetConfig+0x9a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a29      	ldr	r2, [pc, #164]	; (8004f50 <TIM_Base_SetConfig+0x124>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00b      	beq.n	8004ec6 <TIM_Base_SetConfig+0x9a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a28      	ldr	r2, [pc, #160]	; (8004f54 <TIM_Base_SetConfig+0x128>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <TIM_Base_SetConfig+0x9a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a27      	ldr	r2, [pc, #156]	; (8004f58 <TIM_Base_SetConfig+0x12c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <TIM_Base_SetConfig+0x9a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <TIM_Base_SetConfig+0x130>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d108      	bne.n	8004ed8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <TIM_Base_SetConfig+0x114>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00f      	beq.n	8004f24 <TIM_Base_SetConfig+0xf8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <TIM_Base_SetConfig+0x124>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00b      	beq.n	8004f24 <TIM_Base_SetConfig+0xf8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a11      	ldr	r2, [pc, #68]	; (8004f54 <TIM_Base_SetConfig+0x128>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d007      	beq.n	8004f24 <TIM_Base_SetConfig+0xf8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a10      	ldr	r2, [pc, #64]	; (8004f58 <TIM_Base_SetConfig+0x12c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_Base_SetConfig+0xf8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <TIM_Base_SetConfig+0x130>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d103      	bne.n	8004f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	615a      	str	r2, [r3, #20]
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40013400 	.word	0x40013400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400
 8004f5c:	40014800 	.word	0x40014800

08004f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e040      	b.n	8005030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fd f8de 	bl	8002180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2224      	movs	r2, #36	; 0x24
 8004fc8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0201 	bic.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fb6a 	bl	80056bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8af 	bl	800514c <UART_SetConfig>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e01b      	b.n	8005030 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fbe9 	bl	8005800 <UART_CheckIdleState>
 800502e:	4603      	mov	r3, r0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504c:	2b20      	cmp	r3, #32
 800504e:	d178      	bne.n	8005142 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_UART_Transmit+0x24>
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e071      	b.n	8005144 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2221      	movs	r2, #33	; 0x21
 800506c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800506e:	f7fd f941 	bl	80022f4 <HAL_GetTick>
 8005072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508c:	d108      	bne.n	80050a0 <HAL_UART_Transmit+0x68>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	e003      	b.n	80050a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050a8:	e030      	b.n	800510c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2200      	movs	r2, #0
 80050b2:	2180      	movs	r1, #128	; 0x80
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fc4b 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e03c      	b.n	8005144 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	881a      	ldrh	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050dc:	b292      	uxth	r2, r2
 80050de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	3302      	adds	r3, #2
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	e008      	b.n	80050fa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	781a      	ldrb	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	b292      	uxth	r2, r2
 80050f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1c8      	bne.n	80050aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2200      	movs	r2, #0
 8005120:	2140      	movs	r1, #64	; 0x40
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fc14 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d004      	beq.n	8005138 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e005      	b.n	8005144 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e000      	b.n	8005144 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005142:	2302      	movs	r3, #2
  }
}
 8005144:	4618      	mov	r0, r3
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800514c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005150:	b08a      	sub	sp, #40	; 0x28
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	431a      	orrs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	431a      	orrs	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	4313      	orrs	r3, r2
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4ba4      	ldr	r3, [pc, #656]	; (800540c <UART_SetConfig+0x2c0>)
 800517c:	4013      	ands	r3, r2
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005184:	430b      	orrs	r3, r1
 8005186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a99      	ldr	r2, [pc, #612]	; (8005410 <UART_SetConfig+0x2c4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	4313      	orrs	r3, r2
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a90      	ldr	r2, [pc, #576]	; (8005414 <UART_SetConfig+0x2c8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d126      	bne.n	8005224 <UART_SetConfig+0xd8>
 80051d6:	4b90      	ldr	r3, [pc, #576]	; (8005418 <UART_SetConfig+0x2cc>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d81b      	bhi.n	800521c <UART_SetConfig+0xd0>
 80051e4:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0xa0>)
 80051e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ea:	bf00      	nop
 80051ec:	080051fd 	.word	0x080051fd
 80051f0:	0800520d 	.word	0x0800520d
 80051f4:	08005205 	.word	0x08005205
 80051f8:	08005215 	.word	0x08005215
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005202:	e116      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005204:	2302      	movs	r3, #2
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520a:	e112      	b.n	8005432 <UART_SetConfig+0x2e6>
 800520c:	2304      	movs	r3, #4
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005212:	e10e      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005214:	2308      	movs	r3, #8
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521a:	e10a      	b.n	8005432 <UART_SetConfig+0x2e6>
 800521c:	2310      	movs	r3, #16
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e106      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a7c      	ldr	r2, [pc, #496]	; (800541c <UART_SetConfig+0x2d0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d138      	bne.n	80052a0 <UART_SetConfig+0x154>
 800522e:	4b7a      	ldr	r3, [pc, #488]	; (8005418 <UART_SetConfig+0x2cc>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f003 030c 	and.w	r3, r3, #12
 8005238:	2b0c      	cmp	r3, #12
 800523a:	d82d      	bhi.n	8005298 <UART_SetConfig+0x14c>
 800523c:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <UART_SetConfig+0xf8>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	08005279 	.word	0x08005279
 8005248:	08005299 	.word	0x08005299
 800524c:	08005299 	.word	0x08005299
 8005250:	08005299 	.word	0x08005299
 8005254:	08005289 	.word	0x08005289
 8005258:	08005299 	.word	0x08005299
 800525c:	08005299 	.word	0x08005299
 8005260:	08005299 	.word	0x08005299
 8005264:	08005281 	.word	0x08005281
 8005268:	08005299 	.word	0x08005299
 800526c:	08005299 	.word	0x08005299
 8005270:	08005299 	.word	0x08005299
 8005274:	08005291 	.word	0x08005291
 8005278:	2300      	movs	r3, #0
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e0d8      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005280:	2302      	movs	r3, #2
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005286:	e0d4      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005288:	2304      	movs	r3, #4
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e0d0      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005290:	2308      	movs	r3, #8
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005296:	e0cc      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005298:	2310      	movs	r3, #16
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529e:	e0c8      	b.n	8005432 <UART_SetConfig+0x2e6>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a5e      	ldr	r2, [pc, #376]	; (8005420 <UART_SetConfig+0x2d4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d125      	bne.n	80052f6 <UART_SetConfig+0x1aa>
 80052aa:	4b5b      	ldr	r3, [pc, #364]	; (8005418 <UART_SetConfig+0x2cc>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052b4:	2b30      	cmp	r3, #48	; 0x30
 80052b6:	d016      	beq.n	80052e6 <UART_SetConfig+0x19a>
 80052b8:	2b30      	cmp	r3, #48	; 0x30
 80052ba:	d818      	bhi.n	80052ee <UART_SetConfig+0x1a2>
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d00a      	beq.n	80052d6 <UART_SetConfig+0x18a>
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d814      	bhi.n	80052ee <UART_SetConfig+0x1a2>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <UART_SetConfig+0x182>
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d008      	beq.n	80052de <UART_SetConfig+0x192>
 80052cc:	e00f      	b.n	80052ee <UART_SetConfig+0x1a2>
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d4:	e0ad      	b.n	8005432 <UART_SetConfig+0x2e6>
 80052d6:	2302      	movs	r3, #2
 80052d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052dc:	e0a9      	b.n	8005432 <UART_SetConfig+0x2e6>
 80052de:	2304      	movs	r3, #4
 80052e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e4:	e0a5      	b.n	8005432 <UART_SetConfig+0x2e6>
 80052e6:	2308      	movs	r3, #8
 80052e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ec:	e0a1      	b.n	8005432 <UART_SetConfig+0x2e6>
 80052ee:	2310      	movs	r3, #16
 80052f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f4:	e09d      	b.n	8005432 <UART_SetConfig+0x2e6>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a4a      	ldr	r2, [pc, #296]	; (8005424 <UART_SetConfig+0x2d8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d125      	bne.n	800534c <UART_SetConfig+0x200>
 8005300:	4b45      	ldr	r3, [pc, #276]	; (8005418 <UART_SetConfig+0x2cc>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800530a:	2bc0      	cmp	r3, #192	; 0xc0
 800530c:	d016      	beq.n	800533c <UART_SetConfig+0x1f0>
 800530e:	2bc0      	cmp	r3, #192	; 0xc0
 8005310:	d818      	bhi.n	8005344 <UART_SetConfig+0x1f8>
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d00a      	beq.n	800532c <UART_SetConfig+0x1e0>
 8005316:	2b80      	cmp	r3, #128	; 0x80
 8005318:	d814      	bhi.n	8005344 <UART_SetConfig+0x1f8>
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <UART_SetConfig+0x1d8>
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d008      	beq.n	8005334 <UART_SetConfig+0x1e8>
 8005322:	e00f      	b.n	8005344 <UART_SetConfig+0x1f8>
 8005324:	2300      	movs	r3, #0
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532a:	e082      	b.n	8005432 <UART_SetConfig+0x2e6>
 800532c:	2302      	movs	r3, #2
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005332:	e07e      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005334:	2304      	movs	r3, #4
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533a:	e07a      	b.n	8005432 <UART_SetConfig+0x2e6>
 800533c:	2308      	movs	r3, #8
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005342:	e076      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005344:	2310      	movs	r3, #16
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534a:	e072      	b.n	8005432 <UART_SetConfig+0x2e6>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a35      	ldr	r2, [pc, #212]	; (8005428 <UART_SetConfig+0x2dc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d12a      	bne.n	80053ac <UART_SetConfig+0x260>
 8005356:	4b30      	ldr	r3, [pc, #192]	; (8005418 <UART_SetConfig+0x2cc>)
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005364:	d01a      	beq.n	800539c <UART_SetConfig+0x250>
 8005366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536a:	d81b      	bhi.n	80053a4 <UART_SetConfig+0x258>
 800536c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005370:	d00c      	beq.n	800538c <UART_SetConfig+0x240>
 8005372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005376:	d815      	bhi.n	80053a4 <UART_SetConfig+0x258>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <UART_SetConfig+0x238>
 800537c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005380:	d008      	beq.n	8005394 <UART_SetConfig+0x248>
 8005382:	e00f      	b.n	80053a4 <UART_SetConfig+0x258>
 8005384:	2300      	movs	r3, #0
 8005386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538a:	e052      	b.n	8005432 <UART_SetConfig+0x2e6>
 800538c:	2302      	movs	r3, #2
 800538e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005392:	e04e      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005394:	2304      	movs	r3, #4
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539a:	e04a      	b.n	8005432 <UART_SetConfig+0x2e6>
 800539c:	2308      	movs	r3, #8
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a2:	e046      	b.n	8005432 <UART_SetConfig+0x2e6>
 80053a4:	2310      	movs	r3, #16
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053aa:	e042      	b.n	8005432 <UART_SetConfig+0x2e6>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <UART_SetConfig+0x2c4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d13a      	bne.n	800542c <UART_SetConfig+0x2e0>
 80053b6:	4b18      	ldr	r3, [pc, #96]	; (8005418 <UART_SetConfig+0x2cc>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053c4:	d01a      	beq.n	80053fc <UART_SetConfig+0x2b0>
 80053c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ca:	d81b      	bhi.n	8005404 <UART_SetConfig+0x2b8>
 80053cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d0:	d00c      	beq.n	80053ec <UART_SetConfig+0x2a0>
 80053d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d6:	d815      	bhi.n	8005404 <UART_SetConfig+0x2b8>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <UART_SetConfig+0x298>
 80053dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e0:	d008      	beq.n	80053f4 <UART_SetConfig+0x2a8>
 80053e2:	e00f      	b.n	8005404 <UART_SetConfig+0x2b8>
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	e022      	b.n	8005432 <UART_SetConfig+0x2e6>
 80053ec:	2302      	movs	r3, #2
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f2:	e01e      	b.n	8005432 <UART_SetConfig+0x2e6>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fa:	e01a      	b.n	8005432 <UART_SetConfig+0x2e6>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e016      	b.n	8005432 <UART_SetConfig+0x2e6>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e012      	b.n	8005432 <UART_SetConfig+0x2e6>
 800540c:	efff69f3 	.word	0xefff69f3
 8005410:	40008000 	.word	0x40008000
 8005414:	40013800 	.word	0x40013800
 8005418:	40021000 	.word	0x40021000
 800541c:	40004400 	.word	0x40004400
 8005420:	40004800 	.word	0x40004800
 8005424:	40004c00 	.word	0x40004c00
 8005428:	40005000 	.word	0x40005000
 800542c:	2310      	movs	r3, #16
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a9f      	ldr	r2, [pc, #636]	; (80056b4 <UART_SetConfig+0x568>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d17a      	bne.n	8005532 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800543c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005440:	2b08      	cmp	r3, #8
 8005442:	d824      	bhi.n	800548e <UART_SetConfig+0x342>
 8005444:	a201      	add	r2, pc, #4	; (adr r2, 800544c <UART_SetConfig+0x300>)
 8005446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544a:	bf00      	nop
 800544c:	08005471 	.word	0x08005471
 8005450:	0800548f 	.word	0x0800548f
 8005454:	08005479 	.word	0x08005479
 8005458:	0800548f 	.word	0x0800548f
 800545c:	0800547f 	.word	0x0800547f
 8005460:	0800548f 	.word	0x0800548f
 8005464:	0800548f 	.word	0x0800548f
 8005468:	0800548f 	.word	0x0800548f
 800546c:	08005487 	.word	0x08005487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005470:	f7fe f9d8 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005474:	61f8      	str	r0, [r7, #28]
        break;
 8005476:	e010      	b.n	800549a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005478:	4b8f      	ldr	r3, [pc, #572]	; (80056b8 <UART_SetConfig+0x56c>)
 800547a:	61fb      	str	r3, [r7, #28]
        break;
 800547c:	e00d      	b.n	800549a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547e:	f7fe f939 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 8005482:	61f8      	str	r0, [r7, #28]
        break;
 8005484:	e009      	b.n	800549a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548a:	61fb      	str	r3, [r7, #28]
        break;
 800548c:	e005      	b.n	800549a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005498:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80fb 	beq.w	8005698 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	4413      	add	r3, r2
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d305      	bcc.n	80054be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d903      	bls.n	80054c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054c4:	e0e8      	b.n	8005698 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	2200      	movs	r2, #0
 80054ca:	461c      	mov	r4, r3
 80054cc:	4615      	mov	r5, r2
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	022b      	lsls	r3, r5, #8
 80054d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054dc:	0222      	lsls	r2, r4, #8
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	6849      	ldr	r1, [r1, #4]
 80054e2:	0849      	lsrs	r1, r1, #1
 80054e4:	2000      	movs	r0, #0
 80054e6:	4688      	mov	r8, r1
 80054e8:	4681      	mov	r9, r0
 80054ea:	eb12 0a08 	adds.w	sl, r2, r8
 80054ee:	eb43 0b09 	adc.w	fp, r3, r9
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005500:	4650      	mov	r0, sl
 8005502:	4659      	mov	r1, fp
 8005504:	f7fa fe64 	bl	80001d0 <__aeabi_uldivmod>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4613      	mov	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005516:	d308      	bcc.n	800552a <UART_SetConfig+0x3de>
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551e:	d204      	bcs.n	800552a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	60da      	str	r2, [r3, #12]
 8005528:	e0b6      	b.n	8005698 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005530:	e0b2      	b.n	8005698 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553a:	d15e      	bne.n	80055fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800553c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005540:	2b08      	cmp	r3, #8
 8005542:	d828      	bhi.n	8005596 <UART_SetConfig+0x44a>
 8005544:	a201      	add	r2, pc, #4	; (adr r2, 800554c <UART_SetConfig+0x400>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	08005571 	.word	0x08005571
 8005550:	08005579 	.word	0x08005579
 8005554:	08005581 	.word	0x08005581
 8005558:	08005597 	.word	0x08005597
 800555c:	08005587 	.word	0x08005587
 8005560:	08005597 	.word	0x08005597
 8005564:	08005597 	.word	0x08005597
 8005568:	08005597 	.word	0x08005597
 800556c:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005570:	f7fe f958 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005574:	61f8      	str	r0, [r7, #28]
        break;
 8005576:	e014      	b.n	80055a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fe f96a 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 800557c:	61f8      	str	r0, [r7, #28]
        break;
 800557e:	e010      	b.n	80055a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b4d      	ldr	r3, [pc, #308]	; (80056b8 <UART_SetConfig+0x56c>)
 8005582:	61fb      	str	r3, [r7, #28]
        break;
 8005584:	e00d      	b.n	80055a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fe f8b5 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 800558a:	61f8      	str	r0, [r7, #28]
        break;
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	61fb      	str	r3, [r7, #28]
        break;
 8005594:	e005      	b.n	80055a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d077      	beq.n	8005698 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	005a      	lsls	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	441a      	add	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	d916      	bls.n	80055f2 <UART_SetConfig+0x4a6>
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ca:	d212      	bcs.n	80055f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f023 030f 	bic.w	r3, r3, #15
 80055d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	8afb      	ldrh	r3, [r7, #22]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	8afa      	ldrh	r2, [r7, #22]
 80055ee:	60da      	str	r2, [r3, #12]
 80055f0:	e052      	b.n	8005698 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055f8:	e04e      	b.n	8005698 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d827      	bhi.n	8005652 <UART_SetConfig+0x506>
 8005602:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <UART_SetConfig+0x4bc>)
 8005604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005608:	0800562d 	.word	0x0800562d
 800560c:	08005635 	.word	0x08005635
 8005610:	0800563d 	.word	0x0800563d
 8005614:	08005653 	.word	0x08005653
 8005618:	08005643 	.word	0x08005643
 800561c:	08005653 	.word	0x08005653
 8005620:	08005653 	.word	0x08005653
 8005624:	08005653 	.word	0x08005653
 8005628:	0800564b 	.word	0x0800564b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800562c:	f7fe f8fa 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005630:	61f8      	str	r0, [r7, #28]
        break;
 8005632:	e014      	b.n	800565e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005634:	f7fe f90c 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8005638:	61f8      	str	r0, [r7, #28]
        break;
 800563a:	e010      	b.n	800565e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800563c:	4b1e      	ldr	r3, [pc, #120]	; (80056b8 <UART_SetConfig+0x56c>)
 800563e:	61fb      	str	r3, [r7, #28]
        break;
 8005640:	e00d      	b.n	800565e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005642:	f7fe f857 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 8005646:	61f8      	str	r0, [r7, #28]
        break;
 8005648:	e009      	b.n	800565e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564e:	61fb      	str	r3, [r7, #28]
        break;
 8005650:	e005      	b.n	800565e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800565c:	bf00      	nop
    }

    if (pclk != 0U)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d019      	beq.n	8005698 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	085a      	lsrs	r2, r3, #1
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	d909      	bls.n	8005692 <UART_SetConfig+0x546>
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d205      	bcs.n	8005692 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60da      	str	r2, [r3, #12]
 8005690:	e002      	b.n	8005698 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3728      	adds	r7, #40	; 0x28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b2:	bf00      	nop
 80056b4:	40008000 	.word	0x40008000
 80056b8:	00f42400 	.word	0x00f42400

080056bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ba:	d10a      	bne.n	80057d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b098      	sub	sp, #96	; 0x60
 8005804:	af02      	add	r7, sp, #8
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005810:	f7fc fd70 	bl	80022f4 <HAL_GetTick>
 8005814:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b08      	cmp	r3, #8
 8005822:	d12e      	bne.n	8005882 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582c:	2200      	movs	r2, #0
 800582e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f88c 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d021      	beq.n	8005882 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005852:	653b      	str	r3, [r7, #80]	; 0x50
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585c:	647b      	str	r3, [r7, #68]	; 0x44
 800585e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800586a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e6      	bne.n	800583e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e062      	b.n	8005948 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d149      	bne.n	8005924 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005898:	2200      	movs	r2, #0
 800589a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f856 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d03c      	beq.n	8005924 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	623b      	str	r3, [r7, #32]
   return(result);
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c8:	633b      	str	r3, [r7, #48]	; 0x30
 80058ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058fc:	61fa      	str	r2, [r7, #28]
 80058fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	69b9      	ldr	r1, [r7, #24]
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	617b      	str	r3, [r7, #20]
   return(result);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e5      	bne.n	80058dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e011      	b.n	8005948 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3758      	adds	r7, #88	; 0x58
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4613      	mov	r3, r2
 800595e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005960:	e049      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005968:	d045      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596a:	f7fc fcc3 	bl	80022f4 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <UART_WaitOnFlagUntilTimeout+0x30>
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e048      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d031      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b08      	cmp	r3, #8
 800599e:	d110      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2208      	movs	r2, #8
 80059a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f838 	bl	8005a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2208      	movs	r2, #8
 80059b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e029      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d0:	d111      	bne.n	80059f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f81e 	bl	8005a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e00f      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4013      	ands	r3, r2
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	bf0c      	ite	eq
 8005a06:	2301      	moveq	r3, #1
 8005a08:	2300      	movne	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d0a6      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b095      	sub	sp, #84	; 0x54
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a44:	643b      	str	r3, [r7, #64]	; 0x40
 8005a46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e6      	bne.n	8005a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3308      	adds	r3, #8
 8005a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e5      	bne.n	8005a58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d118      	bne.n	8005ac6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f023 0310 	bic.w	r3, r3, #16
 8005aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6979      	ldr	r1, [r7, #20]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e6      	bne.n	8005a94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ada:	bf00      	nop
 8005adc:	3754      	adds	r7, #84	; 0x54
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <__NVIC_SetPriority>:
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	6039      	str	r1, [r7, #0]
 8005af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db0a      	blt.n	8005b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	490c      	ldr	r1, [pc, #48]	; (8005b34 <__NVIC_SetPriority+0x4c>)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	0112      	lsls	r2, r2, #4
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b10:	e00a      	b.n	8005b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	4908      	ldr	r1, [pc, #32]	; (8005b38 <__NVIC_SetPriority+0x50>)
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	3b04      	subs	r3, #4
 8005b20:	0112      	lsls	r2, r2, #4
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	440b      	add	r3, r1
 8005b26:	761a      	strb	r2, [r3, #24]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	e000e100 	.word	0xe000e100
 8005b38:	e000ed00 	.word	0xe000ed00

08005b3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <SysTick_Handler+0x1c>)
 8005b42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b44:	f002 fa7c 	bl	8008040 <xTaskGetSchedulerState>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d001      	beq.n	8005b52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b4e:	f003 fa1b 	bl	8008f88 <xPortSysTickHandler>
  }
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	e000e010 	.word	0xe000e010

08005b5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b60:	2100      	movs	r1, #0
 8005b62:	f06f 0004 	mvn.w	r0, #4
 8005b66:	f7ff ffbf 	bl	8005ae8 <__NVIC_SetPriority>
#endif
}
 8005b6a:	bf00      	nop
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b76:	f3ef 8305 	mrs	r3, IPSR
 8005b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b82:	f06f 0305 	mvn.w	r3, #5
 8005b86:	607b      	str	r3, [r7, #4]
 8005b88:	e00c      	b.n	8005ba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <osKernelInitialize+0x44>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b92:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <osKernelInitialize+0x44>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	e002      	b.n	8005ba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ba4:	687b      	ldr	r3, [r7, #4]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	2000025c 	.word	0x2000025c

08005bb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bbe:	f3ef 8305 	mrs	r3, IPSR
 8005bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8005bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bca:	f06f 0305 	mvn.w	r3, #5
 8005bce:	607b      	str	r3, [r7, #4]
 8005bd0:	e010      	b.n	8005bf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <osKernelStart+0x48>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d109      	bne.n	8005bee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005bda:	f7ff ffbf 	bl	8005b5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005bde:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <osKernelStart+0x48>)
 8005be0:	2202      	movs	r2, #2
 8005be2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005be4:	f001 fde4 	bl	80077b0 <vTaskStartScheduler>
      stat = osOK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	607b      	str	r3, [r7, #4]
 8005bec:	e002      	b.n	8005bf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bf4:	687b      	ldr	r3, [r7, #4]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	2000025c 	.word	0x2000025c

08005c04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08e      	sub	sp, #56	; 0x38
 8005c08:	af04      	add	r7, sp, #16
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c14:	f3ef 8305 	mrs	r3, IPSR
 8005c18:	617b      	str	r3, [r7, #20]
  return(result);
 8005c1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d17e      	bne.n	8005d1e <osThreadNew+0x11a>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d07b      	beq.n	8005d1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c2a:	2318      	movs	r3, #24
 8005c2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d045      	beq.n	8005cca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <osThreadNew+0x48>
        name = attr->name;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <osThreadNew+0x6e>
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b38      	cmp	r3, #56	; 0x38
 8005c64:	d805      	bhi.n	8005c72 <osThreadNew+0x6e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <osThreadNew+0x72>
        return (NULL);
 8005c72:	2300      	movs	r3, #0
 8005c74:	e054      	b.n	8005d20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	089b      	lsrs	r3, r3, #2
 8005c84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00e      	beq.n	8005cac <osThreadNew+0xa8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b5b      	cmp	r3, #91	; 0x5b
 8005c94:	d90a      	bls.n	8005cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <osThreadNew+0xa8>
        mem = 1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	e010      	b.n	8005cce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10c      	bne.n	8005cce <osThreadNew+0xca>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d108      	bne.n	8005cce <osThreadNew+0xca>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <osThreadNew+0xca>
          mem = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61bb      	str	r3, [r7, #24]
 8005cc8:	e001      	b.n	8005cce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d110      	bne.n	8005cf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cdc:	9202      	str	r2, [sp, #8]
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f001 fb0c 	bl	8007308 <xTaskCreateStatic>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	e013      	b.n	8005d1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d110      	bne.n	8005d1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f107 0310 	add.w	r3, r7, #16
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f001 fb57 	bl	80073c2 <xTaskCreate>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d001      	beq.n	8005d1e <osThreadNew+0x11a>
            hTask = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d1e:	693b      	ldr	r3, [r7, #16]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3728      	adds	r7, #40	; 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d30:	f3ef 8305 	mrs	r3, IPSR
 8005d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <osDelay+0x1c>
    stat = osErrorISR;
 8005d3c:	f06f 0305 	mvn.w	r3, #5
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e007      	b.n	8005d54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 fcfa 	bl	8007748 <vTaskDelay>
    }
  }

  return (stat);
 8005d54:	68fb      	ldr	r3, [r7, #12]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f002 ff30 	bl	8008bcc <pvTimerGetTimerID>
 8005d6c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	6852      	ldr	r2, [r2, #4]
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	4798      	blx	r3
  }
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08c      	sub	sp, #48	; 0x30
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	460b      	mov	r3, r1
 8005d96:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9c:	f3ef 8305 	mrs	r3, IPSR
 8005da0:	613b      	str	r3, [r7, #16]
  return(result);
 8005da2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d163      	bne.n	8005e70 <osTimerNew+0xe8>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d060      	beq.n	8005e70 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005dae:	2008      	movs	r0, #8
 8005db0:	f003 f97a 	bl	80090a8 <pvPortMalloc>
 8005db4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d059      	beq.n	8005e70 <osTimerNew+0xe8>
      callb->func = func;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <osTimerNew+0x4c>
        reload = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	e001      	b.n	8005dd8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ddc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01c      	beq.n	8005e22 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <osTimerNew+0x6e>
          name = attr->name;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d006      	beq.n	8005e0c <osTimerNew+0x84>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b2b      	cmp	r3, #43	; 0x2b
 8005e04:	d902      	bls.n	8005e0c <osTimerNew+0x84>
          mem = 1;
 8005e06:	2301      	movs	r3, #1
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	e00c      	b.n	8005e26 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d108      	bne.n	8005e26 <osTimerNew+0x9e>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <osTimerNew+0x9e>
            mem = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	e001      	b.n	8005e26 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d10c      	bne.n	8005e46 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <osTimerNew+0xf4>)
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e3e:	f002 fb46 	bl	80084ce <xTimerCreateStatic>
 8005e42:	6238      	str	r0, [r7, #32]
 8005e44:	e00b      	b.n	8005e5e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d108      	bne.n	8005e5e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <osTimerNew+0xf4>)
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	2101      	movs	r1, #1
 8005e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e58:	f002 fb18 	bl	800848c <xTimerCreate>
 8005e5c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <osTimerNew+0xe8>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <osTimerNew+0xe8>
        vPortFree (callb);
 8005e6a:	6978      	ldr	r0, [r7, #20]
 8005e6c:	f003 f9e8 	bl	8009240 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005e70:	6a3b      	ldr	r3, [r7, #32]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3728      	adds	r7, #40	; 0x28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	08005d5f 	.word	0x08005d5f

08005e80 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e8e:	f3ef 8305 	mrs	r3, IPSR
 8005e92:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e94:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <osTimerStart+0x22>
    stat = osErrorISR;
 8005e9a:	f06f 0305 	mvn.w	r3, #5
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e017      	b.n	8005ed2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <osTimerStart+0x30>
    stat = osErrorParameter;
 8005ea8:	f06f 0303 	mvn.w	r3, #3
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	e010      	b.n	8005ed2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	2104      	movs	r1, #4
 8005eba:	6938      	ldr	r0, [r7, #16]
 8005ebc:	f002 fb80 	bl	80085c0 <xTimerGenericCommand>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d102      	bne.n	8005ecc <osTimerStart+0x4c>
      stat = osOK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e002      	b.n	8005ed2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005ecc:	f06f 0302 	mvn.w	r3, #2
 8005ed0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005ed2:	697b      	ldr	r3, [r7, #20]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eec:	f3ef 8305 	mrs	r3, IPSR
 8005ef0:	613b      	str	r3, [r7, #16]
  return(result);
 8005ef2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d175      	bne.n	8005fe4 <osSemaphoreNew+0x108>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d072      	beq.n	8005fe4 <osSemaphoreNew+0x108>
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d86e      	bhi.n	8005fe4 <osSemaphoreNew+0x108>
    mem = -1;
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d015      	beq.n	8005f3e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d006      	beq.n	8005f28 <osSemaphoreNew+0x4c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b4f      	cmp	r3, #79	; 0x4f
 8005f20:	d902      	bls.n	8005f28 <osSemaphoreNew+0x4c>
        mem = 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	e00c      	b.n	8005f42 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d108      	bne.n	8005f42 <osSemaphoreNew+0x66>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <osSemaphoreNew+0x66>
          mem = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	e001      	b.n	8005f42 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f48:	d04c      	beq.n	8005fe4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d128      	bne.n	8005fa2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10a      	bne.n	8005f6c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	9200      	str	r2, [sp, #0]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2100      	movs	r1, #0
 8005f62:	2001      	movs	r0, #1
 8005f64:	f000 fa2a 	bl	80063bc <xQueueGenericCreateStatic>
 8005f68:	61f8      	str	r0, [r7, #28]
 8005f6a:	e005      	b.n	8005f78 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	2100      	movs	r1, #0
 8005f70:	2001      	movs	r0, #1
 8005f72:	f000 fa9b 	bl	80064ac <xQueueGenericCreate>
 8005f76:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d022      	beq.n	8005fc4 <osSemaphoreNew+0xe8>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01f      	beq.n	8005fc4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005f84:	2300      	movs	r3, #0
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	69f8      	ldr	r0, [r7, #28]
 8005f8c:	f000 fb56 	bl	800663c <xQueueGenericSend>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d016      	beq.n	8005fc4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005f96:	69f8      	ldr	r0, [r7, #28]
 8005f98:	f000 ffe2 	bl	8006f60 <vQueueDelete>
            hSemaphore = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	e010      	b.n	8005fc4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d108      	bne.n	8005fba <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	461a      	mov	r2, r3
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fad8 	bl	8006566 <xQueueCreateCountingSemaphoreStatic>
 8005fb6:	61f8      	str	r0, [r7, #28]
 8005fb8:	e004      	b.n	8005fc4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fb09 	bl	80065d4 <xQueueCreateCountingSemaphore>
 8005fc2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00c      	beq.n	8005fe4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	e001      	b.n	8005fdc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005fdc:	6979      	ldr	r1, [r7, #20]
 8005fde:	69f8      	ldr	r0, [r7, #28]
 8005fe0:	f001 f90a 	bl	80071f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005fe4:	69fb      	ldr	r3, [r7, #28]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d103      	bne.n	8006010 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006008:	f06f 0303 	mvn.w	r3, #3
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e039      	b.n	8006084 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006010:	f3ef 8305 	mrs	r3, IPSR
 8006014:	60fb      	str	r3, [r7, #12]
  return(result);
 8006016:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006018:	2b00      	cmp	r3, #0
 800601a:	d022      	beq.n	8006062 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006022:	f06f 0303 	mvn.w	r3, #3
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e02c      	b.n	8006084 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800602e:	f107 0308 	add.w	r3, r7, #8
 8006032:	461a      	mov	r2, r3
 8006034:	2100      	movs	r1, #0
 8006036:	6938      	ldr	r0, [r7, #16]
 8006038:	f000 ff12 	bl	8006e60 <xQueueReceiveFromISR>
 800603c:	4603      	mov	r3, r0
 800603e:	2b01      	cmp	r3, #1
 8006040:	d003      	beq.n	800604a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006042:	f06f 0302 	mvn.w	r3, #2
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e01c      	b.n	8006084 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d019      	beq.n	8006084 <osSemaphoreAcquire+0x94>
 8006050:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <osSemaphoreAcquire+0xa0>)
 8006052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	e010      	b.n	8006084 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6938      	ldr	r0, [r7, #16]
 8006066:	f000 fdef 	bl	8006c48 <xQueueSemaphoreTake>
 800606a:	4603      	mov	r3, r0
 800606c:	2b01      	cmp	r3, #1
 800606e:	d009      	beq.n	8006084 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006076:	f06f 0301 	mvn.w	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e002      	b.n	8006084 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800607e:	f06f 0302 	mvn.w	r3, #2
 8006082:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006084:	697b      	ldr	r3, [r7, #20]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	e000ed04 	.word	0xe000ed04

08006094 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d103      	bne.n	80060b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80060aa:	f06f 0303 	mvn.w	r3, #3
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	e02c      	b.n	800610c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b2:	f3ef 8305 	mrs	r3, IPSR
 80060b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80060b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01a      	beq.n	80060f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80060c2:	f107 0308 	add.w	r3, r7, #8
 80060c6:	4619      	mov	r1, r3
 80060c8:	6938      	ldr	r0, [r7, #16]
 80060ca:	f000 fc50 	bl	800696e <xQueueGiveFromISR>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d003      	beq.n	80060dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80060d4:	f06f 0302 	mvn.w	r3, #2
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	e017      	b.n	800610c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d014      	beq.n	800610c <osSemaphoreRelease+0x78>
 80060e2:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <osSemaphoreRelease+0x84>)
 80060e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	e00b      	b.n	800610c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80060f4:	2300      	movs	r3, #0
 80060f6:	2200      	movs	r2, #0
 80060f8:	2100      	movs	r1, #0
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f000 fa9e 	bl	800663c <xQueueGenericSend>
 8006100:	4603      	mov	r3, r0
 8006102:	2b01      	cmp	r3, #1
 8006104:	d002      	beq.n	800610c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006106:	f06f 0302 	mvn.w	r3, #2
 800610a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800610c:	697b      	ldr	r3, [r7, #20]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4a07      	ldr	r2, [pc, #28]	; (8006148 <vApplicationGetIdleTaskMemory+0x2c>)
 800612c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	4a06      	ldr	r2, [pc, #24]	; (800614c <vApplicationGetIdleTaskMemory+0x30>)
 8006132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2280      	movs	r2, #128	; 0x80
 8006138:	601a      	str	r2, [r3, #0]
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000260 	.word	0x20000260
 800614c:	200002bc 	.word	0x200002bc

08006150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4a07      	ldr	r2, [pc, #28]	; (800617c <vApplicationGetTimerTaskMemory+0x2c>)
 8006160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4a06      	ldr	r2, [pc, #24]	; (8006180 <vApplicationGetTimerTaskMemory+0x30>)
 8006166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800616e:	601a      	str	r2, [r3, #0]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	200004bc 	.word	0x200004bc
 8006180:	20000518 	.word	0x20000518

08006184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f103 0208 	add.w	r2, r3, #8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800619c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f103 0208 	add.w	r2, r3, #8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f103 0208 	add.w	r2, r3, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
}
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800623c:	d103      	bne.n	8006246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e00c      	b.n	8006260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3308      	adds	r3, #8
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	e002      	b.n	8006254 <vListInsert+0x2e>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	429a      	cmp	r2, r3
 800625e:	d2f6      	bcs.n	800624e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	601a      	str	r2, [r3, #0]
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	6892      	ldr	r2, [r2, #8]
 80062ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6852      	ldr	r2, [r2, #4]
 80062b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d103      	bne.n	80062cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	1e5a      	subs	r2, r3, #1
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006316:	f002 fda5 	bl	8008e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006322:	68f9      	ldr	r1, [r7, #12]
 8006324:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006326:	fb01 f303 	mul.w	r3, r1, r3
 800632a:	441a      	add	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	3b01      	subs	r3, #1
 8006348:	68f9      	ldr	r1, [r7, #12]
 800634a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	441a      	add	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	22ff      	movs	r2, #255	; 0xff
 800635a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	22ff      	movs	r2, #255	; 0xff
 8006362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d114      	bne.n	8006396 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01a      	beq.n	80063aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3310      	adds	r3, #16
 8006378:	4618      	mov	r0, r3
 800637a:	f001 fca3 	bl	8007cc4 <xTaskRemoveFromEventList>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d012      	beq.n	80063aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <xQueueGenericReset+0xcc>)
 8006386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	e009      	b.n	80063aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3310      	adds	r3, #16
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fef2 	bl	8006184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3324      	adds	r3, #36	; 0x24
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff feed 	bl	8006184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063aa:	f002 fd8b 	bl	8008ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063ae:	2301      	movs	r3, #1
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	e000ed04 	.word	0xe000ed04

080063bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08e      	sub	sp, #56	; 0x38
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <xQueueGenericCreateStatic+0x52>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <xQueueGenericCreateStatic+0x56>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <xQueueGenericCreateStatic+0x58>
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	623b      	str	r3, [r7, #32]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <xQueueGenericCreateStatic+0x7e>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <xQueueGenericCreateStatic+0x82>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <xQueueGenericCreateStatic+0x84>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	61fb      	str	r3, [r7, #28]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800645a:	2350      	movs	r3, #80	; 0x50
 800645c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b50      	cmp	r3, #80	; 0x50
 8006462:	d00a      	beq.n	800647a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	61bb      	str	r3, [r7, #24]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800647a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00d      	beq.n	80064a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800648e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4613      	mov	r3, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f83f 	bl	8006520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3730      	adds	r7, #48	; 0x30
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4613      	mov	r3, r2
 80064b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	3350      	adds	r3, #80	; 0x50
 80064e4:	4618      	mov	r0, r3
 80064e6:	f002 fddf 	bl	80090a8 <pvPortMalloc>
 80064ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d011      	beq.n	8006516 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	3350      	adds	r3, #80	; 0x50
 80064fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006504:	79fa      	ldrb	r2, [r7, #7]
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	4613      	mov	r3, r2
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f805 	bl	8006520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006516:	69bb      	ldr	r3, [r7, #24]
	}
 8006518:	4618      	mov	r0, r3
 800651a:	3720      	adds	r7, #32
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d103      	bne.n	800653c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e002      	b.n	8006542 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800654e:	2101      	movs	r1, #1
 8006550:	69b8      	ldr	r0, [r7, #24]
 8006552:	f7ff fecb 	bl	80062ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006566:	b580      	push	{r7, lr}
 8006568:	b08a      	sub	sp, #40	; 0x28
 800656a:	af02      	add	r7, sp, #8
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	61bb      	str	r3, [r7, #24]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	429a      	cmp	r2, r3
 8006594:	d90a      	bls.n	80065ac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	617b      	str	r3, [r7, #20]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80065ac:	2302      	movs	r3, #2
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	2100      	movs	r1, #0
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff ff00 	bl	80063bc <xQueueGenericCreateStatic>
 80065bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80065ca:	69fb      	ldr	r3, [r7, #28]
	}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3720      	adds	r7, #32
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	613b      	str	r3, [r7, #16]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d90a      	bls.n	8006618 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	60fb      	str	r3, [r7, #12]
}
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006618:	2202      	movs	r2, #2
 800661a:	2100      	movs	r1, #0
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff45 	bl	80064ac <xQueueGenericCreate>
 8006622:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006630:	697b      	ldr	r3, [r7, #20]
	}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08e      	sub	sp, #56	; 0x38
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800664a:	2300      	movs	r3, #0
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <xQueueGenericSend+0x32>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <xQueueGenericSend+0x40>
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <xQueueGenericSend+0x44>
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <xQueueGenericSend+0x46>
 8006680:	2300      	movs	r3, #0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <xQueueGenericSend+0x60>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006698:	bf00      	nop
 800669a:	e7fe      	b.n	800669a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d103      	bne.n	80066aa <xQueueGenericSend+0x6e>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <xQueueGenericSend+0x72>
 80066aa:	2301      	movs	r3, #1
 80066ac:	e000      	b.n	80066b0 <xQueueGenericSend+0x74>
 80066ae:	2300      	movs	r3, #0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <xQueueGenericSend+0x8e>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	623b      	str	r3, [r7, #32]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ca:	f001 fcb9 	bl	8008040 <xTaskGetSchedulerState>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <xQueueGenericSend+0x9e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <xQueueGenericSend+0xa2>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <xQueueGenericSend+0xa4>
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <xQueueGenericSend+0xbe>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	61fb      	str	r3, [r7, #28]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066fa:	f002 fbb3 	bl	8008e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006706:	429a      	cmp	r2, r3
 8006708:	d302      	bcc.n	8006710 <xQueueGenericSend+0xd4>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d129      	bne.n	8006764 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006716:	f000 fc5e 	bl	8006fd6 <prvCopyDataToQueue>
 800671a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	d010      	beq.n	8006746 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	3324      	adds	r3, #36	; 0x24
 8006728:	4618      	mov	r0, r3
 800672a:	f001 facb 	bl	8007cc4 <xTaskRemoveFromEventList>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d013      	beq.n	800675c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006734:	4b3f      	ldr	r3, [pc, #252]	; (8006834 <xQueueGenericSend+0x1f8>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	e00a      	b.n	800675c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	2b00      	cmp	r3, #0
 800674a:	d007      	beq.n	800675c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800674c:	4b39      	ldr	r3, [pc, #228]	; (8006834 <xQueueGenericSend+0x1f8>)
 800674e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800675c:	f002 fbb2 	bl	8008ec4 <vPortExitCritical>
				return pdPASS;
 8006760:	2301      	movs	r3, #1
 8006762:	e063      	b.n	800682c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d103      	bne.n	8006772 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800676a:	f002 fbab 	bl	8008ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800676e:	2300      	movs	r3, #0
 8006770:	e05c      	b.n	800682c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006778:	f107 0314 	add.w	r3, r7, #20
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fb05 	bl	8007d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006782:	2301      	movs	r3, #1
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006786:	f002 fb9d 	bl	8008ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800678a:	f001 f877 	bl	800787c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800678e:	f002 fb69 	bl	8008e64 <vPortEnterCritical>
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006798:	b25b      	sxtb	r3, r3
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800679e:	d103      	bne.n	80067a8 <xQueueGenericSend+0x16c>
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ae:	b25b      	sxtb	r3, r3
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b4:	d103      	bne.n	80067be <xQueueGenericSend+0x182>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067be:	f002 fb81 	bl	8008ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067c2:	1d3a      	adds	r2, r7, #4
 80067c4:	f107 0314 	add.w	r3, r7, #20
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 faf4 	bl	8007db8 <xTaskCheckForTimeOut>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d124      	bne.n	8006820 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067d8:	f000 fcf5 	bl	80071c6 <prvIsQueueFull>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d018      	beq.n	8006814 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	3310      	adds	r3, #16
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f001 fa1a 	bl	8007c24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067f2:	f000 fc80 	bl	80070f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067f6:	f001 f84f 	bl	8007898 <xTaskResumeAll>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f47f af7c 	bne.w	80066fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006802:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <xQueueGenericSend+0x1f8>)
 8006804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	e772      	b.n	80066fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006816:	f000 fc6e 	bl	80070f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800681a:	f001 f83d 	bl	8007898 <xTaskResumeAll>
 800681e:	e76c      	b.n	80066fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006822:	f000 fc68 	bl	80070f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006826:	f001 f837 	bl	8007898 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800682a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800682c:	4618      	mov	r0, r3
 800682e:	3738      	adds	r7, #56	; 0x38
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b090      	sub	sp, #64	; 0x40
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d103      	bne.n	8006874 <xQueueGenericSendFromISR+0x3c>
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <xQueueGenericSendFromISR+0x40>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <xQueueGenericSendFromISR+0x42>
 8006878:	2300      	movs	r3, #0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10a      	bne.n	8006894 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d103      	bne.n	80068a2 <xQueueGenericSendFromISR+0x6a>
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <xQueueGenericSendFromISR+0x6e>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <xQueueGenericSendFromISR+0x70>
 80068a6:	2300      	movs	r3, #0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	623b      	str	r3, [r7, #32]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068c2:	f002 fbb1 	bl	8009028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068c6:	f3ef 8211 	mrs	r2, BASEPRI
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	61fa      	str	r2, [r7, #28]
 80068dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d302      	bcc.n	80068f4 <xQueueGenericSendFromISR+0xbc>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d12f      	bne.n	8006954 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800690a:	f000 fb64 	bl	8006fd6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800690e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006916:	d112      	bne.n	800693e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d016      	beq.n	800694e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	3324      	adds	r3, #36	; 0x24
 8006924:	4618      	mov	r0, r3
 8006926:	f001 f9cd 	bl	8007cc4 <xTaskRemoveFromEventList>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00e      	beq.n	800694e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e007      	b.n	800694e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800693e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006942:	3301      	adds	r3, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	b25a      	sxtb	r2, r3
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800694e:	2301      	movs	r3, #1
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006952:	e001      	b.n	8006958 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006954:	2300      	movs	r3, #0
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006962:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006966:	4618      	mov	r0, r3
 8006968:	3740      	adds	r7, #64	; 0x40
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b08e      	sub	sp, #56	; 0x38
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	623b      	str	r3, [r7, #32]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00a      	beq.n	80069b6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	61fb      	str	r3, [r7, #28]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <xQueueGiveFromISR+0x58>
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <xQueueGiveFromISR+0x5c>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <xQueueGiveFromISR+0x5e>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61bb      	str	r3, [r7, #24]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069e6:	f002 fb1f 	bl	8009028 <vPortValidateInterruptPriority>
	__asm volatile
 80069ea:	f3ef 8211 	mrs	r2, BASEPRI
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	617a      	str	r2, [r7, #20]
 8006a00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006a02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d22b      	bcs.n	8006a6e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a30:	d112      	bne.n	8006a58 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d016      	beq.n	8006a68 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	3324      	adds	r3, #36	; 0x24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 f940 	bl	8007cc4 <xTaskRemoveFromEventList>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	e007      	b.n	8006a68 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	b25a      	sxtb	r2, r3
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6c:	e001      	b.n	8006a72 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	637b      	str	r3, [r7, #52]	; 0x34
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f383 8811 	msr	BASEPRI, r3
}
 8006a7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3738      	adds	r7, #56	; 0x38
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08c      	sub	sp, #48	; 0x30
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <xQueueReceive+0x30>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	623b      	str	r3, [r7, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <xQueueReceive+0x3e>
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <xQueueReceive+0x42>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <xQueueReceive+0x44>
 8006aca:	2300      	movs	r3, #0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xQueueReceive+0x5e>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	61fb      	str	r3, [r7, #28]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ae6:	f001 faab 	bl	8008040 <xTaskGetSchedulerState>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <xQueueReceive+0x6e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <xQueueReceive+0x72>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <xQueueReceive+0x74>
 8006afa:	2300      	movs	r3, #0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <xQueueReceive+0x8e>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	61bb      	str	r3, [r7, #24]
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b16:	f002 f9a5 	bl	8008e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01f      	beq.n	8006b66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b2a:	f000 fabe 	bl	80070aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	1e5a      	subs	r2, r3, #1
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00f      	beq.n	8006b5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	3310      	adds	r3, #16
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 f8be 	bl	8007cc4 <xTaskRemoveFromEventList>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b4e:	4b3d      	ldr	r3, [pc, #244]	; (8006c44 <xQueueReceive+0x1bc>)
 8006b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b5e:	f002 f9b1 	bl	8008ec4 <vPortExitCritical>
				return pdPASS;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e069      	b.n	8006c3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d103      	bne.n	8006b74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b6c:	f002 f9aa 	bl	8008ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e062      	b.n	8006c3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b7a:	f107 0310 	add.w	r3, r7, #16
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 f904 	bl	8007d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b84:	2301      	movs	r3, #1
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b88:	f002 f99c 	bl	8008ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b8c:	f000 fe76 	bl	800787c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b90:	f002 f968 	bl	8008e64 <vPortEnterCritical>
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b9a:	b25b      	sxtb	r3, r3
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba0:	d103      	bne.n	8006baa <xQueueReceive+0x122>
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb0:	b25b      	sxtb	r3, r3
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bb6:	d103      	bne.n	8006bc0 <xQueueReceive+0x138>
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc0:	f002 f980 	bl	8008ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bc4:	1d3a      	adds	r2, r7, #4
 8006bc6:	f107 0310 	add.w	r3, r7, #16
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f8f3 	bl	8007db8 <xTaskCheckForTimeOut>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d123      	bne.n	8006c20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bda:	f000 fade 	bl	800719a <prvIsQueueEmpty>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d017      	beq.n	8006c14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	3324      	adds	r3, #36	; 0x24
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	4611      	mov	r1, r2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 f819 	bl	8007c24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf4:	f000 fa7f 	bl	80070f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bf8:	f000 fe4e 	bl	8007898 <xTaskResumeAll>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d189      	bne.n	8006b16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c02:	4b10      	ldr	r3, [pc, #64]	; (8006c44 <xQueueReceive+0x1bc>)
 8006c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	e780      	b.n	8006b16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c16:	f000 fa6e 	bl	80070f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c1a:	f000 fe3d 	bl	8007898 <xTaskResumeAll>
 8006c1e:	e77a      	b.n	8006b16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c22:	f000 fa68 	bl	80070f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c26:	f000 fe37 	bl	8007898 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2c:	f000 fab5 	bl	800719a <prvIsQueueEmpty>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f43f af6f 	beq.w	8006b16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3730      	adds	r7, #48	; 0x30
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	e000ed04 	.word	0xe000ed04

08006c48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08e      	sub	sp, #56	; 0x38
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c52:	2300      	movs	r3, #0
 8006c54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	623b      	str	r3, [r7, #32]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	61fb      	str	r3, [r7, #28]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c98:	f001 f9d2 	bl	8008040 <xTaskGetSchedulerState>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d102      	bne.n	8006ca8 <xQueueSemaphoreTake+0x60>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <xQueueSemaphoreTake+0x64>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <xQueueSemaphoreTake+0x66>
 8006cac:	2300      	movs	r3, #0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	61bb      	str	r3, [r7, #24]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cc8:	f002 f8cc 	bl	8008e64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d024      	beq.n	8006d22 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	1e5a      	subs	r2, r3, #1
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006ce8:	f001 fb20 	bl	800832c <pvTaskIncrementMutexHeldCount>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00f      	beq.n	8006d1a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	3310      	adds	r3, #16
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 ffe0 	bl	8007cc4 <xTaskRemoveFromEventList>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d0a:	4b54      	ldr	r3, [pc, #336]	; (8006e5c <xQueueSemaphoreTake+0x214>)
 8006d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d1a:	f002 f8d3 	bl	8008ec4 <vPortExitCritical>
				return pdPASS;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e097      	b.n	8006e52 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d111      	bne.n	8006d4c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	617b      	str	r3, [r7, #20]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d44:	f002 f8be 	bl	8008ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e082      	b.n	8006e52 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d52:	f107 030c 	add.w	r3, r7, #12
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 f818 	bl	8007d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d60:	f002 f8b0 	bl	8008ec4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d64:	f000 fd8a 	bl	800787c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d68:	f002 f87c 	bl	8008e64 <vPortEnterCritical>
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d72:	b25b      	sxtb	r3, r3
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d78:	d103      	bne.n	8006d82 <xQueueSemaphoreTake+0x13a>
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d88:	b25b      	sxtb	r3, r3
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d8e:	d103      	bne.n	8006d98 <xQueueSemaphoreTake+0x150>
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d98:	f002 f894 	bl	8008ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d9c:	463a      	mov	r2, r7
 8006d9e:	f107 030c 	add.w	r3, r7, #12
 8006da2:	4611      	mov	r1, r2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 f807 	bl	8007db8 <xTaskCheckForTimeOut>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d132      	bne.n	8006e16 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006db2:	f000 f9f2 	bl	800719a <prvIsQueueEmpty>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d026      	beq.n	8006e0a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d109      	bne.n	8006dd8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006dc4:	f002 f84e 	bl	8008e64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 f955 	bl	800807c <xTaskPriorityInherit>
 8006dd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006dd4:	f002 f876 	bl	8008ec4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	3324      	adds	r3, #36	; 0x24
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 ff1f 	bl	8007c24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006de8:	f000 f985 	bl	80070f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dec:	f000 fd54 	bl	8007898 <xTaskResumeAll>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f47f af68 	bne.w	8006cc8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006df8:	4b18      	ldr	r3, [pc, #96]	; (8006e5c <xQueueSemaphoreTake+0x214>)
 8006dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	e75e      	b.n	8006cc8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e0c:	f000 f973 	bl	80070f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e10:	f000 fd42 	bl	8007898 <xTaskResumeAll>
 8006e14:	e758      	b.n	8006cc8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e18:	f000 f96d 	bl	80070f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e1c:	f000 fd3c 	bl	8007898 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e22:	f000 f9ba 	bl	800719a <prvIsQueueEmpty>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f43f af4d 	beq.w	8006cc8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006e34:	f002 f816 	bl	8008e64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e3a:	f000 f8b4 	bl	8006fa6 <prvGetDisinheritPriorityAfterTimeout>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 f9ee 	bl	8008228 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e4c:	f002 f83a 	bl	8008ec4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3738      	adds	r7, #56	; 0x38
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	e000ed04 	.word	0xe000ed04

08006e60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08e      	sub	sp, #56	; 0x38
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	623b      	str	r3, [r7, #32]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d103      	bne.n	8006e9a <xQueueReceiveFromISR+0x3a>
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <xQueueReceiveFromISR+0x3e>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <xQueueReceiveFromISR+0x40>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	61fb      	str	r3, [r7, #28]
}
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eba:	f002 f8b5 	bl	8009028 <vPortValidateInterruptPriority>
	__asm volatile
 8006ebe:	f3ef 8211 	mrs	r2, BASEPRI
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	61ba      	str	r2, [r7, #24]
 8006ed4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006ed6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d02f      	beq.n	8006f46 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ef4:	f000 f8d9 	bl	80070aa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	1e5a      	subs	r2, r3, #1
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f08:	d112      	bne.n	8006f30 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d016      	beq.n	8006f40 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	3310      	adds	r3, #16
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fed4 	bl	8007cc4 <xTaskRemoveFromEventList>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00e      	beq.n	8006f40 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e007      	b.n	8006f40 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f34:	3301      	adds	r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	b25a      	sxtb	r2, r3
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006f40:	2301      	movs	r3, #1
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34
 8006f44:	e001      	b.n	8006f4a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f383 8811 	msr	BASEPRI, r3
}
 8006f54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3738      	adds	r7, #56	; 0x38
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <vQueueDelete+0x28>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60bb      	str	r3, [r7, #8]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f95f 	bl	800724c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d102      	bne.n	8006f9e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f002 f951 	bl	8009240 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d006      	beq.n	8006fc4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	e001      	b.n	8006fc8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
	}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10d      	bne.n	8007010 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d14d      	bne.n	8007098 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f8a3 	bl	800814c <xTaskPriorityDisinherit>
 8007006:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	609a      	str	r2, [r3, #8]
 800700e:	e043      	b.n	8007098 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d119      	bne.n	800704a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6858      	ldr	r0, [r3, #4]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	461a      	mov	r2, r3
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	f002 fb7e 	bl	8009722 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	441a      	add	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	429a      	cmp	r2, r3
 800703e:	d32b      	bcc.n	8007098 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	605a      	str	r2, [r3, #4]
 8007048:	e026      	b.n	8007098 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68d8      	ldr	r0, [r3, #12]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	461a      	mov	r2, r3
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	f002 fb64 	bl	8009722 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	425b      	negs	r3, r3
 8007064:	441a      	add	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d207      	bcs.n	8007086 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	425b      	negs	r3, r3
 8007080:	441a      	add	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d105      	bne.n	8007098 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	3b01      	subs	r3, #1
 8007096:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070a0:	697b      	ldr	r3, [r7, #20]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d018      	beq.n	80070ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d303      	bcc.n	80070de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68d9      	ldr	r1, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	461a      	mov	r2, r3
 80070e8:	6838      	ldr	r0, [r7, #0]
 80070ea:	f002 fb1a 	bl	8009722 <memcpy>
	}
}
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070fe:	f001 feb1 	bl	8008e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007108:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800710a:	e011      	b.n	8007130 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	d012      	beq.n	800713a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3324      	adds	r3, #36	; 0x24
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fdd3 	bl	8007cc4 <xTaskRemoveFromEventList>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007124:	f000 feaa 	bl	8007e7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	3b01      	subs	r3, #1
 800712c:	b2db      	uxtb	r3, r3
 800712e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007134:	2b00      	cmp	r3, #0
 8007136:	dce9      	bgt.n	800710c <prvUnlockQueue+0x16>
 8007138:	e000      	b.n	800713c <prvUnlockQueue+0x46>
					break;
 800713a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	22ff      	movs	r2, #255	; 0xff
 8007140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007144:	f001 febe 	bl	8008ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007148:	f001 fe8c 	bl	8008e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007152:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007154:	e011      	b.n	800717a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d012      	beq.n	8007184 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3310      	adds	r3, #16
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fdae 	bl	8007cc4 <xTaskRemoveFromEventList>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800716e:	f000 fe85 	bl	8007e7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	3b01      	subs	r3, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800717a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	dce9      	bgt.n	8007156 <prvUnlockQueue+0x60>
 8007182:	e000      	b.n	8007186 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007184:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	22ff      	movs	r2, #255	; 0xff
 800718a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800718e:	f001 fe99 	bl	8008ec4 <vPortExitCritical>
}
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071a2:	f001 fe5f 	bl	8008e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071ae:	2301      	movs	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	e001      	b.n	80071b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071b8:	f001 fe84 	bl	8008ec4 <vPortExitCritical>

	return xReturn;
 80071bc:	68fb      	ldr	r3, [r7, #12]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071ce:	f001 fe49 	bl	8008e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071da:	429a      	cmp	r2, r3
 80071dc:	d102      	bne.n	80071e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071de:	2301      	movs	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e001      	b.n	80071e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071e8:	f001 fe6c 	bl	8008ec4 <vPortExitCritical>

	return xReturn;
 80071ec:	68fb      	ldr	r3, [r7, #12]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	e014      	b.n	8007232 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007208:	4a0f      	ldr	r2, [pc, #60]	; (8007248 <vQueueAddToRegistry+0x50>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007214:	490c      	ldr	r1, [pc, #48]	; (8007248 <vQueueAddToRegistry+0x50>)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800721e:	4a0a      	ldr	r2, [pc, #40]	; (8007248 <vQueueAddToRegistry+0x50>)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	4413      	add	r3, r2
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800722a:	e006      	b.n	800723a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3301      	adds	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b07      	cmp	r3, #7
 8007236:	d9e7      	bls.n	8007208 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000918 	.word	0x20000918

0800724c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	e016      	b.n	8007288 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800725a:	4a10      	ldr	r2, [pc, #64]	; (800729c <vQueueUnregisterQueue+0x50>)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	4413      	add	r3, r2
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d10b      	bne.n	8007282 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800726a:	4a0c      	ldr	r2, [pc, #48]	; (800729c <vQueueUnregisterQueue+0x50>)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2100      	movs	r1, #0
 8007270:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007274:	4a09      	ldr	r2, [pc, #36]	; (800729c <vQueueUnregisterQueue+0x50>)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	4413      	add	r3, r2
 800727c:	2200      	movs	r2, #0
 800727e:	605a      	str	r2, [r3, #4]
				break;
 8007280:	e006      	b.n	8007290 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b07      	cmp	r3, #7
 800728c:	d9e5      	bls.n	800725a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	20000918 	.word	0x20000918

080072a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072b0:	f001 fdd8 	bl	8008e64 <vPortEnterCritical>
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c0:	d103      	bne.n	80072ca <vQueueWaitForMessageRestricted+0x2a>
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d6:	d103      	bne.n	80072e0 <vQueueWaitForMessageRestricted+0x40>
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e0:	f001 fdf0 	bl	8008ec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d106      	bne.n	80072fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	3324      	adds	r3, #36	; 0x24
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fcb9 	bl	8007c6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072fa:	6978      	ldr	r0, [r7, #20]
 80072fc:	f7ff fefb 	bl	80070f6 <prvUnlockQueue>
	}
 8007300:	bf00      	nop
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08e      	sub	sp, #56	; 0x38
 800730c:	af04      	add	r7, sp, #16
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <xTaskCreateStatic+0x2a>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	623b      	str	r3, [r7, #32]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <xTaskCreateStatic+0x46>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	61fb      	str	r3, [r7, #28]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800734e:	235c      	movs	r3, #92	; 0x5c
 8007350:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b5c      	cmp	r3, #92	; 0x5c
 8007356:	d00a      	beq.n	800736e <xTaskCreateStatic+0x66>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	61bb      	str	r3, [r7, #24]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800736e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01e      	beq.n	80073b4 <xTaskCreateStatic+0xac>
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01b      	beq.n	80073b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007384:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	2202      	movs	r2, #2
 800738a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800738e:	2300      	movs	r3, #0
 8007390:	9303      	str	r3, [sp, #12]
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	9302      	str	r3, [sp, #8]
 8007396:	f107 0314 	add.w	r3, r7, #20
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f850 	bl	800744c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073ae:	f000 f8dd 	bl	800756c <prvAddNewTaskToReadyList>
 80073b2:	e001      	b.n	80073b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073b8:	697b      	ldr	r3, [r7, #20]
	}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3728      	adds	r7, #40	; 0x28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b08c      	sub	sp, #48	; 0x30
 80073c6:	af04      	add	r7, sp, #16
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	603b      	str	r3, [r7, #0]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 fe66 	bl	80090a8 <pvPortMalloc>
 80073dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00e      	beq.n	8007402 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073e4:	205c      	movs	r0, #92	; 0x5c
 80073e6:	f001 fe5f 	bl	80090a8 <pvPortMalloc>
 80073ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	631a      	str	r2, [r3, #48]	; 0x30
 80073f8:	e005      	b.n	8007406 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073fa:	6978      	ldr	r0, [r7, #20]
 80073fc:	f001 ff20 	bl	8009240 <vPortFree>
 8007400:	e001      	b.n	8007406 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d017      	beq.n	800743c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	2300      	movs	r3, #0
 8007418:	9303      	str	r3, [sp, #12]
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	9302      	str	r3, [sp, #8]
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68b9      	ldr	r1, [r7, #8]
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 f80e 	bl	800744c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007430:	69f8      	ldr	r0, [r7, #28]
 8007432:	f000 f89b 	bl	800756c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007436:	2301      	movs	r3, #1
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e002      	b.n	8007442 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800743c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007440:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007442:	69bb      	ldr	r3, [r7, #24]
	}
 8007444:	4618      	mov	r0, r3
 8007446:	3720      	adds	r7, #32
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	461a      	mov	r2, r3
 8007464:	21a5      	movs	r1, #165	; 0xa5
 8007466:	f002 f927 	bl	80096b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007474:	3b01      	subs	r3, #1
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f023 0307 	bic.w	r3, r3, #7
 8007482:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	617b      	str	r3, [r7, #20]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01f      	beq.n	80074ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074aa:	2300      	movs	r3, #0
 80074ac:	61fb      	str	r3, [r7, #28]
 80074ae:	e012      	b.n	80074d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	7819      	ldrb	r1, [r3, #0]
 80074b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	4413      	add	r3, r2
 80074be:	3334      	adds	r3, #52	; 0x34
 80074c0:	460a      	mov	r2, r1
 80074c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d006      	beq.n	80074de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	3301      	adds	r3, #1
 80074d4:	61fb      	str	r3, [r7, #28]
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	2b0f      	cmp	r3, #15
 80074da:	d9e9      	bls.n	80074b0 <prvInitialiseNewTask+0x64>
 80074dc:	e000      	b.n	80074e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80074de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074e8:	e003      	b.n	80074f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	2b37      	cmp	r3, #55	; 0x37
 80074f6:	d901      	bls.n	80074fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074f8:	2337      	movs	r3, #55	; 0x37
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007500:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007506:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	2200      	movs	r2, #0
 800750c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	3304      	adds	r3, #4
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe fe56 	bl	80061c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	3318      	adds	r3, #24
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fe51 	bl	80061c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007526:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007536:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	2200      	movs	r2, #0
 800753c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	68f9      	ldr	r1, [r7, #12]
 800754a:	69b8      	ldr	r0, [r7, #24]
 800754c:	f001 fb5e 	bl	8008c0c <pxPortInitialiseStack>
 8007550:	4602      	mov	r2, r0
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007562:	bf00      	nop
 8007564:	3720      	adds	r7, #32
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007574:	f001 fc76 	bl	8008e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007578:	4b2d      	ldr	r3, [pc, #180]	; (8007630 <prvAddNewTaskToReadyList+0xc4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3301      	adds	r3, #1
 800757e:	4a2c      	ldr	r2, [pc, #176]	; (8007630 <prvAddNewTaskToReadyList+0xc4>)
 8007580:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007582:	4b2c      	ldr	r3, [pc, #176]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800758a:	4a2a      	ldr	r2, [pc, #168]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007590:	4b27      	ldr	r3, [pc, #156]	; (8007630 <prvAddNewTaskToReadyList+0xc4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d110      	bne.n	80075ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007598:	f000 fc94 	bl	8007ec4 <prvInitialiseTaskLists>
 800759c:	e00d      	b.n	80075ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800759e:	4b26      	ldr	r3, [pc, #152]	; (8007638 <prvAddNewTaskToReadyList+0xcc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075a6:	4b23      	ldr	r3, [pc, #140]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d802      	bhi.n	80075ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b4:	4a1f      	ldr	r2, [pc, #124]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075ba:	4b20      	ldr	r3, [pc, #128]	; (800763c <prvAddNewTaskToReadyList+0xd0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3301      	adds	r3, #1
 80075c0:	4a1e      	ldr	r2, [pc, #120]	; (800763c <prvAddNewTaskToReadyList+0xd0>)
 80075c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075c4:	4b1d      	ldr	r3, [pc, #116]	; (800763c <prvAddNewTaskToReadyList+0xd0>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <prvAddNewTaskToReadyList+0xd4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d903      	bls.n	80075e0 <prvAddNewTaskToReadyList+0x74>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	4a18      	ldr	r2, [pc, #96]	; (8007640 <prvAddNewTaskToReadyList+0xd4>)
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4a15      	ldr	r2, [pc, #84]	; (8007644 <prvAddNewTaskToReadyList+0xd8>)
 80075ee:	441a      	add	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7fe fdf1 	bl	80061de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075fc:	f001 fc62 	bl	8008ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <prvAddNewTaskToReadyList+0xcc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00e      	beq.n	8007626 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007608:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	429a      	cmp	r2, r3
 8007614:	d207      	bcs.n	8007626 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007616:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <prvAddNewTaskToReadyList+0xdc>)
 8007618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000e2c 	.word	0x20000e2c
 8007634:	20000958 	.word	0x20000958
 8007638:	20000e38 	.word	0x20000e38
 800763c:	20000e48 	.word	0x20000e48
 8007640:	20000e34 	.word	0x20000e34
 8007644:	2000095c 	.word	0x2000095c
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007656:	2300      	movs	r3, #0
 8007658:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	617b      	str	r3, [r7, #20]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <vTaskDelayUntil+0x46>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	613b      	str	r3, [r7, #16]
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007692:	4b2a      	ldr	r3, [pc, #168]	; (800773c <vTaskDelayUntil+0xf0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <vTaskDelayUntil+0x64>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60fb      	str	r3, [r7, #12]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80076b0:	f000 f8e4 	bl	800787c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80076b4:	4b22      	ldr	r3, [pc, #136]	; (8007740 <vTaskDelayUntil+0xf4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	4413      	add	r3, r2
 80076c2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6a3a      	ldr	r2, [r7, #32]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d20b      	bcs.n	80076e6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d211      	bcs.n	80076fc <vTaskDelayUntil+0xb0>
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d90d      	bls.n	80076fc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24
 80076e4:	e00a      	b.n	80076fc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d303      	bcc.n	80076f8 <vTaskDelayUntil+0xac>
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d901      	bls.n	80076fc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80076f8:	2301      	movs	r3, #1
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2100      	movs	r1, #0
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fe1f 	bl	8008354 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007716:	f000 f8bf 	bl	8007898 <xTaskResumeAll>
 800771a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d107      	bne.n	8007732 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007722:	4b08      	ldr	r3, [pc, #32]	; (8007744 <vTaskDelayUntil+0xf8>)
 8007724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007732:	bf00      	nop
 8007734:	3728      	adds	r7, #40	; 0x28
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20000e54 	.word	0x20000e54
 8007740:	20000e30 	.word	0x20000e30
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d017      	beq.n	800778a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800775a:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <vTaskDelay+0x60>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <vTaskDelay+0x30>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	60bb      	str	r3, [r7, #8]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007778:	f000 f880 	bl	800787c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800777c:	2100      	movs	r1, #0
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fde8 	bl	8008354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007784:	f000 f888 	bl	8007898 <xTaskResumeAll>
 8007788:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d107      	bne.n	80077a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <vTaskDelay+0x64>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000e54 	.word	0x20000e54
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08a      	sub	sp, #40	; 0x28
 80077b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077be:	463a      	mov	r2, r7
 80077c0:	1d39      	adds	r1, r7, #4
 80077c2:	f107 0308 	add.w	r3, r7, #8
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fca8 	bl	800611c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	9202      	str	r2, [sp, #8]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	2300      	movs	r3, #0
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	2300      	movs	r3, #0
 80077dc:	460a      	mov	r2, r1
 80077de:	4921      	ldr	r1, [pc, #132]	; (8007864 <vTaskStartScheduler+0xb4>)
 80077e0:	4821      	ldr	r0, [pc, #132]	; (8007868 <vTaskStartScheduler+0xb8>)
 80077e2:	f7ff fd91 	bl	8007308 <xTaskCreateStatic>
 80077e6:	4603      	mov	r3, r0
 80077e8:	4a20      	ldr	r2, [pc, #128]	; (800786c <vTaskStartScheduler+0xbc>)
 80077ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077ec:	4b1f      	ldr	r3, [pc, #124]	; (800786c <vTaskStartScheduler+0xbc>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077f4:	2301      	movs	r3, #1
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e001      	b.n	80077fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d102      	bne.n	800780a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007804:	f000 fdfa 	bl	80083fc <xTimerCreateTimerTask>
 8007808:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d116      	bne.n	800783e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	613b      	str	r3, [r7, #16]
}
 8007822:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007824:	4b12      	ldr	r3, [pc, #72]	; (8007870 <vTaskStartScheduler+0xc0>)
 8007826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800782a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800782c:	4b11      	ldr	r3, [pc, #68]	; (8007874 <vTaskStartScheduler+0xc4>)
 800782e:	2201      	movs	r2, #1
 8007830:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007832:	4b11      	ldr	r3, [pc, #68]	; (8007878 <vTaskStartScheduler+0xc8>)
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007838:	f001 fa72 	bl	8008d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800783c:	e00e      	b.n	800785c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007844:	d10a      	bne.n	800785c <vTaskStartScheduler+0xac>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60fb      	str	r3, [r7, #12]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <vTaskStartScheduler+0xaa>
}
 800785c:	bf00      	nop
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	08009e64 	.word	0x08009e64
 8007868:	08007e95 	.word	0x08007e95
 800786c:	20000e50 	.word	0x20000e50
 8007870:	20000e4c 	.word	0x20000e4c
 8007874:	20000e38 	.word	0x20000e38
 8007878:	20000e30 	.word	0x20000e30

0800787c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <vTaskSuspendAll+0x18>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3301      	adds	r3, #1
 8007886:	4a03      	ldr	r2, [pc, #12]	; (8007894 <vTaskSuspendAll+0x18>)
 8007888:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800788a:	bf00      	nop
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	20000e54 	.word	0x20000e54

08007898 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078a6:	4b42      	ldr	r3, [pc, #264]	; (80079b0 <xTaskResumeAll+0x118>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10a      	bne.n	80078c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	603b      	str	r3, [r7, #0]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078c4:	f001 face 	bl	8008e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078c8:	4b39      	ldr	r3, [pc, #228]	; (80079b0 <xTaskResumeAll+0x118>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	4a38      	ldr	r2, [pc, #224]	; (80079b0 <xTaskResumeAll+0x118>)
 80078d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078d2:	4b37      	ldr	r3, [pc, #220]	; (80079b0 <xTaskResumeAll+0x118>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d162      	bne.n	80079a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078da:	4b36      	ldr	r3, [pc, #216]	; (80079b4 <xTaskResumeAll+0x11c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d05e      	beq.n	80079a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078e2:	e02f      	b.n	8007944 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e4:	4b34      	ldr	r3, [pc, #208]	; (80079b8 <xTaskResumeAll+0x120>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3318      	adds	r3, #24
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fcd1 	bl	8006298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3304      	adds	r3, #4
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fccc 	bl	8006298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007904:	4b2d      	ldr	r3, [pc, #180]	; (80079bc <xTaskResumeAll+0x124>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d903      	bls.n	8007914 <xTaskResumeAll+0x7c>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	4a2a      	ldr	r2, [pc, #168]	; (80079bc <xTaskResumeAll+0x124>)
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4a27      	ldr	r2, [pc, #156]	; (80079c0 <xTaskResumeAll+0x128>)
 8007922:	441a      	add	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f7fe fc57 	bl	80061de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007934:	4b23      	ldr	r3, [pc, #140]	; (80079c4 <xTaskResumeAll+0x12c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	429a      	cmp	r2, r3
 800793c:	d302      	bcc.n	8007944 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800793e:	4b22      	ldr	r3, [pc, #136]	; (80079c8 <xTaskResumeAll+0x130>)
 8007940:	2201      	movs	r2, #1
 8007942:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007944:	4b1c      	ldr	r3, [pc, #112]	; (80079b8 <xTaskResumeAll+0x120>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1cb      	bne.n	80078e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007952:	f000 fb55 	bl	8008000 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007956:	4b1d      	ldr	r3, [pc, #116]	; (80079cc <xTaskResumeAll+0x134>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d010      	beq.n	8007984 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007962:	f000 f847 	bl	80079f4 <xTaskIncrementTick>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800796c:	4b16      	ldr	r3, [pc, #88]	; (80079c8 <xTaskResumeAll+0x130>)
 800796e:	2201      	movs	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3b01      	subs	r3, #1
 8007976:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f1      	bne.n	8007962 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <xTaskResumeAll+0x134>)
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007984:	4b10      	ldr	r3, [pc, #64]	; (80079c8 <xTaskResumeAll+0x130>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800798c:	2301      	movs	r3, #1
 800798e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007990:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <xTaskResumeAll+0x138>)
 8007992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079a0:	f001 fa90 	bl	8008ec4 <vPortExitCritical>

	return xAlreadyYielded;
 80079a4:	68bb      	ldr	r3, [r7, #8]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000e54 	.word	0x20000e54
 80079b4:	20000e2c 	.word	0x20000e2c
 80079b8:	20000dec 	.word	0x20000dec
 80079bc:	20000e34 	.word	0x20000e34
 80079c0:	2000095c 	.word	0x2000095c
 80079c4:	20000958 	.word	0x20000958
 80079c8:	20000e40 	.word	0x20000e40
 80079cc:	20000e3c 	.word	0x20000e3c
 80079d0:	e000ed04 	.word	0xe000ed04

080079d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <xTaskGetTickCount+0x1c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079e0:	687b      	ldr	r3, [r7, #4]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	20000e30 	.word	0x20000e30

080079f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079fe:	4b4f      	ldr	r3, [pc, #316]	; (8007b3c <xTaskIncrementTick+0x148>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 808f 	bne.w	8007b26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a08:	4b4d      	ldr	r3, [pc, #308]	; (8007b40 <xTaskIncrementTick+0x14c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a10:	4a4b      	ldr	r2, [pc, #300]	; (8007b40 <xTaskIncrementTick+0x14c>)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d120      	bne.n	8007a5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a1c:	4b49      	ldr	r3, [pc, #292]	; (8007b44 <xTaskIncrementTick+0x150>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <xTaskIncrementTick+0x48>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	603b      	str	r3, [r7, #0]
}
 8007a38:	bf00      	nop
 8007a3a:	e7fe      	b.n	8007a3a <xTaskIncrementTick+0x46>
 8007a3c:	4b41      	ldr	r3, [pc, #260]	; (8007b44 <xTaskIncrementTick+0x150>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	4b41      	ldr	r3, [pc, #260]	; (8007b48 <xTaskIncrementTick+0x154>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a3f      	ldr	r2, [pc, #252]	; (8007b44 <xTaskIncrementTick+0x150>)
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	4a3f      	ldr	r2, [pc, #252]	; (8007b48 <xTaskIncrementTick+0x154>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	4b3e      	ldr	r3, [pc, #248]	; (8007b4c <xTaskIncrementTick+0x158>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	4a3d      	ldr	r2, [pc, #244]	; (8007b4c <xTaskIncrementTick+0x158>)
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	f000 fad1 	bl	8008000 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a5e:	4b3c      	ldr	r3, [pc, #240]	; (8007b50 <xTaskIncrementTick+0x15c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d349      	bcc.n	8007afc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a68:	4b36      	ldr	r3, [pc, #216]	; (8007b44 <xTaskIncrementTick+0x150>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d104      	bne.n	8007a7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a72:	4b37      	ldr	r3, [pc, #220]	; (8007b50 <xTaskIncrementTick+0x15c>)
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a78:	601a      	str	r2, [r3, #0]
					break;
 8007a7a:	e03f      	b.n	8007afc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a7c:	4b31      	ldr	r3, [pc, #196]	; (8007b44 <xTaskIncrementTick+0x150>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d203      	bcs.n	8007a9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a94:	4a2e      	ldr	r2, [pc, #184]	; (8007b50 <xTaskIncrementTick+0x15c>)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a9a:	e02f      	b.n	8007afc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fbf9 	bl	8006298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d004      	beq.n	8007ab8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	3318      	adds	r3, #24
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fbf0 	bl	8006298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <xTaskIncrementTick+0x160>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d903      	bls.n	8007acc <xTaskIncrementTick+0xd8>
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	4a22      	ldr	r2, [pc, #136]	; (8007b54 <xTaskIncrementTick+0x160>)
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4a1f      	ldr	r2, [pc, #124]	; (8007b58 <xTaskIncrementTick+0x164>)
 8007ada:	441a      	add	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	f7fe fb7b 	bl	80061de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aec:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <xTaskIncrementTick+0x168>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d3b8      	bcc.n	8007a68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007af6:	2301      	movs	r3, #1
 8007af8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007afa:	e7b5      	b.n	8007a68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007afc:	4b17      	ldr	r3, [pc, #92]	; (8007b5c <xTaskIncrementTick+0x168>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b02:	4915      	ldr	r1, [pc, #84]	; (8007b58 <xTaskIncrementTick+0x164>)
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	440b      	add	r3, r1
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d901      	bls.n	8007b18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b14:	2301      	movs	r3, #1
 8007b16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b18:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <xTaskIncrementTick+0x16c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b20:	2301      	movs	r3, #1
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	e004      	b.n	8007b30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b26:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <xTaskIncrementTick+0x170>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	4a0d      	ldr	r2, [pc, #52]	; (8007b64 <xTaskIncrementTick+0x170>)
 8007b2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b30:	697b      	ldr	r3, [r7, #20]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000e54 	.word	0x20000e54
 8007b40:	20000e30 	.word	0x20000e30
 8007b44:	20000de4 	.word	0x20000de4
 8007b48:	20000de8 	.word	0x20000de8
 8007b4c:	20000e44 	.word	0x20000e44
 8007b50:	20000e4c 	.word	0x20000e4c
 8007b54:	20000e34 	.word	0x20000e34
 8007b58:	2000095c 	.word	0x2000095c
 8007b5c:	20000958 	.word	0x20000958
 8007b60:	20000e40 	.word	0x20000e40
 8007b64:	20000e3c 	.word	0x20000e3c

08007b68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b6e:	4b28      	ldr	r3, [pc, #160]	; (8007c10 <vTaskSwitchContext+0xa8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b76:	4b27      	ldr	r3, [pc, #156]	; (8007c14 <vTaskSwitchContext+0xac>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b7c:	e041      	b.n	8007c02 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b7e:	4b25      	ldr	r3, [pc, #148]	; (8007c14 <vTaskSwitchContext+0xac>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b84:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <vTaskSwitchContext+0xb0>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	60fb      	str	r3, [r7, #12]
 8007b8a:	e010      	b.n	8007bae <vTaskSwitchContext+0x46>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10a      	bne.n	8007ba8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	607b      	str	r3, [r7, #4]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <vTaskSwitchContext+0x3e>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	491b      	ldr	r1, [pc, #108]	; (8007c1c <vTaskSwitchContext+0xb4>)
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0e4      	beq.n	8007b8c <vTaskSwitchContext+0x24>
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4a13      	ldr	r2, [pc, #76]	; (8007c1c <vTaskSwitchContext+0xb4>)
 8007bce:	4413      	add	r3, r2
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	605a      	str	r2, [r3, #4]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	3308      	adds	r3, #8
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d104      	bne.n	8007bf2 <vTaskSwitchContext+0x8a>
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	605a      	str	r2, [r3, #4]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <vTaskSwitchContext+0xb8>)
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	4a06      	ldr	r2, [pc, #24]	; (8007c18 <vTaskSwitchContext+0xb0>)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6013      	str	r3, [r2, #0]
}
 8007c02:	bf00      	nop
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	20000e54 	.word	0x20000e54
 8007c14:	20000e40 	.word	0x20000e40
 8007c18:	20000e34 	.word	0x20000e34
 8007c1c:	2000095c 	.word	0x2000095c
 8007c20:	20000958 	.word	0x20000958

08007c24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	60fb      	str	r3, [r7, #12]
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c4a:	4b07      	ldr	r3, [pc, #28]	; (8007c68 <vTaskPlaceOnEventList+0x44>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3318      	adds	r3, #24
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7fe fae7 	bl	8006226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c58:	2101      	movs	r1, #1
 8007c5a:	6838      	ldr	r0, [r7, #0]
 8007c5c:	f000 fb7a 	bl	8008354 <prvAddCurrentTaskToDelayedList>
}
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000958 	.word	0x20000958

08007c6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	617b      	str	r3, [r7, #20]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3318      	adds	r3, #24
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7fe fa9e 	bl	80061de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	68b8      	ldr	r0, [r7, #8]
 8007cb2:	f000 fb4f 	bl	8008354 <prvAddCurrentTaskToDelayedList>
	}
 8007cb6:	bf00      	nop
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000958 	.word	0x20000958

08007cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60fb      	str	r3, [r7, #12]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	3318      	adds	r3, #24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe facf 	bl	8006298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cfa:	4b1e      	ldr	r3, [pc, #120]	; (8007d74 <xTaskRemoveFromEventList+0xb0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d11d      	bne.n	8007d3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fac6 	bl	8006298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <xTaskRemoveFromEventList+0xb4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d903      	bls.n	8007d20 <xTaskRemoveFromEventList+0x5c>
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	4a16      	ldr	r2, [pc, #88]	; (8007d78 <xTaskRemoveFromEventList+0xb4>)
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4a13      	ldr	r2, [pc, #76]	; (8007d7c <xTaskRemoveFromEventList+0xb8>)
 8007d2e:	441a      	add	r2, r3
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fe fa51 	bl	80061de <vListInsertEnd>
 8007d3c:	e005      	b.n	8007d4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	3318      	adds	r3, #24
 8007d42:	4619      	mov	r1, r3
 8007d44:	480e      	ldr	r0, [pc, #56]	; (8007d80 <xTaskRemoveFromEventList+0xbc>)
 8007d46:	f7fe fa4a 	bl	80061de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <xTaskRemoveFromEventList+0xc0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d905      	bls.n	8007d64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <xTaskRemoveFromEventList+0xc4>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e001      	b.n	8007d68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d68:	697b      	ldr	r3, [r7, #20]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000e54 	.word	0x20000e54
 8007d78:	20000e34 	.word	0x20000e34
 8007d7c:	2000095c 	.word	0x2000095c
 8007d80:	20000dec 	.word	0x20000dec
 8007d84:	20000958 	.word	0x20000958
 8007d88:	20000e40 	.word	0x20000e40

08007d8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d94:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <vTaskInternalSetTimeOutState+0x24>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <vTaskInternalSetTimeOutState+0x28>)
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	605a      	str	r2, [r3, #4]
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	20000e44 	.word	0x20000e44
 8007db4:	20000e30 	.word	0x20000e30

08007db8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	613b      	str	r3, [r7, #16]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	60fb      	str	r3, [r7, #12]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007dfa:	f001 f833 	bl	8008e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dfe:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <xTaskCheckForTimeOut+0xbc>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e16:	d102      	bne.n	8007e1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]
 8007e1c:	e023      	b.n	8007e66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4b15      	ldr	r3, [pc, #84]	; (8007e78 <xTaskCheckForTimeOut+0xc0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d007      	beq.n	8007e3a <xTaskCheckForTimeOut+0x82>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d302      	bcc.n	8007e3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e34:	2301      	movs	r3, #1
 8007e36:	61fb      	str	r3, [r7, #28]
 8007e38:	e015      	b.n	8007e66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d20b      	bcs.n	8007e5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff ff9b 	bl	8007d8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	e004      	b.n	8007e66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e62:	2301      	movs	r3, #1
 8007e64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e66:	f001 f82d 	bl	8008ec4 <vPortExitCritical>

	return xReturn;
 8007e6a:	69fb      	ldr	r3, [r7, #28]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3720      	adds	r7, #32
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20000e30 	.word	0x20000e30
 8007e78:	20000e44 	.word	0x20000e44

08007e7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e80:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <vTaskMissedYield+0x14>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	601a      	str	r2, [r3, #0]
}
 8007e86:	bf00      	nop
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	20000e40 	.word	0x20000e40

08007e94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e9c:	f000 f852 	bl	8007f44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ea0:	4b06      	ldr	r3, [pc, #24]	; (8007ebc <prvIdleTask+0x28>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d9f9      	bls.n	8007e9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <prvIdleTask+0x2c>)
 8007eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007eb8:	e7f0      	b.n	8007e9c <prvIdleTask+0x8>
 8007eba:	bf00      	nop
 8007ebc:	2000095c 	.word	0x2000095c
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eca:	2300      	movs	r3, #0
 8007ecc:	607b      	str	r3, [r7, #4]
 8007ece:	e00c      	b.n	8007eea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4a12      	ldr	r2, [pc, #72]	; (8007f24 <prvInitialiseTaskLists+0x60>)
 8007edc:	4413      	add	r3, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe f950 	bl	8006184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	607b      	str	r3, [r7, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b37      	cmp	r3, #55	; 0x37
 8007eee:	d9ef      	bls.n	8007ed0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ef0:	480d      	ldr	r0, [pc, #52]	; (8007f28 <prvInitialiseTaskLists+0x64>)
 8007ef2:	f7fe f947 	bl	8006184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ef6:	480d      	ldr	r0, [pc, #52]	; (8007f2c <prvInitialiseTaskLists+0x68>)
 8007ef8:	f7fe f944 	bl	8006184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007efc:	480c      	ldr	r0, [pc, #48]	; (8007f30 <prvInitialiseTaskLists+0x6c>)
 8007efe:	f7fe f941 	bl	8006184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f02:	480c      	ldr	r0, [pc, #48]	; (8007f34 <prvInitialiseTaskLists+0x70>)
 8007f04:	f7fe f93e 	bl	8006184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f08:	480b      	ldr	r0, [pc, #44]	; (8007f38 <prvInitialiseTaskLists+0x74>)
 8007f0a:	f7fe f93b 	bl	8006184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f0e:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <prvInitialiseTaskLists+0x78>)
 8007f10:	4a05      	ldr	r2, [pc, #20]	; (8007f28 <prvInitialiseTaskLists+0x64>)
 8007f12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f14:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <prvInitialiseTaskLists+0x7c>)
 8007f16:	4a05      	ldr	r2, [pc, #20]	; (8007f2c <prvInitialiseTaskLists+0x68>)
 8007f18:	601a      	str	r2, [r3, #0]
}
 8007f1a:	bf00      	nop
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	2000095c 	.word	0x2000095c
 8007f28:	20000dbc 	.word	0x20000dbc
 8007f2c:	20000dd0 	.word	0x20000dd0
 8007f30:	20000dec 	.word	0x20000dec
 8007f34:	20000e00 	.word	0x20000e00
 8007f38:	20000e18 	.word	0x20000e18
 8007f3c:	20000de4 	.word	0x20000de4
 8007f40:	20000de8 	.word	0x20000de8

08007f44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f4a:	e019      	b.n	8007f80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f4c:	f000 ff8a 	bl	8008e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f50:	4b10      	ldr	r3, [pc, #64]	; (8007f94 <prvCheckTasksWaitingTermination+0x50>)
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe f99b 	bl	8006298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f62:	4b0d      	ldr	r3, [pc, #52]	; (8007f98 <prvCheckTasksWaitingTermination+0x54>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	4a0b      	ldr	r2, [pc, #44]	; (8007f98 <prvCheckTasksWaitingTermination+0x54>)
 8007f6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f6c:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <prvCheckTasksWaitingTermination+0x58>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	4a0a      	ldr	r2, [pc, #40]	; (8007f9c <prvCheckTasksWaitingTermination+0x58>)
 8007f74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f76:	f000 ffa5 	bl	8008ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f810 	bl	8007fa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f80:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <prvCheckTasksWaitingTermination+0x58>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e1      	bne.n	8007f4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000e00 	.word	0x20000e00
 8007f98:	20000e2c 	.word	0x20000e2c
 8007f9c:	20000e14 	.word	0x20000e14

08007fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d108      	bne.n	8007fc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 f942 	bl	8009240 <vPortFree>
				vPortFree( pxTCB );
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f93f 	bl	8009240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fc2:	e018      	b.n	8007ff6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d103      	bne.n	8007fd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 f936 	bl	8009240 <vPortFree>
	}
 8007fd4:	e00f      	b.n	8007ff6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d00a      	beq.n	8007ff6 <prvDeleteTCB+0x56>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60fb      	str	r3, [r7, #12]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <prvDeleteTCB+0x54>
	}
 8007ff6:	bf00      	nop
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008006:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <prvResetNextTaskUnblockTime+0x38>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008010:	4b0a      	ldr	r3, [pc, #40]	; (800803c <prvResetNextTaskUnblockTime+0x3c>)
 8008012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008016:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008018:	e008      	b.n	800802c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <prvResetNextTaskUnblockTime+0x38>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	4a04      	ldr	r2, [pc, #16]	; (800803c <prvResetNextTaskUnblockTime+0x3c>)
 800802a:	6013      	str	r3, [r2, #0]
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	20000de4 	.word	0x20000de4
 800803c:	20000e4c 	.word	0x20000e4c

08008040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008046:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <xTaskGetSchedulerState+0x34>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800804e:	2301      	movs	r3, #1
 8008050:	607b      	str	r3, [r7, #4]
 8008052:	e008      	b.n	8008066 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008054:	4b08      	ldr	r3, [pc, #32]	; (8008078 <xTaskGetSchedulerState+0x38>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800805c:	2302      	movs	r3, #2
 800805e:	607b      	str	r3, [r7, #4]
 8008060:	e001      	b.n	8008066 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008062:	2300      	movs	r3, #0
 8008064:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008066:	687b      	ldr	r3, [r7, #4]
	}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	20000e38 	.word	0x20000e38
 8008078:	20000e54 	.word	0x20000e54

0800807c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d051      	beq.n	8008136 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	4b2a      	ldr	r3, [pc, #168]	; (8008140 <xTaskPriorityInherit+0xc4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	429a      	cmp	r2, r3
 800809e:	d241      	bcs.n	8008124 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	db06      	blt.n	80080b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a8:	4b25      	ldr	r3, [pc, #148]	; (8008140 <xTaskPriorityInherit+0xc4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6959      	ldr	r1, [r3, #20]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4a1f      	ldr	r2, [pc, #124]	; (8008144 <xTaskPriorityInherit+0xc8>)
 80080c8:	4413      	add	r3, r2
 80080ca:	4299      	cmp	r1, r3
 80080cc:	d122      	bne.n	8008114 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe f8e0 	bl	8006298 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080d8:	4b19      	ldr	r3, [pc, #100]	; (8008140 <xTaskPriorityInherit+0xc4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e6:	4b18      	ldr	r3, [pc, #96]	; (8008148 <xTaskPriorityInherit+0xcc>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d903      	bls.n	80080f6 <xTaskPriorityInherit+0x7a>
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	4a15      	ldr	r2, [pc, #84]	; (8008148 <xTaskPriorityInherit+0xcc>)
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4a10      	ldr	r2, [pc, #64]	; (8008144 <xTaskPriorityInherit+0xc8>)
 8008104:	441a      	add	r2, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	3304      	adds	r3, #4
 800810a:	4619      	mov	r1, r3
 800810c:	4610      	mov	r0, r2
 800810e:	f7fe f866 	bl	80061de <vListInsertEnd>
 8008112:	e004      	b.n	800811e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008114:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <xTaskPriorityInherit+0xc4>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800811e:	2301      	movs	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	e008      	b.n	8008136 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008128:	4b05      	ldr	r3, [pc, #20]	; (8008140 <xTaskPriorityInherit+0xc4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	429a      	cmp	r2, r3
 8008130:	d201      	bcs.n	8008136 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008132:	2301      	movs	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008136:	68fb      	ldr	r3, [r7, #12]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20000958 	.word	0x20000958
 8008144:	2000095c 	.word	0x2000095c
 8008148:	20000e34 	.word	0x20000e34

0800814c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d056      	beq.n	8008210 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008162:	4b2e      	ldr	r3, [pc, #184]	; (800821c <xTaskPriorityDisinherit+0xd0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	429a      	cmp	r2, r3
 800816a:	d00a      	beq.n	8008182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	60bb      	str	r3, [r7, #8]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	1e5a      	subs	r2, r3, #1
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d02c      	beq.n	8008210 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d128      	bne.n	8008210 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe f868 	bl	8006298 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <xTaskPriorityDisinherit+0xd4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d903      	bls.n	80081f0 <xTaskPriorityDisinherit+0xa4>
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <xTaskPriorityDisinherit+0xd4>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4a09      	ldr	r2, [pc, #36]	; (8008224 <xTaskPriorityDisinherit+0xd8>)
 80081fe:	441a      	add	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fd ffe9 	bl	80061de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008210:	697b      	ldr	r3, [r7, #20]
	}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000958 	.word	0x20000958
 8008220:	20000e34 	.word	0x20000e34
 8008224:	2000095c 	.word	0x2000095c

08008228 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008236:	2301      	movs	r3, #1
 8008238:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d06a      	beq.n	8008316 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	60fb      	str	r3, [r7, #12]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	429a      	cmp	r2, r3
 8008266:	d902      	bls.n	800826e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	e002      	b.n	8008274 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008272:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	429a      	cmp	r2, r3
 800827c:	d04b      	beq.n	8008316 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	429a      	cmp	r2, r3
 8008286:	d146      	bne.n	8008316 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008288:	4b25      	ldr	r3, [pc, #148]	; (8008320 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	429a      	cmp	r2, r3
 8008290:	d10a      	bne.n	80082a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	60bb      	str	r3, [r7, #8]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	db04      	blt.n	80082c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	6959      	ldr	r1, [r3, #20]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4a13      	ldr	r2, [pc, #76]	; (8008324 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80082d6:	4413      	add	r3, r2
 80082d8:	4299      	cmp	r1, r3
 80082da:	d11c      	bne.n	8008316 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	3304      	adds	r3, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fd ffd9 	bl	8006298 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d903      	bls.n	80082fa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	4a0c      	ldr	r2, [pc, #48]	; (8008328 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4a07      	ldr	r2, [pc, #28]	; (8008324 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008308:	441a      	add	r2, r3
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	3304      	adds	r3, #4
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f7fd ff64 	bl	80061de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008316:	bf00      	nop
 8008318:	3720      	adds	r7, #32
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000958 	.word	0x20000958
 8008324:	2000095c 	.word	0x2000095c
 8008328:	20000e34 	.word	0x20000e34

0800832c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008330:	4b07      	ldr	r3, [pc, #28]	; (8008350 <pvTaskIncrementMutexHeldCount+0x24>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008338:	4b05      	ldr	r3, [pc, #20]	; (8008350 <pvTaskIncrementMutexHeldCount+0x24>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800833e:	3201      	adds	r2, #1
 8008340:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008342:	4b03      	ldr	r3, [pc, #12]	; (8008350 <pvTaskIncrementMutexHeldCount+0x24>)
 8008344:	681b      	ldr	r3, [r3, #0]
	}
 8008346:	4618      	mov	r0, r3
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	20000958 	.word	0x20000958

08008354 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800835e:	4b21      	ldr	r3, [pc, #132]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008364:	4b20      	ldr	r3, [pc, #128]	; (80083e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3304      	adds	r3, #4
 800836a:	4618      	mov	r0, r3
 800836c:	f7fd ff94 	bl	8006298 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008376:	d10a      	bne.n	800838e <prvAddCurrentTaskToDelayedList+0x3a>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800837e:	4b1a      	ldr	r3, [pc, #104]	; (80083e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3304      	adds	r3, #4
 8008384:	4619      	mov	r1, r3
 8008386:	4819      	ldr	r0, [pc, #100]	; (80083ec <prvAddCurrentTaskToDelayedList+0x98>)
 8008388:	f7fd ff29 	bl	80061de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800838c:	e026      	b.n	80083dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4413      	add	r3, r2
 8008394:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008396:	4b14      	ldr	r3, [pc, #80]	; (80083e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d209      	bcs.n	80083ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a6:	4b12      	ldr	r3, [pc, #72]	; (80083f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fd ff37 	bl	8006226 <vListInsert>
}
 80083b8:	e010      	b.n	80083dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ba:	4b0e      	ldr	r3, [pc, #56]	; (80083f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4619      	mov	r1, r3
 80083c6:	4610      	mov	r0, r2
 80083c8:	f7fd ff2d 	bl	8006226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d202      	bcs.n	80083dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083d6:	4a08      	ldr	r2, [pc, #32]	; (80083f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	6013      	str	r3, [r2, #0]
}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000e30 	.word	0x20000e30
 80083e8:	20000958 	.word	0x20000958
 80083ec:	20000e18 	.word	0x20000e18
 80083f0:	20000de8 	.word	0x20000de8
 80083f4:	20000de4 	.word	0x20000de4
 80083f8:	20000e4c 	.word	0x20000e4c

080083fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08a      	sub	sp, #40	; 0x28
 8008400:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008406:	f000 fba1 	bl	8008b4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800840a:	4b1c      	ldr	r3, [pc, #112]	; (800847c <xTimerCreateTimerTask+0x80>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d021      	beq.n	8008456 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800841a:	1d3a      	adds	r2, r7, #4
 800841c:	f107 0108 	add.w	r1, r7, #8
 8008420:	f107 030c 	add.w	r3, r7, #12
 8008424:	4618      	mov	r0, r3
 8008426:	f7fd fe93 	bl	8006150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	9202      	str	r2, [sp, #8]
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	2302      	movs	r3, #2
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	2300      	movs	r3, #0
 800843a:	460a      	mov	r2, r1
 800843c:	4910      	ldr	r1, [pc, #64]	; (8008480 <xTimerCreateTimerTask+0x84>)
 800843e:	4811      	ldr	r0, [pc, #68]	; (8008484 <xTimerCreateTimerTask+0x88>)
 8008440:	f7fe ff62 	bl	8007308 <xTaskCreateStatic>
 8008444:	4603      	mov	r3, r0
 8008446:	4a10      	ldr	r2, [pc, #64]	; (8008488 <xTimerCreateTimerTask+0x8c>)
 8008448:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800844a:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <xTimerCreateTimerTask+0x8c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008452:	2301      	movs	r3, #1
 8008454:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	613b      	str	r3, [r7, #16]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008472:	697b      	ldr	r3, [r7, #20]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20000e88 	.word	0x20000e88
 8008480:	08009e6c 	.word	0x08009e6c
 8008484:	080086f5 	.word	0x080086f5
 8008488:	20000e8c 	.word	0x20000e8c

0800848c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af02      	add	r7, sp, #8
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800849a:	202c      	movs	r0, #44	; 0x2c
 800849c:	f000 fe04 	bl	80090a8 <pvPortMalloc>
 80084a0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00d      	beq.n	80084c4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 f843 	bl	800854a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80084c4:	697b      	ldr	r3, [r7, #20]
	}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b08a      	sub	sp, #40	; 0x28
 80084d2:	af02      	add	r7, sp, #8
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
 80084da:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80084dc:	232c      	movs	r3, #44	; 0x2c
 80084de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b2c      	cmp	r3, #44	; 0x2c
 80084e4:	d00a      	beq.n	80084fc <xTimerCreateStatic+0x2e>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	61bb      	str	r3, [r7, #24]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10a      	bne.n	800851a <xTimerCreateStatic+0x4c>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	617b      	str	r3, [r7, #20]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00d      	beq.n	8008540 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 f805 	bl	800854a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008540:	69fb      	ldr	r3, [r7, #28]
	}
 8008542:	4618      	mov	r0, r3
 8008544:	3720      	adds	r7, #32
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	607a      	str	r2, [r7, #4]
 8008556:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10a      	bne.n	8008574 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	617b      	str	r3, [r7, #20]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	2b00      	cmp	r3, #0
 8008578:	d01e      	beq.n	80085b8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800857a:	f000 fae7 	bl	8008b4c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	6a3a      	ldr	r2, [r7, #32]
 8008594:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	3304      	adds	r3, #4
 800859a:	4618      	mov	r0, r3
 800859c:	f7fd fe12 	bl	80061c4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d008      	beq.n	80085b8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ac:	f043 0304 	orr.w	r3, r3, #4
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80085b8:	bf00      	nop
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08a      	sub	sp, #40	; 0x28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	623b      	str	r3, [r7, #32]
}
 80085ea:	bf00      	nop
 80085ec:	e7fe      	b.n	80085ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085ee:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <xTimerGenericCommand+0x98>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d02a      	beq.n	800864c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2b05      	cmp	r3, #5
 8008606:	dc18      	bgt.n	800863a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008608:	f7ff fd1a 	bl	8008040 <xTaskGetSchedulerState>
 800860c:	4603      	mov	r3, r0
 800860e:	2b02      	cmp	r3, #2
 8008610:	d109      	bne.n	8008626 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008612:	4b11      	ldr	r3, [pc, #68]	; (8008658 <xTimerGenericCommand+0x98>)
 8008614:	6818      	ldr	r0, [r3, #0]
 8008616:	f107 0110 	add.w	r1, r7, #16
 800861a:	2300      	movs	r3, #0
 800861c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861e:	f7fe f80d 	bl	800663c <xQueueGenericSend>
 8008622:	6278      	str	r0, [r7, #36]	; 0x24
 8008624:	e012      	b.n	800864c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008626:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <xTimerGenericCommand+0x98>)
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	f107 0110 	add.w	r1, r7, #16
 800862e:	2300      	movs	r3, #0
 8008630:	2200      	movs	r2, #0
 8008632:	f7fe f803 	bl	800663c <xQueueGenericSend>
 8008636:	6278      	str	r0, [r7, #36]	; 0x24
 8008638:	e008      	b.n	800864c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800863a:	4b07      	ldr	r3, [pc, #28]	; (8008658 <xTimerGenericCommand+0x98>)
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	f107 0110 	add.w	r1, r7, #16
 8008642:	2300      	movs	r3, #0
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	f7fe f8f7 	bl	8006838 <xQueueGenericSendFromISR>
 800864a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800864e:	4618      	mov	r0, r3
 8008650:	3728      	adds	r7, #40	; 0x28
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000e88 	.word	0x20000e88

0800865c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af02      	add	r7, sp, #8
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008666:	4b22      	ldr	r3, [pc, #136]	; (80086f0 <prvProcessExpiredTimer+0x94>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	3304      	adds	r3, #4
 8008674:	4618      	mov	r0, r3
 8008676:	f7fd fe0f 	bl	8006298 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d022      	beq.n	80086ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	699a      	ldr	r2, [r3, #24]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	18d1      	adds	r1, r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	6978      	ldr	r0, [r7, #20]
 8008696:	f000 f8d1 	bl	800883c <prvInsertTimerInActiveList>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01f      	beq.n	80086e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086a0:	2300      	movs	r3, #0
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	2100      	movs	r1, #0
 80086aa:	6978      	ldr	r0, [r7, #20]
 80086ac:	f7ff ff88 	bl	80085c0 <xTimerGenericCommand>
 80086b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d113      	bne.n	80086e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	60fb      	str	r3, [r7, #12]
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086d4:	f023 0301 	bic.w	r3, r3, #1
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	6978      	ldr	r0, [r7, #20]
 80086e6:	4798      	blx	r3
}
 80086e8:	bf00      	nop
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20000e80 	.word	0x20000e80

080086f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086fc:	f107 0308 	add.w	r3, r7, #8
 8008700:	4618      	mov	r0, r3
 8008702:	f000 f857 	bl	80087b4 <prvGetNextExpireTime>
 8008706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4619      	mov	r1, r3
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 f803 	bl	8008718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008712:	f000 f8d5 	bl	80088c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008716:	e7f1      	b.n	80086fc <prvTimerTask+0x8>

08008718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008722:	f7ff f8ab 	bl	800787c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008726:	f107 0308 	add.w	r3, r7, #8
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f866 	bl	80087fc <prvSampleTimeNow>
 8008730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d130      	bne.n	800879a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10a      	bne.n	8008754 <prvProcessTimerOrBlockTask+0x3c>
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d806      	bhi.n	8008754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008746:	f7ff f8a7 	bl	8007898 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff ff85 	bl	800865c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008752:	e024      	b.n	800879e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d008      	beq.n	800876c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800875a:	4b13      	ldr	r3, [pc, #76]	; (80087a8 <prvProcessTimerOrBlockTask+0x90>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <prvProcessTimerOrBlockTask+0x50>
 8008764:	2301      	movs	r3, #1
 8008766:	e000      	b.n	800876a <prvProcessTimerOrBlockTask+0x52>
 8008768:	2300      	movs	r3, #0
 800876a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800876c:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <prvProcessTimerOrBlockTask+0x94>)
 800876e:	6818      	ldr	r0, [r3, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	4619      	mov	r1, r3
 800877a:	f7fe fd91 	bl	80072a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800877e:	f7ff f88b 	bl	8007898 <xTaskResumeAll>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008788:	4b09      	ldr	r3, [pc, #36]	; (80087b0 <prvProcessTimerOrBlockTask+0x98>)
 800878a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	f3bf 8f6f 	isb	sy
}
 8008798:	e001      	b.n	800879e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800879a:	f7ff f87d 	bl	8007898 <xTaskResumeAll>
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000e84 	.word	0x20000e84
 80087ac:	20000e88 	.word	0x20000e88
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087bc:	4b0e      	ldr	r3, [pc, #56]	; (80087f8 <prvGetNextExpireTime+0x44>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <prvGetNextExpireTime+0x16>
 80087c6:	2201      	movs	r2, #1
 80087c8:	e000      	b.n	80087cc <prvGetNextExpireTime+0x18>
 80087ca:	2200      	movs	r2, #0
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d105      	bne.n	80087e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087d8:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <prvGetNextExpireTime+0x44>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	60fb      	str	r3, [r7, #12]
 80087e2:	e001      	b.n	80087e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087e8:	68fb      	ldr	r3, [r7, #12]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20000e80 	.word	0x20000e80

080087fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008804:	f7ff f8e6 	bl	80079d4 <xTaskGetTickCount>
 8008808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800880a:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <prvSampleTimeNow+0x3c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	429a      	cmp	r2, r3
 8008812:	d205      	bcs.n	8008820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008814:	f000 f936 	bl	8008a84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	e002      	b.n	8008826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008826:	4a04      	ldr	r2, [pc, #16]	; (8008838 <prvSampleTimeNow+0x3c>)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800882c:	68fb      	ldr	r3, [r7, #12]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000e90 	.word	0x20000e90

0800883c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
 8008848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800884a:	2300      	movs	r3, #0
 800884c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	429a      	cmp	r2, r3
 8008860:	d812      	bhi.n	8008888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	1ad2      	subs	r2, r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	429a      	cmp	r2, r3
 800886e:	d302      	bcc.n	8008876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008870:	2301      	movs	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
 8008874:	e01b      	b.n	80088ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008876:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <prvInsertTimerInActiveList+0x7c>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3304      	adds	r3, #4
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f7fd fcd0 	bl	8006226 <vListInsert>
 8008886:	e012      	b.n	80088ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	429a      	cmp	r2, r3
 800888e:	d206      	bcs.n	800889e <prvInsertTimerInActiveList+0x62>
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d302      	bcc.n	800889e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008898:	2301      	movs	r3, #1
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	e007      	b.n	80088ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800889e:	4b07      	ldr	r3, [pc, #28]	; (80088bc <prvInsertTimerInActiveList+0x80>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7fd fcbc 	bl	8006226 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088ae:	697b      	ldr	r3, [r7, #20]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20000e84 	.word	0x20000e84
 80088bc:	20000e80 	.word	0x20000e80

080088c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08e      	sub	sp, #56	; 0x38
 80088c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088c6:	e0ca      	b.n	8008a5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da18      	bge.n	8008900 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088ce:	1d3b      	adds	r3, r7, #4
 80088d0:	3304      	adds	r3, #4
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	61fb      	str	r3, [r7, #28]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f6:	6850      	ldr	r0, [r2, #4]
 80088f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fa:	6892      	ldr	r2, [r2, #8]
 80088fc:	4611      	mov	r1, r2
 80088fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f2c0 80ab 	blt.w	8008a5e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	3304      	adds	r3, #4
 8008918:	4618      	mov	r0, r3
 800891a:	f7fd fcbd 	bl	8006298 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800891e:	463b      	mov	r3, r7
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff ff6b 	bl	80087fc <prvSampleTimeNow>
 8008926:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b09      	cmp	r3, #9
 800892c:	f200 8096 	bhi.w	8008a5c <prvProcessReceivedCommands+0x19c>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <prvProcessReceivedCommands+0x78>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	08008961 	.word	0x08008961
 800893c:	08008961 	.word	0x08008961
 8008940:	08008961 	.word	0x08008961
 8008944:	080089d5 	.word	0x080089d5
 8008948:	080089e9 	.word	0x080089e9
 800894c:	08008a33 	.word	0x08008a33
 8008950:	08008961 	.word	0x08008961
 8008954:	08008961 	.word	0x08008961
 8008958:	080089d5 	.word	0x080089d5
 800895c:	080089e9 	.word	0x080089e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	b2da      	uxtb	r2, r3
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	18d1      	adds	r1, r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800897e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008980:	f7ff ff5c 	bl	800883c <prvInsertTimerInActiveList>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d069      	beq.n	8008a5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800898a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008990:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008998:	f003 0304 	and.w	r3, r3, #4
 800899c:	2b00      	cmp	r3, #0
 800899e:	d05e      	beq.n	8008a5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	441a      	add	r2, r3
 80089a8:	2300      	movs	r3, #0
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2300      	movs	r3, #0
 80089ae:	2100      	movs	r1, #0
 80089b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089b2:	f7ff fe05 	bl	80085c0 <xTimerGenericCommand>
 80089b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d14f      	bne.n	8008a5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	61bb      	str	r3, [r7, #24]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089da:	f023 0301 	bic.w	r3, r3, #1
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80089e6:	e03a      	b.n	8008a5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ee:	f043 0301 	orr.w	r3, r3, #1
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10a      	bne.n	8008a1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	617b      	str	r3, [r7, #20]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	18d1      	adds	r1, r2, r3
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a2c:	f7ff ff06 	bl	800883c <prvInsertTimerInActiveList>
					break;
 8008a30:	e015      	b.n	8008a5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d103      	bne.n	8008a48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a42:	f000 fbfd 	bl	8009240 <vPortFree>
 8008a46:	e00a      	b.n	8008a5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a4e:	f023 0301 	bic.w	r3, r3, #1
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a5a:	e000      	b.n	8008a5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008a5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a5e:	4b08      	ldr	r3, [pc, #32]	; (8008a80 <prvProcessReceivedCommands+0x1c0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	1d39      	adds	r1, r7, #4
 8008a64:	2200      	movs	r2, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe f80e 	bl	8006a88 <xQueueReceive>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f47f af2a 	bne.w	80088c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop
 8008a78:	3730      	adds	r7, #48	; 0x30
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000e88 	.word	0x20000e88

08008a84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a8a:	e048      	b.n	8008b1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a8c:	4b2d      	ldr	r3, [pc, #180]	; (8008b44 <prvSwitchTimerLists+0xc0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a96:	4b2b      	ldr	r3, [pc, #172]	; (8008b44 <prvSwitchTimerLists+0xc0>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fd fbf7 	bl	8006298 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ab8:	f003 0304 	and.w	r3, r3, #4
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d02e      	beq.n	8008b1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d90e      	bls.n	8008af0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ade:	4b19      	ldr	r3, [pc, #100]	; (8008b44 <prvSwitchTimerLists+0xc0>)
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f7fd fb9c 	bl	8006226 <vListInsert>
 8008aee:	e016      	b.n	8008b1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008af0:	2300      	movs	r3, #0
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	2300      	movs	r3, #0
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	2100      	movs	r1, #0
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f7ff fd60 	bl	80085c0 <xTimerGenericCommand>
 8008b00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	603b      	str	r3, [r7, #0]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <prvSwitchTimerLists+0xc0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1b1      	bne.n	8008a8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b28:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <prvSwitchTimerLists+0xc0>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b2e:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <prvSwitchTimerLists+0xc4>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a04      	ldr	r2, [pc, #16]	; (8008b44 <prvSwitchTimerLists+0xc0>)
 8008b34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b36:	4a04      	ldr	r2, [pc, #16]	; (8008b48 <prvSwitchTimerLists+0xc4>)
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	6013      	str	r3, [r2, #0]
}
 8008b3c:	bf00      	nop
 8008b3e:	3718      	adds	r7, #24
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	20000e80 	.word	0x20000e80
 8008b48:	20000e84 	.word	0x20000e84

08008b4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b52:	f000 f987 	bl	8008e64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b56:	4b15      	ldr	r3, [pc, #84]	; (8008bac <prvCheckForValidListAndQueue+0x60>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d120      	bne.n	8008ba0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b5e:	4814      	ldr	r0, [pc, #80]	; (8008bb0 <prvCheckForValidListAndQueue+0x64>)
 8008b60:	f7fd fb10 	bl	8006184 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b64:	4813      	ldr	r0, [pc, #76]	; (8008bb4 <prvCheckForValidListAndQueue+0x68>)
 8008b66:	f7fd fb0d 	bl	8006184 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b6a:	4b13      	ldr	r3, [pc, #76]	; (8008bb8 <prvCheckForValidListAndQueue+0x6c>)
 8008b6c:	4a10      	ldr	r2, [pc, #64]	; (8008bb0 <prvCheckForValidListAndQueue+0x64>)
 8008b6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b70:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <prvCheckForValidListAndQueue+0x70>)
 8008b72:	4a10      	ldr	r2, [pc, #64]	; (8008bb4 <prvCheckForValidListAndQueue+0x68>)
 8008b74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b76:	2300      	movs	r3, #0
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <prvCheckForValidListAndQueue+0x74>)
 8008b7c:	4a11      	ldr	r2, [pc, #68]	; (8008bc4 <prvCheckForValidListAndQueue+0x78>)
 8008b7e:	2110      	movs	r1, #16
 8008b80:	200a      	movs	r0, #10
 8008b82:	f7fd fc1b 	bl	80063bc <xQueueGenericCreateStatic>
 8008b86:	4603      	mov	r3, r0
 8008b88:	4a08      	ldr	r2, [pc, #32]	; (8008bac <prvCheckForValidListAndQueue+0x60>)
 8008b8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b8c:	4b07      	ldr	r3, [pc, #28]	; (8008bac <prvCheckForValidListAndQueue+0x60>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <prvCheckForValidListAndQueue+0x60>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	490b      	ldr	r1, [pc, #44]	; (8008bc8 <prvCheckForValidListAndQueue+0x7c>)
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fb2c 	bl	80071f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ba0:	f000 f990 	bl	8008ec4 <vPortExitCritical>
}
 8008ba4:	bf00      	nop
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000e88 	.word	0x20000e88
 8008bb0:	20000e58 	.word	0x20000e58
 8008bb4:	20000e6c 	.word	0x20000e6c
 8008bb8:	20000e80 	.word	0x20000e80
 8008bbc:	20000e84 	.word	0x20000e84
 8008bc0:	20000f34 	.word	0x20000f34
 8008bc4:	20000e94 	.word	0x20000e94
 8008bc8:	08009e74 	.word	0x08009e74

08008bcc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <pvTimerGetTimerID+0x28>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	60fb      	str	r3, [r7, #12]
}
 8008bf0:	bf00      	nop
 8008bf2:	e7fe      	b.n	8008bf2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008bf4:	f000 f936 	bl	8008e64 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008bfe:	f000 f961 	bl	8008ec4 <vPortExitCritical>

	return pvReturn;
 8008c02:	693b      	ldr	r3, [r7, #16]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3b04      	subs	r3, #4
 8008c1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3b04      	subs	r3, #4
 8008c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f023 0201 	bic.w	r2, r3, #1
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3b04      	subs	r3, #4
 8008c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c3c:	4a0c      	ldr	r2, [pc, #48]	; (8008c70 <pxPortInitialiseStack+0x64>)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3b14      	subs	r3, #20
 8008c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3b04      	subs	r3, #4
 8008c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f06f 0202 	mvn.w	r2, #2
 8008c5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3b20      	subs	r3, #32
 8008c60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c62:	68fb      	ldr	r3, [r7, #12]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	08008c75 	.word	0x08008c75

08008c74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c7e:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <prvTaskExitError+0x54>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c86:	d00a      	beq.n	8008c9e <prvTaskExitError+0x2a>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	60fb      	str	r3, [r7, #12]
}
 8008c9a:	bf00      	nop
 8008c9c:	e7fe      	b.n	8008c9c <prvTaskExitError+0x28>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	60bb      	str	r3, [r7, #8]
}
 8008cb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cb2:	bf00      	nop
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0fc      	beq.n	8008cb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cba:	bf00      	nop
 8008cbc:	bf00      	nop
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	2000000c 	.word	0x2000000c
 8008ccc:	00000000 	.word	0x00000000

08008cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008cd0:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <pxCurrentTCBConst2>)
 8008cd2:	6819      	ldr	r1, [r3, #0]
 8008cd4:	6808      	ldr	r0, [r1, #0]
 8008cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cda:	f380 8809 	msr	PSP, r0
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f04f 0000 	mov.w	r0, #0
 8008ce6:	f380 8811 	msr	BASEPRI, r0
 8008cea:	4770      	bx	lr
 8008cec:	f3af 8000 	nop.w

08008cf0 <pxCurrentTCBConst2>:
 8008cf0:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop

08008cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cf8:	4808      	ldr	r0, [pc, #32]	; (8008d1c <prvPortStartFirstTask+0x24>)
 8008cfa:	6800      	ldr	r0, [r0, #0]
 8008cfc:	6800      	ldr	r0, [r0, #0]
 8008cfe:	f380 8808 	msr	MSP, r0
 8008d02:	f04f 0000 	mov.w	r0, #0
 8008d06:	f380 8814 	msr	CONTROL, r0
 8008d0a:	b662      	cpsie	i
 8008d0c:	b661      	cpsie	f
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	df00      	svc	0
 8008d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d1a:	bf00      	nop
 8008d1c:	e000ed08 	.word	0xe000ed08

08008d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d26:	4b46      	ldr	r3, [pc, #280]	; (8008e40 <xPortStartScheduler+0x120>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a46      	ldr	r2, [pc, #280]	; (8008e44 <xPortStartScheduler+0x124>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d10a      	bne.n	8008d46 <xPortStartScheduler+0x26>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	613b      	str	r3, [r7, #16]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d46:	4b3e      	ldr	r3, [pc, #248]	; (8008e40 <xPortStartScheduler+0x120>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a3f      	ldr	r2, [pc, #252]	; (8008e48 <xPortStartScheduler+0x128>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d10a      	bne.n	8008d66 <xPortStartScheduler+0x46>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	60fb      	str	r3, [r7, #12]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d66:	4b39      	ldr	r3, [pc, #228]	; (8008e4c <xPortStartScheduler+0x12c>)
 8008d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	22ff      	movs	r2, #255	; 0xff
 8008d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	4b31      	ldr	r3, [pc, #196]	; (8008e50 <xPortStartScheduler+0x130>)
 8008d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d8e:	4b31      	ldr	r3, [pc, #196]	; (8008e54 <xPortStartScheduler+0x134>)
 8008d90:	2207      	movs	r2, #7
 8008d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d94:	e009      	b.n	8008daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d96:	4b2f      	ldr	r3, [pc, #188]	; (8008e54 <xPortStartScheduler+0x134>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	4a2d      	ldr	r2, [pc, #180]	; (8008e54 <xPortStartScheduler+0x134>)
 8008d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db2:	2b80      	cmp	r3, #128	; 0x80
 8008db4:	d0ef      	beq.n	8008d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008db6:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <xPortStartScheduler+0x134>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f1c3 0307 	rsb	r3, r3, #7
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d00a      	beq.n	8008dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	60bb      	str	r3, [r7, #8]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008dd8:	4b1e      	ldr	r3, [pc, #120]	; (8008e54 <xPortStartScheduler+0x134>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	021b      	lsls	r3, r3, #8
 8008dde:	4a1d      	ldr	r2, [pc, #116]	; (8008e54 <xPortStartScheduler+0x134>)
 8008de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008de2:	4b1c      	ldr	r3, [pc, #112]	; (8008e54 <xPortStartScheduler+0x134>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dea:	4a1a      	ldr	r2, [pc, #104]	; (8008e54 <xPortStartScheduler+0x134>)
 8008dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008df6:	4b18      	ldr	r3, [pc, #96]	; (8008e58 <xPortStartScheduler+0x138>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a17      	ldr	r2, [pc, #92]	; (8008e58 <xPortStartScheduler+0x138>)
 8008dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e02:	4b15      	ldr	r3, [pc, #84]	; (8008e58 <xPortStartScheduler+0x138>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a14      	ldr	r2, [pc, #80]	; (8008e58 <xPortStartScheduler+0x138>)
 8008e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e0e:	f000 f8dd 	bl	8008fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e12:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <xPortStartScheduler+0x13c>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e18:	f000 f8fc 	bl	8009014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e1c:	4b10      	ldr	r3, [pc, #64]	; (8008e60 <xPortStartScheduler+0x140>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a0f      	ldr	r2, [pc, #60]	; (8008e60 <xPortStartScheduler+0x140>)
 8008e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e28:	f7ff ff66 	bl	8008cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e2c:	f7fe fe9c 	bl	8007b68 <vTaskSwitchContext>
	prvTaskExitError();
 8008e30:	f7ff ff20 	bl	8008c74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	e000ed00 	.word	0xe000ed00
 8008e44:	410fc271 	.word	0x410fc271
 8008e48:	410fc270 	.word	0x410fc270
 8008e4c:	e000e400 	.word	0xe000e400
 8008e50:	20000f84 	.word	0x20000f84
 8008e54:	20000f88 	.word	0x20000f88
 8008e58:	e000ed20 	.word	0xe000ed20
 8008e5c:	2000000c 	.word	0x2000000c
 8008e60:	e000ef34 	.word	0xe000ef34

08008e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	607b      	str	r3, [r7, #4]
}
 8008e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <vPortEnterCritical+0x58>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	4a0d      	ldr	r2, [pc, #52]	; (8008ebc <vPortEnterCritical+0x58>)
 8008e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e88:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <vPortEnterCritical+0x58>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d10f      	bne.n	8008eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e90:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <vPortEnterCritical+0x5c>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	603b      	str	r3, [r7, #0]
}
 8008eac:	bf00      	nop
 8008eae:	e7fe      	b.n	8008eae <vPortEnterCritical+0x4a>
	}
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	2000000c 	.word	0x2000000c
 8008ec0:	e000ed04 	.word	0xe000ed04

08008ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <vPortExitCritical+0x50>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10a      	bne.n	8008ee8 <vPortExitCritical+0x24>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	607b      	str	r3, [r7, #4]
}
 8008ee4:	bf00      	nop
 8008ee6:	e7fe      	b.n	8008ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <vPortExitCritical+0x50>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4a09      	ldr	r2, [pc, #36]	; (8008f14 <vPortExitCritical+0x50>)
 8008ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ef2:	4b08      	ldr	r3, [pc, #32]	; (8008f14 <vPortExitCritical+0x50>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d105      	bne.n	8008f06 <vPortExitCritical+0x42>
 8008efa:	2300      	movs	r3, #0
 8008efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	f383 8811 	msr	BASEPRI, r3
}
 8008f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	2000000c 	.word	0x2000000c
	...

08008f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f20:	f3ef 8009 	mrs	r0, PSP
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <pxCurrentTCBConst>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	f01e 0f10 	tst.w	lr, #16
 8008f30:	bf08      	it	eq
 8008f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3a:	6010      	str	r0, [r2, #0]
 8008f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f44:	f380 8811 	msr	BASEPRI, r0
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f7fe fe0a 	bl	8007b68 <vTaskSwitchContext>
 8008f54:	f04f 0000 	mov.w	r0, #0
 8008f58:	f380 8811 	msr	BASEPRI, r0
 8008f5c:	bc09      	pop	{r0, r3}
 8008f5e:	6819      	ldr	r1, [r3, #0]
 8008f60:	6808      	ldr	r0, [r1, #0]
 8008f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f66:	f01e 0f10 	tst.w	lr, #16
 8008f6a:	bf08      	it	eq
 8008f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f70:	f380 8809 	msr	PSP, r0
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	f3af 8000 	nop.w

08008f80 <pxCurrentTCBConst>:
 8008f80:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop

08008f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	607b      	str	r3, [r7, #4]
}
 8008fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fa2:	f7fe fd27 	bl	80079f4 <xTaskIncrementTick>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008fac:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <xPortSysTickHandler+0x40>)
 8008fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	f383 8811 	msr	BASEPRI, r3
}
 8008fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fd0:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <vPortSetupTimerInterrupt+0x34>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fd6:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <vPortSetupTimerInterrupt+0x38>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <vPortSetupTimerInterrupt+0x3c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a0a      	ldr	r2, [pc, #40]	; (800900c <vPortSetupTimerInterrupt+0x40>)
 8008fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe6:	099b      	lsrs	r3, r3, #6
 8008fe8:	4a09      	ldr	r2, [pc, #36]	; (8009010 <vPortSetupTimerInterrupt+0x44>)
 8008fea:	3b01      	subs	r3, #1
 8008fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fee:	4b04      	ldr	r3, [pc, #16]	; (8009000 <vPortSetupTimerInterrupt+0x34>)
 8008ff0:	2207      	movs	r2, #7
 8008ff2:	601a      	str	r2, [r3, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	e000e010 	.word	0xe000e010
 8009004:	e000e018 	.word	0xe000e018
 8009008:	20000000 	.word	0x20000000
 800900c:	10624dd3 	.word	0x10624dd3
 8009010:	e000e014 	.word	0xe000e014

08009014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009024 <vPortEnableVFP+0x10>
 8009018:	6801      	ldr	r1, [r0, #0]
 800901a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800901e:	6001      	str	r1, [r0, #0]
 8009020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009022:	bf00      	nop
 8009024:	e000ed88 	.word	0xe000ed88

08009028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800902e:	f3ef 8305 	mrs	r3, IPSR
 8009032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b0f      	cmp	r3, #15
 8009038:	d914      	bls.n	8009064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800903a:	4a17      	ldr	r2, [pc, #92]	; (8009098 <vPortValidateInterruptPriority+0x70>)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4413      	add	r3, r2
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009044:	4b15      	ldr	r3, [pc, #84]	; (800909c <vPortValidateInterruptPriority+0x74>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	7afa      	ldrb	r2, [r7, #11]
 800904a:	429a      	cmp	r2, r3
 800904c:	d20a      	bcs.n	8009064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
}
 8009060:	bf00      	nop
 8009062:	e7fe      	b.n	8009062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009064:	4b0e      	ldr	r3, [pc, #56]	; (80090a0 <vPortValidateInterruptPriority+0x78>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800906c:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <vPortValidateInterruptPriority+0x7c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d90a      	bls.n	800908a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	603b      	str	r3, [r7, #0]
}
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <vPortValidateInterruptPriority+0x60>
	}
 800908a:	bf00      	nop
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	e000e3f0 	.word	0xe000e3f0
 800909c:	20000f84 	.word	0x20000f84
 80090a0:	e000ed0c 	.word	0xe000ed0c
 80090a4:	20000f88 	.word	0x20000f88

080090a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b08a      	sub	sp, #40	; 0x28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090b0:	2300      	movs	r3, #0
 80090b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090b4:	f7fe fbe2 	bl	800787c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090b8:	4b5b      	ldr	r3, [pc, #364]	; (8009228 <pvPortMalloc+0x180>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090c0:	f000 f920 	bl	8009304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090c4:	4b59      	ldr	r3, [pc, #356]	; (800922c <pvPortMalloc+0x184>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4013      	ands	r3, r2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f040 8093 	bne.w	80091f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01d      	beq.n	8009114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80090d8:	2208      	movs	r2, #8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d014      	beq.n	8009114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f023 0307 	bic.w	r3, r3, #7
 80090f0:	3308      	adds	r3, #8
 80090f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f003 0307 	and.w	r3, r3, #7
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00a      	beq.n	8009114 <pvPortMalloc+0x6c>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	617b      	str	r3, [r7, #20]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d06e      	beq.n	80091f8 <pvPortMalloc+0x150>
 800911a:	4b45      	ldr	r3, [pc, #276]	; (8009230 <pvPortMalloc+0x188>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	429a      	cmp	r2, r3
 8009122:	d869      	bhi.n	80091f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009124:	4b43      	ldr	r3, [pc, #268]	; (8009234 <pvPortMalloc+0x18c>)
 8009126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009128:	4b42      	ldr	r3, [pc, #264]	; (8009234 <pvPortMalloc+0x18c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800912e:	e004      	b.n	800913a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d903      	bls.n	800914c <pvPortMalloc+0xa4>
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1f1      	bne.n	8009130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800914c:	4b36      	ldr	r3, [pc, #216]	; (8009228 <pvPortMalloc+0x180>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009152:	429a      	cmp	r2, r3
 8009154:	d050      	beq.n	80091f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2208      	movs	r2, #8
 800915c:	4413      	add	r3, r2
 800915e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	1ad2      	subs	r2, r2, r3
 8009170:	2308      	movs	r3, #8
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	429a      	cmp	r2, r3
 8009176:	d91f      	bls.n	80091b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	f003 0307 	and.w	r3, r3, #7
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <pvPortMalloc+0xf8>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	613b      	str	r3, [r7, #16]
}
 800919c:	bf00      	nop
 800919e:	e7fe      	b.n	800919e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	1ad2      	subs	r2, r2, r3
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091b2:	69b8      	ldr	r0, [r7, #24]
 80091b4:	f000 f908 	bl	80093c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091b8:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <pvPortMalloc+0x188>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	4a1b      	ldr	r2, [pc, #108]	; (8009230 <pvPortMalloc+0x188>)
 80091c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091c6:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <pvPortMalloc+0x188>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <pvPortMalloc+0x190>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d203      	bcs.n	80091da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091d2:	4b17      	ldr	r3, [pc, #92]	; (8009230 <pvPortMalloc+0x188>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a18      	ldr	r2, [pc, #96]	; (8009238 <pvPortMalloc+0x190>)
 80091d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	4b13      	ldr	r3, [pc, #76]	; (800922c <pvPortMalloc+0x184>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80091ee:	4b13      	ldr	r3, [pc, #76]	; (800923c <pvPortMalloc+0x194>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	4a11      	ldr	r2, [pc, #68]	; (800923c <pvPortMalloc+0x194>)
 80091f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091f8:	f7fe fb4e 	bl	8007898 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0307 	and.w	r3, r3, #7
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <pvPortMalloc+0x174>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	60fb      	str	r3, [r7, #12]
}
 8009218:	bf00      	nop
 800921a:	e7fe      	b.n	800921a <pvPortMalloc+0x172>
	return pvReturn;
 800921c:	69fb      	ldr	r3, [r7, #28]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3728      	adds	r7, #40	; 0x28
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20001b4c 	.word	0x20001b4c
 800922c:	20001b60 	.word	0x20001b60
 8009230:	20001b50 	.word	0x20001b50
 8009234:	20001b44 	.word	0x20001b44
 8009238:	20001b54 	.word	0x20001b54
 800923c:	20001b58 	.word	0x20001b58

08009240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d04d      	beq.n	80092ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009252:	2308      	movs	r3, #8
 8009254:	425b      	negs	r3, r3
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	4413      	add	r3, r2
 800925a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <vPortFree+0xb8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4013      	ands	r3, r2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <vPortFree+0x44>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	60fb      	str	r3, [r7, #12]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00a      	beq.n	80092a2 <vPortFree+0x62>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	60bb      	str	r3, [r7, #8]
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <vPortFree+0xb8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01e      	beq.n	80092ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d11a      	bne.n	80092ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	4b0e      	ldr	r3, [pc, #56]	; (80092f8 <vPortFree+0xb8>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	43db      	mvns	r3, r3
 80092c2:	401a      	ands	r2, r3
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092c8:	f7fe fad8 	bl	800787c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <vPortFree+0xbc>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4413      	add	r3, r2
 80092d6:	4a09      	ldr	r2, [pc, #36]	; (80092fc <vPortFree+0xbc>)
 80092d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092da:	6938      	ldr	r0, [r7, #16]
 80092dc:	f000 f874 	bl	80093c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80092e0:	4b07      	ldr	r3, [pc, #28]	; (8009300 <vPortFree+0xc0>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	4a06      	ldr	r2, [pc, #24]	; (8009300 <vPortFree+0xc0>)
 80092e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80092ea:	f7fe fad5 	bl	8007898 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092ee:	bf00      	nop
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20001b60 	.word	0x20001b60
 80092fc:	20001b50 	.word	0x20001b50
 8009300:	20001b5c 	.word	0x20001b5c

08009304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800930a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800930e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009310:	4b27      	ldr	r3, [pc, #156]	; (80093b0 <prvHeapInit+0xac>)
 8009312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00c      	beq.n	8009338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3307      	adds	r3, #7
 8009322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 0307 	bic.w	r3, r3, #7
 800932a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	4a1f      	ldr	r2, [pc, #124]	; (80093b0 <prvHeapInit+0xac>)
 8009334:	4413      	add	r3, r2
 8009336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800933c:	4a1d      	ldr	r2, [pc, #116]	; (80093b4 <prvHeapInit+0xb0>)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009342:	4b1c      	ldr	r3, [pc, #112]	; (80093b4 <prvHeapInit+0xb0>)
 8009344:	2200      	movs	r2, #0
 8009346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009350:	2208      	movs	r2, #8
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1a9b      	subs	r3, r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4a15      	ldr	r2, [pc, #84]	; (80093b8 <prvHeapInit+0xb4>)
 8009364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009366:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <prvHeapInit+0xb4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800936e:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <prvHeapInit+0xb4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2200      	movs	r2, #0
 8009374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009384:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <prvHeapInit+0xb4>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <prvHeapInit+0xb8>)
 8009392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	4a09      	ldr	r2, [pc, #36]	; (80093c0 <prvHeapInit+0xbc>)
 800939a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800939c:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <prvHeapInit+0xc0>)
 800939e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093a2:	601a      	str	r2, [r3, #0]
}
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	20000f8c 	.word	0x20000f8c
 80093b4:	20001b44 	.word	0x20001b44
 80093b8:	20001b4c 	.word	0x20001b4c
 80093bc:	20001b54 	.word	0x20001b54
 80093c0:	20001b50 	.word	0x20001b50
 80093c4:	20001b60 	.word	0x20001b60

080093c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093d0:	4b28      	ldr	r3, [pc, #160]	; (8009474 <prvInsertBlockIntoFreeList+0xac>)
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	e002      	b.n	80093dc <prvInsertBlockIntoFreeList+0x14>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d8f7      	bhi.n	80093d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	4413      	add	r3, r2
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d108      	bne.n	800940a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	441a      	add	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	441a      	add	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d118      	bne.n	8009450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	4b15      	ldr	r3, [pc, #84]	; (8009478 <prvInsertBlockIntoFreeList+0xb0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d00d      	beq.n	8009446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	441a      	add	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	e008      	b.n	8009458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009446:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <prvInsertBlockIntoFreeList+0xb0>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	e003      	b.n	8009458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	429a      	cmp	r2, r3
 800945e:	d002      	beq.n	8009466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009466:	bf00      	nop
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	20001b44 	.word	0x20001b44
 8009478:	20001b4c 	.word	0x20001b4c

0800947c <std>:
 800947c:	2300      	movs	r3, #0
 800947e:	b510      	push	{r4, lr}
 8009480:	4604      	mov	r4, r0
 8009482:	e9c0 3300 	strd	r3, r3, [r0]
 8009486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800948a:	6083      	str	r3, [r0, #8]
 800948c:	8181      	strh	r1, [r0, #12]
 800948e:	6643      	str	r3, [r0, #100]	; 0x64
 8009490:	81c2      	strh	r2, [r0, #14]
 8009492:	6183      	str	r3, [r0, #24]
 8009494:	4619      	mov	r1, r3
 8009496:	2208      	movs	r2, #8
 8009498:	305c      	adds	r0, #92	; 0x5c
 800949a:	f000 f90d 	bl	80096b8 <memset>
 800949e:	4b0d      	ldr	r3, [pc, #52]	; (80094d4 <std+0x58>)
 80094a0:	6263      	str	r3, [r4, #36]	; 0x24
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <std+0x5c>)
 80094a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80094a6:	4b0d      	ldr	r3, [pc, #52]	; (80094dc <std+0x60>)
 80094a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094aa:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <std+0x64>)
 80094ac:	6323      	str	r3, [r4, #48]	; 0x30
 80094ae:	4b0d      	ldr	r3, [pc, #52]	; (80094e4 <std+0x68>)
 80094b0:	6224      	str	r4, [r4, #32]
 80094b2:	429c      	cmp	r4, r3
 80094b4:	d006      	beq.n	80094c4 <std+0x48>
 80094b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80094ba:	4294      	cmp	r4, r2
 80094bc:	d002      	beq.n	80094c4 <std+0x48>
 80094be:	33d0      	adds	r3, #208	; 0xd0
 80094c0:	429c      	cmp	r4, r3
 80094c2:	d105      	bne.n	80094d0 <std+0x54>
 80094c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094cc:	f000 b926 	b.w	800971c <__retarget_lock_init_recursive>
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	bf00      	nop
 80094d4:	080099f5 	.word	0x080099f5
 80094d8:	08009a17 	.word	0x08009a17
 80094dc:	08009a4f 	.word	0x08009a4f
 80094e0:	08009a73 	.word	0x08009a73
 80094e4:	20001b64 	.word	0x20001b64

080094e8 <stdio_exit_handler>:
 80094e8:	4a02      	ldr	r2, [pc, #8]	; (80094f4 <stdio_exit_handler+0xc>)
 80094ea:	4903      	ldr	r1, [pc, #12]	; (80094f8 <stdio_exit_handler+0x10>)
 80094ec:	4803      	ldr	r0, [pc, #12]	; (80094fc <stdio_exit_handler+0x14>)
 80094ee:	f000 b869 	b.w	80095c4 <_fwalk_sglue>
 80094f2:	bf00      	nop
 80094f4:	20000010 	.word	0x20000010
 80094f8:	0800998d 	.word	0x0800998d
 80094fc:	2000001c 	.word	0x2000001c

08009500 <cleanup_stdio>:
 8009500:	6841      	ldr	r1, [r0, #4]
 8009502:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <cleanup_stdio+0x34>)
 8009504:	4299      	cmp	r1, r3
 8009506:	b510      	push	{r4, lr}
 8009508:	4604      	mov	r4, r0
 800950a:	d001      	beq.n	8009510 <cleanup_stdio+0x10>
 800950c:	f000 fa3e 	bl	800998c <_fflush_r>
 8009510:	68a1      	ldr	r1, [r4, #8]
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <cleanup_stdio+0x38>)
 8009514:	4299      	cmp	r1, r3
 8009516:	d002      	beq.n	800951e <cleanup_stdio+0x1e>
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fa37 	bl	800998c <_fflush_r>
 800951e:	68e1      	ldr	r1, [r4, #12]
 8009520:	4b06      	ldr	r3, [pc, #24]	; (800953c <cleanup_stdio+0x3c>)
 8009522:	4299      	cmp	r1, r3
 8009524:	d004      	beq.n	8009530 <cleanup_stdio+0x30>
 8009526:	4620      	mov	r0, r4
 8009528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800952c:	f000 ba2e 	b.w	800998c <_fflush_r>
 8009530:	bd10      	pop	{r4, pc}
 8009532:	bf00      	nop
 8009534:	20001b64 	.word	0x20001b64
 8009538:	20001bcc 	.word	0x20001bcc
 800953c:	20001c34 	.word	0x20001c34

08009540 <global_stdio_init.part.0>:
 8009540:	b510      	push	{r4, lr}
 8009542:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <global_stdio_init.part.0+0x30>)
 8009544:	4c0b      	ldr	r4, [pc, #44]	; (8009574 <global_stdio_init.part.0+0x34>)
 8009546:	4a0c      	ldr	r2, [pc, #48]	; (8009578 <global_stdio_init.part.0+0x38>)
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	4620      	mov	r0, r4
 800954c:	2200      	movs	r2, #0
 800954e:	2104      	movs	r1, #4
 8009550:	f7ff ff94 	bl	800947c <std>
 8009554:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009558:	2201      	movs	r2, #1
 800955a:	2109      	movs	r1, #9
 800955c:	f7ff ff8e 	bl	800947c <std>
 8009560:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009564:	2202      	movs	r2, #2
 8009566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800956a:	2112      	movs	r1, #18
 800956c:	f7ff bf86 	b.w	800947c <std>
 8009570:	20001c9c 	.word	0x20001c9c
 8009574:	20001b64 	.word	0x20001b64
 8009578:	080094e9 	.word	0x080094e9

0800957c <__sfp_lock_acquire>:
 800957c:	4801      	ldr	r0, [pc, #4]	; (8009584 <__sfp_lock_acquire+0x8>)
 800957e:	f000 b8ce 	b.w	800971e <__retarget_lock_acquire_recursive>
 8009582:	bf00      	nop
 8009584:	20001ca1 	.word	0x20001ca1

08009588 <__sfp_lock_release>:
 8009588:	4801      	ldr	r0, [pc, #4]	; (8009590 <__sfp_lock_release+0x8>)
 800958a:	f000 b8c9 	b.w	8009720 <__retarget_lock_release_recursive>
 800958e:	bf00      	nop
 8009590:	20001ca1 	.word	0x20001ca1

08009594 <__sinit>:
 8009594:	b510      	push	{r4, lr}
 8009596:	4604      	mov	r4, r0
 8009598:	f7ff fff0 	bl	800957c <__sfp_lock_acquire>
 800959c:	6a23      	ldr	r3, [r4, #32]
 800959e:	b11b      	cbz	r3, 80095a8 <__sinit+0x14>
 80095a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095a4:	f7ff bff0 	b.w	8009588 <__sfp_lock_release>
 80095a8:	4b04      	ldr	r3, [pc, #16]	; (80095bc <__sinit+0x28>)
 80095aa:	6223      	str	r3, [r4, #32]
 80095ac:	4b04      	ldr	r3, [pc, #16]	; (80095c0 <__sinit+0x2c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1f5      	bne.n	80095a0 <__sinit+0xc>
 80095b4:	f7ff ffc4 	bl	8009540 <global_stdio_init.part.0>
 80095b8:	e7f2      	b.n	80095a0 <__sinit+0xc>
 80095ba:	bf00      	nop
 80095bc:	08009501 	.word	0x08009501
 80095c0:	20001c9c 	.word	0x20001c9c

080095c4 <_fwalk_sglue>:
 80095c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c8:	4607      	mov	r7, r0
 80095ca:	4688      	mov	r8, r1
 80095cc:	4614      	mov	r4, r2
 80095ce:	2600      	movs	r6, #0
 80095d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095d4:	f1b9 0901 	subs.w	r9, r9, #1
 80095d8:	d505      	bpl.n	80095e6 <_fwalk_sglue+0x22>
 80095da:	6824      	ldr	r4, [r4, #0]
 80095dc:	2c00      	cmp	r4, #0
 80095de:	d1f7      	bne.n	80095d0 <_fwalk_sglue+0xc>
 80095e0:	4630      	mov	r0, r6
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	89ab      	ldrh	r3, [r5, #12]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d907      	bls.n	80095fc <_fwalk_sglue+0x38>
 80095ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095f0:	3301      	adds	r3, #1
 80095f2:	d003      	beq.n	80095fc <_fwalk_sglue+0x38>
 80095f4:	4629      	mov	r1, r5
 80095f6:	4638      	mov	r0, r7
 80095f8:	47c0      	blx	r8
 80095fa:	4306      	orrs	r6, r0
 80095fc:	3568      	adds	r5, #104	; 0x68
 80095fe:	e7e9      	b.n	80095d4 <_fwalk_sglue+0x10>

08009600 <_puts_r>:
 8009600:	6a03      	ldr	r3, [r0, #32]
 8009602:	b570      	push	{r4, r5, r6, lr}
 8009604:	6884      	ldr	r4, [r0, #8]
 8009606:	4605      	mov	r5, r0
 8009608:	460e      	mov	r6, r1
 800960a:	b90b      	cbnz	r3, 8009610 <_puts_r+0x10>
 800960c:	f7ff ffc2 	bl	8009594 <__sinit>
 8009610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009612:	07db      	lsls	r3, r3, #31
 8009614:	d405      	bmi.n	8009622 <_puts_r+0x22>
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	0598      	lsls	r0, r3, #22
 800961a:	d402      	bmi.n	8009622 <_puts_r+0x22>
 800961c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800961e:	f000 f87e 	bl	800971e <__retarget_lock_acquire_recursive>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	0719      	lsls	r1, r3, #28
 8009626:	d513      	bpl.n	8009650 <_puts_r+0x50>
 8009628:	6923      	ldr	r3, [r4, #16]
 800962a:	b18b      	cbz	r3, 8009650 <_puts_r+0x50>
 800962c:	3e01      	subs	r6, #1
 800962e:	68a3      	ldr	r3, [r4, #8]
 8009630:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009634:	3b01      	subs	r3, #1
 8009636:	60a3      	str	r3, [r4, #8]
 8009638:	b9e9      	cbnz	r1, 8009676 <_puts_r+0x76>
 800963a:	2b00      	cmp	r3, #0
 800963c:	da2e      	bge.n	800969c <_puts_r+0x9c>
 800963e:	4622      	mov	r2, r4
 8009640:	210a      	movs	r1, #10
 8009642:	4628      	mov	r0, r5
 8009644:	f000 fa19 	bl	8009a7a <__swbuf_r>
 8009648:	3001      	adds	r0, #1
 800964a:	d007      	beq.n	800965c <_puts_r+0x5c>
 800964c:	250a      	movs	r5, #10
 800964e:	e007      	b.n	8009660 <_puts_r+0x60>
 8009650:	4621      	mov	r1, r4
 8009652:	4628      	mov	r0, r5
 8009654:	f000 fa4e 	bl	8009af4 <__swsetup_r>
 8009658:	2800      	cmp	r0, #0
 800965a:	d0e7      	beq.n	800962c <_puts_r+0x2c>
 800965c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009662:	07da      	lsls	r2, r3, #31
 8009664:	d405      	bmi.n	8009672 <_puts_r+0x72>
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	059b      	lsls	r3, r3, #22
 800966a:	d402      	bmi.n	8009672 <_puts_r+0x72>
 800966c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800966e:	f000 f857 	bl	8009720 <__retarget_lock_release_recursive>
 8009672:	4628      	mov	r0, r5
 8009674:	bd70      	pop	{r4, r5, r6, pc}
 8009676:	2b00      	cmp	r3, #0
 8009678:	da04      	bge.n	8009684 <_puts_r+0x84>
 800967a:	69a2      	ldr	r2, [r4, #24]
 800967c:	429a      	cmp	r2, r3
 800967e:	dc06      	bgt.n	800968e <_puts_r+0x8e>
 8009680:	290a      	cmp	r1, #10
 8009682:	d004      	beq.n	800968e <_puts_r+0x8e>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	6022      	str	r2, [r4, #0]
 800968a:	7019      	strb	r1, [r3, #0]
 800968c:	e7cf      	b.n	800962e <_puts_r+0x2e>
 800968e:	4622      	mov	r2, r4
 8009690:	4628      	mov	r0, r5
 8009692:	f000 f9f2 	bl	8009a7a <__swbuf_r>
 8009696:	3001      	adds	r0, #1
 8009698:	d1c9      	bne.n	800962e <_puts_r+0x2e>
 800969a:	e7df      	b.n	800965c <_puts_r+0x5c>
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	250a      	movs	r5, #10
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	6022      	str	r2, [r4, #0]
 80096a4:	701d      	strb	r5, [r3, #0]
 80096a6:	e7db      	b.n	8009660 <_puts_r+0x60>

080096a8 <puts>:
 80096a8:	4b02      	ldr	r3, [pc, #8]	; (80096b4 <puts+0xc>)
 80096aa:	4601      	mov	r1, r0
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	f7ff bfa7 	b.w	8009600 <_puts_r>
 80096b2:	bf00      	nop
 80096b4:	20000068 	.word	0x20000068

080096b8 <memset>:
 80096b8:	4402      	add	r2, r0
 80096ba:	4603      	mov	r3, r0
 80096bc:	4293      	cmp	r3, r2
 80096be:	d100      	bne.n	80096c2 <memset+0xa>
 80096c0:	4770      	bx	lr
 80096c2:	f803 1b01 	strb.w	r1, [r3], #1
 80096c6:	e7f9      	b.n	80096bc <memset+0x4>

080096c8 <__errno>:
 80096c8:	4b01      	ldr	r3, [pc, #4]	; (80096d0 <__errno+0x8>)
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	20000068 	.word	0x20000068

080096d4 <__libc_init_array>:
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	4d0d      	ldr	r5, [pc, #52]	; (800970c <__libc_init_array+0x38>)
 80096d8:	4c0d      	ldr	r4, [pc, #52]	; (8009710 <__libc_init_array+0x3c>)
 80096da:	1b64      	subs	r4, r4, r5
 80096dc:	10a4      	asrs	r4, r4, #2
 80096de:	2600      	movs	r6, #0
 80096e0:	42a6      	cmp	r6, r4
 80096e2:	d109      	bne.n	80096f8 <__libc_init_array+0x24>
 80096e4:	4d0b      	ldr	r5, [pc, #44]	; (8009714 <__libc_init_array+0x40>)
 80096e6:	4c0c      	ldr	r4, [pc, #48]	; (8009718 <__libc_init_array+0x44>)
 80096e8:	f000 fb82 	bl	8009df0 <_init>
 80096ec:	1b64      	subs	r4, r4, r5
 80096ee:	10a4      	asrs	r4, r4, #2
 80096f0:	2600      	movs	r6, #0
 80096f2:	42a6      	cmp	r6, r4
 80096f4:	d105      	bne.n	8009702 <__libc_init_array+0x2e>
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
 80096f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096fc:	4798      	blx	r3
 80096fe:	3601      	adds	r6, #1
 8009700:	e7ee      	b.n	80096e0 <__libc_init_array+0xc>
 8009702:	f855 3b04 	ldr.w	r3, [r5], #4
 8009706:	4798      	blx	r3
 8009708:	3601      	adds	r6, #1
 800970a:	e7f2      	b.n	80096f2 <__libc_init_array+0x1e>
 800970c:	0800a00c 	.word	0x0800a00c
 8009710:	0800a00c 	.word	0x0800a00c
 8009714:	0800a00c 	.word	0x0800a00c
 8009718:	0800a010 	.word	0x0800a010

0800971c <__retarget_lock_init_recursive>:
 800971c:	4770      	bx	lr

0800971e <__retarget_lock_acquire_recursive>:
 800971e:	4770      	bx	lr

08009720 <__retarget_lock_release_recursive>:
 8009720:	4770      	bx	lr

08009722 <memcpy>:
 8009722:	440a      	add	r2, r1
 8009724:	4291      	cmp	r1, r2
 8009726:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800972a:	d100      	bne.n	800972e <memcpy+0xc>
 800972c:	4770      	bx	lr
 800972e:	b510      	push	{r4, lr}
 8009730:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009738:	4291      	cmp	r1, r2
 800973a:	d1f9      	bne.n	8009730 <memcpy+0xe>
 800973c:	bd10      	pop	{r4, pc}
	...

08009740 <sbrk_aligned>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	4e0e      	ldr	r6, [pc, #56]	; (800977c <sbrk_aligned+0x3c>)
 8009744:	460c      	mov	r4, r1
 8009746:	6831      	ldr	r1, [r6, #0]
 8009748:	4605      	mov	r5, r0
 800974a:	b911      	cbnz	r1, 8009752 <sbrk_aligned+0x12>
 800974c:	f000 fae2 	bl	8009d14 <_sbrk_r>
 8009750:	6030      	str	r0, [r6, #0]
 8009752:	4621      	mov	r1, r4
 8009754:	4628      	mov	r0, r5
 8009756:	f000 fadd 	bl	8009d14 <_sbrk_r>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d00a      	beq.n	8009774 <sbrk_aligned+0x34>
 800975e:	1cc4      	adds	r4, r0, #3
 8009760:	f024 0403 	bic.w	r4, r4, #3
 8009764:	42a0      	cmp	r0, r4
 8009766:	d007      	beq.n	8009778 <sbrk_aligned+0x38>
 8009768:	1a21      	subs	r1, r4, r0
 800976a:	4628      	mov	r0, r5
 800976c:	f000 fad2 	bl	8009d14 <_sbrk_r>
 8009770:	3001      	adds	r0, #1
 8009772:	d101      	bne.n	8009778 <sbrk_aligned+0x38>
 8009774:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009778:	4620      	mov	r0, r4
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	20001ca8 	.word	0x20001ca8

08009780 <_malloc_r>:
 8009780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009784:	1ccd      	adds	r5, r1, #3
 8009786:	f025 0503 	bic.w	r5, r5, #3
 800978a:	3508      	adds	r5, #8
 800978c:	2d0c      	cmp	r5, #12
 800978e:	bf38      	it	cc
 8009790:	250c      	movcc	r5, #12
 8009792:	2d00      	cmp	r5, #0
 8009794:	4607      	mov	r7, r0
 8009796:	db01      	blt.n	800979c <_malloc_r+0x1c>
 8009798:	42a9      	cmp	r1, r5
 800979a:	d905      	bls.n	80097a8 <_malloc_r+0x28>
 800979c:	230c      	movs	r3, #12
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	2600      	movs	r6, #0
 80097a2:	4630      	mov	r0, r6
 80097a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800987c <_malloc_r+0xfc>
 80097ac:	f000 f916 	bl	80099dc <__malloc_lock>
 80097b0:	f8d8 3000 	ldr.w	r3, [r8]
 80097b4:	461c      	mov	r4, r3
 80097b6:	bb5c      	cbnz	r4, 8009810 <_malloc_r+0x90>
 80097b8:	4629      	mov	r1, r5
 80097ba:	4638      	mov	r0, r7
 80097bc:	f7ff ffc0 	bl	8009740 <sbrk_aligned>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	4604      	mov	r4, r0
 80097c4:	d155      	bne.n	8009872 <_malloc_r+0xf2>
 80097c6:	f8d8 4000 	ldr.w	r4, [r8]
 80097ca:	4626      	mov	r6, r4
 80097cc:	2e00      	cmp	r6, #0
 80097ce:	d145      	bne.n	800985c <_malloc_r+0xdc>
 80097d0:	2c00      	cmp	r4, #0
 80097d2:	d048      	beq.n	8009866 <_malloc_r+0xe6>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	4631      	mov	r1, r6
 80097d8:	4638      	mov	r0, r7
 80097da:	eb04 0903 	add.w	r9, r4, r3
 80097de:	f000 fa99 	bl	8009d14 <_sbrk_r>
 80097e2:	4581      	cmp	r9, r0
 80097e4:	d13f      	bne.n	8009866 <_malloc_r+0xe6>
 80097e6:	6821      	ldr	r1, [r4, #0]
 80097e8:	1a6d      	subs	r5, r5, r1
 80097ea:	4629      	mov	r1, r5
 80097ec:	4638      	mov	r0, r7
 80097ee:	f7ff ffa7 	bl	8009740 <sbrk_aligned>
 80097f2:	3001      	adds	r0, #1
 80097f4:	d037      	beq.n	8009866 <_malloc_r+0xe6>
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	442b      	add	r3, r5
 80097fa:	6023      	str	r3, [r4, #0]
 80097fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d038      	beq.n	8009876 <_malloc_r+0xf6>
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	42a2      	cmp	r2, r4
 8009808:	d12b      	bne.n	8009862 <_malloc_r+0xe2>
 800980a:	2200      	movs	r2, #0
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	e00f      	b.n	8009830 <_malloc_r+0xb0>
 8009810:	6822      	ldr	r2, [r4, #0]
 8009812:	1b52      	subs	r2, r2, r5
 8009814:	d41f      	bmi.n	8009856 <_malloc_r+0xd6>
 8009816:	2a0b      	cmp	r2, #11
 8009818:	d917      	bls.n	800984a <_malloc_r+0xca>
 800981a:	1961      	adds	r1, r4, r5
 800981c:	42a3      	cmp	r3, r4
 800981e:	6025      	str	r5, [r4, #0]
 8009820:	bf18      	it	ne
 8009822:	6059      	strne	r1, [r3, #4]
 8009824:	6863      	ldr	r3, [r4, #4]
 8009826:	bf08      	it	eq
 8009828:	f8c8 1000 	streq.w	r1, [r8]
 800982c:	5162      	str	r2, [r4, r5]
 800982e:	604b      	str	r3, [r1, #4]
 8009830:	4638      	mov	r0, r7
 8009832:	f104 060b 	add.w	r6, r4, #11
 8009836:	f000 f8d7 	bl	80099e8 <__malloc_unlock>
 800983a:	f026 0607 	bic.w	r6, r6, #7
 800983e:	1d23      	adds	r3, r4, #4
 8009840:	1af2      	subs	r2, r6, r3
 8009842:	d0ae      	beq.n	80097a2 <_malloc_r+0x22>
 8009844:	1b9b      	subs	r3, r3, r6
 8009846:	50a3      	str	r3, [r4, r2]
 8009848:	e7ab      	b.n	80097a2 <_malloc_r+0x22>
 800984a:	42a3      	cmp	r3, r4
 800984c:	6862      	ldr	r2, [r4, #4]
 800984e:	d1dd      	bne.n	800980c <_malloc_r+0x8c>
 8009850:	f8c8 2000 	str.w	r2, [r8]
 8009854:	e7ec      	b.n	8009830 <_malloc_r+0xb0>
 8009856:	4623      	mov	r3, r4
 8009858:	6864      	ldr	r4, [r4, #4]
 800985a:	e7ac      	b.n	80097b6 <_malloc_r+0x36>
 800985c:	4634      	mov	r4, r6
 800985e:	6876      	ldr	r6, [r6, #4]
 8009860:	e7b4      	b.n	80097cc <_malloc_r+0x4c>
 8009862:	4613      	mov	r3, r2
 8009864:	e7cc      	b.n	8009800 <_malloc_r+0x80>
 8009866:	230c      	movs	r3, #12
 8009868:	603b      	str	r3, [r7, #0]
 800986a:	4638      	mov	r0, r7
 800986c:	f000 f8bc 	bl	80099e8 <__malloc_unlock>
 8009870:	e797      	b.n	80097a2 <_malloc_r+0x22>
 8009872:	6025      	str	r5, [r4, #0]
 8009874:	e7dc      	b.n	8009830 <_malloc_r+0xb0>
 8009876:	605b      	str	r3, [r3, #4]
 8009878:	deff      	udf	#255	; 0xff
 800987a:	bf00      	nop
 800987c:	20001ca4 	.word	0x20001ca4

08009880 <__sflush_r>:
 8009880:	898a      	ldrh	r2, [r1, #12]
 8009882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009886:	4605      	mov	r5, r0
 8009888:	0710      	lsls	r0, r2, #28
 800988a:	460c      	mov	r4, r1
 800988c:	d458      	bmi.n	8009940 <__sflush_r+0xc0>
 800988e:	684b      	ldr	r3, [r1, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	dc05      	bgt.n	80098a0 <__sflush_r+0x20>
 8009894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	dc02      	bgt.n	80098a0 <__sflush_r+0x20>
 800989a:	2000      	movs	r0, #0
 800989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098a2:	2e00      	cmp	r6, #0
 80098a4:	d0f9      	beq.n	800989a <__sflush_r+0x1a>
 80098a6:	2300      	movs	r3, #0
 80098a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098ac:	682f      	ldr	r7, [r5, #0]
 80098ae:	6a21      	ldr	r1, [r4, #32]
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	d032      	beq.n	800991a <__sflush_r+0x9a>
 80098b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	075a      	lsls	r2, r3, #29
 80098ba:	d505      	bpl.n	80098c8 <__sflush_r+0x48>
 80098bc:	6863      	ldr	r3, [r4, #4]
 80098be:	1ac0      	subs	r0, r0, r3
 80098c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098c2:	b10b      	cbz	r3, 80098c8 <__sflush_r+0x48>
 80098c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098c6:	1ac0      	subs	r0, r0, r3
 80098c8:	2300      	movs	r3, #0
 80098ca:	4602      	mov	r2, r0
 80098cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098ce:	6a21      	ldr	r1, [r4, #32]
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b0      	blx	r6
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	d106      	bne.n	80098e8 <__sflush_r+0x68>
 80098da:	6829      	ldr	r1, [r5, #0]
 80098dc:	291d      	cmp	r1, #29
 80098de:	d82b      	bhi.n	8009938 <__sflush_r+0xb8>
 80098e0:	4a29      	ldr	r2, [pc, #164]	; (8009988 <__sflush_r+0x108>)
 80098e2:	410a      	asrs	r2, r1
 80098e4:	07d6      	lsls	r6, r2, #31
 80098e6:	d427      	bmi.n	8009938 <__sflush_r+0xb8>
 80098e8:	2200      	movs	r2, #0
 80098ea:	6062      	str	r2, [r4, #4]
 80098ec:	04d9      	lsls	r1, r3, #19
 80098ee:	6922      	ldr	r2, [r4, #16]
 80098f0:	6022      	str	r2, [r4, #0]
 80098f2:	d504      	bpl.n	80098fe <__sflush_r+0x7e>
 80098f4:	1c42      	adds	r2, r0, #1
 80098f6:	d101      	bne.n	80098fc <__sflush_r+0x7c>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	b903      	cbnz	r3, 80098fe <__sflush_r+0x7e>
 80098fc:	6560      	str	r0, [r4, #84]	; 0x54
 80098fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009900:	602f      	str	r7, [r5, #0]
 8009902:	2900      	cmp	r1, #0
 8009904:	d0c9      	beq.n	800989a <__sflush_r+0x1a>
 8009906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800990a:	4299      	cmp	r1, r3
 800990c:	d002      	beq.n	8009914 <__sflush_r+0x94>
 800990e:	4628      	mov	r0, r5
 8009910:	f000 fa22 	bl	8009d58 <_free_r>
 8009914:	2000      	movs	r0, #0
 8009916:	6360      	str	r0, [r4, #52]	; 0x34
 8009918:	e7c0      	b.n	800989c <__sflush_r+0x1c>
 800991a:	2301      	movs	r3, #1
 800991c:	4628      	mov	r0, r5
 800991e:	47b0      	blx	r6
 8009920:	1c41      	adds	r1, r0, #1
 8009922:	d1c8      	bne.n	80098b6 <__sflush_r+0x36>
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0c5      	beq.n	80098b6 <__sflush_r+0x36>
 800992a:	2b1d      	cmp	r3, #29
 800992c:	d001      	beq.n	8009932 <__sflush_r+0xb2>
 800992e:	2b16      	cmp	r3, #22
 8009930:	d101      	bne.n	8009936 <__sflush_r+0xb6>
 8009932:	602f      	str	r7, [r5, #0]
 8009934:	e7b1      	b.n	800989a <__sflush_r+0x1a>
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	e7ad      	b.n	800989c <__sflush_r+0x1c>
 8009940:	690f      	ldr	r7, [r1, #16]
 8009942:	2f00      	cmp	r7, #0
 8009944:	d0a9      	beq.n	800989a <__sflush_r+0x1a>
 8009946:	0793      	lsls	r3, r2, #30
 8009948:	680e      	ldr	r6, [r1, #0]
 800994a:	bf08      	it	eq
 800994c:	694b      	ldreq	r3, [r1, #20]
 800994e:	600f      	str	r7, [r1, #0]
 8009950:	bf18      	it	ne
 8009952:	2300      	movne	r3, #0
 8009954:	eba6 0807 	sub.w	r8, r6, r7
 8009958:	608b      	str	r3, [r1, #8]
 800995a:	f1b8 0f00 	cmp.w	r8, #0
 800995e:	dd9c      	ble.n	800989a <__sflush_r+0x1a>
 8009960:	6a21      	ldr	r1, [r4, #32]
 8009962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009964:	4643      	mov	r3, r8
 8009966:	463a      	mov	r2, r7
 8009968:	4628      	mov	r0, r5
 800996a:	47b0      	blx	r6
 800996c:	2800      	cmp	r0, #0
 800996e:	dc06      	bgt.n	800997e <__sflush_r+0xfe>
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009976:	81a3      	strh	r3, [r4, #12]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800997c:	e78e      	b.n	800989c <__sflush_r+0x1c>
 800997e:	4407      	add	r7, r0
 8009980:	eba8 0800 	sub.w	r8, r8, r0
 8009984:	e7e9      	b.n	800995a <__sflush_r+0xda>
 8009986:	bf00      	nop
 8009988:	dfbffffe 	.word	0xdfbffffe

0800998c <_fflush_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	690b      	ldr	r3, [r1, #16]
 8009990:	4605      	mov	r5, r0
 8009992:	460c      	mov	r4, r1
 8009994:	b913      	cbnz	r3, 800999c <_fflush_r+0x10>
 8009996:	2500      	movs	r5, #0
 8009998:	4628      	mov	r0, r5
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	b118      	cbz	r0, 80099a6 <_fflush_r+0x1a>
 800999e:	6a03      	ldr	r3, [r0, #32]
 80099a0:	b90b      	cbnz	r3, 80099a6 <_fflush_r+0x1a>
 80099a2:	f7ff fdf7 	bl	8009594 <__sinit>
 80099a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0f3      	beq.n	8009996 <_fflush_r+0xa>
 80099ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099b0:	07d0      	lsls	r0, r2, #31
 80099b2:	d404      	bmi.n	80099be <_fflush_r+0x32>
 80099b4:	0599      	lsls	r1, r3, #22
 80099b6:	d402      	bmi.n	80099be <_fflush_r+0x32>
 80099b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ba:	f7ff feb0 	bl	800971e <__retarget_lock_acquire_recursive>
 80099be:	4628      	mov	r0, r5
 80099c0:	4621      	mov	r1, r4
 80099c2:	f7ff ff5d 	bl	8009880 <__sflush_r>
 80099c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099c8:	07da      	lsls	r2, r3, #31
 80099ca:	4605      	mov	r5, r0
 80099cc:	d4e4      	bmi.n	8009998 <_fflush_r+0xc>
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	059b      	lsls	r3, r3, #22
 80099d2:	d4e1      	bmi.n	8009998 <_fflush_r+0xc>
 80099d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099d6:	f7ff fea3 	bl	8009720 <__retarget_lock_release_recursive>
 80099da:	e7dd      	b.n	8009998 <_fflush_r+0xc>

080099dc <__malloc_lock>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__malloc_lock+0x8>)
 80099de:	f7ff be9e 	b.w	800971e <__retarget_lock_acquire_recursive>
 80099e2:	bf00      	nop
 80099e4:	20001ca0 	.word	0x20001ca0

080099e8 <__malloc_unlock>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__malloc_unlock+0x8>)
 80099ea:	f7ff be99 	b.w	8009720 <__retarget_lock_release_recursive>
 80099ee:	bf00      	nop
 80099f0:	20001ca0 	.word	0x20001ca0

080099f4 <__sread>:
 80099f4:	b510      	push	{r4, lr}
 80099f6:	460c      	mov	r4, r1
 80099f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099fc:	f000 f978 	bl	8009cf0 <_read_r>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	bfab      	itete	ge
 8009a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a06:	89a3      	ldrhlt	r3, [r4, #12]
 8009a08:	181b      	addge	r3, r3, r0
 8009a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a0e:	bfac      	ite	ge
 8009a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a12:	81a3      	strhlt	r3, [r4, #12]
 8009a14:	bd10      	pop	{r4, pc}

08009a16 <__swrite>:
 8009a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1a:	461f      	mov	r7, r3
 8009a1c:	898b      	ldrh	r3, [r1, #12]
 8009a1e:	05db      	lsls	r3, r3, #23
 8009a20:	4605      	mov	r5, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	4616      	mov	r6, r2
 8009a26:	d505      	bpl.n	8009a34 <__swrite+0x1e>
 8009a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f000 f94c 	bl	8009ccc <_lseek_r>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	4632      	mov	r2, r6
 8009a42:	463b      	mov	r3, r7
 8009a44:	4628      	mov	r0, r5
 8009a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4a:	f000 b973 	b.w	8009d34 <_write_r>

08009a4e <__sseek>:
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	460c      	mov	r4, r1
 8009a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a56:	f000 f939 	bl	8009ccc <_lseek_r>
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	bf15      	itete	ne
 8009a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a6a:	81a3      	strheq	r3, [r4, #12]
 8009a6c:	bf18      	it	ne
 8009a6e:	81a3      	strhne	r3, [r4, #12]
 8009a70:	bd10      	pop	{r4, pc}

08009a72 <__sclose>:
 8009a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a76:	f000 b8f7 	b.w	8009c68 <_close_r>

08009a7a <__swbuf_r>:
 8009a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7c:	460e      	mov	r6, r1
 8009a7e:	4614      	mov	r4, r2
 8009a80:	4605      	mov	r5, r0
 8009a82:	b118      	cbz	r0, 8009a8c <__swbuf_r+0x12>
 8009a84:	6a03      	ldr	r3, [r0, #32]
 8009a86:	b90b      	cbnz	r3, 8009a8c <__swbuf_r+0x12>
 8009a88:	f7ff fd84 	bl	8009594 <__sinit>
 8009a8c:	69a3      	ldr	r3, [r4, #24]
 8009a8e:	60a3      	str	r3, [r4, #8]
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	071a      	lsls	r2, r3, #28
 8009a94:	d525      	bpl.n	8009ae2 <__swbuf_r+0x68>
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	b31b      	cbz	r3, 8009ae2 <__swbuf_r+0x68>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	6922      	ldr	r2, [r4, #16]
 8009a9e:	1a98      	subs	r0, r3, r2
 8009aa0:	6963      	ldr	r3, [r4, #20]
 8009aa2:	b2f6      	uxtb	r6, r6
 8009aa4:	4283      	cmp	r3, r0
 8009aa6:	4637      	mov	r7, r6
 8009aa8:	dc04      	bgt.n	8009ab4 <__swbuf_r+0x3a>
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4628      	mov	r0, r5
 8009aae:	f7ff ff6d 	bl	800998c <_fflush_r>
 8009ab2:	b9e0      	cbnz	r0, 8009aee <__swbuf_r+0x74>
 8009ab4:	68a3      	ldr	r3, [r4, #8]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	60a3      	str	r3, [r4, #8]
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	6022      	str	r2, [r4, #0]
 8009ac0:	701e      	strb	r6, [r3, #0]
 8009ac2:	6962      	ldr	r2, [r4, #20]
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d004      	beq.n	8009ad4 <__swbuf_r+0x5a>
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	07db      	lsls	r3, r3, #31
 8009ace:	d506      	bpl.n	8009ade <__swbuf_r+0x64>
 8009ad0:	2e0a      	cmp	r6, #10
 8009ad2:	d104      	bne.n	8009ade <__swbuf_r+0x64>
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f7ff ff58 	bl	800998c <_fflush_r>
 8009adc:	b938      	cbnz	r0, 8009aee <__swbuf_r+0x74>
 8009ade:	4638      	mov	r0, r7
 8009ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f000 f805 	bl	8009af4 <__swsetup_r>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d0d5      	beq.n	8009a9a <__swbuf_r+0x20>
 8009aee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009af2:	e7f4      	b.n	8009ade <__swbuf_r+0x64>

08009af4 <__swsetup_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4b2a      	ldr	r3, [pc, #168]	; (8009ba0 <__swsetup_r+0xac>)
 8009af8:	4605      	mov	r5, r0
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	460c      	mov	r4, r1
 8009afe:	b118      	cbz	r0, 8009b08 <__swsetup_r+0x14>
 8009b00:	6a03      	ldr	r3, [r0, #32]
 8009b02:	b90b      	cbnz	r3, 8009b08 <__swsetup_r+0x14>
 8009b04:	f7ff fd46 	bl	8009594 <__sinit>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b0e:	0718      	lsls	r0, r3, #28
 8009b10:	d422      	bmi.n	8009b58 <__swsetup_r+0x64>
 8009b12:	06d9      	lsls	r1, r3, #27
 8009b14:	d407      	bmi.n	8009b26 <__swsetup_r+0x32>
 8009b16:	2309      	movs	r3, #9
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b1e:	81a3      	strh	r3, [r4, #12]
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b24:	e034      	b.n	8009b90 <__swsetup_r+0x9c>
 8009b26:	0758      	lsls	r0, r3, #29
 8009b28:	d512      	bpl.n	8009b50 <__swsetup_r+0x5c>
 8009b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b2c:	b141      	cbz	r1, 8009b40 <__swsetup_r+0x4c>
 8009b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b32:	4299      	cmp	r1, r3
 8009b34:	d002      	beq.n	8009b3c <__swsetup_r+0x48>
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 f90e 	bl	8009d58 <_free_r>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	6363      	str	r3, [r4, #52]	; 0x34
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	2300      	movs	r3, #0
 8009b4a:	6063      	str	r3, [r4, #4]
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	f043 0308 	orr.w	r3, r3, #8
 8009b56:	81a3      	strh	r3, [r4, #12]
 8009b58:	6923      	ldr	r3, [r4, #16]
 8009b5a:	b94b      	cbnz	r3, 8009b70 <__swsetup_r+0x7c>
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b66:	d003      	beq.n	8009b70 <__swsetup_r+0x7c>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f000 f840 	bl	8009bf0 <__smakebuf_r>
 8009b70:	89a0      	ldrh	r0, [r4, #12]
 8009b72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b76:	f010 0301 	ands.w	r3, r0, #1
 8009b7a:	d00a      	beq.n	8009b92 <__swsetup_r+0x9e>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60a3      	str	r3, [r4, #8]
 8009b80:	6963      	ldr	r3, [r4, #20]
 8009b82:	425b      	negs	r3, r3
 8009b84:	61a3      	str	r3, [r4, #24]
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	b943      	cbnz	r3, 8009b9c <__swsetup_r+0xa8>
 8009b8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b8e:	d1c4      	bne.n	8009b1a <__swsetup_r+0x26>
 8009b90:	bd38      	pop	{r3, r4, r5, pc}
 8009b92:	0781      	lsls	r1, r0, #30
 8009b94:	bf58      	it	pl
 8009b96:	6963      	ldrpl	r3, [r4, #20]
 8009b98:	60a3      	str	r3, [r4, #8]
 8009b9a:	e7f4      	b.n	8009b86 <__swsetup_r+0x92>
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	e7f7      	b.n	8009b90 <__swsetup_r+0x9c>
 8009ba0:	20000068 	.word	0x20000068

08009ba4 <__swhatbuf_r>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bac:	2900      	cmp	r1, #0
 8009bae:	b096      	sub	sp, #88	; 0x58
 8009bb0:	4615      	mov	r5, r2
 8009bb2:	461e      	mov	r6, r3
 8009bb4:	da0d      	bge.n	8009bd2 <__swhatbuf_r+0x2e>
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009bbc:	f04f 0100 	mov.w	r1, #0
 8009bc0:	bf0c      	ite	eq
 8009bc2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009bc6:	2340      	movne	r3, #64	; 0x40
 8009bc8:	2000      	movs	r0, #0
 8009bca:	6031      	str	r1, [r6, #0]
 8009bcc:	602b      	str	r3, [r5, #0]
 8009bce:	b016      	add	sp, #88	; 0x58
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
 8009bd2:	466a      	mov	r2, sp
 8009bd4:	f000 f858 	bl	8009c88 <_fstat_r>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	dbec      	blt.n	8009bb6 <__swhatbuf_r+0x12>
 8009bdc:	9901      	ldr	r1, [sp, #4]
 8009bde:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009be2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009be6:	4259      	negs	r1, r3
 8009be8:	4159      	adcs	r1, r3
 8009bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bee:	e7eb      	b.n	8009bc8 <__swhatbuf_r+0x24>

08009bf0 <__smakebuf_r>:
 8009bf0:	898b      	ldrh	r3, [r1, #12]
 8009bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bf4:	079d      	lsls	r5, r3, #30
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	d507      	bpl.n	8009c0c <__smakebuf_r+0x1c>
 8009bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	2301      	movs	r3, #1
 8009c06:	6163      	str	r3, [r4, #20]
 8009c08:	b002      	add	sp, #8
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	ab01      	add	r3, sp, #4
 8009c0e:	466a      	mov	r2, sp
 8009c10:	f7ff ffc8 	bl	8009ba4 <__swhatbuf_r>
 8009c14:	9900      	ldr	r1, [sp, #0]
 8009c16:	4605      	mov	r5, r0
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff fdb1 	bl	8009780 <_malloc_r>
 8009c1e:	b948      	cbnz	r0, 8009c34 <__smakebuf_r+0x44>
 8009c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c24:	059a      	lsls	r2, r3, #22
 8009c26:	d4ef      	bmi.n	8009c08 <__smakebuf_r+0x18>
 8009c28:	f023 0303 	bic.w	r3, r3, #3
 8009c2c:	f043 0302 	orr.w	r3, r3, #2
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	e7e3      	b.n	8009bfc <__smakebuf_r+0xc>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	6020      	str	r0, [r4, #0]
 8009c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	9b00      	ldr	r3, [sp, #0]
 8009c40:	6163      	str	r3, [r4, #20]
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	6120      	str	r0, [r4, #16]
 8009c46:	b15b      	cbz	r3, 8009c60 <__smakebuf_r+0x70>
 8009c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 f82d 	bl	8009cac <_isatty_r>
 8009c52:	b128      	cbz	r0, 8009c60 <__smakebuf_r+0x70>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	f023 0303 	bic.w	r3, r3, #3
 8009c5a:	f043 0301 	orr.w	r3, r3, #1
 8009c5e:	81a3      	strh	r3, [r4, #12]
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	431d      	orrs	r5, r3
 8009c64:	81a5      	strh	r5, [r4, #12]
 8009c66:	e7cf      	b.n	8009c08 <__smakebuf_r+0x18>

08009c68 <_close_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d06      	ldr	r5, [pc, #24]	; (8009c84 <_close_r+0x1c>)
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	f7f8 f915 	bl	8001ea2 <_close>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d102      	bne.n	8009c82 <_close_r+0x1a>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	b103      	cbz	r3, 8009c82 <_close_r+0x1a>
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	20001cac 	.word	0x20001cac

08009c88 <_fstat_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d07      	ldr	r5, [pc, #28]	; (8009ca8 <_fstat_r+0x20>)
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	4611      	mov	r1, r2
 8009c94:	602b      	str	r3, [r5, #0]
 8009c96:	f7f8 f910 	bl	8001eba <_fstat>
 8009c9a:	1c43      	adds	r3, r0, #1
 8009c9c:	d102      	bne.n	8009ca4 <_fstat_r+0x1c>
 8009c9e:	682b      	ldr	r3, [r5, #0]
 8009ca0:	b103      	cbz	r3, 8009ca4 <_fstat_r+0x1c>
 8009ca2:	6023      	str	r3, [r4, #0]
 8009ca4:	bd38      	pop	{r3, r4, r5, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20001cac 	.word	0x20001cac

08009cac <_isatty_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d06      	ldr	r5, [pc, #24]	; (8009cc8 <_isatty_r+0x1c>)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	602b      	str	r3, [r5, #0]
 8009cb8:	f7f8 f90f 	bl	8001eda <_isatty>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_isatty_r+0x1a>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_isatty_r+0x1a>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20001cac 	.word	0x20001cac

08009ccc <_lseek_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d07      	ldr	r5, [pc, #28]	; (8009cec <_lseek_r+0x20>)
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	4608      	mov	r0, r1
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	602a      	str	r2, [r5, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f7f8 f908 	bl	8001ef0 <_lseek>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d102      	bne.n	8009cea <_lseek_r+0x1e>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b103      	cbz	r3, 8009cea <_lseek_r+0x1e>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	20001cac 	.word	0x20001cac

08009cf0 <_read_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	; (8009d10 <_read_r+0x20>)
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	4608      	mov	r0, r1
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	602a      	str	r2, [r5, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f7f8 f896 	bl	8001e30 <_read>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_read_r+0x1e>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_read_r+0x1e>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	20001cac 	.word	0x20001cac

08009d14 <_sbrk_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d06      	ldr	r5, [pc, #24]	; (8009d30 <_sbrk_r+0x1c>)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	f7f8 f8f4 	bl	8001f0c <_sbrk>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_sbrk_r+0x1a>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_sbrk_r+0x1a>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	20001cac 	.word	0x20001cac

08009d34 <_write_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d07      	ldr	r5, [pc, #28]	; (8009d54 <_write_r+0x20>)
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	2200      	movs	r2, #0
 8009d40:	602a      	str	r2, [r5, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	f7f8 f891 	bl	8001e6a <_write>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_write_r+0x1e>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_write_r+0x1e>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	20001cac 	.word	0x20001cac

08009d58 <_free_r>:
 8009d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	d044      	beq.n	8009de8 <_free_r+0x90>
 8009d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d62:	9001      	str	r0, [sp, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f1a1 0404 	sub.w	r4, r1, #4
 8009d6a:	bfb8      	it	lt
 8009d6c:	18e4      	addlt	r4, r4, r3
 8009d6e:	f7ff fe35 	bl	80099dc <__malloc_lock>
 8009d72:	4a1e      	ldr	r2, [pc, #120]	; (8009dec <_free_r+0x94>)
 8009d74:	9801      	ldr	r0, [sp, #4]
 8009d76:	6813      	ldr	r3, [r2, #0]
 8009d78:	b933      	cbnz	r3, 8009d88 <_free_r+0x30>
 8009d7a:	6063      	str	r3, [r4, #4]
 8009d7c:	6014      	str	r4, [r2, #0]
 8009d7e:	b003      	add	sp, #12
 8009d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d84:	f7ff be30 	b.w	80099e8 <__malloc_unlock>
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	d908      	bls.n	8009d9e <_free_r+0x46>
 8009d8c:	6825      	ldr	r5, [r4, #0]
 8009d8e:	1961      	adds	r1, r4, r5
 8009d90:	428b      	cmp	r3, r1
 8009d92:	bf01      	itttt	eq
 8009d94:	6819      	ldreq	r1, [r3, #0]
 8009d96:	685b      	ldreq	r3, [r3, #4]
 8009d98:	1949      	addeq	r1, r1, r5
 8009d9a:	6021      	streq	r1, [r4, #0]
 8009d9c:	e7ed      	b.n	8009d7a <_free_r+0x22>
 8009d9e:	461a      	mov	r2, r3
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	b10b      	cbz	r3, 8009da8 <_free_r+0x50>
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	d9fa      	bls.n	8009d9e <_free_r+0x46>
 8009da8:	6811      	ldr	r1, [r2, #0]
 8009daa:	1855      	adds	r5, r2, r1
 8009dac:	42a5      	cmp	r5, r4
 8009dae:	d10b      	bne.n	8009dc8 <_free_r+0x70>
 8009db0:	6824      	ldr	r4, [r4, #0]
 8009db2:	4421      	add	r1, r4
 8009db4:	1854      	adds	r4, r2, r1
 8009db6:	42a3      	cmp	r3, r4
 8009db8:	6011      	str	r1, [r2, #0]
 8009dba:	d1e0      	bne.n	8009d7e <_free_r+0x26>
 8009dbc:	681c      	ldr	r4, [r3, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	6053      	str	r3, [r2, #4]
 8009dc2:	440c      	add	r4, r1
 8009dc4:	6014      	str	r4, [r2, #0]
 8009dc6:	e7da      	b.n	8009d7e <_free_r+0x26>
 8009dc8:	d902      	bls.n	8009dd0 <_free_r+0x78>
 8009dca:	230c      	movs	r3, #12
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	e7d6      	b.n	8009d7e <_free_r+0x26>
 8009dd0:	6825      	ldr	r5, [r4, #0]
 8009dd2:	1961      	adds	r1, r4, r5
 8009dd4:	428b      	cmp	r3, r1
 8009dd6:	bf04      	itt	eq
 8009dd8:	6819      	ldreq	r1, [r3, #0]
 8009dda:	685b      	ldreq	r3, [r3, #4]
 8009ddc:	6063      	str	r3, [r4, #4]
 8009dde:	bf04      	itt	eq
 8009de0:	1949      	addeq	r1, r1, r5
 8009de2:	6021      	streq	r1, [r4, #0]
 8009de4:	6054      	str	r4, [r2, #4]
 8009de6:	e7ca      	b.n	8009d7e <_free_r+0x26>
 8009de8:	b003      	add	sp, #12
 8009dea:	bd30      	pop	{r4, r5, pc}
 8009dec:	20001ca4 	.word	0x20001ca4

08009df0 <_init>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	bf00      	nop
 8009df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df6:	bc08      	pop	{r3}
 8009df8:	469e      	mov	lr, r3
 8009dfa:	4770      	bx	lr

08009dfc <_fini>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	bf00      	nop
 8009e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e02:	bc08      	pop	{r3}
 8009e04:	469e      	mov	lr, r3
 8009e06:	4770      	bx	lr
